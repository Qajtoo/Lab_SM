
CMSIS_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08007a70  08007a70  00017a70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e68  08007e68  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  08007e68  08007e68  00017e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e70  08007e70  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e70  08007e70  00017e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e74  08007e74  00017e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08007e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  200001f8  08008070  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08008070  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001490d  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da9  00000000  00000000  00034b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  000378e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002694a  00000000  00000000  000388a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014e7e  00000000  00000000  0005f1f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f9174  00000000  00000000  00074070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000c9  00000000  00000000  0016d1e4  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000e68  00000000  00000000  0016d2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005010  00000000  00000000  0016e118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000851  00000000  00000000  00173128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007a58 	.word	0x08007a58

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	08007a58 	.word	0x08007a58

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000efe:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <MX_ADC1_Init+0x98>)
 8000f00:	4a21      	ldr	r2, [pc, #132]	; (8000f88 <MX_ADC1_Init+0x9c>)
 8000f02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f04:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <MX_ADC1_Init+0x98>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <MX_ADC1_Init+0x98>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f10:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <MX_ADC1_Init+0x98>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f16:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <MX_ADC1_Init+0x98>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f1c:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <MX_ADC1_Init+0x98>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f24:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <MX_ADC1_Init+0x98>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <MX_ADC1_Init+0x98>)
 8000f2c:	4a17      	ldr	r2, [pc, #92]	; (8000f8c <MX_ADC1_Init+0xa0>)
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <MX_ADC1_Init+0x98>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <MX_ADC1_Init+0x98>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MX_ADC1_Init+0x98>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <MX_ADC1_Init+0x98>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f4a:	480e      	ldr	r0, [pc, #56]	; (8000f84 <MX_ADC1_Init+0x98>)
 8000f4c:	f000 fd22 	bl	8001994 <HAL_ADC_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f56:	f000 fa53 	bl	8001400 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f66:	463b      	mov	r3, r7
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4806      	ldr	r0, [pc, #24]	; (8000f84 <MX_ADC1_Init+0x98>)
 8000f6c:	f000 fff6 	bl	8001f5c <HAL_ADC_ConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f76:	f000 fa43 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000230 	.word	0x20000230
 8000f88:	40012000 	.word	0x40012000
 8000f8c:	0f000001 	.word	0x0f000001

08000f90 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a19      	ldr	r2, [pc, #100]	; (8001014 <HAL_ADC_MspInit+0x84>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d12b      	bne.n	800100a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fb2:	4b19      	ldr	r3, [pc, #100]	; (8001018 <HAL_ADC_MspInit+0x88>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	4a18      	ldr	r2, [pc, #96]	; (8001018 <HAL_ADC_MspInit+0x88>)
 8000fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <HAL_ADC_MspInit+0x88>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <HAL_ADC_MspInit+0x88>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a12      	ldr	r2, [pc, #72]	; (8001018 <HAL_ADC_MspInit+0x88>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <HAL_ADC_MspInit+0x88>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fe2:	2308      	movs	r3, #8
 8000fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4809      	ldr	r0, [pc, #36]	; (800101c <HAL_ADC_MspInit+0x8c>)
 8000ff6:	f001 fb1d 	bl	8002634 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2012      	movs	r0, #18
 8001000:	f001 fae1 	bl	80025c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001004:	2012      	movs	r0, #18
 8001006:	f001 fafa 	bl	80025fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800100a:	bf00      	nop
 800100c:	3728      	adds	r7, #40	; 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40012000 	.word	0x40012000
 8001018:	40023800 	.word	0x40023800
 800101c:	40020000 	.word	0x40020000

08001020 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	; 0x30
 8001024:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	4b77      	ldr	r3, [pc, #476]	; (8001214 <MX_GPIO_Init+0x1f4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a76      	ldr	r2, [pc, #472]	; (8001214 <MX_GPIO_Init+0x1f4>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b74      	ldr	r3, [pc, #464]	; (8001214 <MX_GPIO_Init+0x1f4>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	61bb      	str	r3, [r7, #24]
 800104c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104e:	4b71      	ldr	r3, [pc, #452]	; (8001214 <MX_GPIO_Init+0x1f4>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a70      	ldr	r2, [pc, #448]	; (8001214 <MX_GPIO_Init+0x1f4>)
 8001054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b6e      	ldr	r3, [pc, #440]	; (8001214 <MX_GPIO_Init+0x1f4>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	4b6b      	ldr	r3, [pc, #428]	; (8001214 <MX_GPIO_Init+0x1f4>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a6a      	ldr	r2, [pc, #424]	; (8001214 <MX_GPIO_Init+0x1f4>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b68      	ldr	r3, [pc, #416]	; (8001214 <MX_GPIO_Init+0x1f4>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	4b65      	ldr	r3, [pc, #404]	; (8001214 <MX_GPIO_Init+0x1f4>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a64      	ldr	r2, [pc, #400]	; (8001214 <MX_GPIO_Init+0x1f4>)
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b62      	ldr	r3, [pc, #392]	; (8001214 <MX_GPIO_Init+0x1f4>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001096:	4b5f      	ldr	r3, [pc, #380]	; (8001214 <MX_GPIO_Init+0x1f4>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a5e      	ldr	r2, [pc, #376]	; (8001214 <MX_GPIO_Init+0x1f4>)
 800109c:	f043 0308 	orr.w	r3, r3, #8
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b5c      	ldr	r3, [pc, #368]	; (8001214 <MX_GPIO_Init+0x1f4>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ae:	4b59      	ldr	r3, [pc, #356]	; (8001214 <MX_GPIO_Init+0x1f4>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a58      	ldr	r2, [pc, #352]	; (8001214 <MX_GPIO_Init+0x1f4>)
 80010b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b56      	ldr	r3, [pc, #344]	; (8001214 <MX_GPIO_Init+0x1f4>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f244 0181 	movw	r1, #16513	; 0x4081
 80010cc:	4852      	ldr	r0, [pc, #328]	; (8001218 <MX_GPIO_Init+0x1f8>)
 80010ce:	f001 fc5d 	bl	800298c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2140      	movs	r1, #64	; 0x40
 80010d6:	4851      	ldr	r0, [pc, #324]	; (800121c <MX_GPIO_Init+0x1fc>)
 80010d8:	f001 fc58 	bl	800298c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4619      	mov	r1, r3
 80010f2:	484b      	ldr	r0, [pc, #300]	; (8001220 <MX_GPIO_Init+0x200>)
 80010f4:	f001 fa9e 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80010f8:	2332      	movs	r3, #50	; 0x32
 80010fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001108:	230b      	movs	r3, #11
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4619      	mov	r1, r3
 8001112:	4843      	ldr	r0, [pc, #268]	; (8001220 <MX_GPIO_Init+0x200>)
 8001114:	f001 fa8e 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001118:	2386      	movs	r3, #134	; 0x86
 800111a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001128:	230b      	movs	r3, #11
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	4619      	mov	r1, r3
 8001132:	483c      	ldr	r0, [pc, #240]	; (8001224 <MX_GPIO_Init+0x204>)
 8001134:	f001 fa7e 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001138:	f244 0381 	movw	r3, #16513	; 0x4081
 800113c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	2301      	movs	r3, #1
 8001140:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	4619      	mov	r1, r3
 8001150:	4831      	ldr	r0, [pc, #196]	; (8001218 <MX_GPIO_Init+0x1f8>)
 8001152:	f001 fa6f 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001156:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001168:	230b      	movs	r3, #11
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4619      	mov	r1, r3
 8001172:	4829      	ldr	r0, [pc, #164]	; (8001218 <MX_GPIO_Init+0x1f8>)
 8001174:	f001 fa5e 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001178:	2340      	movs	r3, #64	; 0x40
 800117a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	4823      	ldr	r0, [pc, #140]	; (800121c <MX_GPIO_Init+0x1fc>)
 8001190:	f001 fa50 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	481d      	ldr	r0, [pc, #116]	; (800121c <MX_GPIO_Init+0x1fc>)
 80011a8:	f001 fa44 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80011ac:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80011b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011be:	230a      	movs	r3, #10
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	4619      	mov	r1, r3
 80011c8:	4816      	ldr	r0, [pc, #88]	; (8001224 <MX_GPIO_Init+0x204>)
 80011ca:	f001 fa33 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80011ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4619      	mov	r1, r3
 80011e2:	4810      	ldr	r0, [pc, #64]	; (8001224 <MX_GPIO_Init+0x204>)
 80011e4:	f001 fa26 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80011e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80011ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011fa:	230b      	movs	r3, #11
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_GPIO_Init+0x1fc>)
 8001206:	f001 fa15 	bl	8002634 <HAL_GPIO_Init>

}
 800120a:	bf00      	nop
 800120c:	3730      	adds	r7, #48	; 0x30
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800
 8001218:	40020400 	.word	0x40020400
 800121c:	40021800 	.word	0x40021800
 8001220:	40020800 	.word	0x40020800
 8001224:	40020000 	.word	0x40020000

08001228 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if(htim == &htim4)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a23      	ldr	r2, [pc, #140]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d13f      	bne.n	80012b8 <HAL_TIM_PeriodElapsedCallback+0x90>
  {
    HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 8001238:	2180      	movs	r1, #128	; 0x80
 800123a:	4822      	ldr	r0, [pc, #136]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800123c:	f001 fbbf 	bl	80029be <HAL_GPIO_TogglePin>
    HAL_ADC_Start_IT(&hadc1);
 8001240:	4821      	ldr	r0, [pc, #132]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001242:	f000 fc77 	bl	8001b34 <HAL_ADC_Start_IT>
    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8001246:	210a      	movs	r1, #10
 8001248:	481f      	ldr	r0, [pc, #124]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800124a:	f000 fbe7 	bl	8001a1c <HAL_ADC_PollForConversion>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d117      	bne.n	8001284 <HAL_TIM_PeriodElapsedCallback+0x5c>
          {
            unfiltered = (3.3f * HAL_ADC_GetValue(&hadc1))/4096;
 8001254:	481c      	ldr	r0, [pc, #112]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001256:	f000 fe55 	bl	8001f04 <HAL_ADC_GetValue>
 800125a:	ee07 0a90 	vmov	s15, r0
 800125e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001262:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80012cc <HAL_TIM_PeriodElapsedCallback+0xa4>
 8001266:	ee27 7a87 	vmul.f32	s14, s15, s14
 800126a:	eddf 6a19 	vldr	s13, [pc, #100]	; 80012d0 <HAL_TIM_PeriodElapsedCallback+0xa8>
 800126e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001272:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001274:	edc3 7a00 	vstr	s15, [r3]
            arm_biquad_cascade_df1_f32(&IIR1, &unfiltered, &filtered, 1);
 8001278:	2301      	movs	r3, #1
 800127a:	4a17      	ldr	r2, [pc, #92]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800127c:	4915      	ldr	r1, [pc, #84]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800127e:	4817      	ldr	r0, [pc, #92]	; (80012dc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001280:	f003 fdaa 	bl	8004dd8 <arm_biquad_cascade_df1_f32>
          }
    unfiltered_SWV = unfiltered*1000;
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80012e0 <HAL_TIM_PeriodElapsedCallback+0xb8>
 800128e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001292:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001296:	ee17 2a90 	vmov	r2, s15
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800129c:	601a      	str	r2, [r3, #0]
    filtered_SWV = filtered*1000;
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80012a0:	edd3 7a00 	vldr	s15, [r3]
 80012a4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80012e0 <HAL_TIM_PeriodElapsedCallback+0xb8>
 80012a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b0:	ee17 2a90 	vmov	r2, s15
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80012b6:	601a      	str	r2, [r3, #0]
  }
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	2000028c 	.word	0x2000028c
 80012c4:	40020400 	.word	0x40020400
 80012c8:	20000230 	.word	0x20000230
 80012cc:	40533333 	.word	0x40533333
 80012d0:	45800000 	.word	0x45800000
 80012d4:	20000278 	.word	0x20000278
 80012d8:	20000280 	.word	0x20000280
 80012dc:	20000224 	.word	0x20000224
 80012e0:	447a0000 	.word	0x447a0000
 80012e4:	2000027c 	.word	0x2000027c
 80012e8:	20000284 	.word	0x20000284

080012ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f0:	f000 faf3 	bl	80018da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f4:	f000 f81c 	bl	8001330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f8:	f7ff fe92 	bl	8001020 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80012fc:	f000 fa34 	bl	8001768 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001300:	f7ff fdf4 	bl	8000eec <MX_ADC1_Init>
  MX_TIM4_Init();
 8001304:	f000 f9bc 	bl	8001680 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //RunAllTests();
  arm_biquad_cascade_df1_init_f32(&IIR1, IIR1_NUM_STAGES, IIR1_COEFFS, IIR1_STATE);
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <main+0x34>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <main+0x38>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2101      	movs	r1, #1
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <main+0x3c>)
 8001314:	f003 fd52 	bl	8004dbc <arm_biquad_cascade_df1_init_f32>
  HAL_TIM_Base_Start_IT(&htim4);
 8001318:	4804      	ldr	r0, [pc, #16]	; (800132c <main+0x40>)
 800131a:	f002 fc8d 	bl	8003c38 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800131e:	e7fe      	b.n	800131e <main+0x32>
 8001320:	20000018 	.word	0x20000018
 8001324:	20000000 	.word	0x20000000
 8001328:	20000224 	.word	0x20000224
 800132c:	2000028c 	.word	0x2000028c

08001330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b094      	sub	sp, #80	; 0x50
 8001334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001336:	f107 0320 	add.w	r3, r7, #32
 800133a:	2230      	movs	r2, #48	; 0x30
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f003 feb4 	bl	80050ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001354:	f001 fb4e 	bl	80029f4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001358:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <SystemClock_Config+0xc8>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	4a26      	ldr	r2, [pc, #152]	; (80013f8 <SystemClock_Config+0xc8>)
 800135e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001362:	6413      	str	r3, [r2, #64]	; 0x40
 8001364:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <SystemClock_Config+0xc8>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001370:	4b22      	ldr	r3, [pc, #136]	; (80013fc <SystemClock_Config+0xcc>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001378:	4a20      	ldr	r2, [pc, #128]	; (80013fc <SystemClock_Config+0xcc>)
 800137a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <SystemClock_Config+0xcc>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800138c:	2301      	movs	r3, #1
 800138e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001390:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001396:	2302      	movs	r3, #2
 8001398:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800139a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800139e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013a0:	2304      	movs	r3, #4
 80013a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80013a4:	2348      	movs	r3, #72	; 0x48
 80013a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013a8:	2302      	movs	r3, #2
 80013aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80013ac:	2303      	movs	r3, #3
 80013ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b0:	f107 0320 	add.w	r3, r7, #32
 80013b4:	4618      	mov	r0, r3
 80013b6:	f001 fb2d 	bl	8002a14 <HAL_RCC_OscConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013c0:	f000 f81e 	bl	8001400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c4:	230f      	movs	r3, #15
 80013c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c8:	2302      	movs	r3, #2
 80013ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	2102      	movs	r1, #2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 fdbb 	bl	8002f5c <HAL_RCC_ClockConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013ec:	f000 f808 	bl	8001400 <Error_Handler>
  }
}
 80013f0:	bf00      	nop
 80013f2:	3750      	adds	r7, #80	; 0x50
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40007000 	.word	0x40007000

08001400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001404:	b672      	cpsid	i
}
 8001406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001408:	e7fe      	b.n	8001408 <Error_Handler+0x8>
	...

0800140c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <HAL_MspInit+0x44>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <HAL_MspInit+0x44>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	; 0x40
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <HAL_MspInit+0x44>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_MspInit+0x44>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	4a08      	ldr	r2, [pc, #32]	; (8001450 <HAL_MspInit+0x44>)
 8001430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001434:	6453      	str	r3, [r2, #68]	; 0x44
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_MspInit+0x44>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800

08001454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <NMI_Handler+0x4>

0800145a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145e:	e7fe      	b.n	800145e <HardFault_Handler+0x4>

08001460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <MemManage_Handler+0x4>

08001466 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800146a:	e7fe      	b.n	800146a <BusFault_Handler+0x4>

0800146c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <UsageFault_Handler+0x4>

08001472 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a0:	f000 fa58 	bl	8001954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80014ac:	4802      	ldr	r0, [pc, #8]	; (80014b8 <ADC_IRQHandler+0x10>)
 80014ae:	f000 fc19 	bl	8001ce4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000230 	.word	0x20000230

080014bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <TIM4_IRQHandler+0x10>)
 80014c2:	f002 fc31 	bl	8003d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000028c 	.word	0x2000028c

080014d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
	return 1;
 80014d4:	2301      	movs	r3, #1
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_kill>:

int _kill(int pid, int sig)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014ea:	f003 fd8d 	bl	8005008 <__errno>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2216      	movs	r2, #22
 80014f2:	601a      	str	r2, [r3, #0]
	return -1;
 80014f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <_exit>:

void _exit (int status)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001508:	f04f 31ff 	mov.w	r1, #4294967295
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ffe7 	bl	80014e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001512:	e7fe      	b.n	8001512 <_exit+0x12>

08001514 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	e00a      	b.n	800153c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001526:	f3af 8000 	nop.w
 800152a:	4601      	mov	r1, r0
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	60ba      	str	r2, [r7, #8]
 8001532:	b2ca      	uxtb	r2, r1
 8001534:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	429a      	cmp	r2, r3
 8001542:	dbf0      	blt.n	8001526 <_read+0x12>
	}

return len;
 8001544:	687b      	ldr	r3, [r7, #4]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	e009      	b.n	8001574 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	60ba      	str	r2, [r7, #8]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	3301      	adds	r3, #1
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	429a      	cmp	r2, r3
 800157a:	dbf1      	blt.n	8001560 <_write+0x12>
	}
	return len;
 800157c:	687b      	ldr	r3, [r7, #4]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <_close>:

int _close(int file)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
	return -1;
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ae:	605a      	str	r2, [r3, #4]
	return 0;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <_isatty>:

int _isatty(int file)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
	return 1;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
	return 0;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f8:	4a14      	ldr	r2, [pc, #80]	; (800164c <_sbrk+0x5c>)
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <_sbrk+0x60>)
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001604:	4b13      	ldr	r3, [pc, #76]	; (8001654 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d102      	bne.n	8001612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <_sbrk+0x64>)
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <_sbrk+0x68>)
 8001610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	429a      	cmp	r2, r3
 800161e:	d207      	bcs.n	8001630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001620:	f003 fcf2 	bl	8005008 <__errno>
 8001624:	4603      	mov	r3, r0
 8001626:	220c      	movs	r2, #12
 8001628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800162a:	f04f 33ff 	mov.w	r3, #4294967295
 800162e:	e009      	b.n	8001644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <_sbrk+0x64>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <_sbrk+0x64>)
 8001640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20050000 	.word	0x20050000
 8001650:	00000400 	.word	0x00000400
 8001654:	20000288 	.word	0x20000288
 8001658:	20000378 	.word	0x20000378

0800165c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <SystemInit+0x20>)
 8001662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001666:	4a05      	ldr	r2, [pc, #20]	; (800167c <SystemInit+0x20>)
 8001668:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800166c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001686:	f107 0310 	add.w	r3, r7, #16
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800169e:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <MX_TIM4_Init+0x94>)
 80016a0:	4a1d      	ldr	r2, [pc, #116]	; (8001718 <MX_TIM4_Init+0x98>)
 80016a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80016a4:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <MX_TIM4_Init+0x94>)
 80016a6:	2247      	movs	r2, #71	; 0x47
 80016a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016aa:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <MX_TIM4_Init+0x94>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80016b0:	4b18      	ldr	r3, [pc, #96]	; (8001714 <MX_TIM4_Init+0x94>)
 80016b2:	f242 720f 	movw	r2, #9999	; 0x270f
 80016b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b8:	4b16      	ldr	r3, [pc, #88]	; (8001714 <MX_TIM4_Init+0x94>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <MX_TIM4_Init+0x94>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016c4:	4813      	ldr	r0, [pc, #76]	; (8001714 <MX_TIM4_Init+0x94>)
 80016c6:	f002 fa5f 	bl	8003b88 <HAL_TIM_Base_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80016d0:	f7ff fe96 	bl	8001400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016da:	f107 0310 	add.w	r3, r7, #16
 80016de:	4619      	mov	r1, r3
 80016e0:	480c      	ldr	r0, [pc, #48]	; (8001714 <MX_TIM4_Init+0x94>)
 80016e2:	f002 fc41 	bl	8003f68 <HAL_TIM_ConfigClockSource>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80016ec:	f7ff fe88 	bl	8001400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f0:	2300      	movs	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	4619      	mov	r1, r3
 80016fc:	4805      	ldr	r0, [pc, #20]	; (8001714 <MX_TIM4_Init+0x94>)
 80016fe:	f002 fe5f 	bl	80043c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001708:	f7ff fe7a 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	3720      	adds	r7, #32
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	2000028c 	.word	0x2000028c
 8001718:	40000800 	.word	0x40000800

0800171c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0d      	ldr	r2, [pc, #52]	; (8001760 <HAL_TIM_Base_MspInit+0x44>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d113      	bne.n	8001756 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800172e:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <HAL_TIM_Base_MspInit+0x48>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	4a0c      	ldr	r2, [pc, #48]	; (8001764 <HAL_TIM_Base_MspInit+0x48>)
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	6413      	str	r3, [r2, #64]	; 0x40
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_TIM_Base_MspInit+0x48>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	201e      	movs	r0, #30
 800174c:	f000 ff3b 	bl	80025c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001750:	201e      	movs	r0, #30
 8001752:	f000 ff54 	bl	80025fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40000800 	.word	0x40000800
 8001764:	40023800 	.word	0x40023800

08001768 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <MX_USART3_UART_Init+0x58>)
 800176e:	4a15      	ldr	r2, [pc, #84]	; (80017c4 <MX_USART3_UART_Init+0x5c>)
 8001770:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <MX_USART3_UART_Init+0x58>)
 8001774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001778:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <MX_USART3_UART_Init+0x58>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <MX_USART3_UART_Init+0x58>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <MX_USART3_UART_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <MX_USART3_UART_Init+0x58>)
 800178e:	220c      	movs	r2, #12
 8001790:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <MX_USART3_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <MX_USART3_UART_Init+0x58>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <MX_USART3_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <MX_USART3_UART_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_USART3_UART_Init+0x58>)
 80017ac:	f002 feb4 	bl	8004518 <HAL_UART_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80017b6:	f7ff fe23 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200002d8 	.word	0x200002d8
 80017c4:	40004800 	.word	0x40004800

080017c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b0aa      	sub	sp, #168	; 0xa8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	2284      	movs	r2, #132	; 0x84
 80017e6:	2100      	movs	r1, #0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f003 fc5f 	bl	80050ac <memset>
  if(uartHandle->Instance==USART3)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a22      	ldr	r2, [pc, #136]	; (800187c <HAL_UART_MspInit+0xb4>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d13c      	bne.n	8001872 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017fc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80017fe:	2300      	movs	r3, #0
 8001800:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001802:	f107 0310 	add.w	r3, r7, #16
 8001806:	4618      	mov	r0, r3
 8001808:	f001 fdce 	bl	80033a8 <HAL_RCCEx_PeriphCLKConfig>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001812:	f7ff fdf5 	bl	8001400 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <HAL_UART_MspInit+0xb8>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a19      	ldr	r2, [pc, #100]	; (8001880 <HAL_UART_MspInit+0xb8>)
 800181c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <HAL_UART_MspInit+0xb8>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <HAL_UART_MspInit+0xb8>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a13      	ldr	r2, [pc, #76]	; (8001880 <HAL_UART_MspInit+0xb8>)
 8001834:	f043 0308 	orr.w	r3, r3, #8
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <HAL_UART_MspInit+0xb8>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001846:	f44f 7340 	mov.w	r3, #768	; 0x300
 800184a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185a:	2303      	movs	r3, #3
 800185c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001860:	2307      	movs	r3, #7
 8001862:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001866:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800186a:	4619      	mov	r1, r3
 800186c:	4805      	ldr	r0, [pc, #20]	; (8001884 <HAL_UART_MspInit+0xbc>)
 800186e:	f000 fee1 	bl	8002634 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001872:	bf00      	nop
 8001874:	37a8      	adds	r7, #168	; 0xa8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40004800 	.word	0x40004800
 8001880:	40023800 	.word	0x40023800
 8001884:	40020c00 	.word	0x40020c00

08001888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001888:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800188c:	480d      	ldr	r0, [pc, #52]	; (80018c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800188e:	490e      	ldr	r1, [pc, #56]	; (80018c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001890:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001894:	e002      	b.n	800189c <LoopCopyDataInit>

08001896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189a:	3304      	adds	r3, #4

0800189c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800189c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a0:	d3f9      	bcc.n	8001896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a2:	4a0b      	ldr	r2, [pc, #44]	; (80018d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018a4:	4c0b      	ldr	r4, [pc, #44]	; (80018d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a8:	e001      	b.n	80018ae <LoopFillZerobss>

080018aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ac:	3204      	adds	r2, #4

080018ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b0:	d3fb      	bcc.n	80018aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018b2:	f7ff fed3 	bl	800165c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018b6:	f003 fbbf 	bl	8005038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ba:	f7ff fd17 	bl	80012ec <main>
  bx  lr    
 80018be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018c0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80018c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80018cc:	08007e78 	.word	0x08007e78
  ldr r2, =_sbss
 80018d0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80018d4:	20000374 	.word	0x20000374

080018d8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d8:	e7fe      	b.n	80018d8 <CAN1_RX0_IRQHandler>

080018da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018de:	2003      	movs	r0, #3
 80018e0:	f000 fe66 	bl	80025b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018e4:	2000      	movs	r0, #0
 80018e6:	f000 f805 	bl	80018f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ea:	f7ff fd8f 	bl	800140c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_InitTick+0x54>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_InitTick+0x58>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	4619      	mov	r1, r3
 8001906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190a:	fbb3 f3f1 	udiv	r3, r3, r1
 800190e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001912:	4618      	mov	r0, r3
 8001914:	f000 fe81 	bl	800261a <HAL_SYSTICK_Config>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e00e      	b.n	8001940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b0f      	cmp	r3, #15
 8001926:	d80a      	bhi.n	800193e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001928:	2200      	movs	r2, #0
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	f000 fe49 	bl	80025c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001934:	4a06      	ldr	r2, [pc, #24]	; (8001950 <HAL_InitTick+0x5c>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	e000      	b.n	8001940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	2000001c 	.word	0x2000001c
 800194c:	20000024 	.word	0x20000024
 8001950:	20000020 	.word	0x20000020

08001954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_IncTick+0x20>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_IncTick+0x24>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4413      	add	r3, r2
 8001964:	4a04      	ldr	r2, [pc, #16]	; (8001978 <HAL_IncTick+0x24>)
 8001966:	6013      	str	r3, [r2, #0]
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000024 	.word	0x20000024
 8001978:	20000360 	.word	0x20000360

0800197c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return uwTick;
 8001980:	4b03      	ldr	r3, [pc, #12]	; (8001990 <HAL_GetTick+0x14>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000360 	.word	0x20000360

08001994 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e031      	b.n	8001a0e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff faec 	bl	8000f90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f003 0310 	and.w	r3, r3, #16
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d116      	bne.n	8001a00 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <HAL_ADC_Init+0x84>)
 80019d8:	4013      	ands	r3, r2
 80019da:	f043 0202 	orr.w	r2, r3, #2
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 fc10 	bl	8002208 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f023 0303 	bic.w	r3, r3, #3
 80019f6:	f043 0201 	orr.w	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40
 80019fe:	e001      	b.n	8001a04 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	ffffeefd 	.word	0xffffeefd

08001a1c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a38:	d113      	bne.n	8001a62 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a48:	d10b      	bne.n	8001a62 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f043 0220 	orr.w	r2, r3, #32
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e063      	b.n	8001b2a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a62:	f7ff ff8b 	bl	800197c <HAL_GetTick>
 8001a66:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a68:	e021      	b.n	8001aae <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a70:	d01d      	beq.n	8001aae <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d007      	beq.n	8001a88 <HAL_ADC_PollForConversion+0x6c>
 8001a78:	f7ff ff80 	bl	800197c <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d212      	bcs.n	8001aae <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d00b      	beq.n	8001aae <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f043 0204 	orr.w	r2, r3, #4
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e03d      	b.n	8001b2a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d1d6      	bne.n	8001a6a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f06f 0212 	mvn.w	r2, #18
 8001ac4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d123      	bne.n	8001b28 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d11f      	bne.n	8001b28 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d006      	beq.n	8001b04 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d111      	bne.n	8001b28 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d105      	bne.n	8001b28 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	f043 0201 	orr.w	r2, r3, #1
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_ADC_Start_IT+0x1a>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e0b5      	b.n	8001cba <HAL_ADC_Start_IT+0x186>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d018      	beq.n	8001b96 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001b74:	4b54      	ldr	r3, [pc, #336]	; (8001cc8 <HAL_ADC_Start_IT+0x194>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a54      	ldr	r2, [pc, #336]	; (8001ccc <HAL_ADC_Start_IT+0x198>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	0c9a      	lsrs	r2, r3, #18
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001b88:	e002      	b.n	8001b90 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f9      	bne.n	8001b8a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d17d      	bne.n	8001ca0 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ba8:	4b49      	ldr	r3, [pc, #292]	; (8001cd0 <HAL_ADC_Start_IT+0x19c>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bde:	d106      	bne.n	8001bee <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be4:	f023 0206 	bic.w	r2, r3, #6
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	645a      	str	r2, [r3, #68]	; 0x44
 8001bec:	e002      	b.n	8001bf4 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c04:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6859      	ldr	r1, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b30      	ldr	r3, [pc, #192]	; (8001cd4 <HAL_ADC_Start_IT+0x1a0>)
 8001c12:	430b      	orrs	r3, r1
 8001c14:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001c16:	4b30      	ldr	r3, [pc, #192]	; (8001cd8 <HAL_ADC_Start_IT+0x1a4>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10f      	bne.n	8001c42 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d143      	bne.n	8001cb8 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	e03a      	b.n	8001cb8 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a25      	ldr	r2, [pc, #148]	; (8001cdc <HAL_ADC_Start_IT+0x1a8>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d10e      	bne.n	8001c6a <HAL_ADC_Start_IT+0x136>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d107      	bne.n	8001c6a <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c68:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <HAL_ADC_Start_IT+0x1a4>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d120      	bne.n	8001cb8 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a19      	ldr	r2, [pc, #100]	; (8001ce0 <HAL_ADC_Start_IT+0x1ac>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d11b      	bne.n	8001cb8 <HAL_ADC_Start_IT+0x184>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d114      	bne.n	8001cb8 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	e00b      	b.n	8001cb8 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	f043 0210 	orr.w	r2, r3, #16
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb0:	f043 0201 	orr.w	r2, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	2000001c 	.word	0x2000001c
 8001ccc:	431bde83 	.word	0x431bde83
 8001cd0:	fffff8fe 	.word	0xfffff8fe
 8001cd4:	04000020 	.word	0x04000020
 8001cd8:	40012300 	.word	0x40012300
 8001cdc:	40012000 	.word	0x40012000
 8001ce0:	40012200 	.word	0x40012200

08001ce4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f003 0320 	and.w	r3, r3, #32
 8001d12:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d049      	beq.n	8001dae <HAL_ADC_IRQHandler+0xca>
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d046      	beq.n	8001dae <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d105      	bne.n	8001d38 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d12b      	bne.n	8001d9e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d127      	bne.n	8001d9e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d54:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d006      	beq.n	8001d6a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d119      	bne.n	8001d9e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0220 	bic.w	r2, r2, #32
 8001d78:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d105      	bne.n	8001d9e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f043 0201 	orr.w	r2, r3, #1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f8bd 	bl	8001f1e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0212 	mvn.w	r2, #18
 8001dac:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dbc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d057      	beq.n	8001e74 <HAL_ADC_IRQHandler+0x190>
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d054      	beq.n	8001e74 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d105      	bne.n	8001de2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d139      	bne.n	8001e64 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d006      	beq.n	8001e0c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d12b      	bne.n	8001e64 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d124      	bne.n	8001e64 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11d      	bne.n	8001e64 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d119      	bne.n	8001e64 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e3e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d105      	bne.n	8001e64 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	f043 0201 	orr.w	r2, r3, #1
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 fac9 	bl	80023fc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f06f 020c 	mvn.w	r2, #12
 8001e72:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e82:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d017      	beq.n	8001eba <HAL_ADC_IRQHandler+0x1d6>
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d014      	beq.n	8001eba <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d10d      	bne.n	8001eba <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f841 	bl	8001f32 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0201 	mvn.w	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f003 0320 	and.w	r3, r3, #32
 8001ec0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ec8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d015      	beq.n	8001efc <HAL_ADC_IRQHandler+0x218>
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d012      	beq.n	8001efc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	f043 0202 	orr.w	r2, r3, #2
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f06f 0220 	mvn.w	r2, #32
 8001eea:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f82a 	bl	8001f46 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f06f 0220 	mvn.w	r2, #32
 8001efa:	601a      	str	r2, [r3, #0]
  }
}
 8001efc:	bf00      	nop
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x1c>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e136      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x28a>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b09      	cmp	r3, #9
 8001f86:	d93a      	bls.n	8001ffe <HAL_ADC_ConfigChannel+0xa2>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f90:	d035      	beq.n	8001ffe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68d9      	ldr	r1, [r3, #12]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3b1e      	subs	r3, #30
 8001fa8:	2207      	movs	r2, #7
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a8d      	ldr	r2, [pc, #564]	; (80021f4 <HAL_ADC_ConfigChannel+0x298>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d10a      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68d9      	ldr	r1, [r3, #12]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	061a      	lsls	r2, r3, #24
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fd6:	e035      	b.n	8002044 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68d9      	ldr	r1, [r3, #12]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	4618      	mov	r0, r3
 8001fea:	4603      	mov	r3, r0
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4403      	add	r3, r0
 8001ff0:	3b1e      	subs	r3, #30
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ffc:	e022      	b.n	8002044 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6919      	ldr	r1, [r3, #16]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	b29b      	uxth	r3, r3
 800200a:	461a      	mov	r2, r3
 800200c:	4613      	mov	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	2207      	movs	r2, #7
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43da      	mvns	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	400a      	ands	r2, r1
 8002020:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6919      	ldr	r1, [r3, #16]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	b29b      	uxth	r3, r3
 8002032:	4618      	mov	r0, r3
 8002034:	4603      	mov	r3, r0
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4403      	add	r3, r0
 800203a:	409a      	lsls	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b06      	cmp	r3, #6
 800204a:	d824      	bhi.n	8002096 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	3b05      	subs	r3, #5
 800205e:	221f      	movs	r2, #31
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43da      	mvns	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	400a      	ands	r2, r1
 800206c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	b29b      	uxth	r3, r3
 800207a:	4618      	mov	r0, r3
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	3b05      	subs	r3, #5
 8002088:	fa00 f203 	lsl.w	r2, r0, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	635a      	str	r2, [r3, #52]	; 0x34
 8002094:	e04c      	b.n	8002130 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b0c      	cmp	r3, #12
 800209c:	d824      	bhi.n	80020e8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	3b23      	subs	r3, #35	; 0x23
 80020b0:	221f      	movs	r2, #31
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43da      	mvns	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	400a      	ands	r2, r1
 80020be:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	4618      	mov	r0, r3
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	3b23      	subs	r3, #35	; 0x23
 80020da:	fa00 f203 	lsl.w	r2, r0, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	631a      	str	r2, [r3, #48]	; 0x30
 80020e6:	e023      	b.n	8002130 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	3b41      	subs	r3, #65	; 0x41
 80020fa:	221f      	movs	r2, #31
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43da      	mvns	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	400a      	ands	r2, r1
 8002108:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	b29b      	uxth	r3, r3
 8002116:	4618      	mov	r0, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	3b41      	subs	r3, #65	; 0x41
 8002124:	fa00 f203 	lsl.w	r2, r0, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a30      	ldr	r2, [pc, #192]	; (80021f8 <HAL_ADC_ConfigChannel+0x29c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d10a      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x1f4>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002142:	d105      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002144:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <HAL_ADC_ConfigChannel+0x2a0>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a2c      	ldr	r2, [pc, #176]	; (80021fc <HAL_ADC_ConfigChannel+0x2a0>)
 800214a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800214e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a28      	ldr	r2, [pc, #160]	; (80021f8 <HAL_ADC_ConfigChannel+0x29c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d10f      	bne.n	800217a <HAL_ADC_ConfigChannel+0x21e>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2b12      	cmp	r3, #18
 8002160:	d10b      	bne.n	800217a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002162:	4b26      	ldr	r3, [pc, #152]	; (80021fc <HAL_ADC_ConfigChannel+0x2a0>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	4a25      	ldr	r2, [pc, #148]	; (80021fc <HAL_ADC_ConfigChannel+0x2a0>)
 8002168:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800216c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800216e:	4b23      	ldr	r3, [pc, #140]	; (80021fc <HAL_ADC_ConfigChannel+0x2a0>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	4a22      	ldr	r2, [pc, #136]	; (80021fc <HAL_ADC_ConfigChannel+0x2a0>)
 8002174:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002178:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a1e      	ldr	r2, [pc, #120]	; (80021f8 <HAL_ADC_ConfigChannel+0x29c>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d12b      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x280>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a1a      	ldr	r2, [pc, #104]	; (80021f4 <HAL_ADC_ConfigChannel+0x298>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d003      	beq.n	8002196 <HAL_ADC_ConfigChannel+0x23a>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b11      	cmp	r3, #17
 8002194:	d122      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002196:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_ADC_ConfigChannel+0x2a0>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	4a18      	ldr	r2, [pc, #96]	; (80021fc <HAL_ADC_ConfigChannel+0x2a0>)
 800219c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80021a0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80021a2:	4b16      	ldr	r3, [pc, #88]	; (80021fc <HAL_ADC_ConfigChannel+0x2a0>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4a15      	ldr	r2, [pc, #84]	; (80021fc <HAL_ADC_ConfigChannel+0x2a0>)
 80021a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021ac:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a10      	ldr	r2, [pc, #64]	; (80021f4 <HAL_ADC_ConfigChannel+0x298>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d111      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <HAL_ADC_ConfigChannel+0x2a4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a11      	ldr	r2, [pc, #68]	; (8002204 <HAL_ADC_ConfigChannel+0x2a8>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	0c9a      	lsrs	r2, r3, #18
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80021ce:	e002      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f9      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	10000012 	.word	0x10000012
 80021f8:	40012000 	.word	0x40012000
 80021fc:	40012300 	.word	0x40012300
 8002200:	2000001c 	.word	0x2000001c
 8002204:	431bde83 	.word	0x431bde83

08002208 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002210:	4b78      	ldr	r3, [pc, #480]	; (80023f4 <ADC_Init+0x1ec>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	4a77      	ldr	r2, [pc, #476]	; (80023f4 <ADC_Init+0x1ec>)
 8002216:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800221a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800221c:	4b75      	ldr	r3, [pc, #468]	; (80023f4 <ADC_Init+0x1ec>)
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	4973      	ldr	r1, [pc, #460]	; (80023f4 <ADC_Init+0x1ec>)
 8002226:	4313      	orrs	r3, r2
 8002228:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002238:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6859      	ldr	r1, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	021a      	lsls	r2, r3, #8
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800225c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6859      	ldr	r1, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800227e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6899      	ldr	r1, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002296:	4a58      	ldr	r2, [pc, #352]	; (80023f8 <ADC_Init+0x1f0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d022      	beq.n	80022e2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6899      	ldr	r1, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6899      	ldr	r1, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	e00f      	b.n	8002302 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002300:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0202 	bic.w	r2, r2, #2
 8002310:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6899      	ldr	r1, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	005a      	lsls	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3020 	ldrb.w	r3, [r3, #32]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d01b      	beq.n	8002368 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800233e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800234e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6859      	ldr	r1, [r3, #4]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	3b01      	subs	r3, #1
 800235c:	035a      	lsls	r2, r3, #13
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	e007      	b.n	8002378 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002376:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002386:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	3b01      	subs	r3, #1
 8002394:	051a      	lsls	r2, r3, #20
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6899      	ldr	r1, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023ba:	025a      	lsls	r2, r3, #9
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6899      	ldr	r1, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	029a      	lsls	r2, r3, #10
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	609a      	str	r2, [r3, #8]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	40012300 	.word	0x40012300
 80023f8:	0f000001 	.word	0x0f000001

080023fc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <__NVIC_SetPriorityGrouping+0x40>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800242c:	4013      	ands	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 800243a:	4313      	orrs	r3, r2
 800243c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800243e:	4a04      	ldr	r2, [pc, #16]	; (8002450 <__NVIC_SetPriorityGrouping+0x40>)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	60d3      	str	r3, [r2, #12]
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000ed00 	.word	0xe000ed00
 8002454:	05fa0000 	.word	0x05fa0000

08002458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <__NVIC_GetPriorityGrouping+0x18>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	f003 0307 	and.w	r3, r3, #7
}
 8002466:	4618      	mov	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	2b00      	cmp	r3, #0
 8002484:	db0b      	blt.n	800249e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	f003 021f 	and.w	r2, r3, #31
 800248c:	4907      	ldr	r1, [pc, #28]	; (80024ac <__NVIC_EnableIRQ+0x38>)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	2001      	movs	r0, #1
 8002496:	fa00 f202 	lsl.w	r2, r0, r2
 800249a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	e000e100 	.word	0xe000e100

080024b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	6039      	str	r1, [r7, #0]
 80024ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	db0a      	blt.n	80024da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	490c      	ldr	r1, [pc, #48]	; (80024fc <__NVIC_SetPriority+0x4c>)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	0112      	lsls	r2, r2, #4
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	440b      	add	r3, r1
 80024d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d8:	e00a      	b.n	80024f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4908      	ldr	r1, [pc, #32]	; (8002500 <__NVIC_SetPriority+0x50>)
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	3b04      	subs	r3, #4
 80024e8:	0112      	lsls	r2, r2, #4
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	440b      	add	r3, r1
 80024ee:	761a      	strb	r2, [r3, #24]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000e100 	.word	0xe000e100
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002504:	b480      	push	{r7}
 8002506:	b089      	sub	sp, #36	; 0x24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f1c3 0307 	rsb	r3, r3, #7
 800251e:	2b04      	cmp	r3, #4
 8002520:	bf28      	it	cs
 8002522:	2304      	movcs	r3, #4
 8002524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3304      	adds	r3, #4
 800252a:	2b06      	cmp	r3, #6
 800252c:	d902      	bls.n	8002534 <NVIC_EncodePriority+0x30>
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3b03      	subs	r3, #3
 8002532:	e000      	b.n	8002536 <NVIC_EncodePriority+0x32>
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002538:	f04f 32ff 	mov.w	r2, #4294967295
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43da      	mvns	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	401a      	ands	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800254c:	f04f 31ff 	mov.w	r1, #4294967295
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	43d9      	mvns	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	4313      	orrs	r3, r2
         );
}
 800255e:	4618      	mov	r0, r3
 8002560:	3724      	adds	r7, #36	; 0x24
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3b01      	subs	r3, #1
 8002578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800257c:	d301      	bcc.n	8002582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800257e:	2301      	movs	r3, #1
 8002580:	e00f      	b.n	80025a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002582:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <SysTick_Config+0x40>)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3b01      	subs	r3, #1
 8002588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800258a:	210f      	movs	r1, #15
 800258c:	f04f 30ff 	mov.w	r0, #4294967295
 8002590:	f7ff ff8e 	bl	80024b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <SysTick_Config+0x40>)
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800259a:	4b04      	ldr	r3, [pc, #16]	; (80025ac <SysTick_Config+0x40>)
 800259c:	2207      	movs	r2, #7
 800259e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	e000e010 	.word	0xe000e010

080025b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff ff29 	bl	8002410 <__NVIC_SetPriorityGrouping>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b086      	sub	sp, #24
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	4603      	mov	r3, r0
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025d8:	f7ff ff3e 	bl	8002458 <__NVIC_GetPriorityGrouping>
 80025dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	68b9      	ldr	r1, [r7, #8]
 80025e2:	6978      	ldr	r0, [r7, #20]
 80025e4:	f7ff ff8e 	bl	8002504 <NVIC_EncodePriority>
 80025e8:	4602      	mov	r2, r0
 80025ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ee:	4611      	mov	r1, r2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff5d 	bl	80024b0 <__NVIC_SetPriority>
}
 80025f6:	bf00      	nop
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	4603      	mov	r3, r0
 8002606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff31 	bl	8002474 <__NVIC_EnableIRQ>
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ffa2 	bl	800256c <SysTick_Config>
 8002628:	4603      	mov	r3, r0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002634:	b480      	push	{r7}
 8002636:	b089      	sub	sp, #36	; 0x24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
 8002652:	e175      	b.n	8002940 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002654:	2201      	movs	r2, #1
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	4013      	ands	r3, r2
 8002666:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	429a      	cmp	r2, r3
 800266e:	f040 8164 	bne.w	800293a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b01      	cmp	r3, #1
 800267c:	d005      	beq.n	800268a <HAL_GPIO_Init+0x56>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d130      	bne.n	80026ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	2203      	movs	r2, #3
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026c0:	2201      	movs	r2, #1
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f003 0201 	and.w	r2, r3, #1
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d017      	beq.n	8002728 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	2203      	movs	r2, #3
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d123      	bne.n	800277c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	08da      	lsrs	r2, r3, #3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3208      	adds	r2, #8
 800273c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	220f      	movs	r2, #15
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	08da      	lsrs	r2, r3, #3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3208      	adds	r2, #8
 8002776:	69b9      	ldr	r1, [r7, #24]
 8002778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	2203      	movs	r2, #3
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 0203 	and.w	r2, r3, #3
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80be 	beq.w	800293a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027be:	4b66      	ldr	r3, [pc, #408]	; (8002958 <HAL_GPIO_Init+0x324>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	4a65      	ldr	r2, [pc, #404]	; (8002958 <HAL_GPIO_Init+0x324>)
 80027c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ca:	4b63      	ldr	r3, [pc, #396]	; (8002958 <HAL_GPIO_Init+0x324>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80027d6:	4a61      	ldr	r2, [pc, #388]	; (800295c <HAL_GPIO_Init+0x328>)
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	089b      	lsrs	r3, r3, #2
 80027dc:	3302      	adds	r3, #2
 80027de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	220f      	movs	r2, #15
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a58      	ldr	r2, [pc, #352]	; (8002960 <HAL_GPIO_Init+0x32c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d037      	beq.n	8002872 <HAL_GPIO_Init+0x23e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a57      	ldr	r2, [pc, #348]	; (8002964 <HAL_GPIO_Init+0x330>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d031      	beq.n	800286e <HAL_GPIO_Init+0x23a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a56      	ldr	r2, [pc, #344]	; (8002968 <HAL_GPIO_Init+0x334>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d02b      	beq.n	800286a <HAL_GPIO_Init+0x236>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a55      	ldr	r2, [pc, #340]	; (800296c <HAL_GPIO_Init+0x338>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d025      	beq.n	8002866 <HAL_GPIO_Init+0x232>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a54      	ldr	r2, [pc, #336]	; (8002970 <HAL_GPIO_Init+0x33c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d01f      	beq.n	8002862 <HAL_GPIO_Init+0x22e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a53      	ldr	r2, [pc, #332]	; (8002974 <HAL_GPIO_Init+0x340>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d019      	beq.n	800285e <HAL_GPIO_Init+0x22a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a52      	ldr	r2, [pc, #328]	; (8002978 <HAL_GPIO_Init+0x344>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d013      	beq.n	800285a <HAL_GPIO_Init+0x226>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a51      	ldr	r2, [pc, #324]	; (800297c <HAL_GPIO_Init+0x348>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d00d      	beq.n	8002856 <HAL_GPIO_Init+0x222>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a50      	ldr	r2, [pc, #320]	; (8002980 <HAL_GPIO_Init+0x34c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d007      	beq.n	8002852 <HAL_GPIO_Init+0x21e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a4f      	ldr	r2, [pc, #316]	; (8002984 <HAL_GPIO_Init+0x350>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d101      	bne.n	800284e <HAL_GPIO_Init+0x21a>
 800284a:	2309      	movs	r3, #9
 800284c:	e012      	b.n	8002874 <HAL_GPIO_Init+0x240>
 800284e:	230a      	movs	r3, #10
 8002850:	e010      	b.n	8002874 <HAL_GPIO_Init+0x240>
 8002852:	2308      	movs	r3, #8
 8002854:	e00e      	b.n	8002874 <HAL_GPIO_Init+0x240>
 8002856:	2307      	movs	r3, #7
 8002858:	e00c      	b.n	8002874 <HAL_GPIO_Init+0x240>
 800285a:	2306      	movs	r3, #6
 800285c:	e00a      	b.n	8002874 <HAL_GPIO_Init+0x240>
 800285e:	2305      	movs	r3, #5
 8002860:	e008      	b.n	8002874 <HAL_GPIO_Init+0x240>
 8002862:	2304      	movs	r3, #4
 8002864:	e006      	b.n	8002874 <HAL_GPIO_Init+0x240>
 8002866:	2303      	movs	r3, #3
 8002868:	e004      	b.n	8002874 <HAL_GPIO_Init+0x240>
 800286a:	2302      	movs	r3, #2
 800286c:	e002      	b.n	8002874 <HAL_GPIO_Init+0x240>
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <HAL_GPIO_Init+0x240>
 8002872:	2300      	movs	r3, #0
 8002874:	69fa      	ldr	r2, [r7, #28]
 8002876:	f002 0203 	and.w	r2, r2, #3
 800287a:	0092      	lsls	r2, r2, #2
 800287c:	4093      	lsls	r3, r2
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002884:	4935      	ldr	r1, [pc, #212]	; (800295c <HAL_GPIO_Init+0x328>)
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	089b      	lsrs	r3, r3, #2
 800288a:	3302      	adds	r3, #2
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002892:	4b3d      	ldr	r3, [pc, #244]	; (8002988 <HAL_GPIO_Init+0x354>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028b6:	4a34      	ldr	r2, [pc, #208]	; (8002988 <HAL_GPIO_Init+0x354>)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028bc:	4b32      	ldr	r3, [pc, #200]	; (8002988 <HAL_GPIO_Init+0x354>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028e0:	4a29      	ldr	r2, [pc, #164]	; (8002988 <HAL_GPIO_Init+0x354>)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028e6:	4b28      	ldr	r3, [pc, #160]	; (8002988 <HAL_GPIO_Init+0x354>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	43db      	mvns	r3, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4013      	ands	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800290a:	4a1f      	ldr	r2, [pc, #124]	; (8002988 <HAL_GPIO_Init+0x354>)
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002910:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <HAL_GPIO_Init+0x354>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002934:	4a14      	ldr	r2, [pc, #80]	; (8002988 <HAL_GPIO_Init+0x354>)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3301      	adds	r3, #1
 800293e:	61fb      	str	r3, [r7, #28]
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	2b0f      	cmp	r3, #15
 8002944:	f67f ae86 	bls.w	8002654 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002948:	bf00      	nop
 800294a:	bf00      	nop
 800294c:	3724      	adds	r7, #36	; 0x24
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800
 800295c:	40013800 	.word	0x40013800
 8002960:	40020000 	.word	0x40020000
 8002964:	40020400 	.word	0x40020400
 8002968:	40020800 	.word	0x40020800
 800296c:	40020c00 	.word	0x40020c00
 8002970:	40021000 	.word	0x40021000
 8002974:	40021400 	.word	0x40021400
 8002978:	40021800 	.word	0x40021800
 800297c:	40021c00 	.word	0x40021c00
 8002980:	40022000 	.word	0x40022000
 8002984:	40022400 	.word	0x40022400
 8002988:	40013c00 	.word	0x40013c00

0800298c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	807b      	strh	r3, [r7, #2]
 8002998:	4613      	mov	r3, r2
 800299a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800299c:	787b      	ldrb	r3, [r7, #1]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029a2:	887a      	ldrh	r2, [r7, #2]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80029a8:	e003      	b.n	80029b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029aa:	887b      	ldrh	r3, [r7, #2]
 80029ac:	041a      	lsls	r2, r3, #16
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	619a      	str	r2, [r3, #24]
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029be:	b480      	push	{r7}
 80029c0:	b085      	sub	sp, #20
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	460b      	mov	r3, r1
 80029c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029d0:	887a      	ldrh	r2, [r7, #2]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4013      	ands	r3, r2
 80029d6:	041a      	lsls	r2, r3, #16
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	43d9      	mvns	r1, r3
 80029dc:	887b      	ldrh	r3, [r7, #2]
 80029de:	400b      	ands	r3, r1
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	619a      	str	r2, [r3, #24]
}
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a02:	6013      	str	r3, [r2, #0]
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40007000 	.word	0x40007000

08002a14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e291      	b.n	8002f4e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 8087 	beq.w	8002b46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a38:	4b96      	ldr	r3, [pc, #600]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 030c 	and.w	r3, r3, #12
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d00c      	beq.n	8002a5e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a44:	4b93      	ldr	r3, [pc, #588]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d112      	bne.n	8002a76 <HAL_RCC_OscConfig+0x62>
 8002a50:	4b90      	ldr	r3, [pc, #576]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a5c:	d10b      	bne.n	8002a76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5e:	4b8d      	ldr	r3, [pc, #564]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d06c      	beq.n	8002b44 <HAL_RCC_OscConfig+0x130>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d168      	bne.n	8002b44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e26b      	b.n	8002f4e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCC_OscConfig+0x7a>
 8002a80:	4b84      	ldr	r3, [pc, #528]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a83      	ldr	r2, [pc, #524]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	e02e      	b.n	8002aec <HAL_RCC_OscConfig+0xd8>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x9c>
 8002a96:	4b7f      	ldr	r3, [pc, #508]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a7e      	ldr	r2, [pc, #504]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	4b7c      	ldr	r3, [pc, #496]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a7b      	ldr	r2, [pc, #492]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002aa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	e01d      	b.n	8002aec <HAL_RCC_OscConfig+0xd8>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0xc0>
 8002aba:	4b76      	ldr	r3, [pc, #472]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a75      	ldr	r2, [pc, #468]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	4b73      	ldr	r3, [pc, #460]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a72      	ldr	r2, [pc, #456]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	e00b      	b.n	8002aec <HAL_RCC_OscConfig+0xd8>
 8002ad4:	4b6f      	ldr	r3, [pc, #444]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a6e      	ldr	r2, [pc, #440]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	4b6c      	ldr	r3, [pc, #432]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a6b      	ldr	r2, [pc, #428]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d013      	beq.n	8002b1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af4:	f7fe ff42 	bl	800197c <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002afc:	f7fe ff3e 	bl	800197c <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b64      	cmp	r3, #100	; 0x64
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e21f      	b.n	8002f4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	4b61      	ldr	r3, [pc, #388]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCC_OscConfig+0xe8>
 8002b1a:	e014      	b.n	8002b46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7fe ff2e 	bl	800197c <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b24:	f7fe ff2a 	bl	800197c <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b64      	cmp	r3, #100	; 0x64
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e20b      	b.n	8002f4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b36:	4b57      	ldr	r3, [pc, #348]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0x110>
 8002b42:	e000      	b.n	8002b46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d069      	beq.n	8002c26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b52:	4b50      	ldr	r3, [pc, #320]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00b      	beq.n	8002b76 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b5e:	4b4d      	ldr	r3, [pc, #308]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d11c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x190>
 8002b6a:	4b4a      	ldr	r3, [pc, #296]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d116      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b76:	4b47      	ldr	r3, [pc, #284]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <HAL_RCC_OscConfig+0x17a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d001      	beq.n	8002b8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e1df      	b.n	8002f4e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8e:	4b41      	ldr	r3, [pc, #260]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	493d      	ldr	r1, [pc, #244]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba2:	e040      	b.n	8002c26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d023      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bac:	4b39      	ldr	r3, [pc, #228]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a38      	ldr	r2, [pc, #224]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fee0 	bl	800197c <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc0:	f7fe fedc 	bl	800197c <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e1bd      	b.n	8002f4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd2:	4b30      	ldr	r3, [pc, #192]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bde:	4b2d      	ldr	r3, [pc, #180]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4929      	ldr	r1, [pc, #164]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]
 8002bf2:	e018      	b.n	8002c26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bf4:	4b27      	ldr	r3, [pc, #156]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a26      	ldr	r2, [pc, #152]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c00:	f7fe febc 	bl	800197c <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c08:	f7fe feb8 	bl	800197c <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e199      	b.n	8002f4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1a:	4b1e      	ldr	r3, [pc, #120]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d038      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d019      	beq.n	8002c6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c3a:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3e:	4a15      	ldr	r2, [pc, #84]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c46:	f7fe fe99 	bl	800197c <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c4e:	f7fe fe95 	bl	800197c <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e176      	b.n	8002f4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c60:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x23a>
 8002c6c:	e01a      	b.n	8002ca4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c72:	4a08      	ldr	r2, [pc, #32]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7a:	f7fe fe7f 	bl	800197c <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c80:	e00a      	b.n	8002c98 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c82:	f7fe fe7b 	bl	800197c <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d903      	bls.n	8002c98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e15c      	b.n	8002f4e <HAL_RCC_OscConfig+0x53a>
 8002c94:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c98:	4b91      	ldr	r3, [pc, #580]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1ee      	bne.n	8002c82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80a4 	beq.w	8002dfa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cb2:	4b8b      	ldr	r3, [pc, #556]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10d      	bne.n	8002cda <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cbe:	4b88      	ldr	r3, [pc, #544]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	4a87      	ldr	r2, [pc, #540]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cca:	4b85      	ldr	r3, [pc, #532]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cda:	4b82      	ldr	r3, [pc, #520]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d118      	bne.n	8002d18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ce6:	4b7f      	ldr	r3, [pc, #508]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a7e      	ldr	r2, [pc, #504]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cf2:	f7fe fe43 	bl	800197c <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfa:	f7fe fe3f 	bl	800197c <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b64      	cmp	r3, #100	; 0x64
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e120      	b.n	8002f4e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d0c:	4b75      	ldr	r3, [pc, #468]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d106      	bne.n	8002d2e <HAL_RCC_OscConfig+0x31a>
 8002d20:	4b6f      	ldr	r3, [pc, #444]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	4a6e      	ldr	r2, [pc, #440]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2c:	e02d      	b.n	8002d8a <HAL_RCC_OscConfig+0x376>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x33c>
 8002d36:	4b6a      	ldr	r3, [pc, #424]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3a:	4a69      	ldr	r2, [pc, #420]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002d3c:	f023 0301 	bic.w	r3, r3, #1
 8002d40:	6713      	str	r3, [r2, #112]	; 0x70
 8002d42:	4b67      	ldr	r3, [pc, #412]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d46:	4a66      	ldr	r2, [pc, #408]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002d48:	f023 0304 	bic.w	r3, r3, #4
 8002d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4e:	e01c      	b.n	8002d8a <HAL_RCC_OscConfig+0x376>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	d10c      	bne.n	8002d72 <HAL_RCC_OscConfig+0x35e>
 8002d58:	4b61      	ldr	r3, [pc, #388]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	4a60      	ldr	r2, [pc, #384]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002d5e:	f043 0304 	orr.w	r3, r3, #4
 8002d62:	6713      	str	r3, [r2, #112]	; 0x70
 8002d64:	4b5e      	ldr	r3, [pc, #376]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	4a5d      	ldr	r2, [pc, #372]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d70:	e00b      	b.n	8002d8a <HAL_RCC_OscConfig+0x376>
 8002d72:	4b5b      	ldr	r3, [pc, #364]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d76:	4a5a      	ldr	r2, [pc, #360]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002d78:	f023 0301 	bic.w	r3, r3, #1
 8002d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7e:	4b58      	ldr	r3, [pc, #352]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	4a57      	ldr	r2, [pc, #348]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002d84:	f023 0304 	bic.w	r3, r3, #4
 8002d88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d015      	beq.n	8002dbe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d92:	f7fe fdf3 	bl	800197c <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d98:	e00a      	b.n	8002db0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9a:	f7fe fdef 	bl	800197c <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e0ce      	b.n	8002f4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db0:	4b4b      	ldr	r3, [pc, #300]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0ee      	beq.n	8002d9a <HAL_RCC_OscConfig+0x386>
 8002dbc:	e014      	b.n	8002de8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbe:	f7fe fddd 	bl	800197c <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc4:	e00a      	b.n	8002ddc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc6:	f7fe fdd9 	bl	800197c <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e0b8      	b.n	8002f4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ddc:	4b40      	ldr	r3, [pc, #256]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1ee      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d105      	bne.n	8002dfa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dee:	4b3c      	ldr	r3, [pc, #240]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	4a3b      	ldr	r2, [pc, #236]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 80a4 	beq.w	8002f4c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e04:	4b36      	ldr	r3, [pc, #216]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 030c 	and.w	r3, r3, #12
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d06b      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d149      	bne.n	8002eac <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e18:	4b31      	ldr	r3, [pc, #196]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a30      	ldr	r2, [pc, #192]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7fe fdaa 	bl	800197c <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7fe fda6 	bl	800197c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e087      	b.n	8002f4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3e:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69da      	ldr	r2, [r3, #28]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	019b      	lsls	r3, r3, #6
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	085b      	lsrs	r3, r3, #1
 8002e62:	3b01      	subs	r3, #1
 8002e64:	041b      	lsls	r3, r3, #16
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	061b      	lsls	r3, r3, #24
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	4a1b      	ldr	r2, [pc, #108]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002e72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e76:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e78:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a18      	ldr	r2, [pc, #96]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e84:	f7fe fd7a 	bl	800197c <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8c:	f7fe fd76 	bl	800197c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e057      	b.n	8002f4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9e:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x478>
 8002eaa:	e04f      	b.n	8002f4c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eac:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a0b      	ldr	r2, [pc, #44]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002eb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7fe fd60 	bl	800197c <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec0:	f7fe fd5c 	bl	800197c <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e03d      	b.n	8002f4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed2:	4b03      	ldr	r3, [pc, #12]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f0      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x4ac>
 8002ede:	e035      	b.n	8002f4c <HAL_RCC_OscConfig+0x538>
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ee8:	4b1b      	ldr	r3, [pc, #108]	; (8002f58 <HAL_RCC_OscConfig+0x544>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d028      	beq.n	8002f48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d121      	bne.n	8002f48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d11a      	bne.n	8002f48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f18:	4013      	ands	r3, r2
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f1e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d111      	bne.n	8002f48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2e:	085b      	lsrs	r3, r3, #1
 8002f30:	3b01      	subs	r3, #1
 8002f32:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d107      	bne.n	8002f48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800

08002f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0d0      	b.n	8003116 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f74:	4b6a      	ldr	r3, [pc, #424]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d910      	bls.n	8002fa4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f82:	4b67      	ldr	r3, [pc, #412]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f023 020f 	bic.w	r2, r3, #15
 8002f8a:	4965      	ldr	r1, [pc, #404]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f92:	4b63      	ldr	r3, [pc, #396]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d001      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0b8      	b.n	8003116 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d020      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fbc:	4b59      	ldr	r3, [pc, #356]	; (8003124 <HAL_RCC_ClockConfig+0x1c8>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	4a58      	ldr	r2, [pc, #352]	; (8003124 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fd4:	4b53      	ldr	r3, [pc, #332]	; (8003124 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	4a52      	ldr	r2, [pc, #328]	; (8003124 <HAL_RCC_ClockConfig+0x1c8>)
 8002fda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe0:	4b50      	ldr	r3, [pc, #320]	; (8003124 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	494d      	ldr	r1, [pc, #308]	; (8003124 <HAL_RCC_ClockConfig+0x1c8>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d040      	beq.n	8003080 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d107      	bne.n	8003016 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003006:	4b47      	ldr	r3, [pc, #284]	; (8003124 <HAL_RCC_ClockConfig+0x1c8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d115      	bne.n	800303e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e07f      	b.n	8003116 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d107      	bne.n	800302e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301e:	4b41      	ldr	r3, [pc, #260]	; (8003124 <HAL_RCC_ClockConfig+0x1c8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d109      	bne.n	800303e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e073      	b.n	8003116 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302e:	4b3d      	ldr	r3, [pc, #244]	; (8003124 <HAL_RCC_ClockConfig+0x1c8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e06b      	b.n	8003116 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800303e:	4b39      	ldr	r3, [pc, #228]	; (8003124 <HAL_RCC_ClockConfig+0x1c8>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f023 0203 	bic.w	r2, r3, #3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	4936      	ldr	r1, [pc, #216]	; (8003124 <HAL_RCC_ClockConfig+0x1c8>)
 800304c:	4313      	orrs	r3, r2
 800304e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003050:	f7fe fc94 	bl	800197c <HAL_GetTick>
 8003054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003056:	e00a      	b.n	800306e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003058:	f7fe fc90 	bl	800197c <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	f241 3288 	movw	r2, #5000	; 0x1388
 8003066:	4293      	cmp	r3, r2
 8003068:	d901      	bls.n	800306e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e053      	b.n	8003116 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306e:	4b2d      	ldr	r3, [pc, #180]	; (8003124 <HAL_RCC_ClockConfig+0x1c8>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 020c 	and.w	r2, r3, #12
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	429a      	cmp	r2, r3
 800307e:	d1eb      	bne.n	8003058 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003080:	4b27      	ldr	r3, [pc, #156]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d210      	bcs.n	80030b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308e:	4b24      	ldr	r3, [pc, #144]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 020f 	bic.w	r2, r3, #15
 8003096:	4922      	ldr	r1, [pc, #136]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800309e:	4b20      	ldr	r3, [pc, #128]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e032      	b.n	8003116 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d008      	beq.n	80030ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030bc:	4b19      	ldr	r3, [pc, #100]	; (8003124 <HAL_RCC_ClockConfig+0x1c8>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4916      	ldr	r1, [pc, #88]	; (8003124 <HAL_RCC_ClockConfig+0x1c8>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d009      	beq.n	80030ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030da:	4b12      	ldr	r3, [pc, #72]	; (8003124 <HAL_RCC_ClockConfig+0x1c8>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	490e      	ldr	r1, [pc, #56]	; (8003124 <HAL_RCC_ClockConfig+0x1c8>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ee:	f000 f821 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 80030f2:	4602      	mov	r2, r0
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_RCC_ClockConfig+0x1c8>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	091b      	lsrs	r3, r3, #4
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	490a      	ldr	r1, [pc, #40]	; (8003128 <HAL_RCC_ClockConfig+0x1cc>)
 8003100:	5ccb      	ldrb	r3, [r1, r3]
 8003102:	fa22 f303 	lsr.w	r3, r2, r3
 8003106:	4a09      	ldr	r2, [pc, #36]	; (800312c <HAL_RCC_ClockConfig+0x1d0>)
 8003108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800310a:	4b09      	ldr	r3, [pc, #36]	; (8003130 <HAL_RCC_ClockConfig+0x1d4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7fe fbf0 	bl	80018f4 <HAL_InitTick>

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40023c00 	.word	0x40023c00
 8003124:	40023800 	.word	0x40023800
 8003128:	08007a70 	.word	0x08007a70
 800312c:	2000001c 	.word	0x2000001c
 8003130:	20000020 	.word	0x20000020

08003134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003138:	b094      	sub	sp, #80	; 0x50
 800313a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	647b      	str	r3, [r7, #68]	; 0x44
 8003140:	2300      	movs	r3, #0
 8003142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003144:	2300      	movs	r3, #0
 8003146:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800314c:	4b79      	ldr	r3, [pc, #484]	; (8003334 <HAL_RCC_GetSysClockFreq+0x200>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 030c 	and.w	r3, r3, #12
 8003154:	2b08      	cmp	r3, #8
 8003156:	d00d      	beq.n	8003174 <HAL_RCC_GetSysClockFreq+0x40>
 8003158:	2b08      	cmp	r3, #8
 800315a:	f200 80e1 	bhi.w	8003320 <HAL_RCC_GetSysClockFreq+0x1ec>
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0x34>
 8003162:	2b04      	cmp	r3, #4
 8003164:	d003      	beq.n	800316e <HAL_RCC_GetSysClockFreq+0x3a>
 8003166:	e0db      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003168:	4b73      	ldr	r3, [pc, #460]	; (8003338 <HAL_RCC_GetSysClockFreq+0x204>)
 800316a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800316c:	e0db      	b.n	8003326 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800316e:	4b73      	ldr	r3, [pc, #460]	; (800333c <HAL_RCC_GetSysClockFreq+0x208>)
 8003170:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003172:	e0d8      	b.n	8003326 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003174:	4b6f      	ldr	r3, [pc, #444]	; (8003334 <HAL_RCC_GetSysClockFreq+0x200>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800317c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800317e:	4b6d      	ldr	r3, [pc, #436]	; (8003334 <HAL_RCC_GetSysClockFreq+0x200>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d063      	beq.n	8003252 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800318a:	4b6a      	ldr	r3, [pc, #424]	; (8003334 <HAL_RCC_GetSysClockFreq+0x200>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	099b      	lsrs	r3, r3, #6
 8003190:	2200      	movs	r2, #0
 8003192:	63bb      	str	r3, [r7, #56]	; 0x38
 8003194:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800319c:	633b      	str	r3, [r7, #48]	; 0x30
 800319e:	2300      	movs	r3, #0
 80031a0:	637b      	str	r3, [r7, #52]	; 0x34
 80031a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031a6:	4622      	mov	r2, r4
 80031a8:	462b      	mov	r3, r5
 80031aa:	f04f 0000 	mov.w	r0, #0
 80031ae:	f04f 0100 	mov.w	r1, #0
 80031b2:	0159      	lsls	r1, r3, #5
 80031b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031b8:	0150      	lsls	r0, r2, #5
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4621      	mov	r1, r4
 80031c0:	1a51      	subs	r1, r2, r1
 80031c2:	6139      	str	r1, [r7, #16]
 80031c4:	4629      	mov	r1, r5
 80031c6:	eb63 0301 	sbc.w	r3, r3, r1
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031d8:	4659      	mov	r1, fp
 80031da:	018b      	lsls	r3, r1, #6
 80031dc:	4651      	mov	r1, sl
 80031de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031e2:	4651      	mov	r1, sl
 80031e4:	018a      	lsls	r2, r1, #6
 80031e6:	4651      	mov	r1, sl
 80031e8:	ebb2 0801 	subs.w	r8, r2, r1
 80031ec:	4659      	mov	r1, fp
 80031ee:	eb63 0901 	sbc.w	r9, r3, r1
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003202:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003206:	4690      	mov	r8, r2
 8003208:	4699      	mov	r9, r3
 800320a:	4623      	mov	r3, r4
 800320c:	eb18 0303 	adds.w	r3, r8, r3
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	462b      	mov	r3, r5
 8003214:	eb49 0303 	adc.w	r3, r9, r3
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003226:	4629      	mov	r1, r5
 8003228:	024b      	lsls	r3, r1, #9
 800322a:	4621      	mov	r1, r4
 800322c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003230:	4621      	mov	r1, r4
 8003232:	024a      	lsls	r2, r1, #9
 8003234:	4610      	mov	r0, r2
 8003236:	4619      	mov	r1, r3
 8003238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800323a:	2200      	movs	r2, #0
 800323c:	62bb      	str	r3, [r7, #40]	; 0x28
 800323e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003240:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003244:	f7fd fcd0 	bl	8000be8 <__aeabi_uldivmod>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4613      	mov	r3, r2
 800324e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003250:	e058      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003252:	4b38      	ldr	r3, [pc, #224]	; (8003334 <HAL_RCC_GetSysClockFreq+0x200>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	099b      	lsrs	r3, r3, #6
 8003258:	2200      	movs	r2, #0
 800325a:	4618      	mov	r0, r3
 800325c:	4611      	mov	r1, r2
 800325e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003262:	623b      	str	r3, [r7, #32]
 8003264:	2300      	movs	r3, #0
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
 8003268:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800326c:	4642      	mov	r2, r8
 800326e:	464b      	mov	r3, r9
 8003270:	f04f 0000 	mov.w	r0, #0
 8003274:	f04f 0100 	mov.w	r1, #0
 8003278:	0159      	lsls	r1, r3, #5
 800327a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800327e:	0150      	lsls	r0, r2, #5
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4641      	mov	r1, r8
 8003286:	ebb2 0a01 	subs.w	sl, r2, r1
 800328a:	4649      	mov	r1, r9
 800328c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800329c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032a4:	ebb2 040a 	subs.w	r4, r2, sl
 80032a8:	eb63 050b 	sbc.w	r5, r3, fp
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	00eb      	lsls	r3, r5, #3
 80032b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ba:	00e2      	lsls	r2, r4, #3
 80032bc:	4614      	mov	r4, r2
 80032be:	461d      	mov	r5, r3
 80032c0:	4643      	mov	r3, r8
 80032c2:	18e3      	adds	r3, r4, r3
 80032c4:	603b      	str	r3, [r7, #0]
 80032c6:	464b      	mov	r3, r9
 80032c8:	eb45 0303 	adc.w	r3, r5, r3
 80032cc:	607b      	str	r3, [r7, #4]
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032da:	4629      	mov	r1, r5
 80032dc:	028b      	lsls	r3, r1, #10
 80032de:	4621      	mov	r1, r4
 80032e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032e4:	4621      	mov	r1, r4
 80032e6:	028a      	lsls	r2, r1, #10
 80032e8:	4610      	mov	r0, r2
 80032ea:	4619      	mov	r1, r3
 80032ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ee:	2200      	movs	r2, #0
 80032f0:	61bb      	str	r3, [r7, #24]
 80032f2:	61fa      	str	r2, [r7, #28]
 80032f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032f8:	f7fd fc76 	bl	8000be8 <__aeabi_uldivmod>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4613      	mov	r3, r2
 8003302:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <HAL_RCC_GetSysClockFreq+0x200>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	0c1b      	lsrs	r3, r3, #16
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	3301      	adds	r3, #1
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003314:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003318:	fbb2 f3f3 	udiv	r3, r2, r3
 800331c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800331e:	e002      	b.n	8003326 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_RCC_GetSysClockFreq+0x204>)
 8003322:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003324:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003328:	4618      	mov	r0, r3
 800332a:	3750      	adds	r7, #80	; 0x50
 800332c:	46bd      	mov	sp, r7
 800332e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800
 8003338:	00f42400 	.word	0x00f42400
 800333c:	007a1200 	.word	0x007a1200

08003340 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003344:	4b03      	ldr	r3, [pc, #12]	; (8003354 <HAL_RCC_GetHCLKFreq+0x14>)
 8003346:	681b      	ldr	r3, [r3, #0]
}
 8003348:	4618      	mov	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	2000001c 	.word	0x2000001c

08003358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800335c:	f7ff fff0 	bl	8003340 <HAL_RCC_GetHCLKFreq>
 8003360:	4602      	mov	r2, r0
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	0a9b      	lsrs	r3, r3, #10
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	4903      	ldr	r1, [pc, #12]	; (800337c <HAL_RCC_GetPCLK1Freq+0x24>)
 800336e:	5ccb      	ldrb	r3, [r1, r3]
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40023800 	.word	0x40023800
 800337c:	08007a80 	.word	0x08007a80

08003380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003384:	f7ff ffdc 	bl	8003340 <HAL_RCC_GetHCLKFreq>
 8003388:	4602      	mov	r2, r0
 800338a:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	0b5b      	lsrs	r3, r3, #13
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	4903      	ldr	r1, [pc, #12]	; (80033a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003396:	5ccb      	ldrb	r3, [r1, r3]
 8003398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800339c:	4618      	mov	r0, r3
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40023800 	.word	0x40023800
 80033a4:	08007a80 	.word	0x08007a80

080033a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80033bc:	2300      	movs	r3, #0
 80033be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d012      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033d0:	4b69      	ldr	r3, [pc, #420]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	4a68      	ldr	r2, [pc, #416]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80033da:	6093      	str	r3, [r2, #8]
 80033dc:	4b66      	ldr	r3, [pc, #408]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e4:	4964      	ldr	r1, [pc, #400]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80033f2:	2301      	movs	r3, #1
 80033f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d017      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003402:	4b5d      	ldr	r3, [pc, #372]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003408:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003410:	4959      	ldr	r1, [pc, #356]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003412:	4313      	orrs	r3, r2
 8003414:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003420:	d101      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003422:	2301      	movs	r3, #1
 8003424:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800342e:	2301      	movs	r3, #1
 8003430:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d017      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800343e:	4b4e      	ldr	r3, [pc, #312]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003444:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	494a      	ldr	r1, [pc, #296]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800345c:	d101      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800345e:	2301      	movs	r3, #1
 8003460:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800346a:	2301      	movs	r3, #1
 800346c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800347a:	2301      	movs	r3, #1
 800347c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 808b 	beq.w	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800348c:	4b3a      	ldr	r3, [pc, #232]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	4a39      	ldr	r2, [pc, #228]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003496:	6413      	str	r3, [r2, #64]	; 0x40
 8003498:	4b37      	ldr	r3, [pc, #220]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034a4:	4b35      	ldr	r3, [pc, #212]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a34      	ldr	r2, [pc, #208]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b0:	f7fe fa64 	bl	800197c <HAL_GetTick>
 80034b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b8:	f7fe fa60 	bl	800197c <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b64      	cmp	r3, #100	; 0x64
 80034c4:	d901      	bls.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e357      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034ca:	4b2c      	ldr	r3, [pc, #176]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034d6:	4b28      	ldr	r3, [pc, #160]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d035      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d02e      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034f4:	4b20      	ldr	r3, [pc, #128]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034fe:	4b1e      	ldr	r3, [pc, #120]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003502:	4a1d      	ldr	r2, [pc, #116]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003508:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800350a:	4b1b      	ldr	r3, [pc, #108]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350e:	4a1a      	ldr	r2, [pc, #104]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003514:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003516:	4a18      	ldr	r2, [pc, #96]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800351c:	4b16      	ldr	r3, [pc, #88]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b01      	cmp	r3, #1
 8003526:	d114      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7fe fa28 	bl	800197c <HAL_GetTick>
 800352c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352e:	e00a      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003530:	f7fe fa24 	bl	800197c <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f241 3288 	movw	r2, #5000	; 0x1388
 800353e:	4293      	cmp	r3, r2
 8003540:	d901      	bls.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e319      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003546:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0ee      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800355a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800355e:	d111      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003560:	4b05      	ldr	r3, [pc, #20]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800356c:	4b04      	ldr	r3, [pc, #16]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800356e:	400b      	ands	r3, r1
 8003570:	4901      	ldr	r1, [pc, #4]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]
 8003576:	e00b      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003578:	40023800 	.word	0x40023800
 800357c:	40007000 	.word	0x40007000
 8003580:	0ffffcff 	.word	0x0ffffcff
 8003584:	4baa      	ldr	r3, [pc, #680]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	4aa9      	ldr	r2, [pc, #676]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800358a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800358e:	6093      	str	r3, [r2, #8]
 8003590:	4ba7      	ldr	r3, [pc, #668]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003592:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800359c:	49a4      	ldr	r1, [pc, #656]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d010      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035ae:	4ba0      	ldr	r3, [pc, #640]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035b4:	4a9e      	ldr	r2, [pc, #632]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80035be:	4b9c      	ldr	r3, [pc, #624]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c8:	4999      	ldr	r1, [pc, #612]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035dc:	4b94      	ldr	r3, [pc, #592]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ea:	4991      	ldr	r1, [pc, #580]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035fe:	4b8c      	ldr	r3, [pc, #560]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003604:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800360c:	4988      	ldr	r1, [pc, #544]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003620:	4b83      	ldr	r3, [pc, #524]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003626:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800362e:	4980      	ldr	r1, [pc, #512]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003642:	4b7b      	ldr	r3, [pc, #492]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003648:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003650:	4977      	ldr	r1, [pc, #476]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003664:	4b72      	ldr	r3, [pc, #456]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366a:	f023 0203 	bic.w	r2, r3, #3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003672:	496f      	ldr	r1, [pc, #444]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003686:	4b6a      	ldr	r3, [pc, #424]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368c:	f023 020c 	bic.w	r2, r3, #12
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003694:	4966      	ldr	r1, [pc, #408]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036a8:	4b61      	ldr	r3, [pc, #388]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b6:	495e      	ldr	r1, [pc, #376]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036ca:	4b59      	ldr	r3, [pc, #356]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d8:	4955      	ldr	r1, [pc, #340]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036ec:	4b50      	ldr	r3, [pc, #320]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fa:	494d      	ldr	r1, [pc, #308]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800370e:	4b48      	ldr	r3, [pc, #288]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003714:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371c:	4944      	ldr	r1, [pc, #272]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003730:	4b3f      	ldr	r3, [pc, #252]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003736:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373e:	493c      	ldr	r1, [pc, #240]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003752:	4b37      	ldr	r3, [pc, #220]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003758:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003760:	4933      	ldr	r1, [pc, #204]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003774:	4b2e      	ldr	r3, [pc, #184]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003782:	492b      	ldr	r1, [pc, #172]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d011      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003796:	4b26      	ldr	r3, [pc, #152]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037a4:	4922      	ldr	r1, [pc, #136]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037b4:	d101      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80037b6:	2301      	movs	r3, #1
 80037b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80037c6:	2301      	movs	r3, #1
 80037c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037d6:	4b16      	ldr	r3, [pc, #88]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e4:	4912      	ldr	r1, [pc, #72]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00b      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037f8:	4b0d      	ldr	r3, [pc, #52]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003808:	4909      	ldr	r1, [pc, #36]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d006      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 80d9 	beq.w	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003824:	4b02      	ldr	r3, [pc, #8]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a01      	ldr	r2, [pc, #4]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800382a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800382e:	e001      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003830:	40023800 	.word	0x40023800
 8003834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003836:	f7fe f8a1 	bl	800197c <HAL_GetTick>
 800383a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800383c:	e008      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800383e:	f7fe f89d 	bl	800197c <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b64      	cmp	r3, #100	; 0x64
 800384a:	d901      	bls.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e194      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003850:	4b6c      	ldr	r3, [pc, #432]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1f0      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d021      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386c:	2b00      	cmp	r3, #0
 800386e:	d11d      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003870:	4b64      	ldr	r3, [pc, #400]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003876:	0c1b      	lsrs	r3, r3, #16
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800387e:	4b61      	ldr	r3, [pc, #388]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003884:	0e1b      	lsrs	r3, r3, #24
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	019a      	lsls	r2, r3, #6
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	041b      	lsls	r3, r3, #16
 8003896:	431a      	orrs	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	061b      	lsls	r3, r3, #24
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	071b      	lsls	r3, r3, #28
 80038a4:	4957      	ldr	r1, [pc, #348]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d004      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038c0:	d00a      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d02e      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038d6:	d129      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038d8:	4b4a      	ldr	r3, [pc, #296]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038de:	0c1b      	lsrs	r3, r3, #16
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038e6:	4b47      	ldr	r3, [pc, #284]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ec:	0f1b      	lsrs	r3, r3, #28
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	019a      	lsls	r2, r3, #6
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	041b      	lsls	r3, r3, #16
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	061b      	lsls	r3, r3, #24
 8003906:	431a      	orrs	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	071b      	lsls	r3, r3, #28
 800390c:	493d      	ldr	r1, [pc, #244]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003914:	4b3b      	ldr	r3, [pc, #236]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800391a:	f023 021f 	bic.w	r2, r3, #31
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	3b01      	subs	r3, #1
 8003924:	4937      	ldr	r1, [pc, #220]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d01d      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003938:	4b32      	ldr	r3, [pc, #200]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800393a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800393e:	0e1b      	lsrs	r3, r3, #24
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003946:	4b2f      	ldr	r3, [pc, #188]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800394c:	0f1b      	lsrs	r3, r3, #28
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	019a      	lsls	r2, r3, #6
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	041b      	lsls	r3, r3, #16
 8003960:	431a      	orrs	r2, r3
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	061b      	lsls	r3, r3, #24
 8003966:	431a      	orrs	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	071b      	lsls	r3, r3, #28
 800396c:	4925      	ldr	r1, [pc, #148]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d011      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	019a      	lsls	r2, r3, #6
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	041b      	lsls	r3, r3, #16
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	061b      	lsls	r3, r3, #24
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	071b      	lsls	r3, r3, #28
 800399c:	4919      	ldr	r1, [pc, #100]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039a4:	4b17      	ldr	r3, [pc, #92]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a16      	ldr	r2, [pc, #88]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b0:	f7fd ffe4 	bl	800197c <HAL_GetTick>
 80039b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039b8:	f7fd ffe0 	bl	800197c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	; 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e0d7      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039ca:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	f040 80cd 	bne.w	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a08      	ldr	r2, [pc, #32]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ea:	f7fd ffc7 	bl	800197c <HAL_GetTick>
 80039ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039f0:	e00a      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039f2:	f7fd ffc3 	bl	800197c <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b64      	cmp	r3, #100	; 0x64
 80039fe:	d903      	bls.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e0ba      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003a04:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a08:	4b5e      	ldr	r3, [pc, #376]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a14:	d0ed      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d009      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d02e      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d12a      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a3e:	4b51      	ldr	r3, [pc, #324]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a44:	0c1b      	lsrs	r3, r3, #16
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a4c:	4b4d      	ldr	r3, [pc, #308]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a52:	0f1b      	lsrs	r3, r3, #28
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	019a      	lsls	r2, r3, #6
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	041b      	lsls	r3, r3, #16
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	061b      	lsls	r3, r3, #24
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	071b      	lsls	r3, r3, #28
 8003a72:	4944      	ldr	r1, [pc, #272]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a7a:	4b42      	ldr	r3, [pc, #264]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a80:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	493d      	ldr	r1, [pc, #244]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d022      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aa8:	d11d      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003aaa:	4b36      	ldr	r3, [pc, #216]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab0:	0e1b      	lsrs	r3, r3, #24
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ab8:	4b32      	ldr	r3, [pc, #200]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abe:	0f1b      	lsrs	r3, r3, #28
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	019a      	lsls	r2, r3, #6
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	041b      	lsls	r3, r3, #16
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	061b      	lsls	r3, r3, #24
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	071b      	lsls	r3, r3, #28
 8003ade:	4929      	ldr	r1, [pc, #164]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d028      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003af2:	4b24      	ldr	r3, [pc, #144]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af8:	0e1b      	lsrs	r3, r3, #24
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b00:	4b20      	ldr	r3, [pc, #128]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b06:	0c1b      	lsrs	r3, r3, #16
 8003b08:	f003 0303 	and.w	r3, r3, #3
 8003b0c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	019a      	lsls	r2, r3, #6
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	041b      	lsls	r3, r3, #16
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	061b      	lsls	r3, r3, #24
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	071b      	lsls	r3, r3, #28
 8003b26:	4917      	ldr	r1, [pc, #92]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b2e:	4b15      	ldr	r3, [pc, #84]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	4911      	ldr	r1, [pc, #68]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b44:	4b0f      	ldr	r3, [pc, #60]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a0e      	ldr	r2, [pc, #56]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b50:	f7fd ff14 	bl	800197c <HAL_GetTick>
 8003b54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b58:	f7fd ff10 	bl	800197c <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e007      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b6a:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b76:	d1ef      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3720      	adds	r7, #32
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40023800 	.word	0x40023800

08003b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e049      	b.n	8003c2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7fd fdb4 	bl	800171c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	f000 fac0 	bl	800414c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d001      	beq.n	8003c50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e054      	b.n	8003cfa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a26      	ldr	r2, [pc, #152]	; (8003d08 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d022      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x80>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7a:	d01d      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x80>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a22      	ldr	r2, [pc, #136]	; (8003d0c <HAL_TIM_Base_Start_IT+0xd4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d018      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x80>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a21      	ldr	r2, [pc, #132]	; (8003d10 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d013      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x80>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a1f      	ldr	r2, [pc, #124]	; (8003d14 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00e      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x80>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a1e      	ldr	r2, [pc, #120]	; (8003d18 <HAL_TIM_Base_Start_IT+0xe0>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d009      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x80>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a1c      	ldr	r2, [pc, #112]	; (8003d1c <HAL_TIM_Base_Start_IT+0xe4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d004      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x80>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a1b      	ldr	r2, [pc, #108]	; (8003d20 <HAL_TIM_Base_Start_IT+0xe8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d115      	bne.n	8003ce4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	4b19      	ldr	r3, [pc, #100]	; (8003d24 <HAL_TIM_Base_Start_IT+0xec>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b06      	cmp	r3, #6
 8003cc8:	d015      	beq.n	8003cf6 <HAL_TIM_Base_Start_IT+0xbe>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd0:	d011      	beq.n	8003cf6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0201 	orr.w	r2, r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce2:	e008      	b.n	8003cf6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	e000      	b.n	8003cf8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40010000 	.word	0x40010000
 8003d0c:	40000400 	.word	0x40000400
 8003d10:	40000800 	.word	0x40000800
 8003d14:	40000c00 	.word	0x40000c00
 8003d18:	40010400 	.word	0x40010400
 8003d1c:	40014000 	.word	0x40014000
 8003d20:	40001800 	.word	0x40001800
 8003d24:	00010007 	.word	0x00010007

08003d28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d122      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d11b      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f06f 0202 	mvn.w	r2, #2
 8003d54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f9d0 	bl	8004110 <HAL_TIM_IC_CaptureCallback>
 8003d70:	e005      	b.n	8003d7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f9c2 	bl	80040fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f9d3 	bl	8004124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d122      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d11b      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0204 	mvn.w	r2, #4
 8003da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2202      	movs	r2, #2
 8003dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f9a6 	bl	8004110 <HAL_TIM_IC_CaptureCallback>
 8003dc4:	e005      	b.n	8003dd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f998 	bl	80040fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f9a9 	bl	8004124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d122      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d11b      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f06f 0208 	mvn.w	r2, #8
 8003dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2204      	movs	r2, #4
 8003e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f97c 	bl	8004110 <HAL_TIM_IC_CaptureCallback>
 8003e18:	e005      	b.n	8003e26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f96e 	bl	80040fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f97f 	bl	8004124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	2b10      	cmp	r3, #16
 8003e38:	d122      	bne.n	8003e80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2b10      	cmp	r3, #16
 8003e46:	d11b      	bne.n	8003e80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f06f 0210 	mvn.w	r2, #16
 8003e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2208      	movs	r2, #8
 8003e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f952 	bl	8004110 <HAL_TIM_IC_CaptureCallback>
 8003e6c:	e005      	b.n	8003e7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f944 	bl	80040fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f955 	bl	8004124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d10e      	bne.n	8003eac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d107      	bne.n	8003eac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f06f 0201 	mvn.w	r2, #1
 8003ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fd f9be 	bl	8001228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb6:	2b80      	cmp	r3, #128	; 0x80
 8003eb8:	d10e      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec4:	2b80      	cmp	r3, #128	; 0x80
 8003ec6:	d107      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fb0c 	bl	80044f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee6:	d10e      	bne.n	8003f06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef2:	2b80      	cmp	r3, #128	; 0x80
 8003ef4:	d107      	bne.n	8003f06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 faff 	bl	8004504 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f10:	2b40      	cmp	r3, #64	; 0x40
 8003f12:	d10e      	bne.n	8003f32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1e:	2b40      	cmp	r3, #64	; 0x40
 8003f20:	d107      	bne.n	8003f32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f903 	bl	8004138 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d10e      	bne.n	8003f5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f003 0320 	and.w	r3, r3, #32
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	d107      	bne.n	8003f5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f06f 0220 	mvn.w	r2, #32
 8003f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fabf 	bl	80044dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_TIM_ConfigClockSource+0x1c>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e0b4      	b.n	80040ee <HAL_TIM_ConfigClockSource+0x186>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	4b56      	ldr	r3, [pc, #344]	; (80040f8 <HAL_TIM_ConfigClockSource+0x190>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003faa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fbc:	d03e      	beq.n	800403c <HAL_TIM_ConfigClockSource+0xd4>
 8003fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc2:	f200 8087 	bhi.w	80040d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fca:	f000 8086 	beq.w	80040da <HAL_TIM_ConfigClockSource+0x172>
 8003fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd2:	d87f      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd4:	2b70      	cmp	r3, #112	; 0x70
 8003fd6:	d01a      	beq.n	800400e <HAL_TIM_ConfigClockSource+0xa6>
 8003fd8:	2b70      	cmp	r3, #112	; 0x70
 8003fda:	d87b      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fdc:	2b60      	cmp	r3, #96	; 0x60
 8003fde:	d050      	beq.n	8004082 <HAL_TIM_ConfigClockSource+0x11a>
 8003fe0:	2b60      	cmp	r3, #96	; 0x60
 8003fe2:	d877      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe4:	2b50      	cmp	r3, #80	; 0x50
 8003fe6:	d03c      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0xfa>
 8003fe8:	2b50      	cmp	r3, #80	; 0x50
 8003fea:	d873      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fec:	2b40      	cmp	r3, #64	; 0x40
 8003fee:	d058      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x13a>
 8003ff0:	2b40      	cmp	r3, #64	; 0x40
 8003ff2:	d86f      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff4:	2b30      	cmp	r3, #48	; 0x30
 8003ff6:	d064      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003ff8:	2b30      	cmp	r3, #48	; 0x30
 8003ffa:	d86b      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ffc:	2b20      	cmp	r3, #32
 8003ffe:	d060      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004000:	2b20      	cmp	r3, #32
 8004002:	d867      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004004:	2b00      	cmp	r3, #0
 8004006:	d05c      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004008:	2b10      	cmp	r3, #16
 800400a:	d05a      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x15a>
 800400c:	e062      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	6899      	ldr	r1, [r3, #8]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f000 f9af 	bl	8004380 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004030:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	609a      	str	r2, [r3, #8]
      break;
 800403a:	e04f      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	6899      	ldr	r1, [r3, #8]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f000 f998 	bl	8004380 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800405e:	609a      	str	r2, [r3, #8]
      break;
 8004060:	e03c      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	6859      	ldr	r1, [r3, #4]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	461a      	mov	r2, r3
 8004070:	f000 f90c 	bl	800428c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2150      	movs	r1, #80	; 0x50
 800407a:	4618      	mov	r0, r3
 800407c:	f000 f965 	bl	800434a <TIM_ITRx_SetConfig>
      break;
 8004080:	e02c      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6859      	ldr	r1, [r3, #4]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	461a      	mov	r2, r3
 8004090:	f000 f92b 	bl	80042ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2160      	movs	r1, #96	; 0x60
 800409a:	4618      	mov	r0, r3
 800409c:	f000 f955 	bl	800434a <TIM_ITRx_SetConfig>
      break;
 80040a0:	e01c      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6859      	ldr	r1, [r3, #4]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	461a      	mov	r2, r3
 80040b0:	f000 f8ec 	bl	800428c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2140      	movs	r1, #64	; 0x40
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f945 	bl	800434a <TIM_ITRx_SetConfig>
      break;
 80040c0:	e00c      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4619      	mov	r1, r3
 80040cc:	4610      	mov	r0, r2
 80040ce:	f000 f93c 	bl	800434a <TIM_ITRx_SetConfig>
      break;
 80040d2:	e003      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
      break;
 80040d8:	e000      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	fffeff88 	.word	0xfffeff88

080040fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a40      	ldr	r2, [pc, #256]	; (8004260 <TIM_Base_SetConfig+0x114>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d013      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800416a:	d00f      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a3d      	ldr	r2, [pc, #244]	; (8004264 <TIM_Base_SetConfig+0x118>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d00b      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a3c      	ldr	r2, [pc, #240]	; (8004268 <TIM_Base_SetConfig+0x11c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d007      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a3b      	ldr	r2, [pc, #236]	; (800426c <TIM_Base_SetConfig+0x120>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d003      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a3a      	ldr	r2, [pc, #232]	; (8004270 <TIM_Base_SetConfig+0x124>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d108      	bne.n	800419e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a2f      	ldr	r2, [pc, #188]	; (8004260 <TIM_Base_SetConfig+0x114>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d02b      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ac:	d027      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a2c      	ldr	r2, [pc, #176]	; (8004264 <TIM_Base_SetConfig+0x118>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d023      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a2b      	ldr	r2, [pc, #172]	; (8004268 <TIM_Base_SetConfig+0x11c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d01f      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a2a      	ldr	r2, [pc, #168]	; (800426c <TIM_Base_SetConfig+0x120>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d01b      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a29      	ldr	r2, [pc, #164]	; (8004270 <TIM_Base_SetConfig+0x124>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d017      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a28      	ldr	r2, [pc, #160]	; (8004274 <TIM_Base_SetConfig+0x128>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a27      	ldr	r2, [pc, #156]	; (8004278 <TIM_Base_SetConfig+0x12c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00f      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a26      	ldr	r2, [pc, #152]	; (800427c <TIM_Base_SetConfig+0x130>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00b      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a25      	ldr	r2, [pc, #148]	; (8004280 <TIM_Base_SetConfig+0x134>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d007      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a24      	ldr	r2, [pc, #144]	; (8004284 <TIM_Base_SetConfig+0x138>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a23      	ldr	r2, [pc, #140]	; (8004288 <TIM_Base_SetConfig+0x13c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d108      	bne.n	8004210 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a0a      	ldr	r2, [pc, #40]	; (8004260 <TIM_Base_SetConfig+0x114>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d003      	beq.n	8004244 <TIM_Base_SetConfig+0xf8>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a0c      	ldr	r2, [pc, #48]	; (8004270 <TIM_Base_SetConfig+0x124>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d103      	bne.n	800424c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	615a      	str	r2, [r3, #20]
}
 8004252:	bf00      	nop
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	40010000 	.word	0x40010000
 8004264:	40000400 	.word	0x40000400
 8004268:	40000800 	.word	0x40000800
 800426c:	40000c00 	.word	0x40000c00
 8004270:	40010400 	.word	0x40010400
 8004274:	40014000 	.word	0x40014000
 8004278:	40014400 	.word	0x40014400
 800427c:	40014800 	.word	0x40014800
 8004280:	40001800 	.word	0x40001800
 8004284:	40001c00 	.word	0x40001c00
 8004288:	40002000 	.word	0x40002000

0800428c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	f023 0201 	bic.w	r2, r3, #1
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f023 030a 	bic.w	r3, r3, #10
 80042c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	621a      	str	r2, [r3, #32]
}
 80042de:	bf00      	nop
 80042e0:	371c      	adds	r7, #28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b087      	sub	sp, #28
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	f023 0210 	bic.w	r2, r3, #16
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004314:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	031b      	lsls	r3, r3, #12
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	4313      	orrs	r3, r2
 800431e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004326:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	4313      	orrs	r3, r2
 8004330:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	621a      	str	r2, [r3, #32]
}
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800434a:	b480      	push	{r7}
 800434c:	b085      	sub	sp, #20
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004360:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	f043 0307 	orr.w	r3, r3, #7
 800436c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	609a      	str	r2, [r3, #8]
}
 8004374:	bf00      	nop
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800439a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	021a      	lsls	r2, r3, #8
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	431a      	orrs	r2, r3
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	609a      	str	r2, [r3, #8]
}
 80043b4:	bf00      	nop
 80043b6:	371c      	adds	r7, #28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e06d      	b.n	80044b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a30      	ldr	r2, [pc, #192]	; (80044c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d004      	beq.n	800440c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a2f      	ldr	r2, [pc, #188]	; (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d108      	bne.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004412:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004424:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4313      	orrs	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a20      	ldr	r2, [pc, #128]	; (80044c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d022      	beq.n	8004488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444a:	d01d      	beq.n	8004488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1d      	ldr	r2, [pc, #116]	; (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d018      	beq.n	8004488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a1c      	ldr	r2, [pc, #112]	; (80044cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d013      	beq.n	8004488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1a      	ldr	r2, [pc, #104]	; (80044d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d00e      	beq.n	8004488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a15      	ldr	r2, [pc, #84]	; (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d009      	beq.n	8004488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a16      	ldr	r2, [pc, #88]	; (80044d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d004      	beq.n	8004488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a15      	ldr	r2, [pc, #84]	; (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d10c      	bne.n	80044a2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800448e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	4313      	orrs	r3, r2
 8004498:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	40010000 	.word	0x40010000
 80044c4:	40010400 	.word	0x40010400
 80044c8:	40000400 	.word	0x40000400
 80044cc:	40000800 	.word	0x40000800
 80044d0:	40000c00 	.word	0x40000c00
 80044d4:	40014000 	.word	0x40014000
 80044d8:	40001800 	.word	0x40001800

080044dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e040      	b.n	80045ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fd f944 	bl	80017c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2224      	movs	r2, #36	; 0x24
 8004544:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0201 	bic.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f82c 	bl	80045b4 <UART_SetConfig>
 800455c:	4603      	mov	r3, r0
 800455e:	2b01      	cmp	r3, #1
 8004560:	d101      	bne.n	8004566 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e022      	b.n	80045ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fa84 	bl	8004a7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004582:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004592:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0201 	orr.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fb0b 	bl	8004bc0 <UART_CheckIdleState>
 80045aa:	4603      	mov	r3, r0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b088      	sub	sp, #32
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045bc:	2300      	movs	r3, #0
 80045be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	4ba6      	ldr	r3, [pc, #664]	; (8004878 <UART_SetConfig+0x2c4>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6812      	ldr	r2, [r2, #0]
 80045e6:	6979      	ldr	r1, [r7, #20]
 80045e8:	430b      	orrs	r3, r1
 80045ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	430a      	orrs	r2, r1
 8004624:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a94      	ldr	r2, [pc, #592]	; (800487c <UART_SetConfig+0x2c8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d120      	bne.n	8004672 <UART_SetConfig+0xbe>
 8004630:	4b93      	ldr	r3, [pc, #588]	; (8004880 <UART_SetConfig+0x2cc>)
 8004632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	2b03      	cmp	r3, #3
 800463c:	d816      	bhi.n	800466c <UART_SetConfig+0xb8>
 800463e:	a201      	add	r2, pc, #4	; (adr r2, 8004644 <UART_SetConfig+0x90>)
 8004640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004644:	08004655 	.word	0x08004655
 8004648:	08004661 	.word	0x08004661
 800464c:	0800465b 	.word	0x0800465b
 8004650:	08004667 	.word	0x08004667
 8004654:	2301      	movs	r3, #1
 8004656:	77fb      	strb	r3, [r7, #31]
 8004658:	e150      	b.n	80048fc <UART_SetConfig+0x348>
 800465a:	2302      	movs	r3, #2
 800465c:	77fb      	strb	r3, [r7, #31]
 800465e:	e14d      	b.n	80048fc <UART_SetConfig+0x348>
 8004660:	2304      	movs	r3, #4
 8004662:	77fb      	strb	r3, [r7, #31]
 8004664:	e14a      	b.n	80048fc <UART_SetConfig+0x348>
 8004666:	2308      	movs	r3, #8
 8004668:	77fb      	strb	r3, [r7, #31]
 800466a:	e147      	b.n	80048fc <UART_SetConfig+0x348>
 800466c:	2310      	movs	r3, #16
 800466e:	77fb      	strb	r3, [r7, #31]
 8004670:	e144      	b.n	80048fc <UART_SetConfig+0x348>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a83      	ldr	r2, [pc, #524]	; (8004884 <UART_SetConfig+0x2d0>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d132      	bne.n	80046e2 <UART_SetConfig+0x12e>
 800467c:	4b80      	ldr	r3, [pc, #512]	; (8004880 <UART_SetConfig+0x2cc>)
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004682:	f003 030c 	and.w	r3, r3, #12
 8004686:	2b0c      	cmp	r3, #12
 8004688:	d828      	bhi.n	80046dc <UART_SetConfig+0x128>
 800468a:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <UART_SetConfig+0xdc>)
 800468c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004690:	080046c5 	.word	0x080046c5
 8004694:	080046dd 	.word	0x080046dd
 8004698:	080046dd 	.word	0x080046dd
 800469c:	080046dd 	.word	0x080046dd
 80046a0:	080046d1 	.word	0x080046d1
 80046a4:	080046dd 	.word	0x080046dd
 80046a8:	080046dd 	.word	0x080046dd
 80046ac:	080046dd 	.word	0x080046dd
 80046b0:	080046cb 	.word	0x080046cb
 80046b4:	080046dd 	.word	0x080046dd
 80046b8:	080046dd 	.word	0x080046dd
 80046bc:	080046dd 	.word	0x080046dd
 80046c0:	080046d7 	.word	0x080046d7
 80046c4:	2300      	movs	r3, #0
 80046c6:	77fb      	strb	r3, [r7, #31]
 80046c8:	e118      	b.n	80048fc <UART_SetConfig+0x348>
 80046ca:	2302      	movs	r3, #2
 80046cc:	77fb      	strb	r3, [r7, #31]
 80046ce:	e115      	b.n	80048fc <UART_SetConfig+0x348>
 80046d0:	2304      	movs	r3, #4
 80046d2:	77fb      	strb	r3, [r7, #31]
 80046d4:	e112      	b.n	80048fc <UART_SetConfig+0x348>
 80046d6:	2308      	movs	r3, #8
 80046d8:	77fb      	strb	r3, [r7, #31]
 80046da:	e10f      	b.n	80048fc <UART_SetConfig+0x348>
 80046dc:	2310      	movs	r3, #16
 80046de:	77fb      	strb	r3, [r7, #31]
 80046e0:	e10c      	b.n	80048fc <UART_SetConfig+0x348>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a68      	ldr	r2, [pc, #416]	; (8004888 <UART_SetConfig+0x2d4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d120      	bne.n	800472e <UART_SetConfig+0x17a>
 80046ec:	4b64      	ldr	r3, [pc, #400]	; (8004880 <UART_SetConfig+0x2cc>)
 80046ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046f6:	2b30      	cmp	r3, #48	; 0x30
 80046f8:	d013      	beq.n	8004722 <UART_SetConfig+0x16e>
 80046fa:	2b30      	cmp	r3, #48	; 0x30
 80046fc:	d814      	bhi.n	8004728 <UART_SetConfig+0x174>
 80046fe:	2b20      	cmp	r3, #32
 8004700:	d009      	beq.n	8004716 <UART_SetConfig+0x162>
 8004702:	2b20      	cmp	r3, #32
 8004704:	d810      	bhi.n	8004728 <UART_SetConfig+0x174>
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <UART_SetConfig+0x15c>
 800470a:	2b10      	cmp	r3, #16
 800470c:	d006      	beq.n	800471c <UART_SetConfig+0x168>
 800470e:	e00b      	b.n	8004728 <UART_SetConfig+0x174>
 8004710:	2300      	movs	r3, #0
 8004712:	77fb      	strb	r3, [r7, #31]
 8004714:	e0f2      	b.n	80048fc <UART_SetConfig+0x348>
 8004716:	2302      	movs	r3, #2
 8004718:	77fb      	strb	r3, [r7, #31]
 800471a:	e0ef      	b.n	80048fc <UART_SetConfig+0x348>
 800471c:	2304      	movs	r3, #4
 800471e:	77fb      	strb	r3, [r7, #31]
 8004720:	e0ec      	b.n	80048fc <UART_SetConfig+0x348>
 8004722:	2308      	movs	r3, #8
 8004724:	77fb      	strb	r3, [r7, #31]
 8004726:	e0e9      	b.n	80048fc <UART_SetConfig+0x348>
 8004728:	2310      	movs	r3, #16
 800472a:	77fb      	strb	r3, [r7, #31]
 800472c:	e0e6      	b.n	80048fc <UART_SetConfig+0x348>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a56      	ldr	r2, [pc, #344]	; (800488c <UART_SetConfig+0x2d8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d120      	bne.n	800477a <UART_SetConfig+0x1c6>
 8004738:	4b51      	ldr	r3, [pc, #324]	; (8004880 <UART_SetConfig+0x2cc>)
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004742:	2bc0      	cmp	r3, #192	; 0xc0
 8004744:	d013      	beq.n	800476e <UART_SetConfig+0x1ba>
 8004746:	2bc0      	cmp	r3, #192	; 0xc0
 8004748:	d814      	bhi.n	8004774 <UART_SetConfig+0x1c0>
 800474a:	2b80      	cmp	r3, #128	; 0x80
 800474c:	d009      	beq.n	8004762 <UART_SetConfig+0x1ae>
 800474e:	2b80      	cmp	r3, #128	; 0x80
 8004750:	d810      	bhi.n	8004774 <UART_SetConfig+0x1c0>
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <UART_SetConfig+0x1a8>
 8004756:	2b40      	cmp	r3, #64	; 0x40
 8004758:	d006      	beq.n	8004768 <UART_SetConfig+0x1b4>
 800475a:	e00b      	b.n	8004774 <UART_SetConfig+0x1c0>
 800475c:	2300      	movs	r3, #0
 800475e:	77fb      	strb	r3, [r7, #31]
 8004760:	e0cc      	b.n	80048fc <UART_SetConfig+0x348>
 8004762:	2302      	movs	r3, #2
 8004764:	77fb      	strb	r3, [r7, #31]
 8004766:	e0c9      	b.n	80048fc <UART_SetConfig+0x348>
 8004768:	2304      	movs	r3, #4
 800476a:	77fb      	strb	r3, [r7, #31]
 800476c:	e0c6      	b.n	80048fc <UART_SetConfig+0x348>
 800476e:	2308      	movs	r3, #8
 8004770:	77fb      	strb	r3, [r7, #31]
 8004772:	e0c3      	b.n	80048fc <UART_SetConfig+0x348>
 8004774:	2310      	movs	r3, #16
 8004776:	77fb      	strb	r3, [r7, #31]
 8004778:	e0c0      	b.n	80048fc <UART_SetConfig+0x348>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a44      	ldr	r2, [pc, #272]	; (8004890 <UART_SetConfig+0x2dc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d125      	bne.n	80047d0 <UART_SetConfig+0x21c>
 8004784:	4b3e      	ldr	r3, [pc, #248]	; (8004880 <UART_SetConfig+0x2cc>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004792:	d017      	beq.n	80047c4 <UART_SetConfig+0x210>
 8004794:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004798:	d817      	bhi.n	80047ca <UART_SetConfig+0x216>
 800479a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800479e:	d00b      	beq.n	80047b8 <UART_SetConfig+0x204>
 80047a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047a4:	d811      	bhi.n	80047ca <UART_SetConfig+0x216>
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <UART_SetConfig+0x1fe>
 80047aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ae:	d006      	beq.n	80047be <UART_SetConfig+0x20a>
 80047b0:	e00b      	b.n	80047ca <UART_SetConfig+0x216>
 80047b2:	2300      	movs	r3, #0
 80047b4:	77fb      	strb	r3, [r7, #31]
 80047b6:	e0a1      	b.n	80048fc <UART_SetConfig+0x348>
 80047b8:	2302      	movs	r3, #2
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e09e      	b.n	80048fc <UART_SetConfig+0x348>
 80047be:	2304      	movs	r3, #4
 80047c0:	77fb      	strb	r3, [r7, #31]
 80047c2:	e09b      	b.n	80048fc <UART_SetConfig+0x348>
 80047c4:	2308      	movs	r3, #8
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	e098      	b.n	80048fc <UART_SetConfig+0x348>
 80047ca:	2310      	movs	r3, #16
 80047cc:	77fb      	strb	r3, [r7, #31]
 80047ce:	e095      	b.n	80048fc <UART_SetConfig+0x348>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a2f      	ldr	r2, [pc, #188]	; (8004894 <UART_SetConfig+0x2e0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d125      	bne.n	8004826 <UART_SetConfig+0x272>
 80047da:	4b29      	ldr	r3, [pc, #164]	; (8004880 <UART_SetConfig+0x2cc>)
 80047dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047e8:	d017      	beq.n	800481a <UART_SetConfig+0x266>
 80047ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047ee:	d817      	bhi.n	8004820 <UART_SetConfig+0x26c>
 80047f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047f4:	d00b      	beq.n	800480e <UART_SetConfig+0x25a>
 80047f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047fa:	d811      	bhi.n	8004820 <UART_SetConfig+0x26c>
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <UART_SetConfig+0x254>
 8004800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004804:	d006      	beq.n	8004814 <UART_SetConfig+0x260>
 8004806:	e00b      	b.n	8004820 <UART_SetConfig+0x26c>
 8004808:	2301      	movs	r3, #1
 800480a:	77fb      	strb	r3, [r7, #31]
 800480c:	e076      	b.n	80048fc <UART_SetConfig+0x348>
 800480e:	2302      	movs	r3, #2
 8004810:	77fb      	strb	r3, [r7, #31]
 8004812:	e073      	b.n	80048fc <UART_SetConfig+0x348>
 8004814:	2304      	movs	r3, #4
 8004816:	77fb      	strb	r3, [r7, #31]
 8004818:	e070      	b.n	80048fc <UART_SetConfig+0x348>
 800481a:	2308      	movs	r3, #8
 800481c:	77fb      	strb	r3, [r7, #31]
 800481e:	e06d      	b.n	80048fc <UART_SetConfig+0x348>
 8004820:	2310      	movs	r3, #16
 8004822:	77fb      	strb	r3, [r7, #31]
 8004824:	e06a      	b.n	80048fc <UART_SetConfig+0x348>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a1b      	ldr	r2, [pc, #108]	; (8004898 <UART_SetConfig+0x2e4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d138      	bne.n	80048a2 <UART_SetConfig+0x2ee>
 8004830:	4b13      	ldr	r3, [pc, #76]	; (8004880 <UART_SetConfig+0x2cc>)
 8004832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004836:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800483a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800483e:	d017      	beq.n	8004870 <UART_SetConfig+0x2bc>
 8004840:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004844:	d82a      	bhi.n	800489c <UART_SetConfig+0x2e8>
 8004846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800484a:	d00b      	beq.n	8004864 <UART_SetConfig+0x2b0>
 800484c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004850:	d824      	bhi.n	800489c <UART_SetConfig+0x2e8>
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <UART_SetConfig+0x2aa>
 8004856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800485a:	d006      	beq.n	800486a <UART_SetConfig+0x2b6>
 800485c:	e01e      	b.n	800489c <UART_SetConfig+0x2e8>
 800485e:	2300      	movs	r3, #0
 8004860:	77fb      	strb	r3, [r7, #31]
 8004862:	e04b      	b.n	80048fc <UART_SetConfig+0x348>
 8004864:	2302      	movs	r3, #2
 8004866:	77fb      	strb	r3, [r7, #31]
 8004868:	e048      	b.n	80048fc <UART_SetConfig+0x348>
 800486a:	2304      	movs	r3, #4
 800486c:	77fb      	strb	r3, [r7, #31]
 800486e:	e045      	b.n	80048fc <UART_SetConfig+0x348>
 8004870:	2308      	movs	r3, #8
 8004872:	77fb      	strb	r3, [r7, #31]
 8004874:	e042      	b.n	80048fc <UART_SetConfig+0x348>
 8004876:	bf00      	nop
 8004878:	efff69f3 	.word	0xefff69f3
 800487c:	40011000 	.word	0x40011000
 8004880:	40023800 	.word	0x40023800
 8004884:	40004400 	.word	0x40004400
 8004888:	40004800 	.word	0x40004800
 800488c:	40004c00 	.word	0x40004c00
 8004890:	40005000 	.word	0x40005000
 8004894:	40011400 	.word	0x40011400
 8004898:	40007800 	.word	0x40007800
 800489c:	2310      	movs	r3, #16
 800489e:	77fb      	strb	r3, [r7, #31]
 80048a0:	e02c      	b.n	80048fc <UART_SetConfig+0x348>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a72      	ldr	r2, [pc, #456]	; (8004a70 <UART_SetConfig+0x4bc>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d125      	bne.n	80048f8 <UART_SetConfig+0x344>
 80048ac:	4b71      	ldr	r3, [pc, #452]	; (8004a74 <UART_SetConfig+0x4c0>)
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80048b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048ba:	d017      	beq.n	80048ec <UART_SetConfig+0x338>
 80048bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048c0:	d817      	bhi.n	80048f2 <UART_SetConfig+0x33e>
 80048c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048c6:	d00b      	beq.n	80048e0 <UART_SetConfig+0x32c>
 80048c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048cc:	d811      	bhi.n	80048f2 <UART_SetConfig+0x33e>
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <UART_SetConfig+0x326>
 80048d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048d6:	d006      	beq.n	80048e6 <UART_SetConfig+0x332>
 80048d8:	e00b      	b.n	80048f2 <UART_SetConfig+0x33e>
 80048da:	2300      	movs	r3, #0
 80048dc:	77fb      	strb	r3, [r7, #31]
 80048de:	e00d      	b.n	80048fc <UART_SetConfig+0x348>
 80048e0:	2302      	movs	r3, #2
 80048e2:	77fb      	strb	r3, [r7, #31]
 80048e4:	e00a      	b.n	80048fc <UART_SetConfig+0x348>
 80048e6:	2304      	movs	r3, #4
 80048e8:	77fb      	strb	r3, [r7, #31]
 80048ea:	e007      	b.n	80048fc <UART_SetConfig+0x348>
 80048ec:	2308      	movs	r3, #8
 80048ee:	77fb      	strb	r3, [r7, #31]
 80048f0:	e004      	b.n	80048fc <UART_SetConfig+0x348>
 80048f2:	2310      	movs	r3, #16
 80048f4:	77fb      	strb	r3, [r7, #31]
 80048f6:	e001      	b.n	80048fc <UART_SetConfig+0x348>
 80048f8:	2310      	movs	r3, #16
 80048fa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004904:	d15b      	bne.n	80049be <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004906:	7ffb      	ldrb	r3, [r7, #31]
 8004908:	2b08      	cmp	r3, #8
 800490a:	d828      	bhi.n	800495e <UART_SetConfig+0x3aa>
 800490c:	a201      	add	r2, pc, #4	; (adr r2, 8004914 <UART_SetConfig+0x360>)
 800490e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004912:	bf00      	nop
 8004914:	08004939 	.word	0x08004939
 8004918:	08004941 	.word	0x08004941
 800491c:	08004949 	.word	0x08004949
 8004920:	0800495f 	.word	0x0800495f
 8004924:	0800494f 	.word	0x0800494f
 8004928:	0800495f 	.word	0x0800495f
 800492c:	0800495f 	.word	0x0800495f
 8004930:	0800495f 	.word	0x0800495f
 8004934:	08004957 	.word	0x08004957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004938:	f7fe fd0e 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 800493c:	61b8      	str	r0, [r7, #24]
        break;
 800493e:	e013      	b.n	8004968 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004940:	f7fe fd1e 	bl	8003380 <HAL_RCC_GetPCLK2Freq>
 8004944:	61b8      	str	r0, [r7, #24]
        break;
 8004946:	e00f      	b.n	8004968 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004948:	4b4b      	ldr	r3, [pc, #300]	; (8004a78 <UART_SetConfig+0x4c4>)
 800494a:	61bb      	str	r3, [r7, #24]
        break;
 800494c:	e00c      	b.n	8004968 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800494e:	f7fe fbf1 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 8004952:	61b8      	str	r0, [r7, #24]
        break;
 8004954:	e008      	b.n	8004968 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800495a:	61bb      	str	r3, [r7, #24]
        break;
 800495c:	e004      	b.n	8004968 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	77bb      	strb	r3, [r7, #30]
        break;
 8004966:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d074      	beq.n	8004a58 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	005a      	lsls	r2, r3, #1
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	085b      	lsrs	r3, r3, #1
 8004978:	441a      	add	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004982:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	2b0f      	cmp	r3, #15
 8004988:	d916      	bls.n	80049b8 <UART_SetConfig+0x404>
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004990:	d212      	bcs.n	80049b8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	b29b      	uxth	r3, r3
 8004996:	f023 030f 	bic.w	r3, r3, #15
 800499a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	085b      	lsrs	r3, r3, #1
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	89fb      	ldrh	r3, [r7, #14]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	89fa      	ldrh	r2, [r7, #14]
 80049b4:	60da      	str	r2, [r3, #12]
 80049b6:	e04f      	b.n	8004a58 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	77bb      	strb	r3, [r7, #30]
 80049bc:	e04c      	b.n	8004a58 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049be:	7ffb      	ldrb	r3, [r7, #31]
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d828      	bhi.n	8004a16 <UART_SetConfig+0x462>
 80049c4:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <UART_SetConfig+0x418>)
 80049c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ca:	bf00      	nop
 80049cc:	080049f1 	.word	0x080049f1
 80049d0:	080049f9 	.word	0x080049f9
 80049d4:	08004a01 	.word	0x08004a01
 80049d8:	08004a17 	.word	0x08004a17
 80049dc:	08004a07 	.word	0x08004a07
 80049e0:	08004a17 	.word	0x08004a17
 80049e4:	08004a17 	.word	0x08004a17
 80049e8:	08004a17 	.word	0x08004a17
 80049ec:	08004a0f 	.word	0x08004a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049f0:	f7fe fcb2 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 80049f4:	61b8      	str	r0, [r7, #24]
        break;
 80049f6:	e013      	b.n	8004a20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049f8:	f7fe fcc2 	bl	8003380 <HAL_RCC_GetPCLK2Freq>
 80049fc:	61b8      	str	r0, [r7, #24]
        break;
 80049fe:	e00f      	b.n	8004a20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a00:	4b1d      	ldr	r3, [pc, #116]	; (8004a78 <UART_SetConfig+0x4c4>)
 8004a02:	61bb      	str	r3, [r7, #24]
        break;
 8004a04:	e00c      	b.n	8004a20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a06:	f7fe fb95 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 8004a0a:	61b8      	str	r0, [r7, #24]
        break;
 8004a0c:	e008      	b.n	8004a20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a12:	61bb      	str	r3, [r7, #24]
        break;
 8004a14:	e004      	b.n	8004a20 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	77bb      	strb	r3, [r7, #30]
        break;
 8004a1e:	bf00      	nop
    }

    if (pclk != 0U)
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d018      	beq.n	8004a58 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	085a      	lsrs	r2, r3, #1
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	441a      	add	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2b0f      	cmp	r3, #15
 8004a3e:	d909      	bls.n	8004a54 <UART_SetConfig+0x4a0>
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a46:	d205      	bcs.n	8004a54 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60da      	str	r2, [r3, #12]
 8004a52:	e001      	b.n	8004a58 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004a64:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3720      	adds	r7, #32
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	40007c00 	.word	0x40007c00
 8004a74:	40023800 	.word	0x40023800
 8004a78:	00f42400 	.word	0x00f42400

08004a7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00a      	beq.n	8004aa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00a      	beq.n	8004aea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	f003 0310 	and.w	r3, r3, #16
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	f003 0320 	and.w	r3, r3, #32
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01a      	beq.n	8004b92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b7a:	d10a      	bne.n	8004b92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	605a      	str	r2, [r3, #4]
  }
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bd0:	f7fc fed4 	bl	800197c <HAL_GetTick>
 8004bd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0308 	and.w	r3, r3, #8
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d10e      	bne.n	8004c02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004be4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f81b 	bl	8004c2e <UART_WaitOnFlagUntilTimeout>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e011      	b.n	8004c26 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b09c      	sub	sp, #112	; 0x70
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	603b      	str	r3, [r7, #0]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c3e:	e0a7      	b.n	8004d90 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c46:	f000 80a3 	beq.w	8004d90 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c4a:	f7fc fe97 	bl	800197c <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d302      	bcc.n	8004c60 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d13f      	bne.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c74:	667b      	str	r3, [r7, #100]	; 0x64
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c80:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e6      	bne.n	8004c60 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3308      	adds	r3, #8
 8004c98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca4:	f023 0301 	bic.w	r3, r3, #1
 8004ca8:	663b      	str	r3, [r7, #96]	; 0x60
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3308      	adds	r3, #8
 8004cb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cb2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004cb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1e5      	bne.n	8004c92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e068      	b.n	8004db2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d050      	beq.n	8004d90 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cfc:	d148      	bne.n	8004d90 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d06:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d10:	e853 3f00 	ldrex	r3, [r3]
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	461a      	mov	r2, r3
 8004d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d26:	637b      	str	r3, [r7, #52]	; 0x34
 8004d28:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d2e:	e841 2300 	strex	r3, r2, [r1]
 8004d32:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1e6      	bne.n	8004d08 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3308      	adds	r3, #8
 8004d40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	e853 3f00 	ldrex	r3, [r3]
 8004d48:	613b      	str	r3, [r7, #16]
   return(result);
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	f023 0301 	bic.w	r3, r3, #1
 8004d50:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3308      	adds	r3, #8
 8004d58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d5a:	623a      	str	r2, [r7, #32]
 8004d5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5e:	69f9      	ldr	r1, [r7, #28]
 8004d60:	6a3a      	ldr	r2, [r7, #32]
 8004d62:	e841 2300 	strex	r3, r2, [r1]
 8004d66:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1e5      	bne.n	8004d3a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2220      	movs	r2, #32
 8004d72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e010      	b.n	8004db2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	69da      	ldr	r2, [r3, #28]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	bf0c      	ite	eq
 8004da0:	2301      	moveq	r3, #1
 8004da2:	2300      	movne	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	461a      	mov	r2, r3
 8004da8:	79fb      	ldrb	r3, [r7, #7]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	f43f af48 	beq.w	8004c40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3770      	adds	r7, #112	; 0x70
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <arm_biquad_cascade_df1_init_f32>:
 8004dbc:	b538      	push	{r3, r4, r5, lr}
 8004dbe:	4615      	mov	r5, r2
 8004dc0:	460a      	mov	r2, r1
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	6002      	str	r2, [r0, #0]
 8004dc8:	0112      	lsls	r2, r2, #4
 8004dca:	6085      	str	r5, [r0, #8]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 f96d 	bl	80050ac <memset>
 8004dd2:	6060      	str	r0, [r4, #4]
 8004dd4:	bd38      	pop	{r3, r4, r5, pc}
 8004dd6:	bf00      	nop

08004dd8 <arm_biquad_cascade_df1_f32>:
 8004dd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ddc:	4694      	mov	ip, r2
 8004dde:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8004de2:	f003 0203 	and.w	r2, r3, #3
 8004de6:	6807      	ldr	r7, [r0, #0]
 8004de8:	ea4f 190e 	mov.w	r9, lr, lsl #4
 8004dec:	eb0c 180e 	add.w	r8, ip, lr, lsl #4
 8004df0:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
 8004df4:	3614      	adds	r6, #20
 8004df6:	3510      	adds	r5, #16
 8004df8:	ed56 3a05 	vldr	s7, [r6, #-20]	; 0xffffffec
 8004dfc:	ed56 1a04 	vldr	s3, [r6, #-16]
 8004e00:	ed16 2a03 	vldr	s4, [r6, #-12]
 8004e04:	ed56 2a02 	vldr	s5, [r6, #-8]
 8004e08:	ed16 3a01 	vldr	s6, [r6, #-4]
 8004e0c:	ed15 4a04 	vldr	s8, [r5, #-16]
 8004e10:	ed15 5a03 	vldr	s10, [r5, #-12]
 8004e14:	ed15 7a02 	vldr	s14, [r5, #-8]
 8004e18:	ed55 7a01 	vldr	s15, [r5, #-4]
 8004e1c:	f1be 0f00 	cmp.w	lr, #0
 8004e20:	f000 80cf 	beq.w	8004fc2 <arm_biquad_cascade_df1_f32+0x1ea>
 8004e24:	f101 0010 	add.w	r0, r1, #16
 8004e28:	f10c 0310 	add.w	r3, ip, #16
 8004e2c:	4674      	mov	r4, lr
 8004e2e:	ed50 5a04 	vldr	s11, [r0, #-16]
 8004e32:	ee61 4a84 	vmul.f32	s9, s3, s8
 8004e36:	ee22 5a05 	vmul.f32	s10, s4, s10
 8004e3a:	3c01      	subs	r4, #1
 8004e3c:	ee63 6aa5 	vmul.f32	s13, s7, s11
 8004e40:	f100 0010 	add.w	r0, r0, #16
 8004e44:	ee22 6a87 	vmul.f32	s12, s5, s14
 8004e48:	f103 0310 	add.w	r3, r3, #16
 8004e4c:	ee63 7a27 	vmul.f32	s15, s6, s15
 8004e50:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8004e54:	ee21 0aa5 	vmul.f32	s0, s3, s11
 8004e58:	ee22 1a04 	vmul.f32	s2, s4, s8
 8004e5c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8004e60:	ee23 5a07 	vmul.f32	s10, s6, s14
 8004e64:	ee22 4a25 	vmul.f32	s8, s4, s11
 8004e68:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004e6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e70:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 8004e74:	ee62 5aa7 	vmul.f32	s11, s5, s15
 8004e78:	ed10 6a07 	vldr	s12, [r0, #-28]	; 0xffffffe4
 8004e7c:	ee63 7a27 	vmul.f32	s15, s6, s15
 8004e80:	ee63 6a86 	vmul.f32	s13, s7, s12
 8004e84:	ee61 0a86 	vmul.f32	s1, s3, s12
 8004e88:	ee62 4a06 	vmul.f32	s9, s4, s12
 8004e8c:	ee36 7a80 	vadd.f32	s14, s13, s0
 8004e90:	ee37 7a01 	vadd.f32	s14, s14, s2
 8004e94:	ee37 7a25 	vadd.f32	s14, s14, s11
 8004e98:	ee37 7a05 	vadd.f32	s14, s14, s10
 8004e9c:	ed03 7a07 	vstr	s14, [r3, #-28]	; 0xffffffe4
 8004ea0:	ee62 6a87 	vmul.f32	s13, s5, s14
 8004ea4:	ed10 5a06 	vldr	s10, [r0, #-24]	; 0xffffffe8
 8004ea8:	ee23 7a07 	vmul.f32	s14, s6, s14
 8004eac:	ee63 5a85 	vmul.f32	s11, s7, s10
 8004eb0:	ee21 1a85 	vmul.f32	s2, s3, s10
 8004eb4:	ee75 5aa0 	vadd.f32	s11, s11, s1
 8004eb8:	ee75 5a84 	vadd.f32	s11, s11, s8
 8004ebc:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8004ec0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8004ec4:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8004ec8:	ee62 6aa7 	vmul.f32	s13, s5, s15
 8004ecc:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 8004ed0:	ee23 6a84 	vmul.f32	s12, s7, s8
 8004ed4:	ee36 6a01 	vadd.f32	s12, s12, s2
 8004ed8:	ee36 6a24 	vadd.f32	s12, s12, s9
 8004edc:	ee36 6a26 	vadd.f32	s12, s12, s13
 8004ee0:	ee36 7a07 	vadd.f32	s14, s12, s14
 8004ee4:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8004ee8:	d1a1      	bne.n	8004e2e <arm_biquad_cascade_df1_f32+0x56>
 8004eea:	4449      	add	r1, r9
 8004eec:	4643      	mov	r3, r8
 8004eee:	2a00      	cmp	r2, #0
 8004ef0:	d045      	beq.n	8004f7e <arm_biquad_cascade_df1_f32+0x1a6>
 8004ef2:	edd1 6a00 	vldr	s13, [r1]
 8004ef6:	ee61 5a84 	vmul.f32	s11, s3, s8
 8004efa:	ee22 5a05 	vmul.f32	s10, s4, s10
 8004efe:	2a01      	cmp	r2, #1
 8004f00:	ee63 4aa6 	vmul.f32	s9, s7, s13
 8004f04:	ee22 6a87 	vmul.f32	s12, s5, s14
 8004f08:	ee63 7a27 	vmul.f32	s15, s6, s15
 8004f0c:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8004f10:	ee35 5a85 	vadd.f32	s10, s11, s10
 8004f14:	ee35 6a06 	vadd.f32	s12, s10, s12
 8004f18:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004f1c:	ed83 6a00 	vstr	s12, [r3]
 8004f20:	d03d      	beq.n	8004f9e <arm_biquad_cascade_df1_f32+0x1c6>
 8004f22:	ed91 5a01 	vldr	s10, [r1, #4]
 8004f26:	ee61 5aa6 	vmul.f32	s11, s3, s13
 8004f2a:	ee22 4a04 	vmul.f32	s8, s4, s8
 8004f2e:	2a02      	cmp	r2, #2
 8004f30:	ee65 4a23 	vmul.f32	s9, s10, s7
 8004f34:	ee62 7a86 	vmul.f32	s15, s5, s12
 8004f38:	ee23 7a07 	vmul.f32	s14, s6, s14
 8004f3c:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8004f40:	ee35 4a84 	vadd.f32	s8, s11, s8
 8004f44:	ee74 7a27 	vadd.f32	s15, s8, s15
 8004f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f4c:	edc3 7a01 	vstr	s15, [r3, #4]
 8004f50:	d02e      	beq.n	8004fb0 <arm_biquad_cascade_df1_f32+0x1d8>
 8004f52:	ed91 4a02 	vldr	s8, [r1, #8]
 8004f56:	ee22 2a26 	vmul.f32	s4, s4, s13
 8004f5a:	ee65 1a21 	vmul.f32	s3, s10, s3
 8004f5e:	ee63 6a84 	vmul.f32	s13, s7, s8
 8004f62:	ee67 2aa2 	vmul.f32	s5, s15, s5
 8004f66:	ee23 3a06 	vmul.f32	s6, s6, s12
 8004f6a:	ee76 6aa1 	vadd.f32	s13, s13, s3
 8004f6e:	ee76 6a82 	vadd.f32	s13, s13, s4
 8004f72:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8004f76:	ee36 7a83 	vadd.f32	s14, s13, s6
 8004f7a:	ed83 7a02 	vstr	s14, [r3, #8]
 8004f7e:	3f01      	subs	r7, #1
 8004f80:	ed05 4a04 	vstr	s8, [r5, #-16]
 8004f84:	ed05 5a03 	vstr	s10, [r5, #-12]
 8004f88:	f106 0614 	add.w	r6, r6, #20
 8004f8c:	ed05 7a02 	vstr	s14, [r5, #-8]
 8004f90:	f105 0510 	add.w	r5, r5, #16
 8004f94:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 8004f98:	d015      	beq.n	8004fc6 <arm_biquad_cascade_df1_f32+0x1ee>
 8004f9a:	4661      	mov	r1, ip
 8004f9c:	e72c      	b.n	8004df8 <arm_biquad_cascade_df1_f32+0x20>
 8004f9e:	eef0 7a47 	vmov.f32	s15, s14
 8004fa2:	eeb0 5a44 	vmov.f32	s10, s8
 8004fa6:	eeb0 7a46 	vmov.f32	s14, s12
 8004faa:	eeb0 4a66 	vmov.f32	s8, s13
 8004fae:	e7e6      	b.n	8004f7e <arm_biquad_cascade_df1_f32+0x1a6>
 8004fb0:	eeb0 7a67 	vmov.f32	s14, s15
 8004fb4:	eeb0 4a45 	vmov.f32	s8, s10
 8004fb8:	eef0 7a46 	vmov.f32	s15, s12
 8004fbc:	eeb0 5a66 	vmov.f32	s10, s13
 8004fc0:	e7dd      	b.n	8004f7e <arm_biquad_cascade_df1_f32+0x1a6>
 8004fc2:	4663      	mov	r3, ip
 8004fc4:	e793      	b.n	8004eee <arm_biquad_cascade_df1_f32+0x116>
 8004fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fca:	bf00      	nop

08004fcc <__assert_func>:
 8004fcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004fce:	4614      	mov	r4, r2
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <__assert_func+0x2c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4605      	mov	r5, r0
 8004fd8:	68d8      	ldr	r0, [r3, #12]
 8004fda:	b14c      	cbz	r4, 8004ff0 <__assert_func+0x24>
 8004fdc:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <__assert_func+0x30>)
 8004fde:	9100      	str	r1, [sp, #0]
 8004fe0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004fe4:	4906      	ldr	r1, [pc, #24]	; (8005000 <__assert_func+0x34>)
 8004fe6:	462b      	mov	r3, r5
 8004fe8:	f000 f814 	bl	8005014 <fiprintf>
 8004fec:	f000 ffda 	bl	8005fa4 <abort>
 8004ff0:	4b04      	ldr	r3, [pc, #16]	; (8005004 <__assert_func+0x38>)
 8004ff2:	461c      	mov	r4, r3
 8004ff4:	e7f3      	b.n	8004fde <__assert_func+0x12>
 8004ff6:	bf00      	nop
 8004ff8:	20000028 	.word	0x20000028
 8004ffc:	08007a88 	.word	0x08007a88
 8005000:	08007a95 	.word	0x08007a95
 8005004:	08007ac3 	.word	0x08007ac3

08005008 <__errno>:
 8005008:	4b01      	ldr	r3, [pc, #4]	; (8005010 <__errno+0x8>)
 800500a:	6818      	ldr	r0, [r3, #0]
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	20000028 	.word	0x20000028

08005014 <fiprintf>:
 8005014:	b40e      	push	{r1, r2, r3}
 8005016:	b503      	push	{r0, r1, lr}
 8005018:	4601      	mov	r1, r0
 800501a:	ab03      	add	r3, sp, #12
 800501c:	4805      	ldr	r0, [pc, #20]	; (8005034 <fiprintf+0x20>)
 800501e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005022:	6800      	ldr	r0, [r0, #0]
 8005024:	9301      	str	r3, [sp, #4]
 8005026:	f000 f953 	bl	80052d0 <_vfiprintf_r>
 800502a:	b002      	add	sp, #8
 800502c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005030:	b003      	add	sp, #12
 8005032:	4770      	bx	lr
 8005034:	20000028 	.word	0x20000028

08005038 <__libc_init_array>:
 8005038:	b570      	push	{r4, r5, r6, lr}
 800503a:	4d0d      	ldr	r5, [pc, #52]	; (8005070 <__libc_init_array+0x38>)
 800503c:	4c0d      	ldr	r4, [pc, #52]	; (8005074 <__libc_init_array+0x3c>)
 800503e:	1b64      	subs	r4, r4, r5
 8005040:	10a4      	asrs	r4, r4, #2
 8005042:	2600      	movs	r6, #0
 8005044:	42a6      	cmp	r6, r4
 8005046:	d109      	bne.n	800505c <__libc_init_array+0x24>
 8005048:	4d0b      	ldr	r5, [pc, #44]	; (8005078 <__libc_init_array+0x40>)
 800504a:	4c0c      	ldr	r4, [pc, #48]	; (800507c <__libc_init_array+0x44>)
 800504c:	f002 fd04 	bl	8007a58 <_init>
 8005050:	1b64      	subs	r4, r4, r5
 8005052:	10a4      	asrs	r4, r4, #2
 8005054:	2600      	movs	r6, #0
 8005056:	42a6      	cmp	r6, r4
 8005058:	d105      	bne.n	8005066 <__libc_init_array+0x2e>
 800505a:	bd70      	pop	{r4, r5, r6, pc}
 800505c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005060:	4798      	blx	r3
 8005062:	3601      	adds	r6, #1
 8005064:	e7ee      	b.n	8005044 <__libc_init_array+0xc>
 8005066:	f855 3b04 	ldr.w	r3, [r5], #4
 800506a:	4798      	blx	r3
 800506c:	3601      	adds	r6, #1
 800506e:	e7f2      	b.n	8005056 <__libc_init_array+0x1e>
 8005070:	08007e70 	.word	0x08007e70
 8005074:	08007e70 	.word	0x08007e70
 8005078:	08007e70 	.word	0x08007e70
 800507c:	08007e74 	.word	0x08007e74

08005080 <malloc>:
 8005080:	4b02      	ldr	r3, [pc, #8]	; (800508c <malloc+0xc>)
 8005082:	4601      	mov	r1, r0
 8005084:	6818      	ldr	r0, [r3, #0]
 8005086:	f000 b885 	b.w	8005194 <_malloc_r>
 800508a:	bf00      	nop
 800508c:	20000028 	.word	0x20000028

08005090 <memcpy>:
 8005090:	440a      	add	r2, r1
 8005092:	4291      	cmp	r1, r2
 8005094:	f100 33ff 	add.w	r3, r0, #4294967295
 8005098:	d100      	bne.n	800509c <memcpy+0xc>
 800509a:	4770      	bx	lr
 800509c:	b510      	push	{r4, lr}
 800509e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050a6:	4291      	cmp	r1, r2
 80050a8:	d1f9      	bne.n	800509e <memcpy+0xe>
 80050aa:	bd10      	pop	{r4, pc}

080050ac <memset>:
 80050ac:	4402      	add	r2, r0
 80050ae:	4603      	mov	r3, r0
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d100      	bne.n	80050b6 <memset+0xa>
 80050b4:	4770      	bx	lr
 80050b6:	f803 1b01 	strb.w	r1, [r3], #1
 80050ba:	e7f9      	b.n	80050b0 <memset+0x4>

080050bc <_free_r>:
 80050bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050be:	2900      	cmp	r1, #0
 80050c0:	d044      	beq.n	800514c <_free_r+0x90>
 80050c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050c6:	9001      	str	r0, [sp, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f1a1 0404 	sub.w	r4, r1, #4
 80050ce:	bfb8      	it	lt
 80050d0:	18e4      	addlt	r4, r4, r3
 80050d2:	f002 f80b 	bl	80070ec <__malloc_lock>
 80050d6:	4a1e      	ldr	r2, [pc, #120]	; (8005150 <_free_r+0x94>)
 80050d8:	9801      	ldr	r0, [sp, #4]
 80050da:	6813      	ldr	r3, [r2, #0]
 80050dc:	b933      	cbnz	r3, 80050ec <_free_r+0x30>
 80050de:	6063      	str	r3, [r4, #4]
 80050e0:	6014      	str	r4, [r2, #0]
 80050e2:	b003      	add	sp, #12
 80050e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050e8:	f002 b806 	b.w	80070f8 <__malloc_unlock>
 80050ec:	42a3      	cmp	r3, r4
 80050ee:	d908      	bls.n	8005102 <_free_r+0x46>
 80050f0:	6825      	ldr	r5, [r4, #0]
 80050f2:	1961      	adds	r1, r4, r5
 80050f4:	428b      	cmp	r3, r1
 80050f6:	bf01      	itttt	eq
 80050f8:	6819      	ldreq	r1, [r3, #0]
 80050fa:	685b      	ldreq	r3, [r3, #4]
 80050fc:	1949      	addeq	r1, r1, r5
 80050fe:	6021      	streq	r1, [r4, #0]
 8005100:	e7ed      	b.n	80050de <_free_r+0x22>
 8005102:	461a      	mov	r2, r3
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	b10b      	cbz	r3, 800510c <_free_r+0x50>
 8005108:	42a3      	cmp	r3, r4
 800510a:	d9fa      	bls.n	8005102 <_free_r+0x46>
 800510c:	6811      	ldr	r1, [r2, #0]
 800510e:	1855      	adds	r5, r2, r1
 8005110:	42a5      	cmp	r5, r4
 8005112:	d10b      	bne.n	800512c <_free_r+0x70>
 8005114:	6824      	ldr	r4, [r4, #0]
 8005116:	4421      	add	r1, r4
 8005118:	1854      	adds	r4, r2, r1
 800511a:	42a3      	cmp	r3, r4
 800511c:	6011      	str	r1, [r2, #0]
 800511e:	d1e0      	bne.n	80050e2 <_free_r+0x26>
 8005120:	681c      	ldr	r4, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	6053      	str	r3, [r2, #4]
 8005126:	4421      	add	r1, r4
 8005128:	6011      	str	r1, [r2, #0]
 800512a:	e7da      	b.n	80050e2 <_free_r+0x26>
 800512c:	d902      	bls.n	8005134 <_free_r+0x78>
 800512e:	230c      	movs	r3, #12
 8005130:	6003      	str	r3, [r0, #0]
 8005132:	e7d6      	b.n	80050e2 <_free_r+0x26>
 8005134:	6825      	ldr	r5, [r4, #0]
 8005136:	1961      	adds	r1, r4, r5
 8005138:	428b      	cmp	r3, r1
 800513a:	bf04      	itt	eq
 800513c:	6819      	ldreq	r1, [r3, #0]
 800513e:	685b      	ldreq	r3, [r3, #4]
 8005140:	6063      	str	r3, [r4, #4]
 8005142:	bf04      	itt	eq
 8005144:	1949      	addeq	r1, r1, r5
 8005146:	6021      	streq	r1, [r4, #0]
 8005148:	6054      	str	r4, [r2, #4]
 800514a:	e7ca      	b.n	80050e2 <_free_r+0x26>
 800514c:	b003      	add	sp, #12
 800514e:	bd30      	pop	{r4, r5, pc}
 8005150:	20000364 	.word	0x20000364

08005154 <sbrk_aligned>:
 8005154:	b570      	push	{r4, r5, r6, lr}
 8005156:	4e0e      	ldr	r6, [pc, #56]	; (8005190 <sbrk_aligned+0x3c>)
 8005158:	460c      	mov	r4, r1
 800515a:	6831      	ldr	r1, [r6, #0]
 800515c:	4605      	mov	r5, r0
 800515e:	b911      	cbnz	r1, 8005166 <sbrk_aligned+0x12>
 8005160:	f000 fe50 	bl	8005e04 <_sbrk_r>
 8005164:	6030      	str	r0, [r6, #0]
 8005166:	4621      	mov	r1, r4
 8005168:	4628      	mov	r0, r5
 800516a:	f000 fe4b 	bl	8005e04 <_sbrk_r>
 800516e:	1c43      	adds	r3, r0, #1
 8005170:	d00a      	beq.n	8005188 <sbrk_aligned+0x34>
 8005172:	1cc4      	adds	r4, r0, #3
 8005174:	f024 0403 	bic.w	r4, r4, #3
 8005178:	42a0      	cmp	r0, r4
 800517a:	d007      	beq.n	800518c <sbrk_aligned+0x38>
 800517c:	1a21      	subs	r1, r4, r0
 800517e:	4628      	mov	r0, r5
 8005180:	f000 fe40 	bl	8005e04 <_sbrk_r>
 8005184:	3001      	adds	r0, #1
 8005186:	d101      	bne.n	800518c <sbrk_aligned+0x38>
 8005188:	f04f 34ff 	mov.w	r4, #4294967295
 800518c:	4620      	mov	r0, r4
 800518e:	bd70      	pop	{r4, r5, r6, pc}
 8005190:	20000368 	.word	0x20000368

08005194 <_malloc_r>:
 8005194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005198:	1ccd      	adds	r5, r1, #3
 800519a:	f025 0503 	bic.w	r5, r5, #3
 800519e:	3508      	adds	r5, #8
 80051a0:	2d0c      	cmp	r5, #12
 80051a2:	bf38      	it	cc
 80051a4:	250c      	movcc	r5, #12
 80051a6:	2d00      	cmp	r5, #0
 80051a8:	4607      	mov	r7, r0
 80051aa:	db01      	blt.n	80051b0 <_malloc_r+0x1c>
 80051ac:	42a9      	cmp	r1, r5
 80051ae:	d905      	bls.n	80051bc <_malloc_r+0x28>
 80051b0:	230c      	movs	r3, #12
 80051b2:	603b      	str	r3, [r7, #0]
 80051b4:	2600      	movs	r6, #0
 80051b6:	4630      	mov	r0, r6
 80051b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051bc:	4e2e      	ldr	r6, [pc, #184]	; (8005278 <_malloc_r+0xe4>)
 80051be:	f001 ff95 	bl	80070ec <__malloc_lock>
 80051c2:	6833      	ldr	r3, [r6, #0]
 80051c4:	461c      	mov	r4, r3
 80051c6:	bb34      	cbnz	r4, 8005216 <_malloc_r+0x82>
 80051c8:	4629      	mov	r1, r5
 80051ca:	4638      	mov	r0, r7
 80051cc:	f7ff ffc2 	bl	8005154 <sbrk_aligned>
 80051d0:	1c43      	adds	r3, r0, #1
 80051d2:	4604      	mov	r4, r0
 80051d4:	d14d      	bne.n	8005272 <_malloc_r+0xde>
 80051d6:	6834      	ldr	r4, [r6, #0]
 80051d8:	4626      	mov	r6, r4
 80051da:	2e00      	cmp	r6, #0
 80051dc:	d140      	bne.n	8005260 <_malloc_r+0xcc>
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	4631      	mov	r1, r6
 80051e2:	4638      	mov	r0, r7
 80051e4:	eb04 0803 	add.w	r8, r4, r3
 80051e8:	f000 fe0c 	bl	8005e04 <_sbrk_r>
 80051ec:	4580      	cmp	r8, r0
 80051ee:	d13a      	bne.n	8005266 <_malloc_r+0xd2>
 80051f0:	6821      	ldr	r1, [r4, #0]
 80051f2:	3503      	adds	r5, #3
 80051f4:	1a6d      	subs	r5, r5, r1
 80051f6:	f025 0503 	bic.w	r5, r5, #3
 80051fa:	3508      	adds	r5, #8
 80051fc:	2d0c      	cmp	r5, #12
 80051fe:	bf38      	it	cc
 8005200:	250c      	movcc	r5, #12
 8005202:	4629      	mov	r1, r5
 8005204:	4638      	mov	r0, r7
 8005206:	f7ff ffa5 	bl	8005154 <sbrk_aligned>
 800520a:	3001      	adds	r0, #1
 800520c:	d02b      	beq.n	8005266 <_malloc_r+0xd2>
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	442b      	add	r3, r5
 8005212:	6023      	str	r3, [r4, #0]
 8005214:	e00e      	b.n	8005234 <_malloc_r+0xa0>
 8005216:	6822      	ldr	r2, [r4, #0]
 8005218:	1b52      	subs	r2, r2, r5
 800521a:	d41e      	bmi.n	800525a <_malloc_r+0xc6>
 800521c:	2a0b      	cmp	r2, #11
 800521e:	d916      	bls.n	800524e <_malloc_r+0xba>
 8005220:	1961      	adds	r1, r4, r5
 8005222:	42a3      	cmp	r3, r4
 8005224:	6025      	str	r5, [r4, #0]
 8005226:	bf18      	it	ne
 8005228:	6059      	strne	r1, [r3, #4]
 800522a:	6863      	ldr	r3, [r4, #4]
 800522c:	bf08      	it	eq
 800522e:	6031      	streq	r1, [r6, #0]
 8005230:	5162      	str	r2, [r4, r5]
 8005232:	604b      	str	r3, [r1, #4]
 8005234:	4638      	mov	r0, r7
 8005236:	f104 060b 	add.w	r6, r4, #11
 800523a:	f001 ff5d 	bl	80070f8 <__malloc_unlock>
 800523e:	f026 0607 	bic.w	r6, r6, #7
 8005242:	1d23      	adds	r3, r4, #4
 8005244:	1af2      	subs	r2, r6, r3
 8005246:	d0b6      	beq.n	80051b6 <_malloc_r+0x22>
 8005248:	1b9b      	subs	r3, r3, r6
 800524a:	50a3      	str	r3, [r4, r2]
 800524c:	e7b3      	b.n	80051b6 <_malloc_r+0x22>
 800524e:	6862      	ldr	r2, [r4, #4]
 8005250:	42a3      	cmp	r3, r4
 8005252:	bf0c      	ite	eq
 8005254:	6032      	streq	r2, [r6, #0]
 8005256:	605a      	strne	r2, [r3, #4]
 8005258:	e7ec      	b.n	8005234 <_malloc_r+0xa0>
 800525a:	4623      	mov	r3, r4
 800525c:	6864      	ldr	r4, [r4, #4]
 800525e:	e7b2      	b.n	80051c6 <_malloc_r+0x32>
 8005260:	4634      	mov	r4, r6
 8005262:	6876      	ldr	r6, [r6, #4]
 8005264:	e7b9      	b.n	80051da <_malloc_r+0x46>
 8005266:	230c      	movs	r3, #12
 8005268:	603b      	str	r3, [r7, #0]
 800526a:	4638      	mov	r0, r7
 800526c:	f001 ff44 	bl	80070f8 <__malloc_unlock>
 8005270:	e7a1      	b.n	80051b6 <_malloc_r+0x22>
 8005272:	6025      	str	r5, [r4, #0]
 8005274:	e7de      	b.n	8005234 <_malloc_r+0xa0>
 8005276:	bf00      	nop
 8005278:	20000364 	.word	0x20000364

0800527c <__sfputc_r>:
 800527c:	6893      	ldr	r3, [r2, #8]
 800527e:	3b01      	subs	r3, #1
 8005280:	2b00      	cmp	r3, #0
 8005282:	b410      	push	{r4}
 8005284:	6093      	str	r3, [r2, #8]
 8005286:	da08      	bge.n	800529a <__sfputc_r+0x1e>
 8005288:	6994      	ldr	r4, [r2, #24]
 800528a:	42a3      	cmp	r3, r4
 800528c:	db01      	blt.n	8005292 <__sfputc_r+0x16>
 800528e:	290a      	cmp	r1, #10
 8005290:	d103      	bne.n	800529a <__sfputc_r+0x1e>
 8005292:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005296:	f000 bdc5 	b.w	8005e24 <__swbuf_r>
 800529a:	6813      	ldr	r3, [r2, #0]
 800529c:	1c58      	adds	r0, r3, #1
 800529e:	6010      	str	r0, [r2, #0]
 80052a0:	7019      	strb	r1, [r3, #0]
 80052a2:	4608      	mov	r0, r1
 80052a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <__sfputs_r>:
 80052aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ac:	4606      	mov	r6, r0
 80052ae:	460f      	mov	r7, r1
 80052b0:	4614      	mov	r4, r2
 80052b2:	18d5      	adds	r5, r2, r3
 80052b4:	42ac      	cmp	r4, r5
 80052b6:	d101      	bne.n	80052bc <__sfputs_r+0x12>
 80052b8:	2000      	movs	r0, #0
 80052ba:	e007      	b.n	80052cc <__sfputs_r+0x22>
 80052bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c0:	463a      	mov	r2, r7
 80052c2:	4630      	mov	r0, r6
 80052c4:	f7ff ffda 	bl	800527c <__sfputc_r>
 80052c8:	1c43      	adds	r3, r0, #1
 80052ca:	d1f3      	bne.n	80052b4 <__sfputs_r+0xa>
 80052cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080052d0 <_vfiprintf_r>:
 80052d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d4:	460d      	mov	r5, r1
 80052d6:	b09d      	sub	sp, #116	; 0x74
 80052d8:	4614      	mov	r4, r2
 80052da:	4698      	mov	r8, r3
 80052dc:	4606      	mov	r6, r0
 80052de:	b118      	cbz	r0, 80052e8 <_vfiprintf_r+0x18>
 80052e0:	6983      	ldr	r3, [r0, #24]
 80052e2:	b90b      	cbnz	r3, 80052e8 <_vfiprintf_r+0x18>
 80052e4:	f001 fdf8 	bl	8006ed8 <__sinit>
 80052e8:	4b89      	ldr	r3, [pc, #548]	; (8005510 <_vfiprintf_r+0x240>)
 80052ea:	429d      	cmp	r5, r3
 80052ec:	d11b      	bne.n	8005326 <_vfiprintf_r+0x56>
 80052ee:	6875      	ldr	r5, [r6, #4]
 80052f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052f2:	07d9      	lsls	r1, r3, #31
 80052f4:	d405      	bmi.n	8005302 <_vfiprintf_r+0x32>
 80052f6:	89ab      	ldrh	r3, [r5, #12]
 80052f8:	059a      	lsls	r2, r3, #22
 80052fa:	d402      	bmi.n	8005302 <_vfiprintf_r+0x32>
 80052fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052fe:	f001 fe8e 	bl	800701e <__retarget_lock_acquire_recursive>
 8005302:	89ab      	ldrh	r3, [r5, #12]
 8005304:	071b      	lsls	r3, r3, #28
 8005306:	d501      	bpl.n	800530c <_vfiprintf_r+0x3c>
 8005308:	692b      	ldr	r3, [r5, #16]
 800530a:	b9eb      	cbnz	r3, 8005348 <_vfiprintf_r+0x78>
 800530c:	4629      	mov	r1, r5
 800530e:	4630      	mov	r0, r6
 8005310:	f000 fdda 	bl	8005ec8 <__swsetup_r>
 8005314:	b1c0      	cbz	r0, 8005348 <_vfiprintf_r+0x78>
 8005316:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005318:	07dc      	lsls	r4, r3, #31
 800531a:	d50e      	bpl.n	800533a <_vfiprintf_r+0x6a>
 800531c:	f04f 30ff 	mov.w	r0, #4294967295
 8005320:	b01d      	add	sp, #116	; 0x74
 8005322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005326:	4b7b      	ldr	r3, [pc, #492]	; (8005514 <_vfiprintf_r+0x244>)
 8005328:	429d      	cmp	r5, r3
 800532a:	d101      	bne.n	8005330 <_vfiprintf_r+0x60>
 800532c:	68b5      	ldr	r5, [r6, #8]
 800532e:	e7df      	b.n	80052f0 <_vfiprintf_r+0x20>
 8005330:	4b79      	ldr	r3, [pc, #484]	; (8005518 <_vfiprintf_r+0x248>)
 8005332:	429d      	cmp	r5, r3
 8005334:	bf08      	it	eq
 8005336:	68f5      	ldreq	r5, [r6, #12]
 8005338:	e7da      	b.n	80052f0 <_vfiprintf_r+0x20>
 800533a:	89ab      	ldrh	r3, [r5, #12]
 800533c:	0598      	lsls	r0, r3, #22
 800533e:	d4ed      	bmi.n	800531c <_vfiprintf_r+0x4c>
 8005340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005342:	f001 fe6d 	bl	8007020 <__retarget_lock_release_recursive>
 8005346:	e7e9      	b.n	800531c <_vfiprintf_r+0x4c>
 8005348:	2300      	movs	r3, #0
 800534a:	9309      	str	r3, [sp, #36]	; 0x24
 800534c:	2320      	movs	r3, #32
 800534e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005352:	f8cd 800c 	str.w	r8, [sp, #12]
 8005356:	2330      	movs	r3, #48	; 0x30
 8005358:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800551c <_vfiprintf_r+0x24c>
 800535c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005360:	f04f 0901 	mov.w	r9, #1
 8005364:	4623      	mov	r3, r4
 8005366:	469a      	mov	sl, r3
 8005368:	f813 2b01 	ldrb.w	r2, [r3], #1
 800536c:	b10a      	cbz	r2, 8005372 <_vfiprintf_r+0xa2>
 800536e:	2a25      	cmp	r2, #37	; 0x25
 8005370:	d1f9      	bne.n	8005366 <_vfiprintf_r+0x96>
 8005372:	ebba 0b04 	subs.w	fp, sl, r4
 8005376:	d00b      	beq.n	8005390 <_vfiprintf_r+0xc0>
 8005378:	465b      	mov	r3, fp
 800537a:	4622      	mov	r2, r4
 800537c:	4629      	mov	r1, r5
 800537e:	4630      	mov	r0, r6
 8005380:	f7ff ff93 	bl	80052aa <__sfputs_r>
 8005384:	3001      	adds	r0, #1
 8005386:	f000 80aa 	beq.w	80054de <_vfiprintf_r+0x20e>
 800538a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800538c:	445a      	add	r2, fp
 800538e:	9209      	str	r2, [sp, #36]	; 0x24
 8005390:	f89a 3000 	ldrb.w	r3, [sl]
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 80a2 	beq.w	80054de <_vfiprintf_r+0x20e>
 800539a:	2300      	movs	r3, #0
 800539c:	f04f 32ff 	mov.w	r2, #4294967295
 80053a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053a4:	f10a 0a01 	add.w	sl, sl, #1
 80053a8:	9304      	str	r3, [sp, #16]
 80053aa:	9307      	str	r3, [sp, #28]
 80053ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053b0:	931a      	str	r3, [sp, #104]	; 0x68
 80053b2:	4654      	mov	r4, sl
 80053b4:	2205      	movs	r2, #5
 80053b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053ba:	4858      	ldr	r0, [pc, #352]	; (800551c <_vfiprintf_r+0x24c>)
 80053bc:	f7fa ff30 	bl	8000220 <memchr>
 80053c0:	9a04      	ldr	r2, [sp, #16]
 80053c2:	b9d8      	cbnz	r0, 80053fc <_vfiprintf_r+0x12c>
 80053c4:	06d1      	lsls	r1, r2, #27
 80053c6:	bf44      	itt	mi
 80053c8:	2320      	movmi	r3, #32
 80053ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053ce:	0713      	lsls	r3, r2, #28
 80053d0:	bf44      	itt	mi
 80053d2:	232b      	movmi	r3, #43	; 0x2b
 80053d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053d8:	f89a 3000 	ldrb.w	r3, [sl]
 80053dc:	2b2a      	cmp	r3, #42	; 0x2a
 80053de:	d015      	beq.n	800540c <_vfiprintf_r+0x13c>
 80053e0:	9a07      	ldr	r2, [sp, #28]
 80053e2:	4654      	mov	r4, sl
 80053e4:	2000      	movs	r0, #0
 80053e6:	f04f 0c0a 	mov.w	ip, #10
 80053ea:	4621      	mov	r1, r4
 80053ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053f0:	3b30      	subs	r3, #48	; 0x30
 80053f2:	2b09      	cmp	r3, #9
 80053f4:	d94e      	bls.n	8005494 <_vfiprintf_r+0x1c4>
 80053f6:	b1b0      	cbz	r0, 8005426 <_vfiprintf_r+0x156>
 80053f8:	9207      	str	r2, [sp, #28]
 80053fa:	e014      	b.n	8005426 <_vfiprintf_r+0x156>
 80053fc:	eba0 0308 	sub.w	r3, r0, r8
 8005400:	fa09 f303 	lsl.w	r3, r9, r3
 8005404:	4313      	orrs	r3, r2
 8005406:	9304      	str	r3, [sp, #16]
 8005408:	46a2      	mov	sl, r4
 800540a:	e7d2      	b.n	80053b2 <_vfiprintf_r+0xe2>
 800540c:	9b03      	ldr	r3, [sp, #12]
 800540e:	1d19      	adds	r1, r3, #4
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	9103      	str	r1, [sp, #12]
 8005414:	2b00      	cmp	r3, #0
 8005416:	bfbb      	ittet	lt
 8005418:	425b      	neglt	r3, r3
 800541a:	f042 0202 	orrlt.w	r2, r2, #2
 800541e:	9307      	strge	r3, [sp, #28]
 8005420:	9307      	strlt	r3, [sp, #28]
 8005422:	bfb8      	it	lt
 8005424:	9204      	strlt	r2, [sp, #16]
 8005426:	7823      	ldrb	r3, [r4, #0]
 8005428:	2b2e      	cmp	r3, #46	; 0x2e
 800542a:	d10c      	bne.n	8005446 <_vfiprintf_r+0x176>
 800542c:	7863      	ldrb	r3, [r4, #1]
 800542e:	2b2a      	cmp	r3, #42	; 0x2a
 8005430:	d135      	bne.n	800549e <_vfiprintf_r+0x1ce>
 8005432:	9b03      	ldr	r3, [sp, #12]
 8005434:	1d1a      	adds	r2, r3, #4
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	9203      	str	r2, [sp, #12]
 800543a:	2b00      	cmp	r3, #0
 800543c:	bfb8      	it	lt
 800543e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005442:	3402      	adds	r4, #2
 8005444:	9305      	str	r3, [sp, #20]
 8005446:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800552c <_vfiprintf_r+0x25c>
 800544a:	7821      	ldrb	r1, [r4, #0]
 800544c:	2203      	movs	r2, #3
 800544e:	4650      	mov	r0, sl
 8005450:	f7fa fee6 	bl	8000220 <memchr>
 8005454:	b140      	cbz	r0, 8005468 <_vfiprintf_r+0x198>
 8005456:	2340      	movs	r3, #64	; 0x40
 8005458:	eba0 000a 	sub.w	r0, r0, sl
 800545c:	fa03 f000 	lsl.w	r0, r3, r0
 8005460:	9b04      	ldr	r3, [sp, #16]
 8005462:	4303      	orrs	r3, r0
 8005464:	3401      	adds	r4, #1
 8005466:	9304      	str	r3, [sp, #16]
 8005468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800546c:	482c      	ldr	r0, [pc, #176]	; (8005520 <_vfiprintf_r+0x250>)
 800546e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005472:	2206      	movs	r2, #6
 8005474:	f7fa fed4 	bl	8000220 <memchr>
 8005478:	2800      	cmp	r0, #0
 800547a:	d03f      	beq.n	80054fc <_vfiprintf_r+0x22c>
 800547c:	4b29      	ldr	r3, [pc, #164]	; (8005524 <_vfiprintf_r+0x254>)
 800547e:	bb1b      	cbnz	r3, 80054c8 <_vfiprintf_r+0x1f8>
 8005480:	9b03      	ldr	r3, [sp, #12]
 8005482:	3307      	adds	r3, #7
 8005484:	f023 0307 	bic.w	r3, r3, #7
 8005488:	3308      	adds	r3, #8
 800548a:	9303      	str	r3, [sp, #12]
 800548c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800548e:	443b      	add	r3, r7
 8005490:	9309      	str	r3, [sp, #36]	; 0x24
 8005492:	e767      	b.n	8005364 <_vfiprintf_r+0x94>
 8005494:	fb0c 3202 	mla	r2, ip, r2, r3
 8005498:	460c      	mov	r4, r1
 800549a:	2001      	movs	r0, #1
 800549c:	e7a5      	b.n	80053ea <_vfiprintf_r+0x11a>
 800549e:	2300      	movs	r3, #0
 80054a0:	3401      	adds	r4, #1
 80054a2:	9305      	str	r3, [sp, #20]
 80054a4:	4619      	mov	r1, r3
 80054a6:	f04f 0c0a 	mov.w	ip, #10
 80054aa:	4620      	mov	r0, r4
 80054ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054b0:	3a30      	subs	r2, #48	; 0x30
 80054b2:	2a09      	cmp	r2, #9
 80054b4:	d903      	bls.n	80054be <_vfiprintf_r+0x1ee>
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0c5      	beq.n	8005446 <_vfiprintf_r+0x176>
 80054ba:	9105      	str	r1, [sp, #20]
 80054bc:	e7c3      	b.n	8005446 <_vfiprintf_r+0x176>
 80054be:	fb0c 2101 	mla	r1, ip, r1, r2
 80054c2:	4604      	mov	r4, r0
 80054c4:	2301      	movs	r3, #1
 80054c6:	e7f0      	b.n	80054aa <_vfiprintf_r+0x1da>
 80054c8:	ab03      	add	r3, sp, #12
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	462a      	mov	r2, r5
 80054ce:	4b16      	ldr	r3, [pc, #88]	; (8005528 <_vfiprintf_r+0x258>)
 80054d0:	a904      	add	r1, sp, #16
 80054d2:	4630      	mov	r0, r6
 80054d4:	f000 f8cc 	bl	8005670 <_printf_float>
 80054d8:	4607      	mov	r7, r0
 80054da:	1c78      	adds	r0, r7, #1
 80054dc:	d1d6      	bne.n	800548c <_vfiprintf_r+0x1bc>
 80054de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054e0:	07d9      	lsls	r1, r3, #31
 80054e2:	d405      	bmi.n	80054f0 <_vfiprintf_r+0x220>
 80054e4:	89ab      	ldrh	r3, [r5, #12]
 80054e6:	059a      	lsls	r2, r3, #22
 80054e8:	d402      	bmi.n	80054f0 <_vfiprintf_r+0x220>
 80054ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054ec:	f001 fd98 	bl	8007020 <__retarget_lock_release_recursive>
 80054f0:	89ab      	ldrh	r3, [r5, #12]
 80054f2:	065b      	lsls	r3, r3, #25
 80054f4:	f53f af12 	bmi.w	800531c <_vfiprintf_r+0x4c>
 80054f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054fa:	e711      	b.n	8005320 <_vfiprintf_r+0x50>
 80054fc:	ab03      	add	r3, sp, #12
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	462a      	mov	r2, r5
 8005502:	4b09      	ldr	r3, [pc, #36]	; (8005528 <_vfiprintf_r+0x258>)
 8005504:	a904      	add	r1, sp, #16
 8005506:	4630      	mov	r0, r6
 8005508:	f000 fb56 	bl	8005bb8 <_printf_i>
 800550c:	e7e4      	b.n	80054d8 <_vfiprintf_r+0x208>
 800550e:	bf00      	nop
 8005510:	08007bc0 	.word	0x08007bc0
 8005514:	08007be0 	.word	0x08007be0
 8005518:	08007ba0 	.word	0x08007ba0
 800551c:	08007ac8 	.word	0x08007ac8
 8005520:	08007ad2 	.word	0x08007ad2
 8005524:	08005671 	.word	0x08005671
 8005528:	080052ab 	.word	0x080052ab
 800552c:	08007ace 	.word	0x08007ace

08005530 <__cvt>:
 8005530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005534:	ec55 4b10 	vmov	r4, r5, d0
 8005538:	2d00      	cmp	r5, #0
 800553a:	460e      	mov	r6, r1
 800553c:	4619      	mov	r1, r3
 800553e:	462b      	mov	r3, r5
 8005540:	bfbb      	ittet	lt
 8005542:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005546:	461d      	movlt	r5, r3
 8005548:	2300      	movge	r3, #0
 800554a:	232d      	movlt	r3, #45	; 0x2d
 800554c:	700b      	strb	r3, [r1, #0]
 800554e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005550:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005554:	4691      	mov	r9, r2
 8005556:	f023 0820 	bic.w	r8, r3, #32
 800555a:	bfbc      	itt	lt
 800555c:	4622      	movlt	r2, r4
 800555e:	4614      	movlt	r4, r2
 8005560:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005564:	d005      	beq.n	8005572 <__cvt+0x42>
 8005566:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800556a:	d100      	bne.n	800556e <__cvt+0x3e>
 800556c:	3601      	adds	r6, #1
 800556e:	2102      	movs	r1, #2
 8005570:	e000      	b.n	8005574 <__cvt+0x44>
 8005572:	2103      	movs	r1, #3
 8005574:	ab03      	add	r3, sp, #12
 8005576:	9301      	str	r3, [sp, #4]
 8005578:	ab02      	add	r3, sp, #8
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	ec45 4b10 	vmov	d0, r4, r5
 8005580:	4653      	mov	r3, sl
 8005582:	4632      	mov	r2, r6
 8005584:	f000 fda0 	bl	80060c8 <_dtoa_r>
 8005588:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800558c:	4607      	mov	r7, r0
 800558e:	d102      	bne.n	8005596 <__cvt+0x66>
 8005590:	f019 0f01 	tst.w	r9, #1
 8005594:	d022      	beq.n	80055dc <__cvt+0xac>
 8005596:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800559a:	eb07 0906 	add.w	r9, r7, r6
 800559e:	d110      	bne.n	80055c2 <__cvt+0x92>
 80055a0:	783b      	ldrb	r3, [r7, #0]
 80055a2:	2b30      	cmp	r3, #48	; 0x30
 80055a4:	d10a      	bne.n	80055bc <__cvt+0x8c>
 80055a6:	2200      	movs	r2, #0
 80055a8:	2300      	movs	r3, #0
 80055aa:	4620      	mov	r0, r4
 80055ac:	4629      	mov	r1, r5
 80055ae:	f7fb faab 	bl	8000b08 <__aeabi_dcmpeq>
 80055b2:	b918      	cbnz	r0, 80055bc <__cvt+0x8c>
 80055b4:	f1c6 0601 	rsb	r6, r6, #1
 80055b8:	f8ca 6000 	str.w	r6, [sl]
 80055bc:	f8da 3000 	ldr.w	r3, [sl]
 80055c0:	4499      	add	r9, r3
 80055c2:	2200      	movs	r2, #0
 80055c4:	2300      	movs	r3, #0
 80055c6:	4620      	mov	r0, r4
 80055c8:	4629      	mov	r1, r5
 80055ca:	f7fb fa9d 	bl	8000b08 <__aeabi_dcmpeq>
 80055ce:	b108      	cbz	r0, 80055d4 <__cvt+0xa4>
 80055d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80055d4:	2230      	movs	r2, #48	; 0x30
 80055d6:	9b03      	ldr	r3, [sp, #12]
 80055d8:	454b      	cmp	r3, r9
 80055da:	d307      	bcc.n	80055ec <__cvt+0xbc>
 80055dc:	9b03      	ldr	r3, [sp, #12]
 80055de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055e0:	1bdb      	subs	r3, r3, r7
 80055e2:	4638      	mov	r0, r7
 80055e4:	6013      	str	r3, [r2, #0]
 80055e6:	b004      	add	sp, #16
 80055e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ec:	1c59      	adds	r1, r3, #1
 80055ee:	9103      	str	r1, [sp, #12]
 80055f0:	701a      	strb	r2, [r3, #0]
 80055f2:	e7f0      	b.n	80055d6 <__cvt+0xa6>

080055f4 <__exponent>:
 80055f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055f6:	4603      	mov	r3, r0
 80055f8:	2900      	cmp	r1, #0
 80055fa:	bfb8      	it	lt
 80055fc:	4249      	neglt	r1, r1
 80055fe:	f803 2b02 	strb.w	r2, [r3], #2
 8005602:	bfb4      	ite	lt
 8005604:	222d      	movlt	r2, #45	; 0x2d
 8005606:	222b      	movge	r2, #43	; 0x2b
 8005608:	2909      	cmp	r1, #9
 800560a:	7042      	strb	r2, [r0, #1]
 800560c:	dd2a      	ble.n	8005664 <__exponent+0x70>
 800560e:	f10d 0407 	add.w	r4, sp, #7
 8005612:	46a4      	mov	ip, r4
 8005614:	270a      	movs	r7, #10
 8005616:	46a6      	mov	lr, r4
 8005618:	460a      	mov	r2, r1
 800561a:	fb91 f6f7 	sdiv	r6, r1, r7
 800561e:	fb07 1516 	mls	r5, r7, r6, r1
 8005622:	3530      	adds	r5, #48	; 0x30
 8005624:	2a63      	cmp	r2, #99	; 0x63
 8005626:	f104 34ff 	add.w	r4, r4, #4294967295
 800562a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800562e:	4631      	mov	r1, r6
 8005630:	dcf1      	bgt.n	8005616 <__exponent+0x22>
 8005632:	3130      	adds	r1, #48	; 0x30
 8005634:	f1ae 0502 	sub.w	r5, lr, #2
 8005638:	f804 1c01 	strb.w	r1, [r4, #-1]
 800563c:	1c44      	adds	r4, r0, #1
 800563e:	4629      	mov	r1, r5
 8005640:	4561      	cmp	r1, ip
 8005642:	d30a      	bcc.n	800565a <__exponent+0x66>
 8005644:	f10d 0209 	add.w	r2, sp, #9
 8005648:	eba2 020e 	sub.w	r2, r2, lr
 800564c:	4565      	cmp	r5, ip
 800564e:	bf88      	it	hi
 8005650:	2200      	movhi	r2, #0
 8005652:	4413      	add	r3, r2
 8005654:	1a18      	subs	r0, r3, r0
 8005656:	b003      	add	sp, #12
 8005658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800565a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800565e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005662:	e7ed      	b.n	8005640 <__exponent+0x4c>
 8005664:	2330      	movs	r3, #48	; 0x30
 8005666:	3130      	adds	r1, #48	; 0x30
 8005668:	7083      	strb	r3, [r0, #2]
 800566a:	70c1      	strb	r1, [r0, #3]
 800566c:	1d03      	adds	r3, r0, #4
 800566e:	e7f1      	b.n	8005654 <__exponent+0x60>

08005670 <_printf_float>:
 8005670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005674:	ed2d 8b02 	vpush	{d8}
 8005678:	b08d      	sub	sp, #52	; 0x34
 800567a:	460c      	mov	r4, r1
 800567c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005680:	4616      	mov	r6, r2
 8005682:	461f      	mov	r7, r3
 8005684:	4605      	mov	r5, r0
 8005686:	f001 fcc5 	bl	8007014 <_localeconv_r>
 800568a:	f8d0 a000 	ldr.w	sl, [r0]
 800568e:	4650      	mov	r0, sl
 8005690:	f7fa fdbe 	bl	8000210 <strlen>
 8005694:	2300      	movs	r3, #0
 8005696:	930a      	str	r3, [sp, #40]	; 0x28
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	9305      	str	r3, [sp, #20]
 800569c:	f8d8 3000 	ldr.w	r3, [r8]
 80056a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80056a4:	3307      	adds	r3, #7
 80056a6:	f023 0307 	bic.w	r3, r3, #7
 80056aa:	f103 0208 	add.w	r2, r3, #8
 80056ae:	f8c8 2000 	str.w	r2, [r8]
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80056ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80056be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80056c2:	9307      	str	r3, [sp, #28]
 80056c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80056c8:	ee08 0a10 	vmov	s16, r0
 80056cc:	4b9f      	ldr	r3, [pc, #636]	; (800594c <_printf_float+0x2dc>)
 80056ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056d2:	f04f 32ff 	mov.w	r2, #4294967295
 80056d6:	f7fb fa49 	bl	8000b6c <__aeabi_dcmpun>
 80056da:	bb88      	cbnz	r0, 8005740 <_printf_float+0xd0>
 80056dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056e0:	4b9a      	ldr	r3, [pc, #616]	; (800594c <_printf_float+0x2dc>)
 80056e2:	f04f 32ff 	mov.w	r2, #4294967295
 80056e6:	f7fb fa23 	bl	8000b30 <__aeabi_dcmple>
 80056ea:	bb48      	cbnz	r0, 8005740 <_printf_float+0xd0>
 80056ec:	2200      	movs	r2, #0
 80056ee:	2300      	movs	r3, #0
 80056f0:	4640      	mov	r0, r8
 80056f2:	4649      	mov	r1, r9
 80056f4:	f7fb fa12 	bl	8000b1c <__aeabi_dcmplt>
 80056f8:	b110      	cbz	r0, 8005700 <_printf_float+0x90>
 80056fa:	232d      	movs	r3, #45	; 0x2d
 80056fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005700:	4b93      	ldr	r3, [pc, #588]	; (8005950 <_printf_float+0x2e0>)
 8005702:	4894      	ldr	r0, [pc, #592]	; (8005954 <_printf_float+0x2e4>)
 8005704:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005708:	bf94      	ite	ls
 800570a:	4698      	movls	r8, r3
 800570c:	4680      	movhi	r8, r0
 800570e:	2303      	movs	r3, #3
 8005710:	6123      	str	r3, [r4, #16]
 8005712:	9b05      	ldr	r3, [sp, #20]
 8005714:	f023 0204 	bic.w	r2, r3, #4
 8005718:	6022      	str	r2, [r4, #0]
 800571a:	f04f 0900 	mov.w	r9, #0
 800571e:	9700      	str	r7, [sp, #0]
 8005720:	4633      	mov	r3, r6
 8005722:	aa0b      	add	r2, sp, #44	; 0x2c
 8005724:	4621      	mov	r1, r4
 8005726:	4628      	mov	r0, r5
 8005728:	f000 f9d8 	bl	8005adc <_printf_common>
 800572c:	3001      	adds	r0, #1
 800572e:	f040 8090 	bne.w	8005852 <_printf_float+0x1e2>
 8005732:	f04f 30ff 	mov.w	r0, #4294967295
 8005736:	b00d      	add	sp, #52	; 0x34
 8005738:	ecbd 8b02 	vpop	{d8}
 800573c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005740:	4642      	mov	r2, r8
 8005742:	464b      	mov	r3, r9
 8005744:	4640      	mov	r0, r8
 8005746:	4649      	mov	r1, r9
 8005748:	f7fb fa10 	bl	8000b6c <__aeabi_dcmpun>
 800574c:	b140      	cbz	r0, 8005760 <_printf_float+0xf0>
 800574e:	464b      	mov	r3, r9
 8005750:	2b00      	cmp	r3, #0
 8005752:	bfbc      	itt	lt
 8005754:	232d      	movlt	r3, #45	; 0x2d
 8005756:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800575a:	487f      	ldr	r0, [pc, #508]	; (8005958 <_printf_float+0x2e8>)
 800575c:	4b7f      	ldr	r3, [pc, #508]	; (800595c <_printf_float+0x2ec>)
 800575e:	e7d1      	b.n	8005704 <_printf_float+0x94>
 8005760:	6863      	ldr	r3, [r4, #4]
 8005762:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005766:	9206      	str	r2, [sp, #24]
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	d13f      	bne.n	80057ec <_printf_float+0x17c>
 800576c:	2306      	movs	r3, #6
 800576e:	6063      	str	r3, [r4, #4]
 8005770:	9b05      	ldr	r3, [sp, #20]
 8005772:	6861      	ldr	r1, [r4, #4]
 8005774:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005778:	2300      	movs	r3, #0
 800577a:	9303      	str	r3, [sp, #12]
 800577c:	ab0a      	add	r3, sp, #40	; 0x28
 800577e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005782:	ab09      	add	r3, sp, #36	; 0x24
 8005784:	ec49 8b10 	vmov	d0, r8, r9
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	6022      	str	r2, [r4, #0]
 800578c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005790:	4628      	mov	r0, r5
 8005792:	f7ff fecd 	bl	8005530 <__cvt>
 8005796:	9b06      	ldr	r3, [sp, #24]
 8005798:	9909      	ldr	r1, [sp, #36]	; 0x24
 800579a:	2b47      	cmp	r3, #71	; 0x47
 800579c:	4680      	mov	r8, r0
 800579e:	d108      	bne.n	80057b2 <_printf_float+0x142>
 80057a0:	1cc8      	adds	r0, r1, #3
 80057a2:	db02      	blt.n	80057aa <_printf_float+0x13a>
 80057a4:	6863      	ldr	r3, [r4, #4]
 80057a6:	4299      	cmp	r1, r3
 80057a8:	dd41      	ble.n	800582e <_printf_float+0x1be>
 80057aa:	f1ab 0b02 	sub.w	fp, fp, #2
 80057ae:	fa5f fb8b 	uxtb.w	fp, fp
 80057b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80057b6:	d820      	bhi.n	80057fa <_printf_float+0x18a>
 80057b8:	3901      	subs	r1, #1
 80057ba:	465a      	mov	r2, fp
 80057bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80057c0:	9109      	str	r1, [sp, #36]	; 0x24
 80057c2:	f7ff ff17 	bl	80055f4 <__exponent>
 80057c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057c8:	1813      	adds	r3, r2, r0
 80057ca:	2a01      	cmp	r2, #1
 80057cc:	4681      	mov	r9, r0
 80057ce:	6123      	str	r3, [r4, #16]
 80057d0:	dc02      	bgt.n	80057d8 <_printf_float+0x168>
 80057d2:	6822      	ldr	r2, [r4, #0]
 80057d4:	07d2      	lsls	r2, r2, #31
 80057d6:	d501      	bpl.n	80057dc <_printf_float+0x16c>
 80057d8:	3301      	adds	r3, #1
 80057da:	6123      	str	r3, [r4, #16]
 80057dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d09c      	beq.n	800571e <_printf_float+0xae>
 80057e4:	232d      	movs	r3, #45	; 0x2d
 80057e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057ea:	e798      	b.n	800571e <_printf_float+0xae>
 80057ec:	9a06      	ldr	r2, [sp, #24]
 80057ee:	2a47      	cmp	r2, #71	; 0x47
 80057f0:	d1be      	bne.n	8005770 <_printf_float+0x100>
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1bc      	bne.n	8005770 <_printf_float+0x100>
 80057f6:	2301      	movs	r3, #1
 80057f8:	e7b9      	b.n	800576e <_printf_float+0xfe>
 80057fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80057fe:	d118      	bne.n	8005832 <_printf_float+0x1c2>
 8005800:	2900      	cmp	r1, #0
 8005802:	6863      	ldr	r3, [r4, #4]
 8005804:	dd0b      	ble.n	800581e <_printf_float+0x1ae>
 8005806:	6121      	str	r1, [r4, #16]
 8005808:	b913      	cbnz	r3, 8005810 <_printf_float+0x1a0>
 800580a:	6822      	ldr	r2, [r4, #0]
 800580c:	07d0      	lsls	r0, r2, #31
 800580e:	d502      	bpl.n	8005816 <_printf_float+0x1a6>
 8005810:	3301      	adds	r3, #1
 8005812:	440b      	add	r3, r1
 8005814:	6123      	str	r3, [r4, #16]
 8005816:	65a1      	str	r1, [r4, #88]	; 0x58
 8005818:	f04f 0900 	mov.w	r9, #0
 800581c:	e7de      	b.n	80057dc <_printf_float+0x16c>
 800581e:	b913      	cbnz	r3, 8005826 <_printf_float+0x1b6>
 8005820:	6822      	ldr	r2, [r4, #0]
 8005822:	07d2      	lsls	r2, r2, #31
 8005824:	d501      	bpl.n	800582a <_printf_float+0x1ba>
 8005826:	3302      	adds	r3, #2
 8005828:	e7f4      	b.n	8005814 <_printf_float+0x1a4>
 800582a:	2301      	movs	r3, #1
 800582c:	e7f2      	b.n	8005814 <_printf_float+0x1a4>
 800582e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005834:	4299      	cmp	r1, r3
 8005836:	db05      	blt.n	8005844 <_printf_float+0x1d4>
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	6121      	str	r1, [r4, #16]
 800583c:	07d8      	lsls	r0, r3, #31
 800583e:	d5ea      	bpl.n	8005816 <_printf_float+0x1a6>
 8005840:	1c4b      	adds	r3, r1, #1
 8005842:	e7e7      	b.n	8005814 <_printf_float+0x1a4>
 8005844:	2900      	cmp	r1, #0
 8005846:	bfd4      	ite	le
 8005848:	f1c1 0202 	rsble	r2, r1, #2
 800584c:	2201      	movgt	r2, #1
 800584e:	4413      	add	r3, r2
 8005850:	e7e0      	b.n	8005814 <_printf_float+0x1a4>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	055a      	lsls	r2, r3, #21
 8005856:	d407      	bmi.n	8005868 <_printf_float+0x1f8>
 8005858:	6923      	ldr	r3, [r4, #16]
 800585a:	4642      	mov	r2, r8
 800585c:	4631      	mov	r1, r6
 800585e:	4628      	mov	r0, r5
 8005860:	47b8      	blx	r7
 8005862:	3001      	adds	r0, #1
 8005864:	d12c      	bne.n	80058c0 <_printf_float+0x250>
 8005866:	e764      	b.n	8005732 <_printf_float+0xc2>
 8005868:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800586c:	f240 80e0 	bls.w	8005a30 <_printf_float+0x3c0>
 8005870:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005874:	2200      	movs	r2, #0
 8005876:	2300      	movs	r3, #0
 8005878:	f7fb f946 	bl	8000b08 <__aeabi_dcmpeq>
 800587c:	2800      	cmp	r0, #0
 800587e:	d034      	beq.n	80058ea <_printf_float+0x27a>
 8005880:	4a37      	ldr	r2, [pc, #220]	; (8005960 <_printf_float+0x2f0>)
 8005882:	2301      	movs	r3, #1
 8005884:	4631      	mov	r1, r6
 8005886:	4628      	mov	r0, r5
 8005888:	47b8      	blx	r7
 800588a:	3001      	adds	r0, #1
 800588c:	f43f af51 	beq.w	8005732 <_printf_float+0xc2>
 8005890:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005894:	429a      	cmp	r2, r3
 8005896:	db02      	blt.n	800589e <_printf_float+0x22e>
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	07d8      	lsls	r0, r3, #31
 800589c:	d510      	bpl.n	80058c0 <_printf_float+0x250>
 800589e:	ee18 3a10 	vmov	r3, s16
 80058a2:	4652      	mov	r2, sl
 80058a4:	4631      	mov	r1, r6
 80058a6:	4628      	mov	r0, r5
 80058a8:	47b8      	blx	r7
 80058aa:	3001      	adds	r0, #1
 80058ac:	f43f af41 	beq.w	8005732 <_printf_float+0xc2>
 80058b0:	f04f 0800 	mov.w	r8, #0
 80058b4:	f104 091a 	add.w	r9, r4, #26
 80058b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ba:	3b01      	subs	r3, #1
 80058bc:	4543      	cmp	r3, r8
 80058be:	dc09      	bgt.n	80058d4 <_printf_float+0x264>
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	079b      	lsls	r3, r3, #30
 80058c4:	f100 8105 	bmi.w	8005ad2 <_printf_float+0x462>
 80058c8:	68e0      	ldr	r0, [r4, #12]
 80058ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058cc:	4298      	cmp	r0, r3
 80058ce:	bfb8      	it	lt
 80058d0:	4618      	movlt	r0, r3
 80058d2:	e730      	b.n	8005736 <_printf_float+0xc6>
 80058d4:	2301      	movs	r3, #1
 80058d6:	464a      	mov	r2, r9
 80058d8:	4631      	mov	r1, r6
 80058da:	4628      	mov	r0, r5
 80058dc:	47b8      	blx	r7
 80058de:	3001      	adds	r0, #1
 80058e0:	f43f af27 	beq.w	8005732 <_printf_float+0xc2>
 80058e4:	f108 0801 	add.w	r8, r8, #1
 80058e8:	e7e6      	b.n	80058b8 <_printf_float+0x248>
 80058ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	dc39      	bgt.n	8005964 <_printf_float+0x2f4>
 80058f0:	4a1b      	ldr	r2, [pc, #108]	; (8005960 <_printf_float+0x2f0>)
 80058f2:	2301      	movs	r3, #1
 80058f4:	4631      	mov	r1, r6
 80058f6:	4628      	mov	r0, r5
 80058f8:	47b8      	blx	r7
 80058fa:	3001      	adds	r0, #1
 80058fc:	f43f af19 	beq.w	8005732 <_printf_float+0xc2>
 8005900:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005904:	4313      	orrs	r3, r2
 8005906:	d102      	bne.n	800590e <_printf_float+0x29e>
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	07d9      	lsls	r1, r3, #31
 800590c:	d5d8      	bpl.n	80058c0 <_printf_float+0x250>
 800590e:	ee18 3a10 	vmov	r3, s16
 8005912:	4652      	mov	r2, sl
 8005914:	4631      	mov	r1, r6
 8005916:	4628      	mov	r0, r5
 8005918:	47b8      	blx	r7
 800591a:	3001      	adds	r0, #1
 800591c:	f43f af09 	beq.w	8005732 <_printf_float+0xc2>
 8005920:	f04f 0900 	mov.w	r9, #0
 8005924:	f104 0a1a 	add.w	sl, r4, #26
 8005928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800592a:	425b      	negs	r3, r3
 800592c:	454b      	cmp	r3, r9
 800592e:	dc01      	bgt.n	8005934 <_printf_float+0x2c4>
 8005930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005932:	e792      	b.n	800585a <_printf_float+0x1ea>
 8005934:	2301      	movs	r3, #1
 8005936:	4652      	mov	r2, sl
 8005938:	4631      	mov	r1, r6
 800593a:	4628      	mov	r0, r5
 800593c:	47b8      	blx	r7
 800593e:	3001      	adds	r0, #1
 8005940:	f43f aef7 	beq.w	8005732 <_printf_float+0xc2>
 8005944:	f109 0901 	add.w	r9, r9, #1
 8005948:	e7ee      	b.n	8005928 <_printf_float+0x2b8>
 800594a:	bf00      	nop
 800594c:	7fefffff 	.word	0x7fefffff
 8005950:	08007ad9 	.word	0x08007ad9
 8005954:	08007add 	.word	0x08007add
 8005958:	08007ae5 	.word	0x08007ae5
 800595c:	08007ae1 	.word	0x08007ae1
 8005960:	08007ae9 	.word	0x08007ae9
 8005964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005966:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005968:	429a      	cmp	r2, r3
 800596a:	bfa8      	it	ge
 800596c:	461a      	movge	r2, r3
 800596e:	2a00      	cmp	r2, #0
 8005970:	4691      	mov	r9, r2
 8005972:	dc37      	bgt.n	80059e4 <_printf_float+0x374>
 8005974:	f04f 0b00 	mov.w	fp, #0
 8005978:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800597c:	f104 021a 	add.w	r2, r4, #26
 8005980:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005982:	9305      	str	r3, [sp, #20]
 8005984:	eba3 0309 	sub.w	r3, r3, r9
 8005988:	455b      	cmp	r3, fp
 800598a:	dc33      	bgt.n	80059f4 <_printf_float+0x384>
 800598c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005990:	429a      	cmp	r2, r3
 8005992:	db3b      	blt.n	8005a0c <_printf_float+0x39c>
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	07da      	lsls	r2, r3, #31
 8005998:	d438      	bmi.n	8005a0c <_printf_float+0x39c>
 800599a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800599c:	9a05      	ldr	r2, [sp, #20]
 800599e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059a0:	1a9a      	subs	r2, r3, r2
 80059a2:	eba3 0901 	sub.w	r9, r3, r1
 80059a6:	4591      	cmp	r9, r2
 80059a8:	bfa8      	it	ge
 80059aa:	4691      	movge	r9, r2
 80059ac:	f1b9 0f00 	cmp.w	r9, #0
 80059b0:	dc35      	bgt.n	8005a1e <_printf_float+0x3ae>
 80059b2:	f04f 0800 	mov.w	r8, #0
 80059b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059ba:	f104 0a1a 	add.w	sl, r4, #26
 80059be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059c2:	1a9b      	subs	r3, r3, r2
 80059c4:	eba3 0309 	sub.w	r3, r3, r9
 80059c8:	4543      	cmp	r3, r8
 80059ca:	f77f af79 	ble.w	80058c0 <_printf_float+0x250>
 80059ce:	2301      	movs	r3, #1
 80059d0:	4652      	mov	r2, sl
 80059d2:	4631      	mov	r1, r6
 80059d4:	4628      	mov	r0, r5
 80059d6:	47b8      	blx	r7
 80059d8:	3001      	adds	r0, #1
 80059da:	f43f aeaa 	beq.w	8005732 <_printf_float+0xc2>
 80059de:	f108 0801 	add.w	r8, r8, #1
 80059e2:	e7ec      	b.n	80059be <_printf_float+0x34e>
 80059e4:	4613      	mov	r3, r2
 80059e6:	4631      	mov	r1, r6
 80059e8:	4642      	mov	r2, r8
 80059ea:	4628      	mov	r0, r5
 80059ec:	47b8      	blx	r7
 80059ee:	3001      	adds	r0, #1
 80059f0:	d1c0      	bne.n	8005974 <_printf_float+0x304>
 80059f2:	e69e      	b.n	8005732 <_printf_float+0xc2>
 80059f4:	2301      	movs	r3, #1
 80059f6:	4631      	mov	r1, r6
 80059f8:	4628      	mov	r0, r5
 80059fa:	9205      	str	r2, [sp, #20]
 80059fc:	47b8      	blx	r7
 80059fe:	3001      	adds	r0, #1
 8005a00:	f43f ae97 	beq.w	8005732 <_printf_float+0xc2>
 8005a04:	9a05      	ldr	r2, [sp, #20]
 8005a06:	f10b 0b01 	add.w	fp, fp, #1
 8005a0a:	e7b9      	b.n	8005980 <_printf_float+0x310>
 8005a0c:	ee18 3a10 	vmov	r3, s16
 8005a10:	4652      	mov	r2, sl
 8005a12:	4631      	mov	r1, r6
 8005a14:	4628      	mov	r0, r5
 8005a16:	47b8      	blx	r7
 8005a18:	3001      	adds	r0, #1
 8005a1a:	d1be      	bne.n	800599a <_printf_float+0x32a>
 8005a1c:	e689      	b.n	8005732 <_printf_float+0xc2>
 8005a1e:	9a05      	ldr	r2, [sp, #20]
 8005a20:	464b      	mov	r3, r9
 8005a22:	4442      	add	r2, r8
 8005a24:	4631      	mov	r1, r6
 8005a26:	4628      	mov	r0, r5
 8005a28:	47b8      	blx	r7
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	d1c1      	bne.n	80059b2 <_printf_float+0x342>
 8005a2e:	e680      	b.n	8005732 <_printf_float+0xc2>
 8005a30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a32:	2a01      	cmp	r2, #1
 8005a34:	dc01      	bgt.n	8005a3a <_printf_float+0x3ca>
 8005a36:	07db      	lsls	r3, r3, #31
 8005a38:	d538      	bpl.n	8005aac <_printf_float+0x43c>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	4642      	mov	r2, r8
 8005a3e:	4631      	mov	r1, r6
 8005a40:	4628      	mov	r0, r5
 8005a42:	47b8      	blx	r7
 8005a44:	3001      	adds	r0, #1
 8005a46:	f43f ae74 	beq.w	8005732 <_printf_float+0xc2>
 8005a4a:	ee18 3a10 	vmov	r3, s16
 8005a4e:	4652      	mov	r2, sl
 8005a50:	4631      	mov	r1, r6
 8005a52:	4628      	mov	r0, r5
 8005a54:	47b8      	blx	r7
 8005a56:	3001      	adds	r0, #1
 8005a58:	f43f ae6b 	beq.w	8005732 <_printf_float+0xc2>
 8005a5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a60:	2200      	movs	r2, #0
 8005a62:	2300      	movs	r3, #0
 8005a64:	f7fb f850 	bl	8000b08 <__aeabi_dcmpeq>
 8005a68:	b9d8      	cbnz	r0, 8005aa2 <_printf_float+0x432>
 8005a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a6c:	f108 0201 	add.w	r2, r8, #1
 8005a70:	3b01      	subs	r3, #1
 8005a72:	4631      	mov	r1, r6
 8005a74:	4628      	mov	r0, r5
 8005a76:	47b8      	blx	r7
 8005a78:	3001      	adds	r0, #1
 8005a7a:	d10e      	bne.n	8005a9a <_printf_float+0x42a>
 8005a7c:	e659      	b.n	8005732 <_printf_float+0xc2>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	4652      	mov	r2, sl
 8005a82:	4631      	mov	r1, r6
 8005a84:	4628      	mov	r0, r5
 8005a86:	47b8      	blx	r7
 8005a88:	3001      	adds	r0, #1
 8005a8a:	f43f ae52 	beq.w	8005732 <_printf_float+0xc2>
 8005a8e:	f108 0801 	add.w	r8, r8, #1
 8005a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a94:	3b01      	subs	r3, #1
 8005a96:	4543      	cmp	r3, r8
 8005a98:	dcf1      	bgt.n	8005a7e <_printf_float+0x40e>
 8005a9a:	464b      	mov	r3, r9
 8005a9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005aa0:	e6dc      	b.n	800585c <_printf_float+0x1ec>
 8005aa2:	f04f 0800 	mov.w	r8, #0
 8005aa6:	f104 0a1a 	add.w	sl, r4, #26
 8005aaa:	e7f2      	b.n	8005a92 <_printf_float+0x422>
 8005aac:	2301      	movs	r3, #1
 8005aae:	4642      	mov	r2, r8
 8005ab0:	e7df      	b.n	8005a72 <_printf_float+0x402>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	464a      	mov	r2, r9
 8005ab6:	4631      	mov	r1, r6
 8005ab8:	4628      	mov	r0, r5
 8005aba:	47b8      	blx	r7
 8005abc:	3001      	adds	r0, #1
 8005abe:	f43f ae38 	beq.w	8005732 <_printf_float+0xc2>
 8005ac2:	f108 0801 	add.w	r8, r8, #1
 8005ac6:	68e3      	ldr	r3, [r4, #12]
 8005ac8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005aca:	1a5b      	subs	r3, r3, r1
 8005acc:	4543      	cmp	r3, r8
 8005ace:	dcf0      	bgt.n	8005ab2 <_printf_float+0x442>
 8005ad0:	e6fa      	b.n	80058c8 <_printf_float+0x258>
 8005ad2:	f04f 0800 	mov.w	r8, #0
 8005ad6:	f104 0919 	add.w	r9, r4, #25
 8005ada:	e7f4      	b.n	8005ac6 <_printf_float+0x456>

08005adc <_printf_common>:
 8005adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae0:	4616      	mov	r6, r2
 8005ae2:	4699      	mov	r9, r3
 8005ae4:	688a      	ldr	r2, [r1, #8]
 8005ae6:	690b      	ldr	r3, [r1, #16]
 8005ae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005aec:	4293      	cmp	r3, r2
 8005aee:	bfb8      	it	lt
 8005af0:	4613      	movlt	r3, r2
 8005af2:	6033      	str	r3, [r6, #0]
 8005af4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005af8:	4607      	mov	r7, r0
 8005afa:	460c      	mov	r4, r1
 8005afc:	b10a      	cbz	r2, 8005b02 <_printf_common+0x26>
 8005afe:	3301      	adds	r3, #1
 8005b00:	6033      	str	r3, [r6, #0]
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	0699      	lsls	r1, r3, #26
 8005b06:	bf42      	ittt	mi
 8005b08:	6833      	ldrmi	r3, [r6, #0]
 8005b0a:	3302      	addmi	r3, #2
 8005b0c:	6033      	strmi	r3, [r6, #0]
 8005b0e:	6825      	ldr	r5, [r4, #0]
 8005b10:	f015 0506 	ands.w	r5, r5, #6
 8005b14:	d106      	bne.n	8005b24 <_printf_common+0x48>
 8005b16:	f104 0a19 	add.w	sl, r4, #25
 8005b1a:	68e3      	ldr	r3, [r4, #12]
 8005b1c:	6832      	ldr	r2, [r6, #0]
 8005b1e:	1a9b      	subs	r3, r3, r2
 8005b20:	42ab      	cmp	r3, r5
 8005b22:	dc26      	bgt.n	8005b72 <_printf_common+0x96>
 8005b24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b28:	1e13      	subs	r3, r2, #0
 8005b2a:	6822      	ldr	r2, [r4, #0]
 8005b2c:	bf18      	it	ne
 8005b2e:	2301      	movne	r3, #1
 8005b30:	0692      	lsls	r2, r2, #26
 8005b32:	d42b      	bmi.n	8005b8c <_printf_common+0xb0>
 8005b34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b38:	4649      	mov	r1, r9
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	47c0      	blx	r8
 8005b3e:	3001      	adds	r0, #1
 8005b40:	d01e      	beq.n	8005b80 <_printf_common+0xa4>
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	68e5      	ldr	r5, [r4, #12]
 8005b46:	6832      	ldr	r2, [r6, #0]
 8005b48:	f003 0306 	and.w	r3, r3, #6
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	bf08      	it	eq
 8005b50:	1aad      	subeq	r5, r5, r2
 8005b52:	68a3      	ldr	r3, [r4, #8]
 8005b54:	6922      	ldr	r2, [r4, #16]
 8005b56:	bf0c      	ite	eq
 8005b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b5c:	2500      	movne	r5, #0
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	bfc4      	itt	gt
 8005b62:	1a9b      	subgt	r3, r3, r2
 8005b64:	18ed      	addgt	r5, r5, r3
 8005b66:	2600      	movs	r6, #0
 8005b68:	341a      	adds	r4, #26
 8005b6a:	42b5      	cmp	r5, r6
 8005b6c:	d11a      	bne.n	8005ba4 <_printf_common+0xc8>
 8005b6e:	2000      	movs	r0, #0
 8005b70:	e008      	b.n	8005b84 <_printf_common+0xa8>
 8005b72:	2301      	movs	r3, #1
 8005b74:	4652      	mov	r2, sl
 8005b76:	4649      	mov	r1, r9
 8005b78:	4638      	mov	r0, r7
 8005b7a:	47c0      	blx	r8
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d103      	bne.n	8005b88 <_printf_common+0xac>
 8005b80:	f04f 30ff 	mov.w	r0, #4294967295
 8005b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b88:	3501      	adds	r5, #1
 8005b8a:	e7c6      	b.n	8005b1a <_printf_common+0x3e>
 8005b8c:	18e1      	adds	r1, r4, r3
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	2030      	movs	r0, #48	; 0x30
 8005b92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b96:	4422      	add	r2, r4
 8005b98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ba0:	3302      	adds	r3, #2
 8005ba2:	e7c7      	b.n	8005b34 <_printf_common+0x58>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	4622      	mov	r2, r4
 8005ba8:	4649      	mov	r1, r9
 8005baa:	4638      	mov	r0, r7
 8005bac:	47c0      	blx	r8
 8005bae:	3001      	adds	r0, #1
 8005bb0:	d0e6      	beq.n	8005b80 <_printf_common+0xa4>
 8005bb2:	3601      	adds	r6, #1
 8005bb4:	e7d9      	b.n	8005b6a <_printf_common+0x8e>
	...

08005bb8 <_printf_i>:
 8005bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bbc:	7e0f      	ldrb	r7, [r1, #24]
 8005bbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bc0:	2f78      	cmp	r7, #120	; 0x78
 8005bc2:	4691      	mov	r9, r2
 8005bc4:	4680      	mov	r8, r0
 8005bc6:	460c      	mov	r4, r1
 8005bc8:	469a      	mov	sl, r3
 8005bca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005bce:	d807      	bhi.n	8005be0 <_printf_i+0x28>
 8005bd0:	2f62      	cmp	r7, #98	; 0x62
 8005bd2:	d80a      	bhi.n	8005bea <_printf_i+0x32>
 8005bd4:	2f00      	cmp	r7, #0
 8005bd6:	f000 80d8 	beq.w	8005d8a <_printf_i+0x1d2>
 8005bda:	2f58      	cmp	r7, #88	; 0x58
 8005bdc:	f000 80a3 	beq.w	8005d26 <_printf_i+0x16e>
 8005be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005be4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005be8:	e03a      	b.n	8005c60 <_printf_i+0xa8>
 8005bea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bee:	2b15      	cmp	r3, #21
 8005bf0:	d8f6      	bhi.n	8005be0 <_printf_i+0x28>
 8005bf2:	a101      	add	r1, pc, #4	; (adr r1, 8005bf8 <_printf_i+0x40>)
 8005bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bf8:	08005c51 	.word	0x08005c51
 8005bfc:	08005c65 	.word	0x08005c65
 8005c00:	08005be1 	.word	0x08005be1
 8005c04:	08005be1 	.word	0x08005be1
 8005c08:	08005be1 	.word	0x08005be1
 8005c0c:	08005be1 	.word	0x08005be1
 8005c10:	08005c65 	.word	0x08005c65
 8005c14:	08005be1 	.word	0x08005be1
 8005c18:	08005be1 	.word	0x08005be1
 8005c1c:	08005be1 	.word	0x08005be1
 8005c20:	08005be1 	.word	0x08005be1
 8005c24:	08005d71 	.word	0x08005d71
 8005c28:	08005c95 	.word	0x08005c95
 8005c2c:	08005d53 	.word	0x08005d53
 8005c30:	08005be1 	.word	0x08005be1
 8005c34:	08005be1 	.word	0x08005be1
 8005c38:	08005d93 	.word	0x08005d93
 8005c3c:	08005be1 	.word	0x08005be1
 8005c40:	08005c95 	.word	0x08005c95
 8005c44:	08005be1 	.word	0x08005be1
 8005c48:	08005be1 	.word	0x08005be1
 8005c4c:	08005d5b 	.word	0x08005d5b
 8005c50:	682b      	ldr	r3, [r5, #0]
 8005c52:	1d1a      	adds	r2, r3, #4
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	602a      	str	r2, [r5, #0]
 8005c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c60:	2301      	movs	r3, #1
 8005c62:	e0a3      	b.n	8005dac <_printf_i+0x1f4>
 8005c64:	6820      	ldr	r0, [r4, #0]
 8005c66:	6829      	ldr	r1, [r5, #0]
 8005c68:	0606      	lsls	r6, r0, #24
 8005c6a:	f101 0304 	add.w	r3, r1, #4
 8005c6e:	d50a      	bpl.n	8005c86 <_printf_i+0xce>
 8005c70:	680e      	ldr	r6, [r1, #0]
 8005c72:	602b      	str	r3, [r5, #0]
 8005c74:	2e00      	cmp	r6, #0
 8005c76:	da03      	bge.n	8005c80 <_printf_i+0xc8>
 8005c78:	232d      	movs	r3, #45	; 0x2d
 8005c7a:	4276      	negs	r6, r6
 8005c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c80:	485e      	ldr	r0, [pc, #376]	; (8005dfc <_printf_i+0x244>)
 8005c82:	230a      	movs	r3, #10
 8005c84:	e019      	b.n	8005cba <_printf_i+0x102>
 8005c86:	680e      	ldr	r6, [r1, #0]
 8005c88:	602b      	str	r3, [r5, #0]
 8005c8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c8e:	bf18      	it	ne
 8005c90:	b236      	sxthne	r6, r6
 8005c92:	e7ef      	b.n	8005c74 <_printf_i+0xbc>
 8005c94:	682b      	ldr	r3, [r5, #0]
 8005c96:	6820      	ldr	r0, [r4, #0]
 8005c98:	1d19      	adds	r1, r3, #4
 8005c9a:	6029      	str	r1, [r5, #0]
 8005c9c:	0601      	lsls	r1, r0, #24
 8005c9e:	d501      	bpl.n	8005ca4 <_printf_i+0xec>
 8005ca0:	681e      	ldr	r6, [r3, #0]
 8005ca2:	e002      	b.n	8005caa <_printf_i+0xf2>
 8005ca4:	0646      	lsls	r6, r0, #25
 8005ca6:	d5fb      	bpl.n	8005ca0 <_printf_i+0xe8>
 8005ca8:	881e      	ldrh	r6, [r3, #0]
 8005caa:	4854      	ldr	r0, [pc, #336]	; (8005dfc <_printf_i+0x244>)
 8005cac:	2f6f      	cmp	r7, #111	; 0x6f
 8005cae:	bf0c      	ite	eq
 8005cb0:	2308      	moveq	r3, #8
 8005cb2:	230a      	movne	r3, #10
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cba:	6865      	ldr	r5, [r4, #4]
 8005cbc:	60a5      	str	r5, [r4, #8]
 8005cbe:	2d00      	cmp	r5, #0
 8005cc0:	bfa2      	ittt	ge
 8005cc2:	6821      	ldrge	r1, [r4, #0]
 8005cc4:	f021 0104 	bicge.w	r1, r1, #4
 8005cc8:	6021      	strge	r1, [r4, #0]
 8005cca:	b90e      	cbnz	r6, 8005cd0 <_printf_i+0x118>
 8005ccc:	2d00      	cmp	r5, #0
 8005cce:	d04d      	beq.n	8005d6c <_printf_i+0x1b4>
 8005cd0:	4615      	mov	r5, r2
 8005cd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cd6:	fb03 6711 	mls	r7, r3, r1, r6
 8005cda:	5dc7      	ldrb	r7, [r0, r7]
 8005cdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ce0:	4637      	mov	r7, r6
 8005ce2:	42bb      	cmp	r3, r7
 8005ce4:	460e      	mov	r6, r1
 8005ce6:	d9f4      	bls.n	8005cd2 <_printf_i+0x11a>
 8005ce8:	2b08      	cmp	r3, #8
 8005cea:	d10b      	bne.n	8005d04 <_printf_i+0x14c>
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	07de      	lsls	r6, r3, #31
 8005cf0:	d508      	bpl.n	8005d04 <_printf_i+0x14c>
 8005cf2:	6923      	ldr	r3, [r4, #16]
 8005cf4:	6861      	ldr	r1, [r4, #4]
 8005cf6:	4299      	cmp	r1, r3
 8005cf8:	bfde      	ittt	le
 8005cfa:	2330      	movle	r3, #48	; 0x30
 8005cfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d04:	1b52      	subs	r2, r2, r5
 8005d06:	6122      	str	r2, [r4, #16]
 8005d08:	f8cd a000 	str.w	sl, [sp]
 8005d0c:	464b      	mov	r3, r9
 8005d0e:	aa03      	add	r2, sp, #12
 8005d10:	4621      	mov	r1, r4
 8005d12:	4640      	mov	r0, r8
 8005d14:	f7ff fee2 	bl	8005adc <_printf_common>
 8005d18:	3001      	adds	r0, #1
 8005d1a:	d14c      	bne.n	8005db6 <_printf_i+0x1fe>
 8005d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d20:	b004      	add	sp, #16
 8005d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d26:	4835      	ldr	r0, [pc, #212]	; (8005dfc <_printf_i+0x244>)
 8005d28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d2c:	6829      	ldr	r1, [r5, #0]
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d34:	6029      	str	r1, [r5, #0]
 8005d36:	061d      	lsls	r5, r3, #24
 8005d38:	d514      	bpl.n	8005d64 <_printf_i+0x1ac>
 8005d3a:	07df      	lsls	r7, r3, #31
 8005d3c:	bf44      	itt	mi
 8005d3e:	f043 0320 	orrmi.w	r3, r3, #32
 8005d42:	6023      	strmi	r3, [r4, #0]
 8005d44:	b91e      	cbnz	r6, 8005d4e <_printf_i+0x196>
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	f023 0320 	bic.w	r3, r3, #32
 8005d4c:	6023      	str	r3, [r4, #0]
 8005d4e:	2310      	movs	r3, #16
 8005d50:	e7b0      	b.n	8005cb4 <_printf_i+0xfc>
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	f043 0320 	orr.w	r3, r3, #32
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	2378      	movs	r3, #120	; 0x78
 8005d5c:	4828      	ldr	r0, [pc, #160]	; (8005e00 <_printf_i+0x248>)
 8005d5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d62:	e7e3      	b.n	8005d2c <_printf_i+0x174>
 8005d64:	0659      	lsls	r1, r3, #25
 8005d66:	bf48      	it	mi
 8005d68:	b2b6      	uxthmi	r6, r6
 8005d6a:	e7e6      	b.n	8005d3a <_printf_i+0x182>
 8005d6c:	4615      	mov	r5, r2
 8005d6e:	e7bb      	b.n	8005ce8 <_printf_i+0x130>
 8005d70:	682b      	ldr	r3, [r5, #0]
 8005d72:	6826      	ldr	r6, [r4, #0]
 8005d74:	6961      	ldr	r1, [r4, #20]
 8005d76:	1d18      	adds	r0, r3, #4
 8005d78:	6028      	str	r0, [r5, #0]
 8005d7a:	0635      	lsls	r5, r6, #24
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	d501      	bpl.n	8005d84 <_printf_i+0x1cc>
 8005d80:	6019      	str	r1, [r3, #0]
 8005d82:	e002      	b.n	8005d8a <_printf_i+0x1d2>
 8005d84:	0670      	lsls	r0, r6, #25
 8005d86:	d5fb      	bpl.n	8005d80 <_printf_i+0x1c8>
 8005d88:	8019      	strh	r1, [r3, #0]
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	6123      	str	r3, [r4, #16]
 8005d8e:	4615      	mov	r5, r2
 8005d90:	e7ba      	b.n	8005d08 <_printf_i+0x150>
 8005d92:	682b      	ldr	r3, [r5, #0]
 8005d94:	1d1a      	adds	r2, r3, #4
 8005d96:	602a      	str	r2, [r5, #0]
 8005d98:	681d      	ldr	r5, [r3, #0]
 8005d9a:	6862      	ldr	r2, [r4, #4]
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f7fa fa3e 	bl	8000220 <memchr>
 8005da4:	b108      	cbz	r0, 8005daa <_printf_i+0x1f2>
 8005da6:	1b40      	subs	r0, r0, r5
 8005da8:	6060      	str	r0, [r4, #4]
 8005daa:	6863      	ldr	r3, [r4, #4]
 8005dac:	6123      	str	r3, [r4, #16]
 8005dae:	2300      	movs	r3, #0
 8005db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005db4:	e7a8      	b.n	8005d08 <_printf_i+0x150>
 8005db6:	6923      	ldr	r3, [r4, #16]
 8005db8:	462a      	mov	r2, r5
 8005dba:	4649      	mov	r1, r9
 8005dbc:	4640      	mov	r0, r8
 8005dbe:	47d0      	blx	sl
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	d0ab      	beq.n	8005d1c <_printf_i+0x164>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	079b      	lsls	r3, r3, #30
 8005dc8:	d413      	bmi.n	8005df2 <_printf_i+0x23a>
 8005dca:	68e0      	ldr	r0, [r4, #12]
 8005dcc:	9b03      	ldr	r3, [sp, #12]
 8005dce:	4298      	cmp	r0, r3
 8005dd0:	bfb8      	it	lt
 8005dd2:	4618      	movlt	r0, r3
 8005dd4:	e7a4      	b.n	8005d20 <_printf_i+0x168>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	4632      	mov	r2, r6
 8005dda:	4649      	mov	r1, r9
 8005ddc:	4640      	mov	r0, r8
 8005dde:	47d0      	blx	sl
 8005de0:	3001      	adds	r0, #1
 8005de2:	d09b      	beq.n	8005d1c <_printf_i+0x164>
 8005de4:	3501      	adds	r5, #1
 8005de6:	68e3      	ldr	r3, [r4, #12]
 8005de8:	9903      	ldr	r1, [sp, #12]
 8005dea:	1a5b      	subs	r3, r3, r1
 8005dec:	42ab      	cmp	r3, r5
 8005dee:	dcf2      	bgt.n	8005dd6 <_printf_i+0x21e>
 8005df0:	e7eb      	b.n	8005dca <_printf_i+0x212>
 8005df2:	2500      	movs	r5, #0
 8005df4:	f104 0619 	add.w	r6, r4, #25
 8005df8:	e7f5      	b.n	8005de6 <_printf_i+0x22e>
 8005dfa:	bf00      	nop
 8005dfc:	08007aeb 	.word	0x08007aeb
 8005e00:	08007afc 	.word	0x08007afc

08005e04 <_sbrk_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	4d06      	ldr	r5, [pc, #24]	; (8005e20 <_sbrk_r+0x1c>)
 8005e08:	2300      	movs	r3, #0
 8005e0a:	4604      	mov	r4, r0
 8005e0c:	4608      	mov	r0, r1
 8005e0e:	602b      	str	r3, [r5, #0]
 8005e10:	f7fb fbee 	bl	80015f0 <_sbrk>
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	d102      	bne.n	8005e1e <_sbrk_r+0x1a>
 8005e18:	682b      	ldr	r3, [r5, #0]
 8005e1a:	b103      	cbz	r3, 8005e1e <_sbrk_r+0x1a>
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	bd38      	pop	{r3, r4, r5, pc}
 8005e20:	20000370 	.word	0x20000370

08005e24 <__swbuf_r>:
 8005e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e26:	460e      	mov	r6, r1
 8005e28:	4614      	mov	r4, r2
 8005e2a:	4605      	mov	r5, r0
 8005e2c:	b118      	cbz	r0, 8005e36 <__swbuf_r+0x12>
 8005e2e:	6983      	ldr	r3, [r0, #24]
 8005e30:	b90b      	cbnz	r3, 8005e36 <__swbuf_r+0x12>
 8005e32:	f001 f851 	bl	8006ed8 <__sinit>
 8005e36:	4b21      	ldr	r3, [pc, #132]	; (8005ebc <__swbuf_r+0x98>)
 8005e38:	429c      	cmp	r4, r3
 8005e3a:	d12b      	bne.n	8005e94 <__swbuf_r+0x70>
 8005e3c:	686c      	ldr	r4, [r5, #4]
 8005e3e:	69a3      	ldr	r3, [r4, #24]
 8005e40:	60a3      	str	r3, [r4, #8]
 8005e42:	89a3      	ldrh	r3, [r4, #12]
 8005e44:	071a      	lsls	r2, r3, #28
 8005e46:	d52f      	bpl.n	8005ea8 <__swbuf_r+0x84>
 8005e48:	6923      	ldr	r3, [r4, #16]
 8005e4a:	b36b      	cbz	r3, 8005ea8 <__swbuf_r+0x84>
 8005e4c:	6923      	ldr	r3, [r4, #16]
 8005e4e:	6820      	ldr	r0, [r4, #0]
 8005e50:	1ac0      	subs	r0, r0, r3
 8005e52:	6963      	ldr	r3, [r4, #20]
 8005e54:	b2f6      	uxtb	r6, r6
 8005e56:	4283      	cmp	r3, r0
 8005e58:	4637      	mov	r7, r6
 8005e5a:	dc04      	bgt.n	8005e66 <__swbuf_r+0x42>
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	4628      	mov	r0, r5
 8005e60:	f000 ffa6 	bl	8006db0 <_fflush_r>
 8005e64:	bb30      	cbnz	r0, 8005eb4 <__swbuf_r+0x90>
 8005e66:	68a3      	ldr	r3, [r4, #8]
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	60a3      	str	r3, [r4, #8]
 8005e6c:	6823      	ldr	r3, [r4, #0]
 8005e6e:	1c5a      	adds	r2, r3, #1
 8005e70:	6022      	str	r2, [r4, #0]
 8005e72:	701e      	strb	r6, [r3, #0]
 8005e74:	6963      	ldr	r3, [r4, #20]
 8005e76:	3001      	adds	r0, #1
 8005e78:	4283      	cmp	r3, r0
 8005e7a:	d004      	beq.n	8005e86 <__swbuf_r+0x62>
 8005e7c:	89a3      	ldrh	r3, [r4, #12]
 8005e7e:	07db      	lsls	r3, r3, #31
 8005e80:	d506      	bpl.n	8005e90 <__swbuf_r+0x6c>
 8005e82:	2e0a      	cmp	r6, #10
 8005e84:	d104      	bne.n	8005e90 <__swbuf_r+0x6c>
 8005e86:	4621      	mov	r1, r4
 8005e88:	4628      	mov	r0, r5
 8005e8a:	f000 ff91 	bl	8006db0 <_fflush_r>
 8005e8e:	b988      	cbnz	r0, 8005eb4 <__swbuf_r+0x90>
 8005e90:	4638      	mov	r0, r7
 8005e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e94:	4b0a      	ldr	r3, [pc, #40]	; (8005ec0 <__swbuf_r+0x9c>)
 8005e96:	429c      	cmp	r4, r3
 8005e98:	d101      	bne.n	8005e9e <__swbuf_r+0x7a>
 8005e9a:	68ac      	ldr	r4, [r5, #8]
 8005e9c:	e7cf      	b.n	8005e3e <__swbuf_r+0x1a>
 8005e9e:	4b09      	ldr	r3, [pc, #36]	; (8005ec4 <__swbuf_r+0xa0>)
 8005ea0:	429c      	cmp	r4, r3
 8005ea2:	bf08      	it	eq
 8005ea4:	68ec      	ldreq	r4, [r5, #12]
 8005ea6:	e7ca      	b.n	8005e3e <__swbuf_r+0x1a>
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	4628      	mov	r0, r5
 8005eac:	f000 f80c 	bl	8005ec8 <__swsetup_r>
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	d0cb      	beq.n	8005e4c <__swbuf_r+0x28>
 8005eb4:	f04f 37ff 	mov.w	r7, #4294967295
 8005eb8:	e7ea      	b.n	8005e90 <__swbuf_r+0x6c>
 8005eba:	bf00      	nop
 8005ebc:	08007bc0 	.word	0x08007bc0
 8005ec0:	08007be0 	.word	0x08007be0
 8005ec4:	08007ba0 	.word	0x08007ba0

08005ec8 <__swsetup_r>:
 8005ec8:	4b32      	ldr	r3, [pc, #200]	; (8005f94 <__swsetup_r+0xcc>)
 8005eca:	b570      	push	{r4, r5, r6, lr}
 8005ecc:	681d      	ldr	r5, [r3, #0]
 8005ece:	4606      	mov	r6, r0
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	b125      	cbz	r5, 8005ede <__swsetup_r+0x16>
 8005ed4:	69ab      	ldr	r3, [r5, #24]
 8005ed6:	b913      	cbnz	r3, 8005ede <__swsetup_r+0x16>
 8005ed8:	4628      	mov	r0, r5
 8005eda:	f000 fffd 	bl	8006ed8 <__sinit>
 8005ede:	4b2e      	ldr	r3, [pc, #184]	; (8005f98 <__swsetup_r+0xd0>)
 8005ee0:	429c      	cmp	r4, r3
 8005ee2:	d10f      	bne.n	8005f04 <__swsetup_r+0x3c>
 8005ee4:	686c      	ldr	r4, [r5, #4]
 8005ee6:	89a3      	ldrh	r3, [r4, #12]
 8005ee8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005eec:	0719      	lsls	r1, r3, #28
 8005eee:	d42c      	bmi.n	8005f4a <__swsetup_r+0x82>
 8005ef0:	06dd      	lsls	r5, r3, #27
 8005ef2:	d411      	bmi.n	8005f18 <__swsetup_r+0x50>
 8005ef4:	2309      	movs	r3, #9
 8005ef6:	6033      	str	r3, [r6, #0]
 8005ef8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005efc:	81a3      	strh	r3, [r4, #12]
 8005efe:	f04f 30ff 	mov.w	r0, #4294967295
 8005f02:	e03e      	b.n	8005f82 <__swsetup_r+0xba>
 8005f04:	4b25      	ldr	r3, [pc, #148]	; (8005f9c <__swsetup_r+0xd4>)
 8005f06:	429c      	cmp	r4, r3
 8005f08:	d101      	bne.n	8005f0e <__swsetup_r+0x46>
 8005f0a:	68ac      	ldr	r4, [r5, #8]
 8005f0c:	e7eb      	b.n	8005ee6 <__swsetup_r+0x1e>
 8005f0e:	4b24      	ldr	r3, [pc, #144]	; (8005fa0 <__swsetup_r+0xd8>)
 8005f10:	429c      	cmp	r4, r3
 8005f12:	bf08      	it	eq
 8005f14:	68ec      	ldreq	r4, [r5, #12]
 8005f16:	e7e6      	b.n	8005ee6 <__swsetup_r+0x1e>
 8005f18:	0758      	lsls	r0, r3, #29
 8005f1a:	d512      	bpl.n	8005f42 <__swsetup_r+0x7a>
 8005f1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f1e:	b141      	cbz	r1, 8005f32 <__swsetup_r+0x6a>
 8005f20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f24:	4299      	cmp	r1, r3
 8005f26:	d002      	beq.n	8005f2e <__swsetup_r+0x66>
 8005f28:	4630      	mov	r0, r6
 8005f2a:	f7ff f8c7 	bl	80050bc <_free_r>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	6363      	str	r3, [r4, #52]	; 0x34
 8005f32:	89a3      	ldrh	r3, [r4, #12]
 8005f34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f38:	81a3      	strh	r3, [r4, #12]
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	6063      	str	r3, [r4, #4]
 8005f3e:	6923      	ldr	r3, [r4, #16]
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	89a3      	ldrh	r3, [r4, #12]
 8005f44:	f043 0308 	orr.w	r3, r3, #8
 8005f48:	81a3      	strh	r3, [r4, #12]
 8005f4a:	6923      	ldr	r3, [r4, #16]
 8005f4c:	b94b      	cbnz	r3, 8005f62 <__swsetup_r+0x9a>
 8005f4e:	89a3      	ldrh	r3, [r4, #12]
 8005f50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f58:	d003      	beq.n	8005f62 <__swsetup_r+0x9a>
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	f001 f885 	bl	800706c <__smakebuf_r>
 8005f62:	89a0      	ldrh	r0, [r4, #12]
 8005f64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f68:	f010 0301 	ands.w	r3, r0, #1
 8005f6c:	d00a      	beq.n	8005f84 <__swsetup_r+0xbc>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60a3      	str	r3, [r4, #8]
 8005f72:	6963      	ldr	r3, [r4, #20]
 8005f74:	425b      	negs	r3, r3
 8005f76:	61a3      	str	r3, [r4, #24]
 8005f78:	6923      	ldr	r3, [r4, #16]
 8005f7a:	b943      	cbnz	r3, 8005f8e <__swsetup_r+0xc6>
 8005f7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f80:	d1ba      	bne.n	8005ef8 <__swsetup_r+0x30>
 8005f82:	bd70      	pop	{r4, r5, r6, pc}
 8005f84:	0781      	lsls	r1, r0, #30
 8005f86:	bf58      	it	pl
 8005f88:	6963      	ldrpl	r3, [r4, #20]
 8005f8a:	60a3      	str	r3, [r4, #8]
 8005f8c:	e7f4      	b.n	8005f78 <__swsetup_r+0xb0>
 8005f8e:	2000      	movs	r0, #0
 8005f90:	e7f7      	b.n	8005f82 <__swsetup_r+0xba>
 8005f92:	bf00      	nop
 8005f94:	20000028 	.word	0x20000028
 8005f98:	08007bc0 	.word	0x08007bc0
 8005f9c:	08007be0 	.word	0x08007be0
 8005fa0:	08007ba0 	.word	0x08007ba0

08005fa4 <abort>:
 8005fa4:	b508      	push	{r3, lr}
 8005fa6:	2006      	movs	r0, #6
 8005fa8:	f001 fc6e 	bl	8007888 <raise>
 8005fac:	2001      	movs	r0, #1
 8005fae:	f7fb faa7 	bl	8001500 <_exit>

08005fb2 <quorem>:
 8005fb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb6:	6903      	ldr	r3, [r0, #16]
 8005fb8:	690c      	ldr	r4, [r1, #16]
 8005fba:	42a3      	cmp	r3, r4
 8005fbc:	4607      	mov	r7, r0
 8005fbe:	f2c0 8081 	blt.w	80060c4 <quorem+0x112>
 8005fc2:	3c01      	subs	r4, #1
 8005fc4:	f101 0814 	add.w	r8, r1, #20
 8005fc8:	f100 0514 	add.w	r5, r0, #20
 8005fcc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fd0:	9301      	str	r3, [sp, #4]
 8005fd2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005fd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005fe2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005fe6:	fbb2 f6f3 	udiv	r6, r2, r3
 8005fea:	d331      	bcc.n	8006050 <quorem+0x9e>
 8005fec:	f04f 0e00 	mov.w	lr, #0
 8005ff0:	4640      	mov	r0, r8
 8005ff2:	46ac      	mov	ip, r5
 8005ff4:	46f2      	mov	sl, lr
 8005ff6:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ffa:	b293      	uxth	r3, r2
 8005ffc:	fb06 e303 	mla	r3, r6, r3, lr
 8006000:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006004:	b29b      	uxth	r3, r3
 8006006:	ebaa 0303 	sub.w	r3, sl, r3
 800600a:	f8dc a000 	ldr.w	sl, [ip]
 800600e:	0c12      	lsrs	r2, r2, #16
 8006010:	fa13 f38a 	uxtah	r3, r3, sl
 8006014:	fb06 e202 	mla	r2, r6, r2, lr
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	9b00      	ldr	r3, [sp, #0]
 800601c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006020:	b292      	uxth	r2, r2
 8006022:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006026:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800602a:	f8bd 3000 	ldrh.w	r3, [sp]
 800602e:	4581      	cmp	r9, r0
 8006030:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006034:	f84c 3b04 	str.w	r3, [ip], #4
 8006038:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800603c:	d2db      	bcs.n	8005ff6 <quorem+0x44>
 800603e:	f855 300b 	ldr.w	r3, [r5, fp]
 8006042:	b92b      	cbnz	r3, 8006050 <quorem+0x9e>
 8006044:	9b01      	ldr	r3, [sp, #4]
 8006046:	3b04      	subs	r3, #4
 8006048:	429d      	cmp	r5, r3
 800604a:	461a      	mov	r2, r3
 800604c:	d32e      	bcc.n	80060ac <quorem+0xfa>
 800604e:	613c      	str	r4, [r7, #16]
 8006050:	4638      	mov	r0, r7
 8006052:	f001 fad9 	bl	8007608 <__mcmp>
 8006056:	2800      	cmp	r0, #0
 8006058:	db24      	blt.n	80060a4 <quorem+0xf2>
 800605a:	3601      	adds	r6, #1
 800605c:	4628      	mov	r0, r5
 800605e:	f04f 0c00 	mov.w	ip, #0
 8006062:	f858 2b04 	ldr.w	r2, [r8], #4
 8006066:	f8d0 e000 	ldr.w	lr, [r0]
 800606a:	b293      	uxth	r3, r2
 800606c:	ebac 0303 	sub.w	r3, ip, r3
 8006070:	0c12      	lsrs	r2, r2, #16
 8006072:	fa13 f38e 	uxtah	r3, r3, lr
 8006076:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800607a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800607e:	b29b      	uxth	r3, r3
 8006080:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006084:	45c1      	cmp	r9, r8
 8006086:	f840 3b04 	str.w	r3, [r0], #4
 800608a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800608e:	d2e8      	bcs.n	8006062 <quorem+0xb0>
 8006090:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006094:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006098:	b922      	cbnz	r2, 80060a4 <quorem+0xf2>
 800609a:	3b04      	subs	r3, #4
 800609c:	429d      	cmp	r5, r3
 800609e:	461a      	mov	r2, r3
 80060a0:	d30a      	bcc.n	80060b8 <quorem+0x106>
 80060a2:	613c      	str	r4, [r7, #16]
 80060a4:	4630      	mov	r0, r6
 80060a6:	b003      	add	sp, #12
 80060a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ac:	6812      	ldr	r2, [r2, #0]
 80060ae:	3b04      	subs	r3, #4
 80060b0:	2a00      	cmp	r2, #0
 80060b2:	d1cc      	bne.n	800604e <quorem+0x9c>
 80060b4:	3c01      	subs	r4, #1
 80060b6:	e7c7      	b.n	8006048 <quorem+0x96>
 80060b8:	6812      	ldr	r2, [r2, #0]
 80060ba:	3b04      	subs	r3, #4
 80060bc:	2a00      	cmp	r2, #0
 80060be:	d1f0      	bne.n	80060a2 <quorem+0xf0>
 80060c0:	3c01      	subs	r4, #1
 80060c2:	e7eb      	b.n	800609c <quorem+0xea>
 80060c4:	2000      	movs	r0, #0
 80060c6:	e7ee      	b.n	80060a6 <quorem+0xf4>

080060c8 <_dtoa_r>:
 80060c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060cc:	ed2d 8b04 	vpush	{d8-d9}
 80060d0:	ec57 6b10 	vmov	r6, r7, d0
 80060d4:	b093      	sub	sp, #76	; 0x4c
 80060d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80060d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80060dc:	9106      	str	r1, [sp, #24]
 80060de:	ee10 aa10 	vmov	sl, s0
 80060e2:	4604      	mov	r4, r0
 80060e4:	9209      	str	r2, [sp, #36]	; 0x24
 80060e6:	930c      	str	r3, [sp, #48]	; 0x30
 80060e8:	46bb      	mov	fp, r7
 80060ea:	b975      	cbnz	r5, 800610a <_dtoa_r+0x42>
 80060ec:	2010      	movs	r0, #16
 80060ee:	f7fe ffc7 	bl	8005080 <malloc>
 80060f2:	4602      	mov	r2, r0
 80060f4:	6260      	str	r0, [r4, #36]	; 0x24
 80060f6:	b920      	cbnz	r0, 8006102 <_dtoa_r+0x3a>
 80060f8:	4ba7      	ldr	r3, [pc, #668]	; (8006398 <_dtoa_r+0x2d0>)
 80060fa:	21ea      	movs	r1, #234	; 0xea
 80060fc:	48a7      	ldr	r0, [pc, #668]	; (800639c <_dtoa_r+0x2d4>)
 80060fe:	f7fe ff65 	bl	8004fcc <__assert_func>
 8006102:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006106:	6005      	str	r5, [r0, #0]
 8006108:	60c5      	str	r5, [r0, #12]
 800610a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800610c:	6819      	ldr	r1, [r3, #0]
 800610e:	b151      	cbz	r1, 8006126 <_dtoa_r+0x5e>
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	604a      	str	r2, [r1, #4]
 8006114:	2301      	movs	r3, #1
 8006116:	4093      	lsls	r3, r2
 8006118:	608b      	str	r3, [r1, #8]
 800611a:	4620      	mov	r0, r4
 800611c:	f001 f832 	bl	8007184 <_Bfree>
 8006120:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	1e3b      	subs	r3, r7, #0
 8006128:	bfaa      	itet	ge
 800612a:	2300      	movge	r3, #0
 800612c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006130:	f8c8 3000 	strge.w	r3, [r8]
 8006134:	4b9a      	ldr	r3, [pc, #616]	; (80063a0 <_dtoa_r+0x2d8>)
 8006136:	bfbc      	itt	lt
 8006138:	2201      	movlt	r2, #1
 800613a:	f8c8 2000 	strlt.w	r2, [r8]
 800613e:	ea33 030b 	bics.w	r3, r3, fp
 8006142:	d11b      	bne.n	800617c <_dtoa_r+0xb4>
 8006144:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006146:	f242 730f 	movw	r3, #9999	; 0x270f
 800614a:	6013      	str	r3, [r2, #0]
 800614c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006150:	4333      	orrs	r3, r6
 8006152:	f000 8592 	beq.w	8006c7a <_dtoa_r+0xbb2>
 8006156:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006158:	b963      	cbnz	r3, 8006174 <_dtoa_r+0xac>
 800615a:	4b92      	ldr	r3, [pc, #584]	; (80063a4 <_dtoa_r+0x2dc>)
 800615c:	e022      	b.n	80061a4 <_dtoa_r+0xdc>
 800615e:	4b92      	ldr	r3, [pc, #584]	; (80063a8 <_dtoa_r+0x2e0>)
 8006160:	9301      	str	r3, [sp, #4]
 8006162:	3308      	adds	r3, #8
 8006164:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	9801      	ldr	r0, [sp, #4]
 800616a:	b013      	add	sp, #76	; 0x4c
 800616c:	ecbd 8b04 	vpop	{d8-d9}
 8006170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006174:	4b8b      	ldr	r3, [pc, #556]	; (80063a4 <_dtoa_r+0x2dc>)
 8006176:	9301      	str	r3, [sp, #4]
 8006178:	3303      	adds	r3, #3
 800617a:	e7f3      	b.n	8006164 <_dtoa_r+0x9c>
 800617c:	2200      	movs	r2, #0
 800617e:	2300      	movs	r3, #0
 8006180:	4650      	mov	r0, sl
 8006182:	4659      	mov	r1, fp
 8006184:	f7fa fcc0 	bl	8000b08 <__aeabi_dcmpeq>
 8006188:	ec4b ab19 	vmov	d9, sl, fp
 800618c:	4680      	mov	r8, r0
 800618e:	b158      	cbz	r0, 80061a8 <_dtoa_r+0xe0>
 8006190:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006192:	2301      	movs	r3, #1
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 856b 	beq.w	8006c74 <_dtoa_r+0xbac>
 800619e:	4883      	ldr	r0, [pc, #524]	; (80063ac <_dtoa_r+0x2e4>)
 80061a0:	6018      	str	r0, [r3, #0]
 80061a2:	1e43      	subs	r3, r0, #1
 80061a4:	9301      	str	r3, [sp, #4]
 80061a6:	e7df      	b.n	8006168 <_dtoa_r+0xa0>
 80061a8:	ec4b ab10 	vmov	d0, sl, fp
 80061ac:	aa10      	add	r2, sp, #64	; 0x40
 80061ae:	a911      	add	r1, sp, #68	; 0x44
 80061b0:	4620      	mov	r0, r4
 80061b2:	f001 facf 	bl	8007754 <__d2b>
 80061b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80061ba:	ee08 0a10 	vmov	s16, r0
 80061be:	2d00      	cmp	r5, #0
 80061c0:	f000 8084 	beq.w	80062cc <_dtoa_r+0x204>
 80061c4:	ee19 3a90 	vmov	r3, s19
 80061c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80061d0:	4656      	mov	r6, sl
 80061d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80061d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80061da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80061de:	4b74      	ldr	r3, [pc, #464]	; (80063b0 <_dtoa_r+0x2e8>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	4630      	mov	r0, r6
 80061e4:	4639      	mov	r1, r7
 80061e6:	f7fa f86f 	bl	80002c8 <__aeabi_dsub>
 80061ea:	a365      	add	r3, pc, #404	; (adr r3, 8006380 <_dtoa_r+0x2b8>)
 80061ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f0:	f7fa fa22 	bl	8000638 <__aeabi_dmul>
 80061f4:	a364      	add	r3, pc, #400	; (adr r3, 8006388 <_dtoa_r+0x2c0>)
 80061f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fa:	f7fa f867 	bl	80002cc <__adddf3>
 80061fe:	4606      	mov	r6, r0
 8006200:	4628      	mov	r0, r5
 8006202:	460f      	mov	r7, r1
 8006204:	f7fa f9ae 	bl	8000564 <__aeabi_i2d>
 8006208:	a361      	add	r3, pc, #388	; (adr r3, 8006390 <_dtoa_r+0x2c8>)
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	f7fa fa13 	bl	8000638 <__aeabi_dmul>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4630      	mov	r0, r6
 8006218:	4639      	mov	r1, r7
 800621a:	f7fa f857 	bl	80002cc <__adddf3>
 800621e:	4606      	mov	r6, r0
 8006220:	460f      	mov	r7, r1
 8006222:	f7fa fcb9 	bl	8000b98 <__aeabi_d2iz>
 8006226:	2200      	movs	r2, #0
 8006228:	9000      	str	r0, [sp, #0]
 800622a:	2300      	movs	r3, #0
 800622c:	4630      	mov	r0, r6
 800622e:	4639      	mov	r1, r7
 8006230:	f7fa fc74 	bl	8000b1c <__aeabi_dcmplt>
 8006234:	b150      	cbz	r0, 800624c <_dtoa_r+0x184>
 8006236:	9800      	ldr	r0, [sp, #0]
 8006238:	f7fa f994 	bl	8000564 <__aeabi_i2d>
 800623c:	4632      	mov	r2, r6
 800623e:	463b      	mov	r3, r7
 8006240:	f7fa fc62 	bl	8000b08 <__aeabi_dcmpeq>
 8006244:	b910      	cbnz	r0, 800624c <_dtoa_r+0x184>
 8006246:	9b00      	ldr	r3, [sp, #0]
 8006248:	3b01      	subs	r3, #1
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	9b00      	ldr	r3, [sp, #0]
 800624e:	2b16      	cmp	r3, #22
 8006250:	d85a      	bhi.n	8006308 <_dtoa_r+0x240>
 8006252:	9a00      	ldr	r2, [sp, #0]
 8006254:	4b57      	ldr	r3, [pc, #348]	; (80063b4 <_dtoa_r+0x2ec>)
 8006256:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625e:	ec51 0b19 	vmov	r0, r1, d9
 8006262:	f7fa fc5b 	bl	8000b1c <__aeabi_dcmplt>
 8006266:	2800      	cmp	r0, #0
 8006268:	d050      	beq.n	800630c <_dtoa_r+0x244>
 800626a:	9b00      	ldr	r3, [sp, #0]
 800626c:	3b01      	subs	r3, #1
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	2300      	movs	r3, #0
 8006272:	930b      	str	r3, [sp, #44]	; 0x2c
 8006274:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006276:	1b5d      	subs	r5, r3, r5
 8006278:	1e6b      	subs	r3, r5, #1
 800627a:	9305      	str	r3, [sp, #20]
 800627c:	bf45      	ittet	mi
 800627e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006282:	9304      	strmi	r3, [sp, #16]
 8006284:	2300      	movpl	r3, #0
 8006286:	2300      	movmi	r3, #0
 8006288:	bf4c      	ite	mi
 800628a:	9305      	strmi	r3, [sp, #20]
 800628c:	9304      	strpl	r3, [sp, #16]
 800628e:	9b00      	ldr	r3, [sp, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	db3d      	blt.n	8006310 <_dtoa_r+0x248>
 8006294:	9b05      	ldr	r3, [sp, #20]
 8006296:	9a00      	ldr	r2, [sp, #0]
 8006298:	920a      	str	r2, [sp, #40]	; 0x28
 800629a:	4413      	add	r3, r2
 800629c:	9305      	str	r3, [sp, #20]
 800629e:	2300      	movs	r3, #0
 80062a0:	9307      	str	r3, [sp, #28]
 80062a2:	9b06      	ldr	r3, [sp, #24]
 80062a4:	2b09      	cmp	r3, #9
 80062a6:	f200 8089 	bhi.w	80063bc <_dtoa_r+0x2f4>
 80062aa:	2b05      	cmp	r3, #5
 80062ac:	bfc4      	itt	gt
 80062ae:	3b04      	subgt	r3, #4
 80062b0:	9306      	strgt	r3, [sp, #24]
 80062b2:	9b06      	ldr	r3, [sp, #24]
 80062b4:	f1a3 0302 	sub.w	r3, r3, #2
 80062b8:	bfcc      	ite	gt
 80062ba:	2500      	movgt	r5, #0
 80062bc:	2501      	movle	r5, #1
 80062be:	2b03      	cmp	r3, #3
 80062c0:	f200 8087 	bhi.w	80063d2 <_dtoa_r+0x30a>
 80062c4:	e8df f003 	tbb	[pc, r3]
 80062c8:	59383a2d 	.word	0x59383a2d
 80062cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80062d0:	441d      	add	r5, r3
 80062d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80062d6:	2b20      	cmp	r3, #32
 80062d8:	bfc1      	itttt	gt
 80062da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80062de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80062e2:	fa0b f303 	lslgt.w	r3, fp, r3
 80062e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80062ea:	bfda      	itte	le
 80062ec:	f1c3 0320 	rsble	r3, r3, #32
 80062f0:	fa06 f003 	lslle.w	r0, r6, r3
 80062f4:	4318      	orrgt	r0, r3
 80062f6:	f7fa f925 	bl	8000544 <__aeabi_ui2d>
 80062fa:	2301      	movs	r3, #1
 80062fc:	4606      	mov	r6, r0
 80062fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006302:	3d01      	subs	r5, #1
 8006304:	930e      	str	r3, [sp, #56]	; 0x38
 8006306:	e76a      	b.n	80061de <_dtoa_r+0x116>
 8006308:	2301      	movs	r3, #1
 800630a:	e7b2      	b.n	8006272 <_dtoa_r+0x1aa>
 800630c:	900b      	str	r0, [sp, #44]	; 0x2c
 800630e:	e7b1      	b.n	8006274 <_dtoa_r+0x1ac>
 8006310:	9b04      	ldr	r3, [sp, #16]
 8006312:	9a00      	ldr	r2, [sp, #0]
 8006314:	1a9b      	subs	r3, r3, r2
 8006316:	9304      	str	r3, [sp, #16]
 8006318:	4253      	negs	r3, r2
 800631a:	9307      	str	r3, [sp, #28]
 800631c:	2300      	movs	r3, #0
 800631e:	930a      	str	r3, [sp, #40]	; 0x28
 8006320:	e7bf      	b.n	80062a2 <_dtoa_r+0x1da>
 8006322:	2300      	movs	r3, #0
 8006324:	9308      	str	r3, [sp, #32]
 8006326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006328:	2b00      	cmp	r3, #0
 800632a:	dc55      	bgt.n	80063d8 <_dtoa_r+0x310>
 800632c:	2301      	movs	r3, #1
 800632e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006332:	461a      	mov	r2, r3
 8006334:	9209      	str	r2, [sp, #36]	; 0x24
 8006336:	e00c      	b.n	8006352 <_dtoa_r+0x28a>
 8006338:	2301      	movs	r3, #1
 800633a:	e7f3      	b.n	8006324 <_dtoa_r+0x25c>
 800633c:	2300      	movs	r3, #0
 800633e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006340:	9308      	str	r3, [sp, #32]
 8006342:	9b00      	ldr	r3, [sp, #0]
 8006344:	4413      	add	r3, r2
 8006346:	9302      	str	r3, [sp, #8]
 8006348:	3301      	adds	r3, #1
 800634a:	2b01      	cmp	r3, #1
 800634c:	9303      	str	r3, [sp, #12]
 800634e:	bfb8      	it	lt
 8006350:	2301      	movlt	r3, #1
 8006352:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006354:	2200      	movs	r2, #0
 8006356:	6042      	str	r2, [r0, #4]
 8006358:	2204      	movs	r2, #4
 800635a:	f102 0614 	add.w	r6, r2, #20
 800635e:	429e      	cmp	r6, r3
 8006360:	6841      	ldr	r1, [r0, #4]
 8006362:	d93d      	bls.n	80063e0 <_dtoa_r+0x318>
 8006364:	4620      	mov	r0, r4
 8006366:	f000 fecd 	bl	8007104 <_Balloc>
 800636a:	9001      	str	r0, [sp, #4]
 800636c:	2800      	cmp	r0, #0
 800636e:	d13b      	bne.n	80063e8 <_dtoa_r+0x320>
 8006370:	4b11      	ldr	r3, [pc, #68]	; (80063b8 <_dtoa_r+0x2f0>)
 8006372:	4602      	mov	r2, r0
 8006374:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006378:	e6c0      	b.n	80060fc <_dtoa_r+0x34>
 800637a:	2301      	movs	r3, #1
 800637c:	e7df      	b.n	800633e <_dtoa_r+0x276>
 800637e:	bf00      	nop
 8006380:	636f4361 	.word	0x636f4361
 8006384:	3fd287a7 	.word	0x3fd287a7
 8006388:	8b60c8b3 	.word	0x8b60c8b3
 800638c:	3fc68a28 	.word	0x3fc68a28
 8006390:	509f79fb 	.word	0x509f79fb
 8006394:	3fd34413 	.word	0x3fd34413
 8006398:	08007b1a 	.word	0x08007b1a
 800639c:	08007b31 	.word	0x08007b31
 80063a0:	7ff00000 	.word	0x7ff00000
 80063a4:	08007b16 	.word	0x08007b16
 80063a8:	08007b0d 	.word	0x08007b0d
 80063ac:	08007aea 	.word	0x08007aea
 80063b0:	3ff80000 	.word	0x3ff80000
 80063b4:	08007c88 	.word	0x08007c88
 80063b8:	08007b8c 	.word	0x08007b8c
 80063bc:	2501      	movs	r5, #1
 80063be:	2300      	movs	r3, #0
 80063c0:	9306      	str	r3, [sp, #24]
 80063c2:	9508      	str	r5, [sp, #32]
 80063c4:	f04f 33ff 	mov.w	r3, #4294967295
 80063c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80063cc:	2200      	movs	r2, #0
 80063ce:	2312      	movs	r3, #18
 80063d0:	e7b0      	b.n	8006334 <_dtoa_r+0x26c>
 80063d2:	2301      	movs	r3, #1
 80063d4:	9308      	str	r3, [sp, #32]
 80063d6:	e7f5      	b.n	80063c4 <_dtoa_r+0x2fc>
 80063d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80063de:	e7b8      	b.n	8006352 <_dtoa_r+0x28a>
 80063e0:	3101      	adds	r1, #1
 80063e2:	6041      	str	r1, [r0, #4]
 80063e4:	0052      	lsls	r2, r2, #1
 80063e6:	e7b8      	b.n	800635a <_dtoa_r+0x292>
 80063e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063ea:	9a01      	ldr	r2, [sp, #4]
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	9b03      	ldr	r3, [sp, #12]
 80063f0:	2b0e      	cmp	r3, #14
 80063f2:	f200 809d 	bhi.w	8006530 <_dtoa_r+0x468>
 80063f6:	2d00      	cmp	r5, #0
 80063f8:	f000 809a 	beq.w	8006530 <_dtoa_r+0x468>
 80063fc:	9b00      	ldr	r3, [sp, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	dd32      	ble.n	8006468 <_dtoa_r+0x3a0>
 8006402:	4ab7      	ldr	r2, [pc, #732]	; (80066e0 <_dtoa_r+0x618>)
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800640c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006410:	9b00      	ldr	r3, [sp, #0]
 8006412:	05d8      	lsls	r0, r3, #23
 8006414:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006418:	d516      	bpl.n	8006448 <_dtoa_r+0x380>
 800641a:	4bb2      	ldr	r3, [pc, #712]	; (80066e4 <_dtoa_r+0x61c>)
 800641c:	ec51 0b19 	vmov	r0, r1, d9
 8006420:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006424:	f7fa fa32 	bl	800088c <__aeabi_ddiv>
 8006428:	f007 070f 	and.w	r7, r7, #15
 800642c:	4682      	mov	sl, r0
 800642e:	468b      	mov	fp, r1
 8006430:	2503      	movs	r5, #3
 8006432:	4eac      	ldr	r6, [pc, #688]	; (80066e4 <_dtoa_r+0x61c>)
 8006434:	b957      	cbnz	r7, 800644c <_dtoa_r+0x384>
 8006436:	4642      	mov	r2, r8
 8006438:	464b      	mov	r3, r9
 800643a:	4650      	mov	r0, sl
 800643c:	4659      	mov	r1, fp
 800643e:	f7fa fa25 	bl	800088c <__aeabi_ddiv>
 8006442:	4682      	mov	sl, r0
 8006444:	468b      	mov	fp, r1
 8006446:	e028      	b.n	800649a <_dtoa_r+0x3d2>
 8006448:	2502      	movs	r5, #2
 800644a:	e7f2      	b.n	8006432 <_dtoa_r+0x36a>
 800644c:	07f9      	lsls	r1, r7, #31
 800644e:	d508      	bpl.n	8006462 <_dtoa_r+0x39a>
 8006450:	4640      	mov	r0, r8
 8006452:	4649      	mov	r1, r9
 8006454:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006458:	f7fa f8ee 	bl	8000638 <__aeabi_dmul>
 800645c:	3501      	adds	r5, #1
 800645e:	4680      	mov	r8, r0
 8006460:	4689      	mov	r9, r1
 8006462:	107f      	asrs	r7, r7, #1
 8006464:	3608      	adds	r6, #8
 8006466:	e7e5      	b.n	8006434 <_dtoa_r+0x36c>
 8006468:	f000 809b 	beq.w	80065a2 <_dtoa_r+0x4da>
 800646c:	9b00      	ldr	r3, [sp, #0]
 800646e:	4f9d      	ldr	r7, [pc, #628]	; (80066e4 <_dtoa_r+0x61c>)
 8006470:	425e      	negs	r6, r3
 8006472:	4b9b      	ldr	r3, [pc, #620]	; (80066e0 <_dtoa_r+0x618>)
 8006474:	f006 020f 	and.w	r2, r6, #15
 8006478:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800647c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006480:	ec51 0b19 	vmov	r0, r1, d9
 8006484:	f7fa f8d8 	bl	8000638 <__aeabi_dmul>
 8006488:	1136      	asrs	r6, r6, #4
 800648a:	4682      	mov	sl, r0
 800648c:	468b      	mov	fp, r1
 800648e:	2300      	movs	r3, #0
 8006490:	2502      	movs	r5, #2
 8006492:	2e00      	cmp	r6, #0
 8006494:	d17a      	bne.n	800658c <_dtoa_r+0x4c4>
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1d3      	bne.n	8006442 <_dtoa_r+0x37a>
 800649a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 8082 	beq.w	80065a6 <_dtoa_r+0x4de>
 80064a2:	4b91      	ldr	r3, [pc, #580]	; (80066e8 <_dtoa_r+0x620>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	4650      	mov	r0, sl
 80064a8:	4659      	mov	r1, fp
 80064aa:	f7fa fb37 	bl	8000b1c <__aeabi_dcmplt>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	d079      	beq.n	80065a6 <_dtoa_r+0x4de>
 80064b2:	9b03      	ldr	r3, [sp, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d076      	beq.n	80065a6 <_dtoa_r+0x4de>
 80064b8:	9b02      	ldr	r3, [sp, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	dd36      	ble.n	800652c <_dtoa_r+0x464>
 80064be:	9b00      	ldr	r3, [sp, #0]
 80064c0:	4650      	mov	r0, sl
 80064c2:	4659      	mov	r1, fp
 80064c4:	1e5f      	subs	r7, r3, #1
 80064c6:	2200      	movs	r2, #0
 80064c8:	4b88      	ldr	r3, [pc, #544]	; (80066ec <_dtoa_r+0x624>)
 80064ca:	f7fa f8b5 	bl	8000638 <__aeabi_dmul>
 80064ce:	9e02      	ldr	r6, [sp, #8]
 80064d0:	4682      	mov	sl, r0
 80064d2:	468b      	mov	fp, r1
 80064d4:	3501      	adds	r5, #1
 80064d6:	4628      	mov	r0, r5
 80064d8:	f7fa f844 	bl	8000564 <__aeabi_i2d>
 80064dc:	4652      	mov	r2, sl
 80064de:	465b      	mov	r3, fp
 80064e0:	f7fa f8aa 	bl	8000638 <__aeabi_dmul>
 80064e4:	4b82      	ldr	r3, [pc, #520]	; (80066f0 <_dtoa_r+0x628>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	f7f9 fef0 	bl	80002cc <__adddf3>
 80064ec:	46d0      	mov	r8, sl
 80064ee:	46d9      	mov	r9, fp
 80064f0:	4682      	mov	sl, r0
 80064f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80064f6:	2e00      	cmp	r6, #0
 80064f8:	d158      	bne.n	80065ac <_dtoa_r+0x4e4>
 80064fa:	4b7e      	ldr	r3, [pc, #504]	; (80066f4 <_dtoa_r+0x62c>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	4640      	mov	r0, r8
 8006500:	4649      	mov	r1, r9
 8006502:	f7f9 fee1 	bl	80002c8 <__aeabi_dsub>
 8006506:	4652      	mov	r2, sl
 8006508:	465b      	mov	r3, fp
 800650a:	4680      	mov	r8, r0
 800650c:	4689      	mov	r9, r1
 800650e:	f7fa fb23 	bl	8000b58 <__aeabi_dcmpgt>
 8006512:	2800      	cmp	r0, #0
 8006514:	f040 8295 	bne.w	8006a42 <_dtoa_r+0x97a>
 8006518:	4652      	mov	r2, sl
 800651a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800651e:	4640      	mov	r0, r8
 8006520:	4649      	mov	r1, r9
 8006522:	f7fa fafb 	bl	8000b1c <__aeabi_dcmplt>
 8006526:	2800      	cmp	r0, #0
 8006528:	f040 8289 	bne.w	8006a3e <_dtoa_r+0x976>
 800652c:	ec5b ab19 	vmov	sl, fp, d9
 8006530:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006532:	2b00      	cmp	r3, #0
 8006534:	f2c0 8148 	blt.w	80067c8 <_dtoa_r+0x700>
 8006538:	9a00      	ldr	r2, [sp, #0]
 800653a:	2a0e      	cmp	r2, #14
 800653c:	f300 8144 	bgt.w	80067c8 <_dtoa_r+0x700>
 8006540:	4b67      	ldr	r3, [pc, #412]	; (80066e0 <_dtoa_r+0x618>)
 8006542:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006546:	e9d3 8900 	ldrd	r8, r9, [r3]
 800654a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800654c:	2b00      	cmp	r3, #0
 800654e:	f280 80d5 	bge.w	80066fc <_dtoa_r+0x634>
 8006552:	9b03      	ldr	r3, [sp, #12]
 8006554:	2b00      	cmp	r3, #0
 8006556:	f300 80d1 	bgt.w	80066fc <_dtoa_r+0x634>
 800655a:	f040 826f 	bne.w	8006a3c <_dtoa_r+0x974>
 800655e:	4b65      	ldr	r3, [pc, #404]	; (80066f4 <_dtoa_r+0x62c>)
 8006560:	2200      	movs	r2, #0
 8006562:	4640      	mov	r0, r8
 8006564:	4649      	mov	r1, r9
 8006566:	f7fa f867 	bl	8000638 <__aeabi_dmul>
 800656a:	4652      	mov	r2, sl
 800656c:	465b      	mov	r3, fp
 800656e:	f7fa fae9 	bl	8000b44 <__aeabi_dcmpge>
 8006572:	9e03      	ldr	r6, [sp, #12]
 8006574:	4637      	mov	r7, r6
 8006576:	2800      	cmp	r0, #0
 8006578:	f040 8245 	bne.w	8006a06 <_dtoa_r+0x93e>
 800657c:	9d01      	ldr	r5, [sp, #4]
 800657e:	2331      	movs	r3, #49	; 0x31
 8006580:	f805 3b01 	strb.w	r3, [r5], #1
 8006584:	9b00      	ldr	r3, [sp, #0]
 8006586:	3301      	adds	r3, #1
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	e240      	b.n	8006a0e <_dtoa_r+0x946>
 800658c:	07f2      	lsls	r2, r6, #31
 800658e:	d505      	bpl.n	800659c <_dtoa_r+0x4d4>
 8006590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006594:	f7fa f850 	bl	8000638 <__aeabi_dmul>
 8006598:	3501      	adds	r5, #1
 800659a:	2301      	movs	r3, #1
 800659c:	1076      	asrs	r6, r6, #1
 800659e:	3708      	adds	r7, #8
 80065a0:	e777      	b.n	8006492 <_dtoa_r+0x3ca>
 80065a2:	2502      	movs	r5, #2
 80065a4:	e779      	b.n	800649a <_dtoa_r+0x3d2>
 80065a6:	9f00      	ldr	r7, [sp, #0]
 80065a8:	9e03      	ldr	r6, [sp, #12]
 80065aa:	e794      	b.n	80064d6 <_dtoa_r+0x40e>
 80065ac:	9901      	ldr	r1, [sp, #4]
 80065ae:	4b4c      	ldr	r3, [pc, #304]	; (80066e0 <_dtoa_r+0x618>)
 80065b0:	4431      	add	r1, r6
 80065b2:	910d      	str	r1, [sp, #52]	; 0x34
 80065b4:	9908      	ldr	r1, [sp, #32]
 80065b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80065ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80065be:	2900      	cmp	r1, #0
 80065c0:	d043      	beq.n	800664a <_dtoa_r+0x582>
 80065c2:	494d      	ldr	r1, [pc, #308]	; (80066f8 <_dtoa_r+0x630>)
 80065c4:	2000      	movs	r0, #0
 80065c6:	f7fa f961 	bl	800088c <__aeabi_ddiv>
 80065ca:	4652      	mov	r2, sl
 80065cc:	465b      	mov	r3, fp
 80065ce:	f7f9 fe7b 	bl	80002c8 <__aeabi_dsub>
 80065d2:	9d01      	ldr	r5, [sp, #4]
 80065d4:	4682      	mov	sl, r0
 80065d6:	468b      	mov	fp, r1
 80065d8:	4649      	mov	r1, r9
 80065da:	4640      	mov	r0, r8
 80065dc:	f7fa fadc 	bl	8000b98 <__aeabi_d2iz>
 80065e0:	4606      	mov	r6, r0
 80065e2:	f7f9 ffbf 	bl	8000564 <__aeabi_i2d>
 80065e6:	4602      	mov	r2, r0
 80065e8:	460b      	mov	r3, r1
 80065ea:	4640      	mov	r0, r8
 80065ec:	4649      	mov	r1, r9
 80065ee:	f7f9 fe6b 	bl	80002c8 <__aeabi_dsub>
 80065f2:	3630      	adds	r6, #48	; 0x30
 80065f4:	f805 6b01 	strb.w	r6, [r5], #1
 80065f8:	4652      	mov	r2, sl
 80065fa:	465b      	mov	r3, fp
 80065fc:	4680      	mov	r8, r0
 80065fe:	4689      	mov	r9, r1
 8006600:	f7fa fa8c 	bl	8000b1c <__aeabi_dcmplt>
 8006604:	2800      	cmp	r0, #0
 8006606:	d163      	bne.n	80066d0 <_dtoa_r+0x608>
 8006608:	4642      	mov	r2, r8
 800660a:	464b      	mov	r3, r9
 800660c:	4936      	ldr	r1, [pc, #216]	; (80066e8 <_dtoa_r+0x620>)
 800660e:	2000      	movs	r0, #0
 8006610:	f7f9 fe5a 	bl	80002c8 <__aeabi_dsub>
 8006614:	4652      	mov	r2, sl
 8006616:	465b      	mov	r3, fp
 8006618:	f7fa fa80 	bl	8000b1c <__aeabi_dcmplt>
 800661c:	2800      	cmp	r0, #0
 800661e:	f040 80b5 	bne.w	800678c <_dtoa_r+0x6c4>
 8006622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006624:	429d      	cmp	r5, r3
 8006626:	d081      	beq.n	800652c <_dtoa_r+0x464>
 8006628:	4b30      	ldr	r3, [pc, #192]	; (80066ec <_dtoa_r+0x624>)
 800662a:	2200      	movs	r2, #0
 800662c:	4650      	mov	r0, sl
 800662e:	4659      	mov	r1, fp
 8006630:	f7fa f802 	bl	8000638 <__aeabi_dmul>
 8006634:	4b2d      	ldr	r3, [pc, #180]	; (80066ec <_dtoa_r+0x624>)
 8006636:	4682      	mov	sl, r0
 8006638:	468b      	mov	fp, r1
 800663a:	4640      	mov	r0, r8
 800663c:	4649      	mov	r1, r9
 800663e:	2200      	movs	r2, #0
 8006640:	f7f9 fffa 	bl	8000638 <__aeabi_dmul>
 8006644:	4680      	mov	r8, r0
 8006646:	4689      	mov	r9, r1
 8006648:	e7c6      	b.n	80065d8 <_dtoa_r+0x510>
 800664a:	4650      	mov	r0, sl
 800664c:	4659      	mov	r1, fp
 800664e:	f7f9 fff3 	bl	8000638 <__aeabi_dmul>
 8006652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006654:	9d01      	ldr	r5, [sp, #4]
 8006656:	930f      	str	r3, [sp, #60]	; 0x3c
 8006658:	4682      	mov	sl, r0
 800665a:	468b      	mov	fp, r1
 800665c:	4649      	mov	r1, r9
 800665e:	4640      	mov	r0, r8
 8006660:	f7fa fa9a 	bl	8000b98 <__aeabi_d2iz>
 8006664:	4606      	mov	r6, r0
 8006666:	f7f9 ff7d 	bl	8000564 <__aeabi_i2d>
 800666a:	3630      	adds	r6, #48	; 0x30
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4640      	mov	r0, r8
 8006672:	4649      	mov	r1, r9
 8006674:	f7f9 fe28 	bl	80002c8 <__aeabi_dsub>
 8006678:	f805 6b01 	strb.w	r6, [r5], #1
 800667c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800667e:	429d      	cmp	r5, r3
 8006680:	4680      	mov	r8, r0
 8006682:	4689      	mov	r9, r1
 8006684:	f04f 0200 	mov.w	r2, #0
 8006688:	d124      	bne.n	80066d4 <_dtoa_r+0x60c>
 800668a:	4b1b      	ldr	r3, [pc, #108]	; (80066f8 <_dtoa_r+0x630>)
 800668c:	4650      	mov	r0, sl
 800668e:	4659      	mov	r1, fp
 8006690:	f7f9 fe1c 	bl	80002cc <__adddf3>
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	4640      	mov	r0, r8
 800669a:	4649      	mov	r1, r9
 800669c:	f7fa fa5c 	bl	8000b58 <__aeabi_dcmpgt>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d173      	bne.n	800678c <_dtoa_r+0x6c4>
 80066a4:	4652      	mov	r2, sl
 80066a6:	465b      	mov	r3, fp
 80066a8:	4913      	ldr	r1, [pc, #76]	; (80066f8 <_dtoa_r+0x630>)
 80066aa:	2000      	movs	r0, #0
 80066ac:	f7f9 fe0c 	bl	80002c8 <__aeabi_dsub>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4640      	mov	r0, r8
 80066b6:	4649      	mov	r1, r9
 80066b8:	f7fa fa30 	bl	8000b1c <__aeabi_dcmplt>
 80066bc:	2800      	cmp	r0, #0
 80066be:	f43f af35 	beq.w	800652c <_dtoa_r+0x464>
 80066c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80066c4:	1e6b      	subs	r3, r5, #1
 80066c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80066c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80066cc:	2b30      	cmp	r3, #48	; 0x30
 80066ce:	d0f8      	beq.n	80066c2 <_dtoa_r+0x5fa>
 80066d0:	9700      	str	r7, [sp, #0]
 80066d2:	e049      	b.n	8006768 <_dtoa_r+0x6a0>
 80066d4:	4b05      	ldr	r3, [pc, #20]	; (80066ec <_dtoa_r+0x624>)
 80066d6:	f7f9 ffaf 	bl	8000638 <__aeabi_dmul>
 80066da:	4680      	mov	r8, r0
 80066dc:	4689      	mov	r9, r1
 80066de:	e7bd      	b.n	800665c <_dtoa_r+0x594>
 80066e0:	08007c88 	.word	0x08007c88
 80066e4:	08007c60 	.word	0x08007c60
 80066e8:	3ff00000 	.word	0x3ff00000
 80066ec:	40240000 	.word	0x40240000
 80066f0:	401c0000 	.word	0x401c0000
 80066f4:	40140000 	.word	0x40140000
 80066f8:	3fe00000 	.word	0x3fe00000
 80066fc:	9d01      	ldr	r5, [sp, #4]
 80066fe:	4656      	mov	r6, sl
 8006700:	465f      	mov	r7, fp
 8006702:	4642      	mov	r2, r8
 8006704:	464b      	mov	r3, r9
 8006706:	4630      	mov	r0, r6
 8006708:	4639      	mov	r1, r7
 800670a:	f7fa f8bf 	bl	800088c <__aeabi_ddiv>
 800670e:	f7fa fa43 	bl	8000b98 <__aeabi_d2iz>
 8006712:	4682      	mov	sl, r0
 8006714:	f7f9 ff26 	bl	8000564 <__aeabi_i2d>
 8006718:	4642      	mov	r2, r8
 800671a:	464b      	mov	r3, r9
 800671c:	f7f9 ff8c 	bl	8000638 <__aeabi_dmul>
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	4630      	mov	r0, r6
 8006726:	4639      	mov	r1, r7
 8006728:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800672c:	f7f9 fdcc 	bl	80002c8 <__aeabi_dsub>
 8006730:	f805 6b01 	strb.w	r6, [r5], #1
 8006734:	9e01      	ldr	r6, [sp, #4]
 8006736:	9f03      	ldr	r7, [sp, #12]
 8006738:	1bae      	subs	r6, r5, r6
 800673a:	42b7      	cmp	r7, r6
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	d135      	bne.n	80067ae <_dtoa_r+0x6e6>
 8006742:	f7f9 fdc3 	bl	80002cc <__adddf3>
 8006746:	4642      	mov	r2, r8
 8006748:	464b      	mov	r3, r9
 800674a:	4606      	mov	r6, r0
 800674c:	460f      	mov	r7, r1
 800674e:	f7fa fa03 	bl	8000b58 <__aeabi_dcmpgt>
 8006752:	b9d0      	cbnz	r0, 800678a <_dtoa_r+0x6c2>
 8006754:	4642      	mov	r2, r8
 8006756:	464b      	mov	r3, r9
 8006758:	4630      	mov	r0, r6
 800675a:	4639      	mov	r1, r7
 800675c:	f7fa f9d4 	bl	8000b08 <__aeabi_dcmpeq>
 8006760:	b110      	cbz	r0, 8006768 <_dtoa_r+0x6a0>
 8006762:	f01a 0f01 	tst.w	sl, #1
 8006766:	d110      	bne.n	800678a <_dtoa_r+0x6c2>
 8006768:	4620      	mov	r0, r4
 800676a:	ee18 1a10 	vmov	r1, s16
 800676e:	f000 fd09 	bl	8007184 <_Bfree>
 8006772:	2300      	movs	r3, #0
 8006774:	9800      	ldr	r0, [sp, #0]
 8006776:	702b      	strb	r3, [r5, #0]
 8006778:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800677a:	3001      	adds	r0, #1
 800677c:	6018      	str	r0, [r3, #0]
 800677e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006780:	2b00      	cmp	r3, #0
 8006782:	f43f acf1 	beq.w	8006168 <_dtoa_r+0xa0>
 8006786:	601d      	str	r5, [r3, #0]
 8006788:	e4ee      	b.n	8006168 <_dtoa_r+0xa0>
 800678a:	9f00      	ldr	r7, [sp, #0]
 800678c:	462b      	mov	r3, r5
 800678e:	461d      	mov	r5, r3
 8006790:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006794:	2a39      	cmp	r2, #57	; 0x39
 8006796:	d106      	bne.n	80067a6 <_dtoa_r+0x6de>
 8006798:	9a01      	ldr	r2, [sp, #4]
 800679a:	429a      	cmp	r2, r3
 800679c:	d1f7      	bne.n	800678e <_dtoa_r+0x6c6>
 800679e:	9901      	ldr	r1, [sp, #4]
 80067a0:	2230      	movs	r2, #48	; 0x30
 80067a2:	3701      	adds	r7, #1
 80067a4:	700a      	strb	r2, [r1, #0]
 80067a6:	781a      	ldrb	r2, [r3, #0]
 80067a8:	3201      	adds	r2, #1
 80067aa:	701a      	strb	r2, [r3, #0]
 80067ac:	e790      	b.n	80066d0 <_dtoa_r+0x608>
 80067ae:	4ba6      	ldr	r3, [pc, #664]	; (8006a48 <_dtoa_r+0x980>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	f7f9 ff41 	bl	8000638 <__aeabi_dmul>
 80067b6:	2200      	movs	r2, #0
 80067b8:	2300      	movs	r3, #0
 80067ba:	4606      	mov	r6, r0
 80067bc:	460f      	mov	r7, r1
 80067be:	f7fa f9a3 	bl	8000b08 <__aeabi_dcmpeq>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d09d      	beq.n	8006702 <_dtoa_r+0x63a>
 80067c6:	e7cf      	b.n	8006768 <_dtoa_r+0x6a0>
 80067c8:	9a08      	ldr	r2, [sp, #32]
 80067ca:	2a00      	cmp	r2, #0
 80067cc:	f000 80d7 	beq.w	800697e <_dtoa_r+0x8b6>
 80067d0:	9a06      	ldr	r2, [sp, #24]
 80067d2:	2a01      	cmp	r2, #1
 80067d4:	f300 80ba 	bgt.w	800694c <_dtoa_r+0x884>
 80067d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067da:	2a00      	cmp	r2, #0
 80067dc:	f000 80b2 	beq.w	8006944 <_dtoa_r+0x87c>
 80067e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80067e4:	9e07      	ldr	r6, [sp, #28]
 80067e6:	9d04      	ldr	r5, [sp, #16]
 80067e8:	9a04      	ldr	r2, [sp, #16]
 80067ea:	441a      	add	r2, r3
 80067ec:	9204      	str	r2, [sp, #16]
 80067ee:	9a05      	ldr	r2, [sp, #20]
 80067f0:	2101      	movs	r1, #1
 80067f2:	441a      	add	r2, r3
 80067f4:	4620      	mov	r0, r4
 80067f6:	9205      	str	r2, [sp, #20]
 80067f8:	f000 fd7c 	bl	80072f4 <__i2b>
 80067fc:	4607      	mov	r7, r0
 80067fe:	2d00      	cmp	r5, #0
 8006800:	dd0c      	ble.n	800681c <_dtoa_r+0x754>
 8006802:	9b05      	ldr	r3, [sp, #20]
 8006804:	2b00      	cmp	r3, #0
 8006806:	dd09      	ble.n	800681c <_dtoa_r+0x754>
 8006808:	42ab      	cmp	r3, r5
 800680a:	9a04      	ldr	r2, [sp, #16]
 800680c:	bfa8      	it	ge
 800680e:	462b      	movge	r3, r5
 8006810:	1ad2      	subs	r2, r2, r3
 8006812:	9204      	str	r2, [sp, #16]
 8006814:	9a05      	ldr	r2, [sp, #20]
 8006816:	1aed      	subs	r5, r5, r3
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	9305      	str	r3, [sp, #20]
 800681c:	9b07      	ldr	r3, [sp, #28]
 800681e:	b31b      	cbz	r3, 8006868 <_dtoa_r+0x7a0>
 8006820:	9b08      	ldr	r3, [sp, #32]
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 80af 	beq.w	8006986 <_dtoa_r+0x8be>
 8006828:	2e00      	cmp	r6, #0
 800682a:	dd13      	ble.n	8006854 <_dtoa_r+0x78c>
 800682c:	4639      	mov	r1, r7
 800682e:	4632      	mov	r2, r6
 8006830:	4620      	mov	r0, r4
 8006832:	f000 fe1f 	bl	8007474 <__pow5mult>
 8006836:	ee18 2a10 	vmov	r2, s16
 800683a:	4601      	mov	r1, r0
 800683c:	4607      	mov	r7, r0
 800683e:	4620      	mov	r0, r4
 8006840:	f000 fd6e 	bl	8007320 <__multiply>
 8006844:	ee18 1a10 	vmov	r1, s16
 8006848:	4680      	mov	r8, r0
 800684a:	4620      	mov	r0, r4
 800684c:	f000 fc9a 	bl	8007184 <_Bfree>
 8006850:	ee08 8a10 	vmov	s16, r8
 8006854:	9b07      	ldr	r3, [sp, #28]
 8006856:	1b9a      	subs	r2, r3, r6
 8006858:	d006      	beq.n	8006868 <_dtoa_r+0x7a0>
 800685a:	ee18 1a10 	vmov	r1, s16
 800685e:	4620      	mov	r0, r4
 8006860:	f000 fe08 	bl	8007474 <__pow5mult>
 8006864:	ee08 0a10 	vmov	s16, r0
 8006868:	2101      	movs	r1, #1
 800686a:	4620      	mov	r0, r4
 800686c:	f000 fd42 	bl	80072f4 <__i2b>
 8006870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006872:	2b00      	cmp	r3, #0
 8006874:	4606      	mov	r6, r0
 8006876:	f340 8088 	ble.w	800698a <_dtoa_r+0x8c2>
 800687a:	461a      	mov	r2, r3
 800687c:	4601      	mov	r1, r0
 800687e:	4620      	mov	r0, r4
 8006880:	f000 fdf8 	bl	8007474 <__pow5mult>
 8006884:	9b06      	ldr	r3, [sp, #24]
 8006886:	2b01      	cmp	r3, #1
 8006888:	4606      	mov	r6, r0
 800688a:	f340 8081 	ble.w	8006990 <_dtoa_r+0x8c8>
 800688e:	f04f 0800 	mov.w	r8, #0
 8006892:	6933      	ldr	r3, [r6, #16]
 8006894:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006898:	6918      	ldr	r0, [r3, #16]
 800689a:	f000 fcdb 	bl	8007254 <__hi0bits>
 800689e:	f1c0 0020 	rsb	r0, r0, #32
 80068a2:	9b05      	ldr	r3, [sp, #20]
 80068a4:	4418      	add	r0, r3
 80068a6:	f010 001f 	ands.w	r0, r0, #31
 80068aa:	f000 8092 	beq.w	80069d2 <_dtoa_r+0x90a>
 80068ae:	f1c0 0320 	rsb	r3, r0, #32
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	f340 808a 	ble.w	80069cc <_dtoa_r+0x904>
 80068b8:	f1c0 001c 	rsb	r0, r0, #28
 80068bc:	9b04      	ldr	r3, [sp, #16]
 80068be:	4403      	add	r3, r0
 80068c0:	9304      	str	r3, [sp, #16]
 80068c2:	9b05      	ldr	r3, [sp, #20]
 80068c4:	4403      	add	r3, r0
 80068c6:	4405      	add	r5, r0
 80068c8:	9305      	str	r3, [sp, #20]
 80068ca:	9b04      	ldr	r3, [sp, #16]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	dd07      	ble.n	80068e0 <_dtoa_r+0x818>
 80068d0:	ee18 1a10 	vmov	r1, s16
 80068d4:	461a      	mov	r2, r3
 80068d6:	4620      	mov	r0, r4
 80068d8:	f000 fe26 	bl	8007528 <__lshift>
 80068dc:	ee08 0a10 	vmov	s16, r0
 80068e0:	9b05      	ldr	r3, [sp, #20]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	dd05      	ble.n	80068f2 <_dtoa_r+0x82a>
 80068e6:	4631      	mov	r1, r6
 80068e8:	461a      	mov	r2, r3
 80068ea:	4620      	mov	r0, r4
 80068ec:	f000 fe1c 	bl	8007528 <__lshift>
 80068f0:	4606      	mov	r6, r0
 80068f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d06e      	beq.n	80069d6 <_dtoa_r+0x90e>
 80068f8:	ee18 0a10 	vmov	r0, s16
 80068fc:	4631      	mov	r1, r6
 80068fe:	f000 fe83 	bl	8007608 <__mcmp>
 8006902:	2800      	cmp	r0, #0
 8006904:	da67      	bge.n	80069d6 <_dtoa_r+0x90e>
 8006906:	9b00      	ldr	r3, [sp, #0]
 8006908:	3b01      	subs	r3, #1
 800690a:	ee18 1a10 	vmov	r1, s16
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	220a      	movs	r2, #10
 8006912:	2300      	movs	r3, #0
 8006914:	4620      	mov	r0, r4
 8006916:	f000 fc57 	bl	80071c8 <__multadd>
 800691a:	9b08      	ldr	r3, [sp, #32]
 800691c:	ee08 0a10 	vmov	s16, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 81b1 	beq.w	8006c88 <_dtoa_r+0xbc0>
 8006926:	2300      	movs	r3, #0
 8006928:	4639      	mov	r1, r7
 800692a:	220a      	movs	r2, #10
 800692c:	4620      	mov	r0, r4
 800692e:	f000 fc4b 	bl	80071c8 <__multadd>
 8006932:	9b02      	ldr	r3, [sp, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	4607      	mov	r7, r0
 8006938:	f300 808e 	bgt.w	8006a58 <_dtoa_r+0x990>
 800693c:	9b06      	ldr	r3, [sp, #24]
 800693e:	2b02      	cmp	r3, #2
 8006940:	dc51      	bgt.n	80069e6 <_dtoa_r+0x91e>
 8006942:	e089      	b.n	8006a58 <_dtoa_r+0x990>
 8006944:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006946:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800694a:	e74b      	b.n	80067e4 <_dtoa_r+0x71c>
 800694c:	9b03      	ldr	r3, [sp, #12]
 800694e:	1e5e      	subs	r6, r3, #1
 8006950:	9b07      	ldr	r3, [sp, #28]
 8006952:	42b3      	cmp	r3, r6
 8006954:	bfbf      	itttt	lt
 8006956:	9b07      	ldrlt	r3, [sp, #28]
 8006958:	9607      	strlt	r6, [sp, #28]
 800695a:	1af2      	sublt	r2, r6, r3
 800695c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800695e:	bfb6      	itet	lt
 8006960:	189b      	addlt	r3, r3, r2
 8006962:	1b9e      	subge	r6, r3, r6
 8006964:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006966:	9b03      	ldr	r3, [sp, #12]
 8006968:	bfb8      	it	lt
 800696a:	2600      	movlt	r6, #0
 800696c:	2b00      	cmp	r3, #0
 800696e:	bfb7      	itett	lt
 8006970:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006974:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006978:	1a9d      	sublt	r5, r3, r2
 800697a:	2300      	movlt	r3, #0
 800697c:	e734      	b.n	80067e8 <_dtoa_r+0x720>
 800697e:	9e07      	ldr	r6, [sp, #28]
 8006980:	9d04      	ldr	r5, [sp, #16]
 8006982:	9f08      	ldr	r7, [sp, #32]
 8006984:	e73b      	b.n	80067fe <_dtoa_r+0x736>
 8006986:	9a07      	ldr	r2, [sp, #28]
 8006988:	e767      	b.n	800685a <_dtoa_r+0x792>
 800698a:	9b06      	ldr	r3, [sp, #24]
 800698c:	2b01      	cmp	r3, #1
 800698e:	dc18      	bgt.n	80069c2 <_dtoa_r+0x8fa>
 8006990:	f1ba 0f00 	cmp.w	sl, #0
 8006994:	d115      	bne.n	80069c2 <_dtoa_r+0x8fa>
 8006996:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800699a:	b993      	cbnz	r3, 80069c2 <_dtoa_r+0x8fa>
 800699c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80069a0:	0d1b      	lsrs	r3, r3, #20
 80069a2:	051b      	lsls	r3, r3, #20
 80069a4:	b183      	cbz	r3, 80069c8 <_dtoa_r+0x900>
 80069a6:	9b04      	ldr	r3, [sp, #16]
 80069a8:	3301      	adds	r3, #1
 80069aa:	9304      	str	r3, [sp, #16]
 80069ac:	9b05      	ldr	r3, [sp, #20]
 80069ae:	3301      	adds	r3, #1
 80069b0:	9305      	str	r3, [sp, #20]
 80069b2:	f04f 0801 	mov.w	r8, #1
 80069b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f47f af6a 	bne.w	8006892 <_dtoa_r+0x7ca>
 80069be:	2001      	movs	r0, #1
 80069c0:	e76f      	b.n	80068a2 <_dtoa_r+0x7da>
 80069c2:	f04f 0800 	mov.w	r8, #0
 80069c6:	e7f6      	b.n	80069b6 <_dtoa_r+0x8ee>
 80069c8:	4698      	mov	r8, r3
 80069ca:	e7f4      	b.n	80069b6 <_dtoa_r+0x8ee>
 80069cc:	f43f af7d 	beq.w	80068ca <_dtoa_r+0x802>
 80069d0:	4618      	mov	r0, r3
 80069d2:	301c      	adds	r0, #28
 80069d4:	e772      	b.n	80068bc <_dtoa_r+0x7f4>
 80069d6:	9b03      	ldr	r3, [sp, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	dc37      	bgt.n	8006a4c <_dtoa_r+0x984>
 80069dc:	9b06      	ldr	r3, [sp, #24]
 80069de:	2b02      	cmp	r3, #2
 80069e0:	dd34      	ble.n	8006a4c <_dtoa_r+0x984>
 80069e2:	9b03      	ldr	r3, [sp, #12]
 80069e4:	9302      	str	r3, [sp, #8]
 80069e6:	9b02      	ldr	r3, [sp, #8]
 80069e8:	b96b      	cbnz	r3, 8006a06 <_dtoa_r+0x93e>
 80069ea:	4631      	mov	r1, r6
 80069ec:	2205      	movs	r2, #5
 80069ee:	4620      	mov	r0, r4
 80069f0:	f000 fbea 	bl	80071c8 <__multadd>
 80069f4:	4601      	mov	r1, r0
 80069f6:	4606      	mov	r6, r0
 80069f8:	ee18 0a10 	vmov	r0, s16
 80069fc:	f000 fe04 	bl	8007608 <__mcmp>
 8006a00:	2800      	cmp	r0, #0
 8006a02:	f73f adbb 	bgt.w	800657c <_dtoa_r+0x4b4>
 8006a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a08:	9d01      	ldr	r5, [sp, #4]
 8006a0a:	43db      	mvns	r3, r3
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	f04f 0800 	mov.w	r8, #0
 8006a12:	4631      	mov	r1, r6
 8006a14:	4620      	mov	r0, r4
 8006a16:	f000 fbb5 	bl	8007184 <_Bfree>
 8006a1a:	2f00      	cmp	r7, #0
 8006a1c:	f43f aea4 	beq.w	8006768 <_dtoa_r+0x6a0>
 8006a20:	f1b8 0f00 	cmp.w	r8, #0
 8006a24:	d005      	beq.n	8006a32 <_dtoa_r+0x96a>
 8006a26:	45b8      	cmp	r8, r7
 8006a28:	d003      	beq.n	8006a32 <_dtoa_r+0x96a>
 8006a2a:	4641      	mov	r1, r8
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f000 fba9 	bl	8007184 <_Bfree>
 8006a32:	4639      	mov	r1, r7
 8006a34:	4620      	mov	r0, r4
 8006a36:	f000 fba5 	bl	8007184 <_Bfree>
 8006a3a:	e695      	b.n	8006768 <_dtoa_r+0x6a0>
 8006a3c:	2600      	movs	r6, #0
 8006a3e:	4637      	mov	r7, r6
 8006a40:	e7e1      	b.n	8006a06 <_dtoa_r+0x93e>
 8006a42:	9700      	str	r7, [sp, #0]
 8006a44:	4637      	mov	r7, r6
 8006a46:	e599      	b.n	800657c <_dtoa_r+0x4b4>
 8006a48:	40240000 	.word	0x40240000
 8006a4c:	9b08      	ldr	r3, [sp, #32]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f000 80ca 	beq.w	8006be8 <_dtoa_r+0xb20>
 8006a54:	9b03      	ldr	r3, [sp, #12]
 8006a56:	9302      	str	r3, [sp, #8]
 8006a58:	2d00      	cmp	r5, #0
 8006a5a:	dd05      	ble.n	8006a68 <_dtoa_r+0x9a0>
 8006a5c:	4639      	mov	r1, r7
 8006a5e:	462a      	mov	r2, r5
 8006a60:	4620      	mov	r0, r4
 8006a62:	f000 fd61 	bl	8007528 <__lshift>
 8006a66:	4607      	mov	r7, r0
 8006a68:	f1b8 0f00 	cmp.w	r8, #0
 8006a6c:	d05b      	beq.n	8006b26 <_dtoa_r+0xa5e>
 8006a6e:	6879      	ldr	r1, [r7, #4]
 8006a70:	4620      	mov	r0, r4
 8006a72:	f000 fb47 	bl	8007104 <_Balloc>
 8006a76:	4605      	mov	r5, r0
 8006a78:	b928      	cbnz	r0, 8006a86 <_dtoa_r+0x9be>
 8006a7a:	4b87      	ldr	r3, [pc, #540]	; (8006c98 <_dtoa_r+0xbd0>)
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006a82:	f7ff bb3b 	b.w	80060fc <_dtoa_r+0x34>
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	3202      	adds	r2, #2
 8006a8a:	0092      	lsls	r2, r2, #2
 8006a8c:	f107 010c 	add.w	r1, r7, #12
 8006a90:	300c      	adds	r0, #12
 8006a92:	f7fe fafd 	bl	8005090 <memcpy>
 8006a96:	2201      	movs	r2, #1
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f000 fd44 	bl	8007528 <__lshift>
 8006aa0:	9b01      	ldr	r3, [sp, #4]
 8006aa2:	f103 0901 	add.w	r9, r3, #1
 8006aa6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006aaa:	4413      	add	r3, r2
 8006aac:	9305      	str	r3, [sp, #20]
 8006aae:	f00a 0301 	and.w	r3, sl, #1
 8006ab2:	46b8      	mov	r8, r7
 8006ab4:	9304      	str	r3, [sp, #16]
 8006ab6:	4607      	mov	r7, r0
 8006ab8:	4631      	mov	r1, r6
 8006aba:	ee18 0a10 	vmov	r0, s16
 8006abe:	f7ff fa78 	bl	8005fb2 <quorem>
 8006ac2:	4641      	mov	r1, r8
 8006ac4:	9002      	str	r0, [sp, #8]
 8006ac6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006aca:	ee18 0a10 	vmov	r0, s16
 8006ace:	f000 fd9b 	bl	8007608 <__mcmp>
 8006ad2:	463a      	mov	r2, r7
 8006ad4:	9003      	str	r0, [sp, #12]
 8006ad6:	4631      	mov	r1, r6
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f000 fdb1 	bl	8007640 <__mdiff>
 8006ade:	68c2      	ldr	r2, [r0, #12]
 8006ae0:	f109 3bff 	add.w	fp, r9, #4294967295
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	bb02      	cbnz	r2, 8006b2a <_dtoa_r+0xa62>
 8006ae8:	4601      	mov	r1, r0
 8006aea:	ee18 0a10 	vmov	r0, s16
 8006aee:	f000 fd8b 	bl	8007608 <__mcmp>
 8006af2:	4602      	mov	r2, r0
 8006af4:	4629      	mov	r1, r5
 8006af6:	4620      	mov	r0, r4
 8006af8:	9207      	str	r2, [sp, #28]
 8006afa:	f000 fb43 	bl	8007184 <_Bfree>
 8006afe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006b02:	ea43 0102 	orr.w	r1, r3, r2
 8006b06:	9b04      	ldr	r3, [sp, #16]
 8006b08:	430b      	orrs	r3, r1
 8006b0a:	464d      	mov	r5, r9
 8006b0c:	d10f      	bne.n	8006b2e <_dtoa_r+0xa66>
 8006b0e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b12:	d02a      	beq.n	8006b6a <_dtoa_r+0xaa2>
 8006b14:	9b03      	ldr	r3, [sp, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	dd02      	ble.n	8006b20 <_dtoa_r+0xa58>
 8006b1a:	9b02      	ldr	r3, [sp, #8]
 8006b1c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006b20:	f88b a000 	strb.w	sl, [fp]
 8006b24:	e775      	b.n	8006a12 <_dtoa_r+0x94a>
 8006b26:	4638      	mov	r0, r7
 8006b28:	e7ba      	b.n	8006aa0 <_dtoa_r+0x9d8>
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	e7e2      	b.n	8006af4 <_dtoa_r+0xa2c>
 8006b2e:	9b03      	ldr	r3, [sp, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	db04      	blt.n	8006b3e <_dtoa_r+0xa76>
 8006b34:	9906      	ldr	r1, [sp, #24]
 8006b36:	430b      	orrs	r3, r1
 8006b38:	9904      	ldr	r1, [sp, #16]
 8006b3a:	430b      	orrs	r3, r1
 8006b3c:	d122      	bne.n	8006b84 <_dtoa_r+0xabc>
 8006b3e:	2a00      	cmp	r2, #0
 8006b40:	ddee      	ble.n	8006b20 <_dtoa_r+0xa58>
 8006b42:	ee18 1a10 	vmov	r1, s16
 8006b46:	2201      	movs	r2, #1
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f000 fced 	bl	8007528 <__lshift>
 8006b4e:	4631      	mov	r1, r6
 8006b50:	ee08 0a10 	vmov	s16, r0
 8006b54:	f000 fd58 	bl	8007608 <__mcmp>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	dc03      	bgt.n	8006b64 <_dtoa_r+0xa9c>
 8006b5c:	d1e0      	bne.n	8006b20 <_dtoa_r+0xa58>
 8006b5e:	f01a 0f01 	tst.w	sl, #1
 8006b62:	d0dd      	beq.n	8006b20 <_dtoa_r+0xa58>
 8006b64:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b68:	d1d7      	bne.n	8006b1a <_dtoa_r+0xa52>
 8006b6a:	2339      	movs	r3, #57	; 0x39
 8006b6c:	f88b 3000 	strb.w	r3, [fp]
 8006b70:	462b      	mov	r3, r5
 8006b72:	461d      	mov	r5, r3
 8006b74:	3b01      	subs	r3, #1
 8006b76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006b7a:	2a39      	cmp	r2, #57	; 0x39
 8006b7c:	d071      	beq.n	8006c62 <_dtoa_r+0xb9a>
 8006b7e:	3201      	adds	r2, #1
 8006b80:	701a      	strb	r2, [r3, #0]
 8006b82:	e746      	b.n	8006a12 <_dtoa_r+0x94a>
 8006b84:	2a00      	cmp	r2, #0
 8006b86:	dd07      	ble.n	8006b98 <_dtoa_r+0xad0>
 8006b88:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b8c:	d0ed      	beq.n	8006b6a <_dtoa_r+0xaa2>
 8006b8e:	f10a 0301 	add.w	r3, sl, #1
 8006b92:	f88b 3000 	strb.w	r3, [fp]
 8006b96:	e73c      	b.n	8006a12 <_dtoa_r+0x94a>
 8006b98:	9b05      	ldr	r3, [sp, #20]
 8006b9a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006b9e:	4599      	cmp	r9, r3
 8006ba0:	d047      	beq.n	8006c32 <_dtoa_r+0xb6a>
 8006ba2:	ee18 1a10 	vmov	r1, s16
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	220a      	movs	r2, #10
 8006baa:	4620      	mov	r0, r4
 8006bac:	f000 fb0c 	bl	80071c8 <__multadd>
 8006bb0:	45b8      	cmp	r8, r7
 8006bb2:	ee08 0a10 	vmov	s16, r0
 8006bb6:	f04f 0300 	mov.w	r3, #0
 8006bba:	f04f 020a 	mov.w	r2, #10
 8006bbe:	4641      	mov	r1, r8
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	d106      	bne.n	8006bd2 <_dtoa_r+0xb0a>
 8006bc4:	f000 fb00 	bl	80071c8 <__multadd>
 8006bc8:	4680      	mov	r8, r0
 8006bca:	4607      	mov	r7, r0
 8006bcc:	f109 0901 	add.w	r9, r9, #1
 8006bd0:	e772      	b.n	8006ab8 <_dtoa_r+0x9f0>
 8006bd2:	f000 faf9 	bl	80071c8 <__multadd>
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	4680      	mov	r8, r0
 8006bda:	2300      	movs	r3, #0
 8006bdc:	220a      	movs	r2, #10
 8006bde:	4620      	mov	r0, r4
 8006be0:	f000 faf2 	bl	80071c8 <__multadd>
 8006be4:	4607      	mov	r7, r0
 8006be6:	e7f1      	b.n	8006bcc <_dtoa_r+0xb04>
 8006be8:	9b03      	ldr	r3, [sp, #12]
 8006bea:	9302      	str	r3, [sp, #8]
 8006bec:	9d01      	ldr	r5, [sp, #4]
 8006bee:	ee18 0a10 	vmov	r0, s16
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	f7ff f9dd 	bl	8005fb2 <quorem>
 8006bf8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006bfc:	9b01      	ldr	r3, [sp, #4]
 8006bfe:	f805 ab01 	strb.w	sl, [r5], #1
 8006c02:	1aea      	subs	r2, r5, r3
 8006c04:	9b02      	ldr	r3, [sp, #8]
 8006c06:	4293      	cmp	r3, r2
 8006c08:	dd09      	ble.n	8006c1e <_dtoa_r+0xb56>
 8006c0a:	ee18 1a10 	vmov	r1, s16
 8006c0e:	2300      	movs	r3, #0
 8006c10:	220a      	movs	r2, #10
 8006c12:	4620      	mov	r0, r4
 8006c14:	f000 fad8 	bl	80071c8 <__multadd>
 8006c18:	ee08 0a10 	vmov	s16, r0
 8006c1c:	e7e7      	b.n	8006bee <_dtoa_r+0xb26>
 8006c1e:	9b02      	ldr	r3, [sp, #8]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	bfc8      	it	gt
 8006c24:	461d      	movgt	r5, r3
 8006c26:	9b01      	ldr	r3, [sp, #4]
 8006c28:	bfd8      	it	le
 8006c2a:	2501      	movle	r5, #1
 8006c2c:	441d      	add	r5, r3
 8006c2e:	f04f 0800 	mov.w	r8, #0
 8006c32:	ee18 1a10 	vmov	r1, s16
 8006c36:	2201      	movs	r2, #1
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f000 fc75 	bl	8007528 <__lshift>
 8006c3e:	4631      	mov	r1, r6
 8006c40:	ee08 0a10 	vmov	s16, r0
 8006c44:	f000 fce0 	bl	8007608 <__mcmp>
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	dc91      	bgt.n	8006b70 <_dtoa_r+0xaa8>
 8006c4c:	d102      	bne.n	8006c54 <_dtoa_r+0xb8c>
 8006c4e:	f01a 0f01 	tst.w	sl, #1
 8006c52:	d18d      	bne.n	8006b70 <_dtoa_r+0xaa8>
 8006c54:	462b      	mov	r3, r5
 8006c56:	461d      	mov	r5, r3
 8006c58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c5c:	2a30      	cmp	r2, #48	; 0x30
 8006c5e:	d0fa      	beq.n	8006c56 <_dtoa_r+0xb8e>
 8006c60:	e6d7      	b.n	8006a12 <_dtoa_r+0x94a>
 8006c62:	9a01      	ldr	r2, [sp, #4]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d184      	bne.n	8006b72 <_dtoa_r+0xaaa>
 8006c68:	9b00      	ldr	r3, [sp, #0]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	2331      	movs	r3, #49	; 0x31
 8006c70:	7013      	strb	r3, [r2, #0]
 8006c72:	e6ce      	b.n	8006a12 <_dtoa_r+0x94a>
 8006c74:	4b09      	ldr	r3, [pc, #36]	; (8006c9c <_dtoa_r+0xbd4>)
 8006c76:	f7ff ba95 	b.w	80061a4 <_dtoa_r+0xdc>
 8006c7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f47f aa6e 	bne.w	800615e <_dtoa_r+0x96>
 8006c82:	4b07      	ldr	r3, [pc, #28]	; (8006ca0 <_dtoa_r+0xbd8>)
 8006c84:	f7ff ba8e 	b.w	80061a4 <_dtoa_r+0xdc>
 8006c88:	9b02      	ldr	r3, [sp, #8]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	dcae      	bgt.n	8006bec <_dtoa_r+0xb24>
 8006c8e:	9b06      	ldr	r3, [sp, #24]
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	f73f aea8 	bgt.w	80069e6 <_dtoa_r+0x91e>
 8006c96:	e7a9      	b.n	8006bec <_dtoa_r+0xb24>
 8006c98:	08007b8c 	.word	0x08007b8c
 8006c9c:	08007ae9 	.word	0x08007ae9
 8006ca0:	08007b0d 	.word	0x08007b0d

08006ca4 <__sflush_r>:
 8006ca4:	898a      	ldrh	r2, [r1, #12]
 8006ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006caa:	4605      	mov	r5, r0
 8006cac:	0710      	lsls	r0, r2, #28
 8006cae:	460c      	mov	r4, r1
 8006cb0:	d458      	bmi.n	8006d64 <__sflush_r+0xc0>
 8006cb2:	684b      	ldr	r3, [r1, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	dc05      	bgt.n	8006cc4 <__sflush_r+0x20>
 8006cb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	dc02      	bgt.n	8006cc4 <__sflush_r+0x20>
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cc6:	2e00      	cmp	r6, #0
 8006cc8:	d0f9      	beq.n	8006cbe <__sflush_r+0x1a>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006cd0:	682f      	ldr	r7, [r5, #0]
 8006cd2:	602b      	str	r3, [r5, #0]
 8006cd4:	d032      	beq.n	8006d3c <__sflush_r+0x98>
 8006cd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cd8:	89a3      	ldrh	r3, [r4, #12]
 8006cda:	075a      	lsls	r2, r3, #29
 8006cdc:	d505      	bpl.n	8006cea <__sflush_r+0x46>
 8006cde:	6863      	ldr	r3, [r4, #4]
 8006ce0:	1ac0      	subs	r0, r0, r3
 8006ce2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ce4:	b10b      	cbz	r3, 8006cea <__sflush_r+0x46>
 8006ce6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ce8:	1ac0      	subs	r0, r0, r3
 8006cea:	2300      	movs	r3, #0
 8006cec:	4602      	mov	r2, r0
 8006cee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cf0:	6a21      	ldr	r1, [r4, #32]
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	47b0      	blx	r6
 8006cf6:	1c43      	adds	r3, r0, #1
 8006cf8:	89a3      	ldrh	r3, [r4, #12]
 8006cfa:	d106      	bne.n	8006d0a <__sflush_r+0x66>
 8006cfc:	6829      	ldr	r1, [r5, #0]
 8006cfe:	291d      	cmp	r1, #29
 8006d00:	d82c      	bhi.n	8006d5c <__sflush_r+0xb8>
 8006d02:	4a2a      	ldr	r2, [pc, #168]	; (8006dac <__sflush_r+0x108>)
 8006d04:	40ca      	lsrs	r2, r1
 8006d06:	07d6      	lsls	r6, r2, #31
 8006d08:	d528      	bpl.n	8006d5c <__sflush_r+0xb8>
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	6062      	str	r2, [r4, #4]
 8006d0e:	04d9      	lsls	r1, r3, #19
 8006d10:	6922      	ldr	r2, [r4, #16]
 8006d12:	6022      	str	r2, [r4, #0]
 8006d14:	d504      	bpl.n	8006d20 <__sflush_r+0x7c>
 8006d16:	1c42      	adds	r2, r0, #1
 8006d18:	d101      	bne.n	8006d1e <__sflush_r+0x7a>
 8006d1a:	682b      	ldr	r3, [r5, #0]
 8006d1c:	b903      	cbnz	r3, 8006d20 <__sflush_r+0x7c>
 8006d1e:	6560      	str	r0, [r4, #84]	; 0x54
 8006d20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d22:	602f      	str	r7, [r5, #0]
 8006d24:	2900      	cmp	r1, #0
 8006d26:	d0ca      	beq.n	8006cbe <__sflush_r+0x1a>
 8006d28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d2c:	4299      	cmp	r1, r3
 8006d2e:	d002      	beq.n	8006d36 <__sflush_r+0x92>
 8006d30:	4628      	mov	r0, r5
 8006d32:	f7fe f9c3 	bl	80050bc <_free_r>
 8006d36:	2000      	movs	r0, #0
 8006d38:	6360      	str	r0, [r4, #52]	; 0x34
 8006d3a:	e7c1      	b.n	8006cc0 <__sflush_r+0x1c>
 8006d3c:	6a21      	ldr	r1, [r4, #32]
 8006d3e:	2301      	movs	r3, #1
 8006d40:	4628      	mov	r0, r5
 8006d42:	47b0      	blx	r6
 8006d44:	1c41      	adds	r1, r0, #1
 8006d46:	d1c7      	bne.n	8006cd8 <__sflush_r+0x34>
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0c4      	beq.n	8006cd8 <__sflush_r+0x34>
 8006d4e:	2b1d      	cmp	r3, #29
 8006d50:	d001      	beq.n	8006d56 <__sflush_r+0xb2>
 8006d52:	2b16      	cmp	r3, #22
 8006d54:	d101      	bne.n	8006d5a <__sflush_r+0xb6>
 8006d56:	602f      	str	r7, [r5, #0]
 8006d58:	e7b1      	b.n	8006cbe <__sflush_r+0x1a>
 8006d5a:	89a3      	ldrh	r3, [r4, #12]
 8006d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d60:	81a3      	strh	r3, [r4, #12]
 8006d62:	e7ad      	b.n	8006cc0 <__sflush_r+0x1c>
 8006d64:	690f      	ldr	r7, [r1, #16]
 8006d66:	2f00      	cmp	r7, #0
 8006d68:	d0a9      	beq.n	8006cbe <__sflush_r+0x1a>
 8006d6a:	0793      	lsls	r3, r2, #30
 8006d6c:	680e      	ldr	r6, [r1, #0]
 8006d6e:	bf08      	it	eq
 8006d70:	694b      	ldreq	r3, [r1, #20]
 8006d72:	600f      	str	r7, [r1, #0]
 8006d74:	bf18      	it	ne
 8006d76:	2300      	movne	r3, #0
 8006d78:	eba6 0807 	sub.w	r8, r6, r7
 8006d7c:	608b      	str	r3, [r1, #8]
 8006d7e:	f1b8 0f00 	cmp.w	r8, #0
 8006d82:	dd9c      	ble.n	8006cbe <__sflush_r+0x1a>
 8006d84:	6a21      	ldr	r1, [r4, #32]
 8006d86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d88:	4643      	mov	r3, r8
 8006d8a:	463a      	mov	r2, r7
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	47b0      	blx	r6
 8006d90:	2800      	cmp	r0, #0
 8006d92:	dc06      	bgt.n	8006da2 <__sflush_r+0xfe>
 8006d94:	89a3      	ldrh	r3, [r4, #12]
 8006d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d9a:	81a3      	strh	r3, [r4, #12]
 8006d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006da0:	e78e      	b.n	8006cc0 <__sflush_r+0x1c>
 8006da2:	4407      	add	r7, r0
 8006da4:	eba8 0800 	sub.w	r8, r8, r0
 8006da8:	e7e9      	b.n	8006d7e <__sflush_r+0xda>
 8006daa:	bf00      	nop
 8006dac:	20400001 	.word	0x20400001

08006db0 <_fflush_r>:
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	690b      	ldr	r3, [r1, #16]
 8006db4:	4605      	mov	r5, r0
 8006db6:	460c      	mov	r4, r1
 8006db8:	b913      	cbnz	r3, 8006dc0 <_fflush_r+0x10>
 8006dba:	2500      	movs	r5, #0
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	bd38      	pop	{r3, r4, r5, pc}
 8006dc0:	b118      	cbz	r0, 8006dca <_fflush_r+0x1a>
 8006dc2:	6983      	ldr	r3, [r0, #24]
 8006dc4:	b90b      	cbnz	r3, 8006dca <_fflush_r+0x1a>
 8006dc6:	f000 f887 	bl	8006ed8 <__sinit>
 8006dca:	4b14      	ldr	r3, [pc, #80]	; (8006e1c <_fflush_r+0x6c>)
 8006dcc:	429c      	cmp	r4, r3
 8006dce:	d11b      	bne.n	8006e08 <_fflush_r+0x58>
 8006dd0:	686c      	ldr	r4, [r5, #4]
 8006dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d0ef      	beq.n	8006dba <_fflush_r+0xa>
 8006dda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ddc:	07d0      	lsls	r0, r2, #31
 8006dde:	d404      	bmi.n	8006dea <_fflush_r+0x3a>
 8006de0:	0599      	lsls	r1, r3, #22
 8006de2:	d402      	bmi.n	8006dea <_fflush_r+0x3a>
 8006de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006de6:	f000 f91a 	bl	800701e <__retarget_lock_acquire_recursive>
 8006dea:	4628      	mov	r0, r5
 8006dec:	4621      	mov	r1, r4
 8006dee:	f7ff ff59 	bl	8006ca4 <__sflush_r>
 8006df2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006df4:	07da      	lsls	r2, r3, #31
 8006df6:	4605      	mov	r5, r0
 8006df8:	d4e0      	bmi.n	8006dbc <_fflush_r+0xc>
 8006dfa:	89a3      	ldrh	r3, [r4, #12]
 8006dfc:	059b      	lsls	r3, r3, #22
 8006dfe:	d4dd      	bmi.n	8006dbc <_fflush_r+0xc>
 8006e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e02:	f000 f90d 	bl	8007020 <__retarget_lock_release_recursive>
 8006e06:	e7d9      	b.n	8006dbc <_fflush_r+0xc>
 8006e08:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <_fflush_r+0x70>)
 8006e0a:	429c      	cmp	r4, r3
 8006e0c:	d101      	bne.n	8006e12 <_fflush_r+0x62>
 8006e0e:	68ac      	ldr	r4, [r5, #8]
 8006e10:	e7df      	b.n	8006dd2 <_fflush_r+0x22>
 8006e12:	4b04      	ldr	r3, [pc, #16]	; (8006e24 <_fflush_r+0x74>)
 8006e14:	429c      	cmp	r4, r3
 8006e16:	bf08      	it	eq
 8006e18:	68ec      	ldreq	r4, [r5, #12]
 8006e1a:	e7da      	b.n	8006dd2 <_fflush_r+0x22>
 8006e1c:	08007bc0 	.word	0x08007bc0
 8006e20:	08007be0 	.word	0x08007be0
 8006e24:	08007ba0 	.word	0x08007ba0

08006e28 <std>:
 8006e28:	2300      	movs	r3, #0
 8006e2a:	b510      	push	{r4, lr}
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e36:	6083      	str	r3, [r0, #8]
 8006e38:	8181      	strh	r1, [r0, #12]
 8006e3a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e3c:	81c2      	strh	r2, [r0, #14]
 8006e3e:	6183      	str	r3, [r0, #24]
 8006e40:	4619      	mov	r1, r3
 8006e42:	2208      	movs	r2, #8
 8006e44:	305c      	adds	r0, #92	; 0x5c
 8006e46:	f7fe f931 	bl	80050ac <memset>
 8006e4a:	4b05      	ldr	r3, [pc, #20]	; (8006e60 <std+0x38>)
 8006e4c:	6263      	str	r3, [r4, #36]	; 0x24
 8006e4e:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <std+0x3c>)
 8006e50:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e52:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <std+0x40>)
 8006e54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e56:	4b05      	ldr	r3, [pc, #20]	; (8006e6c <std+0x44>)
 8006e58:	6224      	str	r4, [r4, #32]
 8006e5a:	6323      	str	r3, [r4, #48]	; 0x30
 8006e5c:	bd10      	pop	{r4, pc}
 8006e5e:	bf00      	nop
 8006e60:	080078c1 	.word	0x080078c1
 8006e64:	080078e3 	.word	0x080078e3
 8006e68:	0800791b 	.word	0x0800791b
 8006e6c:	0800793f 	.word	0x0800793f

08006e70 <_cleanup_r>:
 8006e70:	4901      	ldr	r1, [pc, #4]	; (8006e78 <_cleanup_r+0x8>)
 8006e72:	f000 b8af 	b.w	8006fd4 <_fwalk_reent>
 8006e76:	bf00      	nop
 8006e78:	08006db1 	.word	0x08006db1

08006e7c <__sfmoreglue>:
 8006e7c:	b570      	push	{r4, r5, r6, lr}
 8006e7e:	2268      	movs	r2, #104	; 0x68
 8006e80:	1e4d      	subs	r5, r1, #1
 8006e82:	4355      	muls	r5, r2
 8006e84:	460e      	mov	r6, r1
 8006e86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e8a:	f7fe f983 	bl	8005194 <_malloc_r>
 8006e8e:	4604      	mov	r4, r0
 8006e90:	b140      	cbz	r0, 8006ea4 <__sfmoreglue+0x28>
 8006e92:	2100      	movs	r1, #0
 8006e94:	e9c0 1600 	strd	r1, r6, [r0]
 8006e98:	300c      	adds	r0, #12
 8006e9a:	60a0      	str	r0, [r4, #8]
 8006e9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ea0:	f7fe f904 	bl	80050ac <memset>
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	bd70      	pop	{r4, r5, r6, pc}

08006ea8 <__sfp_lock_acquire>:
 8006ea8:	4801      	ldr	r0, [pc, #4]	; (8006eb0 <__sfp_lock_acquire+0x8>)
 8006eaa:	f000 b8b8 	b.w	800701e <__retarget_lock_acquire_recursive>
 8006eae:	bf00      	nop
 8006eb0:	2000036d 	.word	0x2000036d

08006eb4 <__sfp_lock_release>:
 8006eb4:	4801      	ldr	r0, [pc, #4]	; (8006ebc <__sfp_lock_release+0x8>)
 8006eb6:	f000 b8b3 	b.w	8007020 <__retarget_lock_release_recursive>
 8006eba:	bf00      	nop
 8006ebc:	2000036d 	.word	0x2000036d

08006ec0 <__sinit_lock_acquire>:
 8006ec0:	4801      	ldr	r0, [pc, #4]	; (8006ec8 <__sinit_lock_acquire+0x8>)
 8006ec2:	f000 b8ac 	b.w	800701e <__retarget_lock_acquire_recursive>
 8006ec6:	bf00      	nop
 8006ec8:	2000036e 	.word	0x2000036e

08006ecc <__sinit_lock_release>:
 8006ecc:	4801      	ldr	r0, [pc, #4]	; (8006ed4 <__sinit_lock_release+0x8>)
 8006ece:	f000 b8a7 	b.w	8007020 <__retarget_lock_release_recursive>
 8006ed2:	bf00      	nop
 8006ed4:	2000036e 	.word	0x2000036e

08006ed8 <__sinit>:
 8006ed8:	b510      	push	{r4, lr}
 8006eda:	4604      	mov	r4, r0
 8006edc:	f7ff fff0 	bl	8006ec0 <__sinit_lock_acquire>
 8006ee0:	69a3      	ldr	r3, [r4, #24]
 8006ee2:	b11b      	cbz	r3, 8006eec <__sinit+0x14>
 8006ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee8:	f7ff bff0 	b.w	8006ecc <__sinit_lock_release>
 8006eec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ef0:	6523      	str	r3, [r4, #80]	; 0x50
 8006ef2:	4b13      	ldr	r3, [pc, #76]	; (8006f40 <__sinit+0x68>)
 8006ef4:	4a13      	ldr	r2, [pc, #76]	; (8006f44 <__sinit+0x6c>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006efa:	42a3      	cmp	r3, r4
 8006efc:	bf04      	itt	eq
 8006efe:	2301      	moveq	r3, #1
 8006f00:	61a3      	streq	r3, [r4, #24]
 8006f02:	4620      	mov	r0, r4
 8006f04:	f000 f820 	bl	8006f48 <__sfp>
 8006f08:	6060      	str	r0, [r4, #4]
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f000 f81c 	bl	8006f48 <__sfp>
 8006f10:	60a0      	str	r0, [r4, #8]
 8006f12:	4620      	mov	r0, r4
 8006f14:	f000 f818 	bl	8006f48 <__sfp>
 8006f18:	2200      	movs	r2, #0
 8006f1a:	60e0      	str	r0, [r4, #12]
 8006f1c:	2104      	movs	r1, #4
 8006f1e:	6860      	ldr	r0, [r4, #4]
 8006f20:	f7ff ff82 	bl	8006e28 <std>
 8006f24:	68a0      	ldr	r0, [r4, #8]
 8006f26:	2201      	movs	r2, #1
 8006f28:	2109      	movs	r1, #9
 8006f2a:	f7ff ff7d 	bl	8006e28 <std>
 8006f2e:	68e0      	ldr	r0, [r4, #12]
 8006f30:	2202      	movs	r2, #2
 8006f32:	2112      	movs	r1, #18
 8006f34:	f7ff ff78 	bl	8006e28 <std>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	61a3      	str	r3, [r4, #24]
 8006f3c:	e7d2      	b.n	8006ee4 <__sinit+0xc>
 8006f3e:	bf00      	nop
 8006f40:	08007ac4 	.word	0x08007ac4
 8006f44:	08006e71 	.word	0x08006e71

08006f48 <__sfp>:
 8006f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4a:	4607      	mov	r7, r0
 8006f4c:	f7ff ffac 	bl	8006ea8 <__sfp_lock_acquire>
 8006f50:	4b1e      	ldr	r3, [pc, #120]	; (8006fcc <__sfp+0x84>)
 8006f52:	681e      	ldr	r6, [r3, #0]
 8006f54:	69b3      	ldr	r3, [r6, #24]
 8006f56:	b913      	cbnz	r3, 8006f5e <__sfp+0x16>
 8006f58:	4630      	mov	r0, r6
 8006f5a:	f7ff ffbd 	bl	8006ed8 <__sinit>
 8006f5e:	3648      	adds	r6, #72	; 0x48
 8006f60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f64:	3b01      	subs	r3, #1
 8006f66:	d503      	bpl.n	8006f70 <__sfp+0x28>
 8006f68:	6833      	ldr	r3, [r6, #0]
 8006f6a:	b30b      	cbz	r3, 8006fb0 <__sfp+0x68>
 8006f6c:	6836      	ldr	r6, [r6, #0]
 8006f6e:	e7f7      	b.n	8006f60 <__sfp+0x18>
 8006f70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f74:	b9d5      	cbnz	r5, 8006fac <__sfp+0x64>
 8006f76:	4b16      	ldr	r3, [pc, #88]	; (8006fd0 <__sfp+0x88>)
 8006f78:	60e3      	str	r3, [r4, #12]
 8006f7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f7e:	6665      	str	r5, [r4, #100]	; 0x64
 8006f80:	f000 f84c 	bl	800701c <__retarget_lock_init_recursive>
 8006f84:	f7ff ff96 	bl	8006eb4 <__sfp_lock_release>
 8006f88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f90:	6025      	str	r5, [r4, #0]
 8006f92:	61a5      	str	r5, [r4, #24]
 8006f94:	2208      	movs	r2, #8
 8006f96:	4629      	mov	r1, r5
 8006f98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f9c:	f7fe f886 	bl	80050ac <memset>
 8006fa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fa8:	4620      	mov	r0, r4
 8006faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fac:	3468      	adds	r4, #104	; 0x68
 8006fae:	e7d9      	b.n	8006f64 <__sfp+0x1c>
 8006fb0:	2104      	movs	r1, #4
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	f7ff ff62 	bl	8006e7c <__sfmoreglue>
 8006fb8:	4604      	mov	r4, r0
 8006fba:	6030      	str	r0, [r6, #0]
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	d1d5      	bne.n	8006f6c <__sfp+0x24>
 8006fc0:	f7ff ff78 	bl	8006eb4 <__sfp_lock_release>
 8006fc4:	230c      	movs	r3, #12
 8006fc6:	603b      	str	r3, [r7, #0]
 8006fc8:	e7ee      	b.n	8006fa8 <__sfp+0x60>
 8006fca:	bf00      	nop
 8006fcc:	08007ac4 	.word	0x08007ac4
 8006fd0:	ffff0001 	.word	0xffff0001

08006fd4 <_fwalk_reent>:
 8006fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fd8:	4606      	mov	r6, r0
 8006fda:	4688      	mov	r8, r1
 8006fdc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006fe0:	2700      	movs	r7, #0
 8006fe2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fe6:	f1b9 0901 	subs.w	r9, r9, #1
 8006fea:	d505      	bpl.n	8006ff8 <_fwalk_reent+0x24>
 8006fec:	6824      	ldr	r4, [r4, #0]
 8006fee:	2c00      	cmp	r4, #0
 8006ff0:	d1f7      	bne.n	8006fe2 <_fwalk_reent+0xe>
 8006ff2:	4638      	mov	r0, r7
 8006ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ff8:	89ab      	ldrh	r3, [r5, #12]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d907      	bls.n	800700e <_fwalk_reent+0x3a>
 8006ffe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007002:	3301      	adds	r3, #1
 8007004:	d003      	beq.n	800700e <_fwalk_reent+0x3a>
 8007006:	4629      	mov	r1, r5
 8007008:	4630      	mov	r0, r6
 800700a:	47c0      	blx	r8
 800700c:	4307      	orrs	r7, r0
 800700e:	3568      	adds	r5, #104	; 0x68
 8007010:	e7e9      	b.n	8006fe6 <_fwalk_reent+0x12>
	...

08007014 <_localeconv_r>:
 8007014:	4800      	ldr	r0, [pc, #0]	; (8007018 <_localeconv_r+0x4>)
 8007016:	4770      	bx	lr
 8007018:	2000017c 	.word	0x2000017c

0800701c <__retarget_lock_init_recursive>:
 800701c:	4770      	bx	lr

0800701e <__retarget_lock_acquire_recursive>:
 800701e:	4770      	bx	lr

08007020 <__retarget_lock_release_recursive>:
 8007020:	4770      	bx	lr

08007022 <__swhatbuf_r>:
 8007022:	b570      	push	{r4, r5, r6, lr}
 8007024:	460e      	mov	r6, r1
 8007026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800702a:	2900      	cmp	r1, #0
 800702c:	b096      	sub	sp, #88	; 0x58
 800702e:	4614      	mov	r4, r2
 8007030:	461d      	mov	r5, r3
 8007032:	da08      	bge.n	8007046 <__swhatbuf_r+0x24>
 8007034:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	602a      	str	r2, [r5, #0]
 800703c:	061a      	lsls	r2, r3, #24
 800703e:	d410      	bmi.n	8007062 <__swhatbuf_r+0x40>
 8007040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007044:	e00e      	b.n	8007064 <__swhatbuf_r+0x42>
 8007046:	466a      	mov	r2, sp
 8007048:	f000 fca0 	bl	800798c <_fstat_r>
 800704c:	2800      	cmp	r0, #0
 800704e:	dbf1      	blt.n	8007034 <__swhatbuf_r+0x12>
 8007050:	9a01      	ldr	r2, [sp, #4]
 8007052:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007056:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800705a:	425a      	negs	r2, r3
 800705c:	415a      	adcs	r2, r3
 800705e:	602a      	str	r2, [r5, #0]
 8007060:	e7ee      	b.n	8007040 <__swhatbuf_r+0x1e>
 8007062:	2340      	movs	r3, #64	; 0x40
 8007064:	2000      	movs	r0, #0
 8007066:	6023      	str	r3, [r4, #0]
 8007068:	b016      	add	sp, #88	; 0x58
 800706a:	bd70      	pop	{r4, r5, r6, pc}

0800706c <__smakebuf_r>:
 800706c:	898b      	ldrh	r3, [r1, #12]
 800706e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007070:	079d      	lsls	r5, r3, #30
 8007072:	4606      	mov	r6, r0
 8007074:	460c      	mov	r4, r1
 8007076:	d507      	bpl.n	8007088 <__smakebuf_r+0x1c>
 8007078:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	6123      	str	r3, [r4, #16]
 8007080:	2301      	movs	r3, #1
 8007082:	6163      	str	r3, [r4, #20]
 8007084:	b002      	add	sp, #8
 8007086:	bd70      	pop	{r4, r5, r6, pc}
 8007088:	ab01      	add	r3, sp, #4
 800708a:	466a      	mov	r2, sp
 800708c:	f7ff ffc9 	bl	8007022 <__swhatbuf_r>
 8007090:	9900      	ldr	r1, [sp, #0]
 8007092:	4605      	mov	r5, r0
 8007094:	4630      	mov	r0, r6
 8007096:	f7fe f87d 	bl	8005194 <_malloc_r>
 800709a:	b948      	cbnz	r0, 80070b0 <__smakebuf_r+0x44>
 800709c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070a0:	059a      	lsls	r2, r3, #22
 80070a2:	d4ef      	bmi.n	8007084 <__smakebuf_r+0x18>
 80070a4:	f023 0303 	bic.w	r3, r3, #3
 80070a8:	f043 0302 	orr.w	r3, r3, #2
 80070ac:	81a3      	strh	r3, [r4, #12]
 80070ae:	e7e3      	b.n	8007078 <__smakebuf_r+0xc>
 80070b0:	4b0d      	ldr	r3, [pc, #52]	; (80070e8 <__smakebuf_r+0x7c>)
 80070b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80070b4:	89a3      	ldrh	r3, [r4, #12]
 80070b6:	6020      	str	r0, [r4, #0]
 80070b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070bc:	81a3      	strh	r3, [r4, #12]
 80070be:	9b00      	ldr	r3, [sp, #0]
 80070c0:	6163      	str	r3, [r4, #20]
 80070c2:	9b01      	ldr	r3, [sp, #4]
 80070c4:	6120      	str	r0, [r4, #16]
 80070c6:	b15b      	cbz	r3, 80070e0 <__smakebuf_r+0x74>
 80070c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070cc:	4630      	mov	r0, r6
 80070ce:	f000 fc6f 	bl	80079b0 <_isatty_r>
 80070d2:	b128      	cbz	r0, 80070e0 <__smakebuf_r+0x74>
 80070d4:	89a3      	ldrh	r3, [r4, #12]
 80070d6:	f023 0303 	bic.w	r3, r3, #3
 80070da:	f043 0301 	orr.w	r3, r3, #1
 80070de:	81a3      	strh	r3, [r4, #12]
 80070e0:	89a0      	ldrh	r0, [r4, #12]
 80070e2:	4305      	orrs	r5, r0
 80070e4:	81a5      	strh	r5, [r4, #12]
 80070e6:	e7cd      	b.n	8007084 <__smakebuf_r+0x18>
 80070e8:	08006e71 	.word	0x08006e71

080070ec <__malloc_lock>:
 80070ec:	4801      	ldr	r0, [pc, #4]	; (80070f4 <__malloc_lock+0x8>)
 80070ee:	f7ff bf96 	b.w	800701e <__retarget_lock_acquire_recursive>
 80070f2:	bf00      	nop
 80070f4:	2000036c 	.word	0x2000036c

080070f8 <__malloc_unlock>:
 80070f8:	4801      	ldr	r0, [pc, #4]	; (8007100 <__malloc_unlock+0x8>)
 80070fa:	f7ff bf91 	b.w	8007020 <__retarget_lock_release_recursive>
 80070fe:	bf00      	nop
 8007100:	2000036c 	.word	0x2000036c

08007104 <_Balloc>:
 8007104:	b570      	push	{r4, r5, r6, lr}
 8007106:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007108:	4604      	mov	r4, r0
 800710a:	460d      	mov	r5, r1
 800710c:	b976      	cbnz	r6, 800712c <_Balloc+0x28>
 800710e:	2010      	movs	r0, #16
 8007110:	f7fd ffb6 	bl	8005080 <malloc>
 8007114:	4602      	mov	r2, r0
 8007116:	6260      	str	r0, [r4, #36]	; 0x24
 8007118:	b920      	cbnz	r0, 8007124 <_Balloc+0x20>
 800711a:	4b18      	ldr	r3, [pc, #96]	; (800717c <_Balloc+0x78>)
 800711c:	4818      	ldr	r0, [pc, #96]	; (8007180 <_Balloc+0x7c>)
 800711e:	2166      	movs	r1, #102	; 0x66
 8007120:	f7fd ff54 	bl	8004fcc <__assert_func>
 8007124:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007128:	6006      	str	r6, [r0, #0]
 800712a:	60c6      	str	r6, [r0, #12]
 800712c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800712e:	68f3      	ldr	r3, [r6, #12]
 8007130:	b183      	cbz	r3, 8007154 <_Balloc+0x50>
 8007132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800713a:	b9b8      	cbnz	r0, 800716c <_Balloc+0x68>
 800713c:	2101      	movs	r1, #1
 800713e:	fa01 f605 	lsl.w	r6, r1, r5
 8007142:	1d72      	adds	r2, r6, #5
 8007144:	0092      	lsls	r2, r2, #2
 8007146:	4620      	mov	r0, r4
 8007148:	f000 fb60 	bl	800780c <_calloc_r>
 800714c:	b160      	cbz	r0, 8007168 <_Balloc+0x64>
 800714e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007152:	e00e      	b.n	8007172 <_Balloc+0x6e>
 8007154:	2221      	movs	r2, #33	; 0x21
 8007156:	2104      	movs	r1, #4
 8007158:	4620      	mov	r0, r4
 800715a:	f000 fb57 	bl	800780c <_calloc_r>
 800715e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007160:	60f0      	str	r0, [r6, #12]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1e4      	bne.n	8007132 <_Balloc+0x2e>
 8007168:	2000      	movs	r0, #0
 800716a:	bd70      	pop	{r4, r5, r6, pc}
 800716c:	6802      	ldr	r2, [r0, #0]
 800716e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007172:	2300      	movs	r3, #0
 8007174:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007178:	e7f7      	b.n	800716a <_Balloc+0x66>
 800717a:	bf00      	nop
 800717c:	08007b1a 	.word	0x08007b1a
 8007180:	08007c00 	.word	0x08007c00

08007184 <_Bfree>:
 8007184:	b570      	push	{r4, r5, r6, lr}
 8007186:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007188:	4605      	mov	r5, r0
 800718a:	460c      	mov	r4, r1
 800718c:	b976      	cbnz	r6, 80071ac <_Bfree+0x28>
 800718e:	2010      	movs	r0, #16
 8007190:	f7fd ff76 	bl	8005080 <malloc>
 8007194:	4602      	mov	r2, r0
 8007196:	6268      	str	r0, [r5, #36]	; 0x24
 8007198:	b920      	cbnz	r0, 80071a4 <_Bfree+0x20>
 800719a:	4b09      	ldr	r3, [pc, #36]	; (80071c0 <_Bfree+0x3c>)
 800719c:	4809      	ldr	r0, [pc, #36]	; (80071c4 <_Bfree+0x40>)
 800719e:	218a      	movs	r1, #138	; 0x8a
 80071a0:	f7fd ff14 	bl	8004fcc <__assert_func>
 80071a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071a8:	6006      	str	r6, [r0, #0]
 80071aa:	60c6      	str	r6, [r0, #12]
 80071ac:	b13c      	cbz	r4, 80071be <_Bfree+0x3a>
 80071ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80071b0:	6862      	ldr	r2, [r4, #4]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071b8:	6021      	str	r1, [r4, #0]
 80071ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071be:	bd70      	pop	{r4, r5, r6, pc}
 80071c0:	08007b1a 	.word	0x08007b1a
 80071c4:	08007c00 	.word	0x08007c00

080071c8 <__multadd>:
 80071c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071cc:	690d      	ldr	r5, [r1, #16]
 80071ce:	4607      	mov	r7, r0
 80071d0:	460c      	mov	r4, r1
 80071d2:	461e      	mov	r6, r3
 80071d4:	f101 0c14 	add.w	ip, r1, #20
 80071d8:	2000      	movs	r0, #0
 80071da:	f8dc 3000 	ldr.w	r3, [ip]
 80071de:	b299      	uxth	r1, r3
 80071e0:	fb02 6101 	mla	r1, r2, r1, r6
 80071e4:	0c1e      	lsrs	r6, r3, #16
 80071e6:	0c0b      	lsrs	r3, r1, #16
 80071e8:	fb02 3306 	mla	r3, r2, r6, r3
 80071ec:	b289      	uxth	r1, r1
 80071ee:	3001      	adds	r0, #1
 80071f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80071f4:	4285      	cmp	r5, r0
 80071f6:	f84c 1b04 	str.w	r1, [ip], #4
 80071fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071fe:	dcec      	bgt.n	80071da <__multadd+0x12>
 8007200:	b30e      	cbz	r6, 8007246 <__multadd+0x7e>
 8007202:	68a3      	ldr	r3, [r4, #8]
 8007204:	42ab      	cmp	r3, r5
 8007206:	dc19      	bgt.n	800723c <__multadd+0x74>
 8007208:	6861      	ldr	r1, [r4, #4]
 800720a:	4638      	mov	r0, r7
 800720c:	3101      	adds	r1, #1
 800720e:	f7ff ff79 	bl	8007104 <_Balloc>
 8007212:	4680      	mov	r8, r0
 8007214:	b928      	cbnz	r0, 8007222 <__multadd+0x5a>
 8007216:	4602      	mov	r2, r0
 8007218:	4b0c      	ldr	r3, [pc, #48]	; (800724c <__multadd+0x84>)
 800721a:	480d      	ldr	r0, [pc, #52]	; (8007250 <__multadd+0x88>)
 800721c:	21b5      	movs	r1, #181	; 0xb5
 800721e:	f7fd fed5 	bl	8004fcc <__assert_func>
 8007222:	6922      	ldr	r2, [r4, #16]
 8007224:	3202      	adds	r2, #2
 8007226:	f104 010c 	add.w	r1, r4, #12
 800722a:	0092      	lsls	r2, r2, #2
 800722c:	300c      	adds	r0, #12
 800722e:	f7fd ff2f 	bl	8005090 <memcpy>
 8007232:	4621      	mov	r1, r4
 8007234:	4638      	mov	r0, r7
 8007236:	f7ff ffa5 	bl	8007184 <_Bfree>
 800723a:	4644      	mov	r4, r8
 800723c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007240:	3501      	adds	r5, #1
 8007242:	615e      	str	r6, [r3, #20]
 8007244:	6125      	str	r5, [r4, #16]
 8007246:	4620      	mov	r0, r4
 8007248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800724c:	08007b8c 	.word	0x08007b8c
 8007250:	08007c00 	.word	0x08007c00

08007254 <__hi0bits>:
 8007254:	0c03      	lsrs	r3, r0, #16
 8007256:	041b      	lsls	r3, r3, #16
 8007258:	b9d3      	cbnz	r3, 8007290 <__hi0bits+0x3c>
 800725a:	0400      	lsls	r0, r0, #16
 800725c:	2310      	movs	r3, #16
 800725e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007262:	bf04      	itt	eq
 8007264:	0200      	lsleq	r0, r0, #8
 8007266:	3308      	addeq	r3, #8
 8007268:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800726c:	bf04      	itt	eq
 800726e:	0100      	lsleq	r0, r0, #4
 8007270:	3304      	addeq	r3, #4
 8007272:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007276:	bf04      	itt	eq
 8007278:	0080      	lsleq	r0, r0, #2
 800727a:	3302      	addeq	r3, #2
 800727c:	2800      	cmp	r0, #0
 800727e:	db05      	blt.n	800728c <__hi0bits+0x38>
 8007280:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007284:	f103 0301 	add.w	r3, r3, #1
 8007288:	bf08      	it	eq
 800728a:	2320      	moveq	r3, #32
 800728c:	4618      	mov	r0, r3
 800728e:	4770      	bx	lr
 8007290:	2300      	movs	r3, #0
 8007292:	e7e4      	b.n	800725e <__hi0bits+0xa>

08007294 <__lo0bits>:
 8007294:	6803      	ldr	r3, [r0, #0]
 8007296:	f013 0207 	ands.w	r2, r3, #7
 800729a:	4601      	mov	r1, r0
 800729c:	d00b      	beq.n	80072b6 <__lo0bits+0x22>
 800729e:	07da      	lsls	r2, r3, #31
 80072a0:	d423      	bmi.n	80072ea <__lo0bits+0x56>
 80072a2:	0798      	lsls	r0, r3, #30
 80072a4:	bf49      	itett	mi
 80072a6:	085b      	lsrmi	r3, r3, #1
 80072a8:	089b      	lsrpl	r3, r3, #2
 80072aa:	2001      	movmi	r0, #1
 80072ac:	600b      	strmi	r3, [r1, #0]
 80072ae:	bf5c      	itt	pl
 80072b0:	600b      	strpl	r3, [r1, #0]
 80072b2:	2002      	movpl	r0, #2
 80072b4:	4770      	bx	lr
 80072b6:	b298      	uxth	r0, r3
 80072b8:	b9a8      	cbnz	r0, 80072e6 <__lo0bits+0x52>
 80072ba:	0c1b      	lsrs	r3, r3, #16
 80072bc:	2010      	movs	r0, #16
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	b90a      	cbnz	r2, 80072c6 <__lo0bits+0x32>
 80072c2:	3008      	adds	r0, #8
 80072c4:	0a1b      	lsrs	r3, r3, #8
 80072c6:	071a      	lsls	r2, r3, #28
 80072c8:	bf04      	itt	eq
 80072ca:	091b      	lsreq	r3, r3, #4
 80072cc:	3004      	addeq	r0, #4
 80072ce:	079a      	lsls	r2, r3, #30
 80072d0:	bf04      	itt	eq
 80072d2:	089b      	lsreq	r3, r3, #2
 80072d4:	3002      	addeq	r0, #2
 80072d6:	07da      	lsls	r2, r3, #31
 80072d8:	d403      	bmi.n	80072e2 <__lo0bits+0x4e>
 80072da:	085b      	lsrs	r3, r3, #1
 80072dc:	f100 0001 	add.w	r0, r0, #1
 80072e0:	d005      	beq.n	80072ee <__lo0bits+0x5a>
 80072e2:	600b      	str	r3, [r1, #0]
 80072e4:	4770      	bx	lr
 80072e6:	4610      	mov	r0, r2
 80072e8:	e7e9      	b.n	80072be <__lo0bits+0x2a>
 80072ea:	2000      	movs	r0, #0
 80072ec:	4770      	bx	lr
 80072ee:	2020      	movs	r0, #32
 80072f0:	4770      	bx	lr
	...

080072f4 <__i2b>:
 80072f4:	b510      	push	{r4, lr}
 80072f6:	460c      	mov	r4, r1
 80072f8:	2101      	movs	r1, #1
 80072fa:	f7ff ff03 	bl	8007104 <_Balloc>
 80072fe:	4602      	mov	r2, r0
 8007300:	b928      	cbnz	r0, 800730e <__i2b+0x1a>
 8007302:	4b05      	ldr	r3, [pc, #20]	; (8007318 <__i2b+0x24>)
 8007304:	4805      	ldr	r0, [pc, #20]	; (800731c <__i2b+0x28>)
 8007306:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800730a:	f7fd fe5f 	bl	8004fcc <__assert_func>
 800730e:	2301      	movs	r3, #1
 8007310:	6144      	str	r4, [r0, #20]
 8007312:	6103      	str	r3, [r0, #16]
 8007314:	bd10      	pop	{r4, pc}
 8007316:	bf00      	nop
 8007318:	08007b8c 	.word	0x08007b8c
 800731c:	08007c00 	.word	0x08007c00

08007320 <__multiply>:
 8007320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007324:	4691      	mov	r9, r2
 8007326:	690a      	ldr	r2, [r1, #16]
 8007328:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800732c:	429a      	cmp	r2, r3
 800732e:	bfb8      	it	lt
 8007330:	460b      	movlt	r3, r1
 8007332:	460c      	mov	r4, r1
 8007334:	bfbc      	itt	lt
 8007336:	464c      	movlt	r4, r9
 8007338:	4699      	movlt	r9, r3
 800733a:	6927      	ldr	r7, [r4, #16]
 800733c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007340:	68a3      	ldr	r3, [r4, #8]
 8007342:	6861      	ldr	r1, [r4, #4]
 8007344:	eb07 060a 	add.w	r6, r7, sl
 8007348:	42b3      	cmp	r3, r6
 800734a:	b085      	sub	sp, #20
 800734c:	bfb8      	it	lt
 800734e:	3101      	addlt	r1, #1
 8007350:	f7ff fed8 	bl	8007104 <_Balloc>
 8007354:	b930      	cbnz	r0, 8007364 <__multiply+0x44>
 8007356:	4602      	mov	r2, r0
 8007358:	4b44      	ldr	r3, [pc, #272]	; (800746c <__multiply+0x14c>)
 800735a:	4845      	ldr	r0, [pc, #276]	; (8007470 <__multiply+0x150>)
 800735c:	f240 115d 	movw	r1, #349	; 0x15d
 8007360:	f7fd fe34 	bl	8004fcc <__assert_func>
 8007364:	f100 0514 	add.w	r5, r0, #20
 8007368:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800736c:	462b      	mov	r3, r5
 800736e:	2200      	movs	r2, #0
 8007370:	4543      	cmp	r3, r8
 8007372:	d321      	bcc.n	80073b8 <__multiply+0x98>
 8007374:	f104 0314 	add.w	r3, r4, #20
 8007378:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800737c:	f109 0314 	add.w	r3, r9, #20
 8007380:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007384:	9202      	str	r2, [sp, #8]
 8007386:	1b3a      	subs	r2, r7, r4
 8007388:	3a15      	subs	r2, #21
 800738a:	f022 0203 	bic.w	r2, r2, #3
 800738e:	3204      	adds	r2, #4
 8007390:	f104 0115 	add.w	r1, r4, #21
 8007394:	428f      	cmp	r7, r1
 8007396:	bf38      	it	cc
 8007398:	2204      	movcc	r2, #4
 800739a:	9201      	str	r2, [sp, #4]
 800739c:	9a02      	ldr	r2, [sp, #8]
 800739e:	9303      	str	r3, [sp, #12]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d80c      	bhi.n	80073be <__multiply+0x9e>
 80073a4:	2e00      	cmp	r6, #0
 80073a6:	dd03      	ble.n	80073b0 <__multiply+0x90>
 80073a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d05a      	beq.n	8007466 <__multiply+0x146>
 80073b0:	6106      	str	r6, [r0, #16]
 80073b2:	b005      	add	sp, #20
 80073b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b8:	f843 2b04 	str.w	r2, [r3], #4
 80073bc:	e7d8      	b.n	8007370 <__multiply+0x50>
 80073be:	f8b3 a000 	ldrh.w	sl, [r3]
 80073c2:	f1ba 0f00 	cmp.w	sl, #0
 80073c6:	d024      	beq.n	8007412 <__multiply+0xf2>
 80073c8:	f104 0e14 	add.w	lr, r4, #20
 80073cc:	46a9      	mov	r9, r5
 80073ce:	f04f 0c00 	mov.w	ip, #0
 80073d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80073d6:	f8d9 1000 	ldr.w	r1, [r9]
 80073da:	fa1f fb82 	uxth.w	fp, r2
 80073de:	b289      	uxth	r1, r1
 80073e0:	fb0a 110b 	mla	r1, sl, fp, r1
 80073e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80073e8:	f8d9 2000 	ldr.w	r2, [r9]
 80073ec:	4461      	add	r1, ip
 80073ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073f2:	fb0a c20b 	mla	r2, sl, fp, ip
 80073f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80073fa:	b289      	uxth	r1, r1
 80073fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007400:	4577      	cmp	r7, lr
 8007402:	f849 1b04 	str.w	r1, [r9], #4
 8007406:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800740a:	d8e2      	bhi.n	80073d2 <__multiply+0xb2>
 800740c:	9a01      	ldr	r2, [sp, #4]
 800740e:	f845 c002 	str.w	ip, [r5, r2]
 8007412:	9a03      	ldr	r2, [sp, #12]
 8007414:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007418:	3304      	adds	r3, #4
 800741a:	f1b9 0f00 	cmp.w	r9, #0
 800741e:	d020      	beq.n	8007462 <__multiply+0x142>
 8007420:	6829      	ldr	r1, [r5, #0]
 8007422:	f104 0c14 	add.w	ip, r4, #20
 8007426:	46ae      	mov	lr, r5
 8007428:	f04f 0a00 	mov.w	sl, #0
 800742c:	f8bc b000 	ldrh.w	fp, [ip]
 8007430:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007434:	fb09 220b 	mla	r2, r9, fp, r2
 8007438:	4492      	add	sl, r2
 800743a:	b289      	uxth	r1, r1
 800743c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007440:	f84e 1b04 	str.w	r1, [lr], #4
 8007444:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007448:	f8be 1000 	ldrh.w	r1, [lr]
 800744c:	0c12      	lsrs	r2, r2, #16
 800744e:	fb09 1102 	mla	r1, r9, r2, r1
 8007452:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007456:	4567      	cmp	r7, ip
 8007458:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800745c:	d8e6      	bhi.n	800742c <__multiply+0x10c>
 800745e:	9a01      	ldr	r2, [sp, #4]
 8007460:	50a9      	str	r1, [r5, r2]
 8007462:	3504      	adds	r5, #4
 8007464:	e79a      	b.n	800739c <__multiply+0x7c>
 8007466:	3e01      	subs	r6, #1
 8007468:	e79c      	b.n	80073a4 <__multiply+0x84>
 800746a:	bf00      	nop
 800746c:	08007b8c 	.word	0x08007b8c
 8007470:	08007c00 	.word	0x08007c00

08007474 <__pow5mult>:
 8007474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007478:	4615      	mov	r5, r2
 800747a:	f012 0203 	ands.w	r2, r2, #3
 800747e:	4606      	mov	r6, r0
 8007480:	460f      	mov	r7, r1
 8007482:	d007      	beq.n	8007494 <__pow5mult+0x20>
 8007484:	4c25      	ldr	r4, [pc, #148]	; (800751c <__pow5mult+0xa8>)
 8007486:	3a01      	subs	r2, #1
 8007488:	2300      	movs	r3, #0
 800748a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800748e:	f7ff fe9b 	bl	80071c8 <__multadd>
 8007492:	4607      	mov	r7, r0
 8007494:	10ad      	asrs	r5, r5, #2
 8007496:	d03d      	beq.n	8007514 <__pow5mult+0xa0>
 8007498:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800749a:	b97c      	cbnz	r4, 80074bc <__pow5mult+0x48>
 800749c:	2010      	movs	r0, #16
 800749e:	f7fd fdef 	bl	8005080 <malloc>
 80074a2:	4602      	mov	r2, r0
 80074a4:	6270      	str	r0, [r6, #36]	; 0x24
 80074a6:	b928      	cbnz	r0, 80074b4 <__pow5mult+0x40>
 80074a8:	4b1d      	ldr	r3, [pc, #116]	; (8007520 <__pow5mult+0xac>)
 80074aa:	481e      	ldr	r0, [pc, #120]	; (8007524 <__pow5mult+0xb0>)
 80074ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80074b0:	f7fd fd8c 	bl	8004fcc <__assert_func>
 80074b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074b8:	6004      	str	r4, [r0, #0]
 80074ba:	60c4      	str	r4, [r0, #12]
 80074bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80074c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074c4:	b94c      	cbnz	r4, 80074da <__pow5mult+0x66>
 80074c6:	f240 2171 	movw	r1, #625	; 0x271
 80074ca:	4630      	mov	r0, r6
 80074cc:	f7ff ff12 	bl	80072f4 <__i2b>
 80074d0:	2300      	movs	r3, #0
 80074d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80074d6:	4604      	mov	r4, r0
 80074d8:	6003      	str	r3, [r0, #0]
 80074da:	f04f 0900 	mov.w	r9, #0
 80074de:	07eb      	lsls	r3, r5, #31
 80074e0:	d50a      	bpl.n	80074f8 <__pow5mult+0x84>
 80074e2:	4639      	mov	r1, r7
 80074e4:	4622      	mov	r2, r4
 80074e6:	4630      	mov	r0, r6
 80074e8:	f7ff ff1a 	bl	8007320 <__multiply>
 80074ec:	4639      	mov	r1, r7
 80074ee:	4680      	mov	r8, r0
 80074f0:	4630      	mov	r0, r6
 80074f2:	f7ff fe47 	bl	8007184 <_Bfree>
 80074f6:	4647      	mov	r7, r8
 80074f8:	106d      	asrs	r5, r5, #1
 80074fa:	d00b      	beq.n	8007514 <__pow5mult+0xa0>
 80074fc:	6820      	ldr	r0, [r4, #0]
 80074fe:	b938      	cbnz	r0, 8007510 <__pow5mult+0x9c>
 8007500:	4622      	mov	r2, r4
 8007502:	4621      	mov	r1, r4
 8007504:	4630      	mov	r0, r6
 8007506:	f7ff ff0b 	bl	8007320 <__multiply>
 800750a:	6020      	str	r0, [r4, #0]
 800750c:	f8c0 9000 	str.w	r9, [r0]
 8007510:	4604      	mov	r4, r0
 8007512:	e7e4      	b.n	80074de <__pow5mult+0x6a>
 8007514:	4638      	mov	r0, r7
 8007516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800751a:	bf00      	nop
 800751c:	08007d50 	.word	0x08007d50
 8007520:	08007b1a 	.word	0x08007b1a
 8007524:	08007c00 	.word	0x08007c00

08007528 <__lshift>:
 8007528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800752c:	460c      	mov	r4, r1
 800752e:	6849      	ldr	r1, [r1, #4]
 8007530:	6923      	ldr	r3, [r4, #16]
 8007532:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007536:	68a3      	ldr	r3, [r4, #8]
 8007538:	4607      	mov	r7, r0
 800753a:	4691      	mov	r9, r2
 800753c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007540:	f108 0601 	add.w	r6, r8, #1
 8007544:	42b3      	cmp	r3, r6
 8007546:	db0b      	blt.n	8007560 <__lshift+0x38>
 8007548:	4638      	mov	r0, r7
 800754a:	f7ff fddb 	bl	8007104 <_Balloc>
 800754e:	4605      	mov	r5, r0
 8007550:	b948      	cbnz	r0, 8007566 <__lshift+0x3e>
 8007552:	4602      	mov	r2, r0
 8007554:	4b2a      	ldr	r3, [pc, #168]	; (8007600 <__lshift+0xd8>)
 8007556:	482b      	ldr	r0, [pc, #172]	; (8007604 <__lshift+0xdc>)
 8007558:	f240 11d9 	movw	r1, #473	; 0x1d9
 800755c:	f7fd fd36 	bl	8004fcc <__assert_func>
 8007560:	3101      	adds	r1, #1
 8007562:	005b      	lsls	r3, r3, #1
 8007564:	e7ee      	b.n	8007544 <__lshift+0x1c>
 8007566:	2300      	movs	r3, #0
 8007568:	f100 0114 	add.w	r1, r0, #20
 800756c:	f100 0210 	add.w	r2, r0, #16
 8007570:	4618      	mov	r0, r3
 8007572:	4553      	cmp	r3, sl
 8007574:	db37      	blt.n	80075e6 <__lshift+0xbe>
 8007576:	6920      	ldr	r0, [r4, #16]
 8007578:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800757c:	f104 0314 	add.w	r3, r4, #20
 8007580:	f019 091f 	ands.w	r9, r9, #31
 8007584:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007588:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800758c:	d02f      	beq.n	80075ee <__lshift+0xc6>
 800758e:	f1c9 0e20 	rsb	lr, r9, #32
 8007592:	468a      	mov	sl, r1
 8007594:	f04f 0c00 	mov.w	ip, #0
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	fa02 f209 	lsl.w	r2, r2, r9
 800759e:	ea42 020c 	orr.w	r2, r2, ip
 80075a2:	f84a 2b04 	str.w	r2, [sl], #4
 80075a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80075aa:	4298      	cmp	r0, r3
 80075ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 80075b0:	d8f2      	bhi.n	8007598 <__lshift+0x70>
 80075b2:	1b03      	subs	r3, r0, r4
 80075b4:	3b15      	subs	r3, #21
 80075b6:	f023 0303 	bic.w	r3, r3, #3
 80075ba:	3304      	adds	r3, #4
 80075bc:	f104 0215 	add.w	r2, r4, #21
 80075c0:	4290      	cmp	r0, r2
 80075c2:	bf38      	it	cc
 80075c4:	2304      	movcc	r3, #4
 80075c6:	f841 c003 	str.w	ip, [r1, r3]
 80075ca:	f1bc 0f00 	cmp.w	ip, #0
 80075ce:	d001      	beq.n	80075d4 <__lshift+0xac>
 80075d0:	f108 0602 	add.w	r6, r8, #2
 80075d4:	3e01      	subs	r6, #1
 80075d6:	4638      	mov	r0, r7
 80075d8:	612e      	str	r6, [r5, #16]
 80075da:	4621      	mov	r1, r4
 80075dc:	f7ff fdd2 	bl	8007184 <_Bfree>
 80075e0:	4628      	mov	r0, r5
 80075e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80075ea:	3301      	adds	r3, #1
 80075ec:	e7c1      	b.n	8007572 <__lshift+0x4a>
 80075ee:	3904      	subs	r1, #4
 80075f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80075f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80075f8:	4298      	cmp	r0, r3
 80075fa:	d8f9      	bhi.n	80075f0 <__lshift+0xc8>
 80075fc:	e7ea      	b.n	80075d4 <__lshift+0xac>
 80075fe:	bf00      	nop
 8007600:	08007b8c 	.word	0x08007b8c
 8007604:	08007c00 	.word	0x08007c00

08007608 <__mcmp>:
 8007608:	b530      	push	{r4, r5, lr}
 800760a:	6902      	ldr	r2, [r0, #16]
 800760c:	690c      	ldr	r4, [r1, #16]
 800760e:	1b12      	subs	r2, r2, r4
 8007610:	d10e      	bne.n	8007630 <__mcmp+0x28>
 8007612:	f100 0314 	add.w	r3, r0, #20
 8007616:	3114      	adds	r1, #20
 8007618:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800761c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007620:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007624:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007628:	42a5      	cmp	r5, r4
 800762a:	d003      	beq.n	8007634 <__mcmp+0x2c>
 800762c:	d305      	bcc.n	800763a <__mcmp+0x32>
 800762e:	2201      	movs	r2, #1
 8007630:	4610      	mov	r0, r2
 8007632:	bd30      	pop	{r4, r5, pc}
 8007634:	4283      	cmp	r3, r0
 8007636:	d3f3      	bcc.n	8007620 <__mcmp+0x18>
 8007638:	e7fa      	b.n	8007630 <__mcmp+0x28>
 800763a:	f04f 32ff 	mov.w	r2, #4294967295
 800763e:	e7f7      	b.n	8007630 <__mcmp+0x28>

08007640 <__mdiff>:
 8007640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007644:	460c      	mov	r4, r1
 8007646:	4606      	mov	r6, r0
 8007648:	4611      	mov	r1, r2
 800764a:	4620      	mov	r0, r4
 800764c:	4690      	mov	r8, r2
 800764e:	f7ff ffdb 	bl	8007608 <__mcmp>
 8007652:	1e05      	subs	r5, r0, #0
 8007654:	d110      	bne.n	8007678 <__mdiff+0x38>
 8007656:	4629      	mov	r1, r5
 8007658:	4630      	mov	r0, r6
 800765a:	f7ff fd53 	bl	8007104 <_Balloc>
 800765e:	b930      	cbnz	r0, 800766e <__mdiff+0x2e>
 8007660:	4b3a      	ldr	r3, [pc, #232]	; (800774c <__mdiff+0x10c>)
 8007662:	4602      	mov	r2, r0
 8007664:	f240 2132 	movw	r1, #562	; 0x232
 8007668:	4839      	ldr	r0, [pc, #228]	; (8007750 <__mdiff+0x110>)
 800766a:	f7fd fcaf 	bl	8004fcc <__assert_func>
 800766e:	2301      	movs	r3, #1
 8007670:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007674:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007678:	bfa4      	itt	ge
 800767a:	4643      	movge	r3, r8
 800767c:	46a0      	movge	r8, r4
 800767e:	4630      	mov	r0, r6
 8007680:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007684:	bfa6      	itte	ge
 8007686:	461c      	movge	r4, r3
 8007688:	2500      	movge	r5, #0
 800768a:	2501      	movlt	r5, #1
 800768c:	f7ff fd3a 	bl	8007104 <_Balloc>
 8007690:	b920      	cbnz	r0, 800769c <__mdiff+0x5c>
 8007692:	4b2e      	ldr	r3, [pc, #184]	; (800774c <__mdiff+0x10c>)
 8007694:	4602      	mov	r2, r0
 8007696:	f44f 7110 	mov.w	r1, #576	; 0x240
 800769a:	e7e5      	b.n	8007668 <__mdiff+0x28>
 800769c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80076a0:	6926      	ldr	r6, [r4, #16]
 80076a2:	60c5      	str	r5, [r0, #12]
 80076a4:	f104 0914 	add.w	r9, r4, #20
 80076a8:	f108 0514 	add.w	r5, r8, #20
 80076ac:	f100 0e14 	add.w	lr, r0, #20
 80076b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80076b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80076b8:	f108 0210 	add.w	r2, r8, #16
 80076bc:	46f2      	mov	sl, lr
 80076be:	2100      	movs	r1, #0
 80076c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80076c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80076c8:	fa1f f883 	uxth.w	r8, r3
 80076cc:	fa11 f18b 	uxtah	r1, r1, fp
 80076d0:	0c1b      	lsrs	r3, r3, #16
 80076d2:	eba1 0808 	sub.w	r8, r1, r8
 80076d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80076da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80076de:	fa1f f888 	uxth.w	r8, r8
 80076e2:	1419      	asrs	r1, r3, #16
 80076e4:	454e      	cmp	r6, r9
 80076e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80076ea:	f84a 3b04 	str.w	r3, [sl], #4
 80076ee:	d8e7      	bhi.n	80076c0 <__mdiff+0x80>
 80076f0:	1b33      	subs	r3, r6, r4
 80076f2:	3b15      	subs	r3, #21
 80076f4:	f023 0303 	bic.w	r3, r3, #3
 80076f8:	3304      	adds	r3, #4
 80076fa:	3415      	adds	r4, #21
 80076fc:	42a6      	cmp	r6, r4
 80076fe:	bf38      	it	cc
 8007700:	2304      	movcc	r3, #4
 8007702:	441d      	add	r5, r3
 8007704:	4473      	add	r3, lr
 8007706:	469e      	mov	lr, r3
 8007708:	462e      	mov	r6, r5
 800770a:	4566      	cmp	r6, ip
 800770c:	d30e      	bcc.n	800772c <__mdiff+0xec>
 800770e:	f10c 0203 	add.w	r2, ip, #3
 8007712:	1b52      	subs	r2, r2, r5
 8007714:	f022 0203 	bic.w	r2, r2, #3
 8007718:	3d03      	subs	r5, #3
 800771a:	45ac      	cmp	ip, r5
 800771c:	bf38      	it	cc
 800771e:	2200      	movcc	r2, #0
 8007720:	441a      	add	r2, r3
 8007722:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007726:	b17b      	cbz	r3, 8007748 <__mdiff+0x108>
 8007728:	6107      	str	r7, [r0, #16]
 800772a:	e7a3      	b.n	8007674 <__mdiff+0x34>
 800772c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007730:	fa11 f288 	uxtah	r2, r1, r8
 8007734:	1414      	asrs	r4, r2, #16
 8007736:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800773a:	b292      	uxth	r2, r2
 800773c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007740:	f84e 2b04 	str.w	r2, [lr], #4
 8007744:	1421      	asrs	r1, r4, #16
 8007746:	e7e0      	b.n	800770a <__mdiff+0xca>
 8007748:	3f01      	subs	r7, #1
 800774a:	e7ea      	b.n	8007722 <__mdiff+0xe2>
 800774c:	08007b8c 	.word	0x08007b8c
 8007750:	08007c00 	.word	0x08007c00

08007754 <__d2b>:
 8007754:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007758:	4689      	mov	r9, r1
 800775a:	2101      	movs	r1, #1
 800775c:	ec57 6b10 	vmov	r6, r7, d0
 8007760:	4690      	mov	r8, r2
 8007762:	f7ff fccf 	bl	8007104 <_Balloc>
 8007766:	4604      	mov	r4, r0
 8007768:	b930      	cbnz	r0, 8007778 <__d2b+0x24>
 800776a:	4602      	mov	r2, r0
 800776c:	4b25      	ldr	r3, [pc, #148]	; (8007804 <__d2b+0xb0>)
 800776e:	4826      	ldr	r0, [pc, #152]	; (8007808 <__d2b+0xb4>)
 8007770:	f240 310a 	movw	r1, #778	; 0x30a
 8007774:	f7fd fc2a 	bl	8004fcc <__assert_func>
 8007778:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800777c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007780:	bb35      	cbnz	r5, 80077d0 <__d2b+0x7c>
 8007782:	2e00      	cmp	r6, #0
 8007784:	9301      	str	r3, [sp, #4]
 8007786:	d028      	beq.n	80077da <__d2b+0x86>
 8007788:	4668      	mov	r0, sp
 800778a:	9600      	str	r6, [sp, #0]
 800778c:	f7ff fd82 	bl	8007294 <__lo0bits>
 8007790:	9900      	ldr	r1, [sp, #0]
 8007792:	b300      	cbz	r0, 80077d6 <__d2b+0x82>
 8007794:	9a01      	ldr	r2, [sp, #4]
 8007796:	f1c0 0320 	rsb	r3, r0, #32
 800779a:	fa02 f303 	lsl.w	r3, r2, r3
 800779e:	430b      	orrs	r3, r1
 80077a0:	40c2      	lsrs	r2, r0
 80077a2:	6163      	str	r3, [r4, #20]
 80077a4:	9201      	str	r2, [sp, #4]
 80077a6:	9b01      	ldr	r3, [sp, #4]
 80077a8:	61a3      	str	r3, [r4, #24]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	bf14      	ite	ne
 80077ae:	2202      	movne	r2, #2
 80077b0:	2201      	moveq	r2, #1
 80077b2:	6122      	str	r2, [r4, #16]
 80077b4:	b1d5      	cbz	r5, 80077ec <__d2b+0x98>
 80077b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80077ba:	4405      	add	r5, r0
 80077bc:	f8c9 5000 	str.w	r5, [r9]
 80077c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80077c4:	f8c8 0000 	str.w	r0, [r8]
 80077c8:	4620      	mov	r0, r4
 80077ca:	b003      	add	sp, #12
 80077cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077d4:	e7d5      	b.n	8007782 <__d2b+0x2e>
 80077d6:	6161      	str	r1, [r4, #20]
 80077d8:	e7e5      	b.n	80077a6 <__d2b+0x52>
 80077da:	a801      	add	r0, sp, #4
 80077dc:	f7ff fd5a 	bl	8007294 <__lo0bits>
 80077e0:	9b01      	ldr	r3, [sp, #4]
 80077e2:	6163      	str	r3, [r4, #20]
 80077e4:	2201      	movs	r2, #1
 80077e6:	6122      	str	r2, [r4, #16]
 80077e8:	3020      	adds	r0, #32
 80077ea:	e7e3      	b.n	80077b4 <__d2b+0x60>
 80077ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80077f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077f4:	f8c9 0000 	str.w	r0, [r9]
 80077f8:	6918      	ldr	r0, [r3, #16]
 80077fa:	f7ff fd2b 	bl	8007254 <__hi0bits>
 80077fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007802:	e7df      	b.n	80077c4 <__d2b+0x70>
 8007804:	08007b8c 	.word	0x08007b8c
 8007808:	08007c00 	.word	0x08007c00

0800780c <_calloc_r>:
 800780c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800780e:	fba1 2402 	umull	r2, r4, r1, r2
 8007812:	b94c      	cbnz	r4, 8007828 <_calloc_r+0x1c>
 8007814:	4611      	mov	r1, r2
 8007816:	9201      	str	r2, [sp, #4]
 8007818:	f7fd fcbc 	bl	8005194 <_malloc_r>
 800781c:	9a01      	ldr	r2, [sp, #4]
 800781e:	4605      	mov	r5, r0
 8007820:	b930      	cbnz	r0, 8007830 <_calloc_r+0x24>
 8007822:	4628      	mov	r0, r5
 8007824:	b003      	add	sp, #12
 8007826:	bd30      	pop	{r4, r5, pc}
 8007828:	220c      	movs	r2, #12
 800782a:	6002      	str	r2, [r0, #0]
 800782c:	2500      	movs	r5, #0
 800782e:	e7f8      	b.n	8007822 <_calloc_r+0x16>
 8007830:	4621      	mov	r1, r4
 8007832:	f7fd fc3b 	bl	80050ac <memset>
 8007836:	e7f4      	b.n	8007822 <_calloc_r+0x16>

08007838 <_raise_r>:
 8007838:	291f      	cmp	r1, #31
 800783a:	b538      	push	{r3, r4, r5, lr}
 800783c:	4604      	mov	r4, r0
 800783e:	460d      	mov	r5, r1
 8007840:	d904      	bls.n	800784c <_raise_r+0x14>
 8007842:	2316      	movs	r3, #22
 8007844:	6003      	str	r3, [r0, #0]
 8007846:	f04f 30ff 	mov.w	r0, #4294967295
 800784a:	bd38      	pop	{r3, r4, r5, pc}
 800784c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800784e:	b112      	cbz	r2, 8007856 <_raise_r+0x1e>
 8007850:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007854:	b94b      	cbnz	r3, 800786a <_raise_r+0x32>
 8007856:	4620      	mov	r0, r4
 8007858:	f000 f830 	bl	80078bc <_getpid_r>
 800785c:	462a      	mov	r2, r5
 800785e:	4601      	mov	r1, r0
 8007860:	4620      	mov	r0, r4
 8007862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007866:	f000 b817 	b.w	8007898 <_kill_r>
 800786a:	2b01      	cmp	r3, #1
 800786c:	d00a      	beq.n	8007884 <_raise_r+0x4c>
 800786e:	1c59      	adds	r1, r3, #1
 8007870:	d103      	bne.n	800787a <_raise_r+0x42>
 8007872:	2316      	movs	r3, #22
 8007874:	6003      	str	r3, [r0, #0]
 8007876:	2001      	movs	r0, #1
 8007878:	e7e7      	b.n	800784a <_raise_r+0x12>
 800787a:	2400      	movs	r4, #0
 800787c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007880:	4628      	mov	r0, r5
 8007882:	4798      	blx	r3
 8007884:	2000      	movs	r0, #0
 8007886:	e7e0      	b.n	800784a <_raise_r+0x12>

08007888 <raise>:
 8007888:	4b02      	ldr	r3, [pc, #8]	; (8007894 <raise+0xc>)
 800788a:	4601      	mov	r1, r0
 800788c:	6818      	ldr	r0, [r3, #0]
 800788e:	f7ff bfd3 	b.w	8007838 <_raise_r>
 8007892:	bf00      	nop
 8007894:	20000028 	.word	0x20000028

08007898 <_kill_r>:
 8007898:	b538      	push	{r3, r4, r5, lr}
 800789a:	4d07      	ldr	r5, [pc, #28]	; (80078b8 <_kill_r+0x20>)
 800789c:	2300      	movs	r3, #0
 800789e:	4604      	mov	r4, r0
 80078a0:	4608      	mov	r0, r1
 80078a2:	4611      	mov	r1, r2
 80078a4:	602b      	str	r3, [r5, #0]
 80078a6:	f7f9 fe1b 	bl	80014e0 <_kill>
 80078aa:	1c43      	adds	r3, r0, #1
 80078ac:	d102      	bne.n	80078b4 <_kill_r+0x1c>
 80078ae:	682b      	ldr	r3, [r5, #0]
 80078b0:	b103      	cbz	r3, 80078b4 <_kill_r+0x1c>
 80078b2:	6023      	str	r3, [r4, #0]
 80078b4:	bd38      	pop	{r3, r4, r5, pc}
 80078b6:	bf00      	nop
 80078b8:	20000370 	.word	0x20000370

080078bc <_getpid_r>:
 80078bc:	f7f9 be08 	b.w	80014d0 <_getpid>

080078c0 <__sread>:
 80078c0:	b510      	push	{r4, lr}
 80078c2:	460c      	mov	r4, r1
 80078c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c8:	f000 f8a6 	bl	8007a18 <_read_r>
 80078cc:	2800      	cmp	r0, #0
 80078ce:	bfab      	itete	ge
 80078d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078d2:	89a3      	ldrhlt	r3, [r4, #12]
 80078d4:	181b      	addge	r3, r3, r0
 80078d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078da:	bfac      	ite	ge
 80078dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80078de:	81a3      	strhlt	r3, [r4, #12]
 80078e0:	bd10      	pop	{r4, pc}

080078e2 <__swrite>:
 80078e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e6:	461f      	mov	r7, r3
 80078e8:	898b      	ldrh	r3, [r1, #12]
 80078ea:	05db      	lsls	r3, r3, #23
 80078ec:	4605      	mov	r5, r0
 80078ee:	460c      	mov	r4, r1
 80078f0:	4616      	mov	r6, r2
 80078f2:	d505      	bpl.n	8007900 <__swrite+0x1e>
 80078f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f8:	2302      	movs	r3, #2
 80078fa:	2200      	movs	r2, #0
 80078fc:	f000 f868 	bl	80079d0 <_lseek_r>
 8007900:	89a3      	ldrh	r3, [r4, #12]
 8007902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800790a:	81a3      	strh	r3, [r4, #12]
 800790c:	4632      	mov	r2, r6
 800790e:	463b      	mov	r3, r7
 8007910:	4628      	mov	r0, r5
 8007912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007916:	f000 b817 	b.w	8007948 <_write_r>

0800791a <__sseek>:
 800791a:	b510      	push	{r4, lr}
 800791c:	460c      	mov	r4, r1
 800791e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007922:	f000 f855 	bl	80079d0 <_lseek_r>
 8007926:	1c43      	adds	r3, r0, #1
 8007928:	89a3      	ldrh	r3, [r4, #12]
 800792a:	bf15      	itete	ne
 800792c:	6560      	strne	r0, [r4, #84]	; 0x54
 800792e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007932:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007936:	81a3      	strheq	r3, [r4, #12]
 8007938:	bf18      	it	ne
 800793a:	81a3      	strhne	r3, [r4, #12]
 800793c:	bd10      	pop	{r4, pc}

0800793e <__sclose>:
 800793e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007942:	f000 b813 	b.w	800796c <_close_r>
	...

08007948 <_write_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	4d07      	ldr	r5, [pc, #28]	; (8007968 <_write_r+0x20>)
 800794c:	4604      	mov	r4, r0
 800794e:	4608      	mov	r0, r1
 8007950:	4611      	mov	r1, r2
 8007952:	2200      	movs	r2, #0
 8007954:	602a      	str	r2, [r5, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	f7f9 fdf9 	bl	800154e <_write>
 800795c:	1c43      	adds	r3, r0, #1
 800795e:	d102      	bne.n	8007966 <_write_r+0x1e>
 8007960:	682b      	ldr	r3, [r5, #0]
 8007962:	b103      	cbz	r3, 8007966 <_write_r+0x1e>
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	bd38      	pop	{r3, r4, r5, pc}
 8007968:	20000370 	.word	0x20000370

0800796c <_close_r>:
 800796c:	b538      	push	{r3, r4, r5, lr}
 800796e:	4d06      	ldr	r5, [pc, #24]	; (8007988 <_close_r+0x1c>)
 8007970:	2300      	movs	r3, #0
 8007972:	4604      	mov	r4, r0
 8007974:	4608      	mov	r0, r1
 8007976:	602b      	str	r3, [r5, #0]
 8007978:	f7f9 fe05 	bl	8001586 <_close>
 800797c:	1c43      	adds	r3, r0, #1
 800797e:	d102      	bne.n	8007986 <_close_r+0x1a>
 8007980:	682b      	ldr	r3, [r5, #0]
 8007982:	b103      	cbz	r3, 8007986 <_close_r+0x1a>
 8007984:	6023      	str	r3, [r4, #0]
 8007986:	bd38      	pop	{r3, r4, r5, pc}
 8007988:	20000370 	.word	0x20000370

0800798c <_fstat_r>:
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	4d07      	ldr	r5, [pc, #28]	; (80079ac <_fstat_r+0x20>)
 8007990:	2300      	movs	r3, #0
 8007992:	4604      	mov	r4, r0
 8007994:	4608      	mov	r0, r1
 8007996:	4611      	mov	r1, r2
 8007998:	602b      	str	r3, [r5, #0]
 800799a:	f7f9 fe00 	bl	800159e <_fstat>
 800799e:	1c43      	adds	r3, r0, #1
 80079a0:	d102      	bne.n	80079a8 <_fstat_r+0x1c>
 80079a2:	682b      	ldr	r3, [r5, #0]
 80079a4:	b103      	cbz	r3, 80079a8 <_fstat_r+0x1c>
 80079a6:	6023      	str	r3, [r4, #0]
 80079a8:	bd38      	pop	{r3, r4, r5, pc}
 80079aa:	bf00      	nop
 80079ac:	20000370 	.word	0x20000370

080079b0 <_isatty_r>:
 80079b0:	b538      	push	{r3, r4, r5, lr}
 80079b2:	4d06      	ldr	r5, [pc, #24]	; (80079cc <_isatty_r+0x1c>)
 80079b4:	2300      	movs	r3, #0
 80079b6:	4604      	mov	r4, r0
 80079b8:	4608      	mov	r0, r1
 80079ba:	602b      	str	r3, [r5, #0]
 80079bc:	f7f9 fdff 	bl	80015be <_isatty>
 80079c0:	1c43      	adds	r3, r0, #1
 80079c2:	d102      	bne.n	80079ca <_isatty_r+0x1a>
 80079c4:	682b      	ldr	r3, [r5, #0]
 80079c6:	b103      	cbz	r3, 80079ca <_isatty_r+0x1a>
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	bd38      	pop	{r3, r4, r5, pc}
 80079cc:	20000370 	.word	0x20000370

080079d0 <_lseek_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	4d07      	ldr	r5, [pc, #28]	; (80079f0 <_lseek_r+0x20>)
 80079d4:	4604      	mov	r4, r0
 80079d6:	4608      	mov	r0, r1
 80079d8:	4611      	mov	r1, r2
 80079da:	2200      	movs	r2, #0
 80079dc:	602a      	str	r2, [r5, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	f7f9 fdf8 	bl	80015d4 <_lseek>
 80079e4:	1c43      	adds	r3, r0, #1
 80079e6:	d102      	bne.n	80079ee <_lseek_r+0x1e>
 80079e8:	682b      	ldr	r3, [r5, #0]
 80079ea:	b103      	cbz	r3, 80079ee <_lseek_r+0x1e>
 80079ec:	6023      	str	r3, [r4, #0]
 80079ee:	bd38      	pop	{r3, r4, r5, pc}
 80079f0:	20000370 	.word	0x20000370

080079f4 <__ascii_mbtowc>:
 80079f4:	b082      	sub	sp, #8
 80079f6:	b901      	cbnz	r1, 80079fa <__ascii_mbtowc+0x6>
 80079f8:	a901      	add	r1, sp, #4
 80079fa:	b142      	cbz	r2, 8007a0e <__ascii_mbtowc+0x1a>
 80079fc:	b14b      	cbz	r3, 8007a12 <__ascii_mbtowc+0x1e>
 80079fe:	7813      	ldrb	r3, [r2, #0]
 8007a00:	600b      	str	r3, [r1, #0]
 8007a02:	7812      	ldrb	r2, [r2, #0]
 8007a04:	1e10      	subs	r0, r2, #0
 8007a06:	bf18      	it	ne
 8007a08:	2001      	movne	r0, #1
 8007a0a:	b002      	add	sp, #8
 8007a0c:	4770      	bx	lr
 8007a0e:	4610      	mov	r0, r2
 8007a10:	e7fb      	b.n	8007a0a <__ascii_mbtowc+0x16>
 8007a12:	f06f 0001 	mvn.w	r0, #1
 8007a16:	e7f8      	b.n	8007a0a <__ascii_mbtowc+0x16>

08007a18 <_read_r>:
 8007a18:	b538      	push	{r3, r4, r5, lr}
 8007a1a:	4d07      	ldr	r5, [pc, #28]	; (8007a38 <_read_r+0x20>)
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	4608      	mov	r0, r1
 8007a20:	4611      	mov	r1, r2
 8007a22:	2200      	movs	r2, #0
 8007a24:	602a      	str	r2, [r5, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	f7f9 fd74 	bl	8001514 <_read>
 8007a2c:	1c43      	adds	r3, r0, #1
 8007a2e:	d102      	bne.n	8007a36 <_read_r+0x1e>
 8007a30:	682b      	ldr	r3, [r5, #0]
 8007a32:	b103      	cbz	r3, 8007a36 <_read_r+0x1e>
 8007a34:	6023      	str	r3, [r4, #0]
 8007a36:	bd38      	pop	{r3, r4, r5, pc}
 8007a38:	20000370 	.word	0x20000370

08007a3c <__ascii_wctomb>:
 8007a3c:	b149      	cbz	r1, 8007a52 <__ascii_wctomb+0x16>
 8007a3e:	2aff      	cmp	r2, #255	; 0xff
 8007a40:	bf85      	ittet	hi
 8007a42:	238a      	movhi	r3, #138	; 0x8a
 8007a44:	6003      	strhi	r3, [r0, #0]
 8007a46:	700a      	strbls	r2, [r1, #0]
 8007a48:	f04f 30ff 	movhi.w	r0, #4294967295
 8007a4c:	bf98      	it	ls
 8007a4e:	2001      	movls	r0, #1
 8007a50:	4770      	bx	lr
 8007a52:	4608      	mov	r0, r1
 8007a54:	4770      	bx	lr
	...

08007a58 <_init>:
 8007a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5a:	bf00      	nop
 8007a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a5e:	bc08      	pop	{r3}
 8007a60:	469e      	mov	lr, r3
 8007a62:	4770      	bx	lr

08007a64 <_fini>:
 8007a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a66:	bf00      	nop
 8007a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a6a:	bc08      	pop	{r3}
 8007a6c:	469e      	mov	lr, r3
 8007a6e:	4770      	bx	lr
