
CMSIS_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  080085c0  080085c0  000185c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b88  08008b88  00022284  2**0
                  CONTENTS
  4 .ARM          00000008  08008b88  08008b88  00018b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b90  08008b90  00022284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b90  08008b90  00018b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b94  08008b94  00018b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002144  20000000  08008b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20002144  0800acdc  00022144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200021e4  0800ad7c  000221e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001670  20002284  0800ae1c  00022284  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200038f4  0800ae1c  000238f4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00022284  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017003  00000000  00000000  000222b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003a35  00000000  00000000  000392b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ff0  00000000  00000000  0003ccf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027c9e  00000000  00000000  0003dce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001636e  00000000  00000000  0006597e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f366e  00000000  00000000  0007bcec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c9  00000000  00000000  0016f35a  2**0
                  CONTENTS, READONLY
 21 .debug_ranges 00000e20  00000000  00000000  0016f428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000050a4  00000000  00000000  00170248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000e4f  00000000  00000000  001752ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20002284 	.word	0x20002284
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080085a8 	.word	0x080085a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20002288 	.word	0x20002288
 800020c:	080085a8 	.word	0x080085a8

08000210 <setjmp>:
 8000210:	46ec      	mov	ip, sp
 8000212:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000216:	f04f 0000 	mov.w	r0, #0
 800021a:	4770      	bx	lr

0800021c <longjmp>:
 800021c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000220:	46e5      	mov	sp, ip
 8000222:	0008      	movs	r0, r1
 8000224:	bf08      	it	eq
 8000226:	2001      	moveq	r0, #1
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop

0800022c <strlen>:
 800022c:	4603      	mov	r3, r0
 800022e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000232:	2a00      	cmp	r2, #0
 8000234:	d1fb      	bne.n	800022e <strlen+0x2>
 8000236:	1a18      	subs	r0, r3, r0
 8000238:	3801      	subs	r0, #1
 800023a:	4770      	bx	lr
 800023c:	0000      	movs	r0, r0
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b974 	b.w	8000f08 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468e      	mov	lr, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14d      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4694      	mov	ip, r2
 8000c4a:	d969      	bls.n	8000d20 <__udivmoddi4+0xe8>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b152      	cbz	r2, 8000c68 <__udivmoddi4+0x30>
 8000c52:	fa01 f302 	lsl.w	r3, r1, r2
 8000c56:	f1c2 0120 	rsb	r1, r2, #32
 8000c5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c62:	ea41 0e03 	orr.w	lr, r1, r3
 8000c66:	4094      	lsls	r4, r2
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	0c21      	lsrs	r1, r4, #16
 8000c6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c72:	fa1f f78c 	uxth.w	r7, ip
 8000c76:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c7e:	fb06 f107 	mul.w	r1, r6, r7
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8e:	f080 811f 	bcs.w	8000ed0 <__udivmoddi4+0x298>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 811c 	bls.w	8000ed0 <__udivmoddi4+0x298>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 f707 	mul.w	r7, r0, r7
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x92>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	f080 810a 	bcs.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	f240 8107 	bls.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	1be4      	subs	r4, r4, r7
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	b11d      	cbz	r5, 8000cdc <__udivmoddi4+0xa4>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0xc2>
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	f000 80ef 	beq.w	8000eca <__udivmoddi4+0x292>
 8000cec:	2600      	movs	r6, #0
 8000cee:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f683 	clz	r6, r3
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d14a      	bne.n	8000d98 <__udivmoddi4+0x160>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd4>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80f9 	bhi.w	8000efe <__udivmoddi4+0x2c6>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	469e      	mov	lr, r3
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d0e0      	beq.n	8000cdc <__udivmoddi4+0xa4>
 8000d1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d1e:	e7dd      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xec>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 8092 	bne.w	8000e52 <__udivmoddi4+0x21a>
 8000d2e:	eba1 010c 	sub.w	r1, r1, ip
 8000d32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	0c20      	lsrs	r0, r4, #16
 8000d3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d42:	fb07 1113 	mls	r1, r7, r3, r1
 8000d46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4a:	fb0e f003 	mul.w	r0, lr, r3
 8000d4e:	4288      	cmp	r0, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x12c>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x12a>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f200 80cb 	bhi.w	8000ef8 <__udivmoddi4+0x2c0>
 8000d62:	4643      	mov	r3, r8
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d74:	fb0e fe00 	mul.w	lr, lr, r0
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x156>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x154>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f200 80bb 	bhi.w	8000f02 <__udivmoddi4+0x2ca>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d96:	e79c      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000d98:	f1c6 0720 	rsb	r7, r6, #32
 8000d9c:	40b3      	lsls	r3, r6
 8000d9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da6:	fa20 f407 	lsr.w	r4, r0, r7
 8000daa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dae:	431c      	orrs	r4, r3
 8000db0:	40f9      	lsrs	r1, r7
 8000db2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000db6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dbe:	0c20      	lsrs	r0, r4, #16
 8000dc0:	fa1f fe8c 	uxth.w	lr, ip
 8000dc4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd6:	d90b      	bls.n	8000df0 <__udivmoddi4+0x1b8>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de0:	f080 8088 	bcs.w	8000ef4 <__udivmoddi4+0x2bc>
 8000de4:	4288      	cmp	r0, r1
 8000de6:	f240 8085 	bls.w	8000ef4 <__udivmoddi4+0x2bc>
 8000dea:	f1a8 0802 	sub.w	r8, r8, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	1a09      	subs	r1, r1, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000df8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dfc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e04:	458e      	cmp	lr, r1
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x1e2>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e10:	d26c      	bcs.n	8000eec <__udivmoddi4+0x2b4>
 8000e12:	458e      	cmp	lr, r1
 8000e14:	d96a      	bls.n	8000eec <__udivmoddi4+0x2b4>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4461      	add	r1, ip
 8000e1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e22:	eba1 010e 	sub.w	r1, r1, lr
 8000e26:	42a1      	cmp	r1, r4
 8000e28:	46c8      	mov	r8, r9
 8000e2a:	46a6      	mov	lr, r4
 8000e2c:	d356      	bcc.n	8000edc <__udivmoddi4+0x2a4>
 8000e2e:	d053      	beq.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x212>
 8000e32:	ebb3 0208 	subs.w	r2, r3, r8
 8000e36:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e42:	40f1      	lsrs	r1, r6
 8000e44:	431f      	orrs	r7, r3
 8000e46:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	f1c2 0320 	rsb	r3, r2, #32
 8000e56:	40d8      	lsrs	r0, r3
 8000e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e60:	4091      	lsls	r1, r2
 8000e62:	4301      	orrs	r1, r0
 8000e64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e68:	fa1f fe8c 	uxth.w	lr, ip
 8000e6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e70:	fb07 3610 	mls	r6, r7, r0, r3
 8000e74:	0c0b      	lsrs	r3, r1, #16
 8000e76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	fa04 f402 	lsl.w	r4, r4, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x260>
 8000e86:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8e:	d22f      	bcs.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e90:	429e      	cmp	r6, r3
 8000e92:	d92d      	bls.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e94:	3802      	subs	r0, #2
 8000e96:	4463      	add	r3, ip
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	b289      	uxth	r1, r1
 8000e9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x28a>
 8000eb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb8:	d216      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d914      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000ebe:	3e02      	subs	r6, #2
 8000ec0:	4461      	add	r1, ip
 8000ec2:	1ac9      	subs	r1, r1, r3
 8000ec4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec8:	e738      	b.n	8000d3c <__udivmoddi4+0x104>
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4628      	mov	r0, r5
 8000ece:	e705      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	e6e3      	b.n	8000c9c <__udivmoddi4+0x64>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6f8      	b.n	8000cca <__udivmoddi4+0x92>
 8000ed8:	454b      	cmp	r3, r9
 8000eda:	d2a9      	bcs.n	8000e30 <__udivmoddi4+0x1f8>
 8000edc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7a3      	b.n	8000e30 <__udivmoddi4+0x1f8>
 8000ee8:	4646      	mov	r6, r8
 8000eea:	e7ea      	b.n	8000ec2 <__udivmoddi4+0x28a>
 8000eec:	4620      	mov	r0, r4
 8000eee:	e794      	b.n	8000e1a <__udivmoddi4+0x1e2>
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	e7d1      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ef4:	46d0      	mov	r8, sl
 8000ef6:	e77b      	b.n	8000df0 <__udivmoddi4+0x1b8>
 8000ef8:	3b02      	subs	r3, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	e732      	b.n	8000d64 <__udivmoddi4+0x12c>
 8000efe:	4630      	mov	r0, r6
 8000f00:	e709      	b.n	8000d16 <__udivmoddi4+0xde>
 8000f02:	4464      	add	r4, ip
 8000f04:	3802      	subs	r0, #2
 8000f06:	e742      	b.n	8000d8e <__udivmoddi4+0x156>

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000f10:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <MX_ETH_Init+0x84>)
 8000f12:	4a20      	ldr	r2, [pc, #128]	; (8000f94 <MX_ETH_Init+0x88>)
 8000f14:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000f16:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <MX_ETH_Init+0x8c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <MX_ETH_Init+0x8c>)
 8000f1e:	2280      	movs	r2, #128	; 0x80
 8000f20:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000f22:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <MX_ETH_Init+0x8c>)
 8000f24:	22e1      	movs	r2, #225	; 0xe1
 8000f26:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <MX_ETH_Init+0x8c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <MX_ETH_Init+0x8c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000f34:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <MX_ETH_Init+0x8c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <MX_ETH_Init+0x84>)
 8000f3c:	4a16      	ldr	r2, [pc, #88]	; (8000f98 <MX_ETH_Init+0x8c>)
 8000f3e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <MX_ETH_Init+0x84>)
 8000f42:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f46:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_ETH_Init+0x84>)
 8000f4a:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <MX_ETH_Init+0x90>)
 8000f4c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <MX_ETH_Init+0x84>)
 8000f50:	4a13      	ldr	r2, [pc, #76]	; (8000fa0 <MX_ETH_Init+0x94>)
 8000f52:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_ETH_Init+0x84>)
 8000f56:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000f5a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f5c:	480c      	ldr	r0, [pc, #48]	; (8000f90 <MX_ETH_Init+0x84>)
 8000f5e:	f000 fdeb 	bl	8001b38 <HAL_ETH_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000f68:	f000 f9f2 	bl	8001350 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000f6c:	2238      	movs	r2, #56	; 0x38
 8000f6e:	2100      	movs	r1, #0
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <MX_ETH_Init+0x98>)
 8000f72:	f004 fc2f 	bl	80057d4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <MX_ETH_Init+0x98>)
 8000f78:	2221      	movs	r2, #33	; 0x21
 8000f7a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_ETH_Init+0x98>)
 8000f7e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000f82:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f84:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <MX_ETH_Init+0x98>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20003294 	.word	0x20003294
 8000f94:	40028000 	.word	0x40028000
 8000f98:	20003344 	.word	0x20003344
 8000f9c:	200021e4 	.word	0x200021e4
 8000fa0:	20002144 	.word	0x20002144
 8000fa4:	2000325c 	.word	0x2000325c

08000fa8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08e      	sub	sp, #56	; 0x38
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a4e      	ldr	r2, [pc, #312]	; (8001100 <HAL_ETH_MspInit+0x158>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	f040 8096 	bne.w	80010f8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000fcc:	4b4d      	ldr	r3, [pc, #308]	; (8001104 <HAL_ETH_MspInit+0x15c>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a4c      	ldr	r2, [pc, #304]	; (8001104 <HAL_ETH_MspInit+0x15c>)
 8000fd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd8:	4b4a      	ldr	r3, [pc, #296]	; (8001104 <HAL_ETH_MspInit+0x15c>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe0:	623b      	str	r3, [r7, #32]
 8000fe2:	6a3b      	ldr	r3, [r7, #32]
 8000fe4:	4b47      	ldr	r3, [pc, #284]	; (8001104 <HAL_ETH_MspInit+0x15c>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	4a46      	ldr	r2, [pc, #280]	; (8001104 <HAL_ETH_MspInit+0x15c>)
 8000fea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fee:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff0:	4b44      	ldr	r3, [pc, #272]	; (8001104 <HAL_ETH_MspInit+0x15c>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ff8:	61fb      	str	r3, [r7, #28]
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	4b41      	ldr	r3, [pc, #260]	; (8001104 <HAL_ETH_MspInit+0x15c>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	4a40      	ldr	r2, [pc, #256]	; (8001104 <HAL_ETH_MspInit+0x15c>)
 8001002:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001006:	6313      	str	r3, [r2, #48]	; 0x30
 8001008:	4b3e      	ldr	r3, [pc, #248]	; (8001104 <HAL_ETH_MspInit+0x15c>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001010:	61bb      	str	r3, [r7, #24]
 8001012:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001014:	4b3b      	ldr	r3, [pc, #236]	; (8001104 <HAL_ETH_MspInit+0x15c>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	4a3a      	ldr	r2, [pc, #232]	; (8001104 <HAL_ETH_MspInit+0x15c>)
 800101a:	f043 0304 	orr.w	r3, r3, #4
 800101e:	6313      	str	r3, [r2, #48]	; 0x30
 8001020:	4b38      	ldr	r3, [pc, #224]	; (8001104 <HAL_ETH_MspInit+0x15c>)
 8001022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	4b35      	ldr	r3, [pc, #212]	; (8001104 <HAL_ETH_MspInit+0x15c>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	4a34      	ldr	r2, [pc, #208]	; (8001104 <HAL_ETH_MspInit+0x15c>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6313      	str	r3, [r2, #48]	; 0x30
 8001038:	4b32      	ldr	r3, [pc, #200]	; (8001104 <HAL_ETH_MspInit+0x15c>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	4b2f      	ldr	r3, [pc, #188]	; (8001104 <HAL_ETH_MspInit+0x15c>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	4a2e      	ldr	r2, [pc, #184]	; (8001104 <HAL_ETH_MspInit+0x15c>)
 800104a:	f043 0302 	orr.w	r3, r3, #2
 800104e:	6313      	str	r3, [r2, #48]	; 0x30
 8001050:	4b2c      	ldr	r3, [pc, #176]	; (8001104 <HAL_ETH_MspInit+0x15c>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800105c:	4b29      	ldr	r3, [pc, #164]	; (8001104 <HAL_ETH_MspInit+0x15c>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001060:	4a28      	ldr	r2, [pc, #160]	; (8001104 <HAL_ETH_MspInit+0x15c>)
 8001062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001066:	6313      	str	r3, [r2, #48]	; 0x30
 8001068:	4b26      	ldr	r3, [pc, #152]	; (8001104 <HAL_ETH_MspInit+0x15c>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001074:	2332      	movs	r3, #50	; 0x32
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001080:	2303      	movs	r3, #3
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001084:	230b      	movs	r3, #11
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108c:	4619      	mov	r1, r3
 800108e:	481e      	ldr	r0, [pc, #120]	; (8001108 <HAL_ETH_MspInit+0x160>)
 8001090:	f001 f878 	bl	8002184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001094:	2386      	movs	r3, #134	; 0x86
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010a4:	230b      	movs	r3, #11
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ac:	4619      	mov	r1, r3
 80010ae:	4817      	ldr	r0, [pc, #92]	; (800110c <HAL_ETH_MspInit+0x164>)
 80010b0:	f001 f868 	bl	8002184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c2:	2303      	movs	r3, #3
 80010c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010c6:	230b      	movs	r3, #11
 80010c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ce:	4619      	mov	r1, r3
 80010d0:	480f      	ldr	r0, [pc, #60]	; (8001110 <HAL_ETH_MspInit+0x168>)
 80010d2:	f001 f857 	bl	8002184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e4:	2303      	movs	r3, #3
 80010e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010e8:	230b      	movs	r3, #11
 80010ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f0:	4619      	mov	r1, r3
 80010f2:	4808      	ldr	r0, [pc, #32]	; (8001114 <HAL_ETH_MspInit+0x16c>)
 80010f4:	f001 f846 	bl	8002184 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80010f8:	bf00      	nop
 80010fa:	3738      	adds	r7, #56	; 0x38
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40028000 	.word	0x40028000
 8001104:	40023800 	.word	0x40023800
 8001108:	40020800 	.word	0x40020800
 800110c:	40020000 	.word	0x40020000
 8001110:	40020400 	.word	0x40020400
 8001114:	40021800 	.word	0x40021800

08001118 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	; 0x30
 800111c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	4b47      	ldr	r3, [pc, #284]	; (800124c <MX_GPIO_Init+0x134>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a46      	ldr	r2, [pc, #280]	; (800124c <MX_GPIO_Init+0x134>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b44      	ldr	r3, [pc, #272]	; (800124c <MX_GPIO_Init+0x134>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	61bb      	str	r3, [r7, #24]
 8001144:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001146:	4b41      	ldr	r3, [pc, #260]	; (800124c <MX_GPIO_Init+0x134>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a40      	ldr	r2, [pc, #256]	; (800124c <MX_GPIO_Init+0x134>)
 800114c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b3e      	ldr	r3, [pc, #248]	; (800124c <MX_GPIO_Init+0x134>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	4b3b      	ldr	r3, [pc, #236]	; (800124c <MX_GPIO_Init+0x134>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a3a      	ldr	r2, [pc, #232]	; (800124c <MX_GPIO_Init+0x134>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b38      	ldr	r3, [pc, #224]	; (800124c <MX_GPIO_Init+0x134>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	4b35      	ldr	r3, [pc, #212]	; (800124c <MX_GPIO_Init+0x134>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a34      	ldr	r2, [pc, #208]	; (800124c <MX_GPIO_Init+0x134>)
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b32      	ldr	r3, [pc, #200]	; (800124c <MX_GPIO_Init+0x134>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800118e:	4b2f      	ldr	r3, [pc, #188]	; (800124c <MX_GPIO_Init+0x134>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a2e      	ldr	r2, [pc, #184]	; (800124c <MX_GPIO_Init+0x134>)
 8001194:	f043 0308 	orr.w	r3, r3, #8
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b2c      	ldr	r3, [pc, #176]	; (800124c <MX_GPIO_Init+0x134>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011a6:	4b29      	ldr	r3, [pc, #164]	; (800124c <MX_GPIO_Init+0x134>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a28      	ldr	r2, [pc, #160]	; (800124c <MX_GPIO_Init+0x134>)
 80011ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b26      	ldr	r3, [pc, #152]	; (800124c <MX_GPIO_Init+0x134>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f244 0181 	movw	r1, #16513	; 0x4081
 80011c4:	4822      	ldr	r0, [pc, #136]	; (8001250 <MX_GPIO_Init+0x138>)
 80011c6:	f001 f989 	bl	80024dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2140      	movs	r1, #64	; 0x40
 80011ce:	4821      	ldr	r0, [pc, #132]	; (8001254 <MX_GPIO_Init+0x13c>)
 80011d0:	f001 f984 	bl	80024dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	481b      	ldr	r0, [pc, #108]	; (8001258 <MX_GPIO_Init+0x140>)
 80011ec:	f000 ffca 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80011f0:	f244 0381 	movw	r3, #16513	; 0x4081
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	4619      	mov	r1, r3
 8001208:	4811      	ldr	r0, [pc, #68]	; (8001250 <MX_GPIO_Init+0x138>)
 800120a:	f000 ffbb 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800120e:	2340      	movs	r3, #64	; 0x40
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	480b      	ldr	r0, [pc, #44]	; (8001254 <MX_GPIO_Init+0x13c>)
 8001226:	f000 ffad 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800122a:	2380      	movs	r3, #128	; 0x80
 800122c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_GPIO_Init+0x13c>)
 800123e:	f000 ffa1 	bl	8002184 <HAL_GPIO_Init>

}
 8001242:	bf00      	nop
 8001244:	3730      	adds	r7, #48	; 0x30
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	40020400 	.word	0x40020400
 8001254:	40021800 	.word	0x40021800
 8001258:	40020800 	.word	0x40020800

0800125c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001260:	f000 fb03 	bl	800186a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001264:	f000 f80c 	bl	8001280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001268:	f7ff ff56 	bl	8001118 <MX_GPIO_Init>
  MX_ETH_Init();
 800126c:	f7ff fe4e 	bl	8000f0c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001270:	f000 f99a 	bl	80015a8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001274:	f000 fa28 	bl	80016c8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  RunAllTests();
 8001278:	f003 fb26 	bl	80048c8 <RunAllTests>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800127c:	e7fe      	b.n	800127c <main+0x20>
	...

08001280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b094      	sub	sp, #80	; 0x50
 8001284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	2230      	movs	r2, #48	; 0x30
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f004 faa0 	bl	80057d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012a4:	f001 fa7c 	bl	80027a0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a8:	4b27      	ldr	r3, [pc, #156]	; (8001348 <SystemClock_Config+0xc8>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	4a26      	ldr	r2, [pc, #152]	; (8001348 <SystemClock_Config+0xc8>)
 80012ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b2:	6413      	str	r3, [r2, #64]	; 0x40
 80012b4:	4b24      	ldr	r3, [pc, #144]	; (8001348 <SystemClock_Config+0xc8>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012c0:	4b22      	ldr	r3, [pc, #136]	; (800134c <SystemClock_Config+0xcc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012c8:	4a20      	ldr	r2, [pc, #128]	; (800134c <SystemClock_Config+0xcc>)
 80012ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4b1e      	ldr	r3, [pc, #120]	; (800134c <SystemClock_Config+0xcc>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012dc:	2301      	movs	r3, #1
 80012de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e6:	2302      	movs	r3, #2
 80012e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012f0:	2304      	movs	r3, #4
 80012f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80012f4:	2348      	movs	r3, #72	; 0x48
 80012f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f8:	2302      	movs	r3, #2
 80012fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80012fc:	2303      	movs	r3, #3
 80012fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001300:	f107 0320 	add.w	r3, r7, #32
 8001304:	4618      	mov	r0, r3
 8001306:	f001 fa5b 	bl	80027c0 <HAL_RCC_OscConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001310:	f000 f81e 	bl	8001350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001314:	230f      	movs	r3, #15
 8001316:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001318:	2302      	movs	r3, #2
 800131a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001324:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	2102      	movs	r1, #2
 8001330:	4618      	mov	r0, r3
 8001332:	f001 fce9 	bl	8002d08 <HAL_RCC_ClockConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800133c:	f000 f808 	bl	8001350 <Error_Handler>
  }
}
 8001340:	bf00      	nop
 8001342:	3750      	adds	r7, #80	; 0x50
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40023800 	.word	0x40023800
 800134c:	40007000 	.word	0x40007000

08001350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001354:	b672      	cpsid	i
}
 8001356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001358:	e7fe      	b.n	8001358 <Error_Handler+0x8>
	...

0800135c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_MspInit+0x44>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <HAL_MspInit+0x44>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <HAL_MspInit+0x44>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_MspInit+0x44>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <HAL_MspInit+0x44>)
 8001380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001384:	6453      	str	r3, [r2, #68]	; 0x44
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_MspInit+0x44>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800

080013a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <NMI_Handler+0x4>

080013aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <HardFault_Handler+0x4>

080013b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <MemManage_Handler+0x4>

080013b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <BusFault_Handler+0x4>

080013bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <UsageFault_Handler+0x4>

080013c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f0:	f000 fa78 	bl	80018e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
	return 1;
 80013fc:	2301      	movs	r3, #1
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <_kill>:

int _kill(int pid, int sig)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001412:	f004 f96b 	bl	80056ec <__errno>
 8001416:	4603      	mov	r3, r0
 8001418:	2216      	movs	r2, #22
 800141a:	601a      	str	r2, [r3, #0]
	return -1;
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <_exit>:

void _exit (int status)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001430:	f04f 31ff 	mov.w	r1, #4294967295
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ffe7 	bl	8001408 <_kill>
	while (1) {}		/* Make sure we hang here */
 800143a:	e7fe      	b.n	800143a <_exit+0x12>

0800143c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	e00a      	b.n	8001464 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800144e:	f3af 8000 	nop.w
 8001452:	4601      	mov	r1, r0
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	60ba      	str	r2, [r7, #8]
 800145a:	b2ca      	uxtb	r2, r1
 800145c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbf0      	blt.n	800144e <_read+0x12>
	}

return len;
 800146c:	687b      	ldr	r3, [r7, #4]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e009      	b.n	800149c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60ba      	str	r2, [r7, #8]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3301      	adds	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dbf1      	blt.n	8001488 <_write+0x12>
	}
	return len;
 80014a4:	687b      	ldr	r3, [r7, #4]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <_close>:

int _close(int file)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
	return -1;
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d6:	605a      	str	r2, [r3, #4]
	return 0;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <_isatty>:

int _isatty(int file)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
	return 1;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
	return 0;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001520:	4a14      	ldr	r2, [pc, #80]	; (8001574 <_sbrk+0x5c>)
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <_sbrk+0x60>)
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <_sbrk+0x64>)
 8001536:	4a12      	ldr	r2, [pc, #72]	; (8001580 <_sbrk+0x68>)
 8001538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	429a      	cmp	r2, r3
 8001546:	d207      	bcs.n	8001558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001548:	f004 f8d0 	bl	80056ec <__errno>
 800154c:	4603      	mov	r3, r0
 800154e:	220c      	movs	r2, #12
 8001550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
 8001556:	e009      	b.n	800156c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <_sbrk+0x64>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <_sbrk+0x64>)
 8001568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20050000 	.word	0x20050000
 8001578:	00000400 	.word	0x00000400
 800157c:	2000334c 	.word	0x2000334c
 8001580:	200038f8 	.word	0x200038f8

08001584 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <SystemInit+0x20>)
 800158a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158e:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <SystemInit+0x20>)
 8001590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <MX_USART3_UART_Init+0x58>)
 80015ae:	4a15      	ldr	r2, [pc, #84]	; (8001604 <MX_USART3_UART_Init+0x5c>)
 80015b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015b2:	4b13      	ldr	r3, [pc, #76]	; (8001600 <MX_USART3_UART_Init+0x58>)
 80015b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <MX_USART3_UART_Init+0x58>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <MX_USART3_UART_Init+0x58>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <MX_USART3_UART_Init+0x58>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <MX_USART3_UART_Init+0x58>)
 80015ce:	220c      	movs	r2, #12
 80015d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <MX_USART3_UART_Init+0x58>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <MX_USART3_UART_Init+0x58>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <MX_USART3_UART_Init+0x58>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <MX_USART3_UART_Init+0x58>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_USART3_UART_Init+0x58>)
 80015ec:	f002 f9a2 	bl	8003934 <HAL_UART_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80015f6:	f7ff feab 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20003350 	.word	0x20003350
 8001604:	40004800 	.word	0x40004800

08001608 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b0aa      	sub	sp, #168	; 0xa8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	2284      	movs	r2, #132	; 0x84
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f004 f8d3 	bl	80057d4 <memset>
  if(uartHandle->Instance==USART3)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a22      	ldr	r2, [pc, #136]	; (80016bc <HAL_UART_MspInit+0xb4>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d13c      	bne.n	80016b2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001638:	f44f 7380 	mov.w	r3, #256	; 0x100
 800163c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800163e:	2300      	movs	r3, #0
 8001640:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001642:	f107 0310 	add.w	r3, r7, #16
 8001646:	4618      	mov	r0, r3
 8001648:	f001 fd84 	bl	8003154 <HAL_RCCEx_PeriphCLKConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001652:	f7ff fe7d 	bl	8001350 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001656:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <HAL_UART_MspInit+0xb8>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a19      	ldr	r2, [pc, #100]	; (80016c0 <HAL_UART_MspInit+0xb8>)
 800165c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <HAL_UART_MspInit+0xb8>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <HAL_UART_MspInit+0xb8>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a13      	ldr	r2, [pc, #76]	; (80016c0 <HAL_UART_MspInit+0xb8>)
 8001674:	f043 0308 	orr.w	r3, r3, #8
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <HAL_UART_MspInit+0xb8>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001686:	f44f 7340 	mov.w	r3, #768	; 0x300
 800168a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	2302      	movs	r3, #2
 8001690:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169a:	2303      	movs	r3, #3
 800169c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016a0:	2307      	movs	r3, #7
 80016a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016aa:	4619      	mov	r1, r3
 80016ac:	4805      	ldr	r0, [pc, #20]	; (80016c4 <HAL_UART_MspInit+0xbc>)
 80016ae:	f000 fd69 	bl	8002184 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016b2:	bf00      	nop
 80016b4:	37a8      	adds	r7, #168	; 0xa8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40004800 	.word	0x40004800
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020c00 	.word	0x40020c00

080016c8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80016cc:	4b14      	ldr	r3, [pc, #80]	; (8001720 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016d6:	2206      	movs	r2, #6
 80016d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016dc:	2202      	movs	r2, #2
 80016de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016e8:	2202      	movs	r2, #2
 80016ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001700:	2201      	movs	r2, #1
 8001702:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001706:	2200      	movs	r2, #0
 8001708:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800170c:	f000 feff 	bl	800250e <HAL_PCD_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001716:	f7ff fe1b 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200033d8 	.word	0x200033d8

08001724 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b0ac      	sub	sp, #176	; 0xb0
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800173c:	f107 0318 	add.w	r3, r7, #24
 8001740:	2284      	movs	r2, #132	; 0x84
 8001742:	2100      	movs	r1, #0
 8001744:	4618      	mov	r0, r3
 8001746:	f004 f845 	bl	80057d4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001752:	d159      	bne.n	8001808 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001754:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001758:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800175a:	2300      	movs	r3, #0
 800175c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001760:	f107 0318 	add.w	r3, r7, #24
 8001764:	4618      	mov	r0, r3
 8001766:	f001 fcf5 	bl	8003154 <HAL_RCCEx_PeriphCLKConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001770:	f7ff fdee 	bl	8001350 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001774:	4b26      	ldr	r3, [pc, #152]	; (8001810 <HAL_PCD_MspInit+0xec>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	4a25      	ldr	r2, [pc, #148]	; (8001810 <HAL_PCD_MspInit+0xec>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6313      	str	r3, [r2, #48]	; 0x30
 8001780:	4b23      	ldr	r3, [pc, #140]	; (8001810 <HAL_PCD_MspInit+0xec>)
 8001782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800178c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001790:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017a6:	230a      	movs	r3, #10
 80017a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017b0:	4619      	mov	r1, r3
 80017b2:	4818      	ldr	r0, [pc, #96]	; (8001814 <HAL_PCD_MspInit+0xf0>)
 80017b4:	f000 fce6 	bl	8002184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017d0:	4619      	mov	r1, r3
 80017d2:	4810      	ldr	r0, [pc, #64]	; (8001814 <HAL_PCD_MspInit+0xf0>)
 80017d4:	f000 fcd6 	bl	8002184 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017d8:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <HAL_PCD_MspInit+0xec>)
 80017da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017dc:	4a0c      	ldr	r2, [pc, #48]	; (8001810 <HAL_PCD_MspInit+0xec>)
 80017de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e2:	6353      	str	r3, [r2, #52]	; 0x34
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_PCD_MspInit+0xec>)
 80017e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <HAL_PCD_MspInit+0xec>)
 80017f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f4:	4a06      	ldr	r2, [pc, #24]	; (8001810 <HAL_PCD_MspInit+0xec>)
 80017f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fa:	6453      	str	r3, [r2, #68]	; 0x44
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <HAL_PCD_MspInit+0xec>)
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001808:	bf00      	nop
 800180a:	37b0      	adds	r7, #176	; 0xb0
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40023800 	.word	0x40023800
 8001814:	40020000 	.word	0x40020000

08001818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001850 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800181c:	480d      	ldr	r0, [pc, #52]	; (8001854 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800181e:	490e      	ldr	r1, [pc, #56]	; (8001858 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001820:	4a0e      	ldr	r2, [pc, #56]	; (800185c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001824:	e002      	b.n	800182c <LoopCopyDataInit>

08001826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182a:	3304      	adds	r3, #4

0800182c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800182c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001830:	d3f9      	bcc.n	8001826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001832:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001834:	4c0b      	ldr	r4, [pc, #44]	; (8001864 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001838:	e001      	b.n	800183e <LoopFillZerobss>

0800183a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800183c:	3204      	adds	r2, #4

0800183e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001840:	d3fb      	bcc.n	800183a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001842:	f7ff fe9f 	bl	8001584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001846:	f003 ff69 	bl	800571c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800184a:	f7ff fd07 	bl	800125c <main>
  bx  lr    
 800184e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001850:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001858:	20002144 	.word	0x20002144
  ldr r2, =_sidata
 800185c:	08008b98 	.word	0x08008b98
  ldr r2, =_sbss
 8001860:	20002284 	.word	0x20002284
  ldr r4, =_ebss
 8001864:	200038f4 	.word	0x200038f4

08001868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <ADC_IRQHandler>

0800186a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186e:	2003      	movs	r0, #3
 8001870:	f000 f92e 	bl	8001ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001874:	2000      	movs	r0, #0
 8001876:	f000 f805 	bl	8001884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800187a:	f7ff fd6f 	bl	800135c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_InitTick+0x54>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_InitTick+0x58>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189a:	fbb3 f3f1 	udiv	r3, r3, r1
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f93b 	bl	8001b1e <HAL_SYSTICK_Config>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00e      	b.n	80018d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b0f      	cmp	r3, #15
 80018b6:	d80a      	bhi.n	80018ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b8:	2200      	movs	r2, #0
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	f000 f911 	bl	8001ae6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c4:	4a06      	ldr	r2, [pc, #24]	; (80018e0 <HAL_InitTick+0x5c>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e000      	b.n	80018d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20001f68 	.word	0x20001f68
 80018dc:	20001f70 	.word	0x20001f70
 80018e0:	20001f6c 	.word	0x20001f6c

080018e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x20>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_IncTick+0x24>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	4a04      	ldr	r2, [pc, #16]	; (8001908 <HAL_IncTick+0x24>)
 80018f6:	6013      	str	r3, [r2, #0]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20001f70 	.word	0x20001f70
 8001908:	200038e0 	.word	0x200038e0

0800190c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <HAL_GetTick+0x14>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	200038e0 	.word	0x200038e0

08001924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800192c:	f7ff ffee 	bl	800190c <HAL_GetTick>
 8001930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193c:	d005      	beq.n	800194a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_Delay+0x44>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800194a:	bf00      	nop
 800194c:	f7ff ffde 	bl	800190c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	429a      	cmp	r2, r3
 800195a:	d8f7      	bhi.n	800194c <HAL_Delay+0x28>
  {
  }
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20001f70 	.word	0x20001f70

0800196c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <__NVIC_SetPriorityGrouping+0x40>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001988:	4013      	ands	r3, r2
 800198a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001996:	4313      	orrs	r3, r2
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	; (80019ac <__NVIC_SetPriorityGrouping+0x40>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00
 80019b0:	05fa0000 	.word	0x05fa0000

080019b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <__NVIC_GetPriorityGrouping+0x18>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	0a1b      	lsrs	r3, r3, #8
 80019be:	f003 0307 	and.w	r3, r3, #7
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	6039      	str	r1, [r7, #0]
 80019da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	db0a      	blt.n	80019fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	490c      	ldr	r1, [pc, #48]	; (8001a1c <__NVIC_SetPriority+0x4c>)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	0112      	lsls	r2, r2, #4
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	440b      	add	r3, r1
 80019f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f8:	e00a      	b.n	8001a10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4908      	ldr	r1, [pc, #32]	; (8001a20 <__NVIC_SetPriority+0x50>)
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	3b04      	subs	r3, #4
 8001a08:	0112      	lsls	r2, r2, #4
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	761a      	strb	r2, [r3, #24]
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000e100 	.word	0xe000e100
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f1c3 0307 	rsb	r3, r3, #7
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	bf28      	it	cs
 8001a42:	2304      	movcs	r3, #4
 8001a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	2b06      	cmp	r3, #6
 8001a4c:	d902      	bls.n	8001a54 <NVIC_EncodePriority+0x30>
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3b03      	subs	r3, #3
 8001a52:	e000      	b.n	8001a56 <NVIC_EncodePriority+0x32>
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43da      	mvns	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	401a      	ands	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	43d9      	mvns	r1, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	4313      	orrs	r3, r2
         );
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3724      	adds	r7, #36	; 0x24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a9c:	d301      	bcc.n	8001aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e00f      	b.n	8001ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <SysTick_Config+0x40>)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aaa:	210f      	movs	r1, #15
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab0:	f7ff ff8e 	bl	80019d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <SysTick_Config+0x40>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aba:	4b04      	ldr	r3, [pc, #16]	; (8001acc <SysTick_Config+0x40>)
 8001abc:	2207      	movs	r2, #7
 8001abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	e000e010 	.word	0xe000e010

08001ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff ff47 	bl	800196c <__NVIC_SetPriorityGrouping>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b086      	sub	sp, #24
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
 8001af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af8:	f7ff ff5c 	bl	80019b4 <__NVIC_GetPriorityGrouping>
 8001afc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68b9      	ldr	r1, [r7, #8]
 8001b02:	6978      	ldr	r0, [r7, #20]
 8001b04:	f7ff ff8e 	bl	8001a24 <NVIC_EncodePriority>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff5d 	bl	80019d0 <__NVIC_SetPriority>
}
 8001b16:	bf00      	nop
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff ffb0 	bl	8001a8c <SysTick_Config>
 8001b2c:	4603      	mov	r3, r0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e06a      	b.n	8001c20 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d106      	bne.n	8001b62 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2223      	movs	r2, #35	; 0x23
 8001b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff fa23 	bl	8000fa8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b62:	4b31      	ldr	r3, [pc, #196]	; (8001c28 <HAL_ETH_Init+0xf0>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	4a30      	ldr	r2, [pc, #192]	; (8001c28 <HAL_ETH_Init+0xf0>)
 8001b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6e:	4b2e      	ldr	r3, [pc, #184]	; (8001c28 <HAL_ETH_Init+0xf0>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001b7a:	4b2c      	ldr	r3, [pc, #176]	; (8001c2c <HAL_ETH_Init+0xf4>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	4a2b      	ldr	r2, [pc, #172]	; (8001c2c <HAL_ETH_Init+0xf4>)
 8001b80:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b84:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001b86:	4b29      	ldr	r3, [pc, #164]	; (8001c2c <HAL_ETH_Init+0xf4>)
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	4927      	ldr	r1, [pc, #156]	; (8001c2c <HAL_ETH_Init+0xf4>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001b94:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <HAL_ETH_Init+0xf4>)
 8001b96:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bb0:	f7ff feac 	bl	800190c <HAL_GetTick>
 8001bb4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001bb6:	e011      	b.n	8001bdc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001bb8:	f7ff fea8 	bl	800190c <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001bc6:	d909      	bls.n	8001bdc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2204      	movs	r2, #4
 8001bcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	22e0      	movs	r2, #224	; 0xe0
 8001bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e021      	b.n	8001c20 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1e4      	bne.n	8001bb8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f958 	bl	8001ea4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f9ff 	bl	8001ff8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 fa55 	bl	80020aa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	461a      	mov	r2, r3
 8001c06:	2100      	movs	r1, #0
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f9bd 	bl	8001f88 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2210      	movs	r2, #16
 8001c1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40013800 	.word	0x40013800

08001c30 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	4b51      	ldr	r3, [pc, #324]	; (8001d8c <ETH_SetMACConfig+0x15c>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	7c1b      	ldrb	r3, [r3, #16]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d102      	bne.n	8001c58 <ETH_SetMACConfig+0x28>
 8001c52:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c56:	e000      	b.n	8001c5a <ETH_SetMACConfig+0x2a>
 8001c58:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	7c5b      	ldrb	r3, [r3, #17]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d102      	bne.n	8001c68 <ETH_SetMACConfig+0x38>
 8001c62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c66:	e000      	b.n	8001c6a <ETH_SetMACConfig+0x3a>
 8001c68:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c6a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c70:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	7fdb      	ldrb	r3, [r3, #31]
 8001c76:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001c78:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c7e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	7f92      	ldrb	r2, [r2, #30]
 8001c84:	2a00      	cmp	r2, #0
 8001c86:	d102      	bne.n	8001c8e <ETH_SetMACConfig+0x5e>
 8001c88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c8c:	e000      	b.n	8001c90 <ETH_SetMACConfig+0x60>
 8001c8e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001c90:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	7f1b      	ldrb	r3, [r3, #28]
 8001c96:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c98:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c9e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	791b      	ldrb	r3, [r3, #4]
 8001ca4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ca6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001cae:	2a00      	cmp	r2, #0
 8001cb0:	d102      	bne.n	8001cb8 <ETH_SetMACConfig+0x88>
 8001cb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb6:	e000      	b.n	8001cba <ETH_SetMACConfig+0x8a>
 8001cb8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001cba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	7bdb      	ldrb	r3, [r3, #15]
 8001cc0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001cc2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001cc8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cd0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cea:	2001      	movs	r0, #1
 8001cec:	f7ff fe1a 	bl	8001924 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001d06:	4013      	ands	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d0e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001d16:	2a00      	cmp	r2, #0
 8001d18:	d101      	bne.n	8001d1e <ETH_SetMACConfig+0xee>
 8001d1a:	2280      	movs	r2, #128	; 0x80
 8001d1c:	e000      	b.n	8001d20 <ETH_SetMACConfig+0xf0>
 8001d1e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d20:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d26:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001d2e:	2a01      	cmp	r2, #1
 8001d30:	d101      	bne.n	8001d36 <ETH_SetMACConfig+0x106>
 8001d32:	2208      	movs	r2, #8
 8001d34:	e000      	b.n	8001d38 <ETH_SetMACConfig+0x108>
 8001d36:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001d38:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001d40:	2a01      	cmp	r2, #1
 8001d42:	d101      	bne.n	8001d48 <ETH_SetMACConfig+0x118>
 8001d44:	2204      	movs	r2, #4
 8001d46:	e000      	b.n	8001d4a <ETH_SetMACConfig+0x11a>
 8001d48:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d4a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001d52:	2a01      	cmp	r2, #1
 8001d54:	d101      	bne.n	8001d5a <ETH_SetMACConfig+0x12a>
 8001d56:	2202      	movs	r2, #2
 8001d58:	e000      	b.n	8001d5c <ETH_SetMACConfig+0x12c>
 8001d5a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d74:	2001      	movs	r0, #1
 8001d76:	f7ff fdd5 	bl	8001924 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	619a      	str	r2, [r3, #24]
}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	ff20810f 	.word	0xff20810f

08001d90 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	4b3d      	ldr	r3, [pc, #244]	; (8001ea0 <ETH_SetDMAConfig+0x110>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	7b1b      	ldrb	r3, [r3, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d102      	bne.n	8001dbc <ETH_SetDMAConfig+0x2c>
 8001db6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001dba:	e000      	b.n	8001dbe <ETH_SetDMAConfig+0x2e>
 8001dbc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	7b5b      	ldrb	r3, [r3, #13]
 8001dc2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001dc4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	7f52      	ldrb	r2, [r2, #29]
 8001dca:	2a00      	cmp	r2, #0
 8001dcc:	d102      	bne.n	8001dd4 <ETH_SetDMAConfig+0x44>
 8001dce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001dd2:	e000      	b.n	8001dd6 <ETH_SetDMAConfig+0x46>
 8001dd4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001dd6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	7b9b      	ldrb	r3, [r3, #14]
 8001ddc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001dde:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001de4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	7f1b      	ldrb	r3, [r3, #28]
 8001dea:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001dec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	7f9b      	ldrb	r3, [r3, #30]
 8001df2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001df4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001dfa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e02:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e04:	4313      	orrs	r3, r2
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e14:	461a      	mov	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e26:	2001      	movs	r0, #1
 8001e28:	f7ff fd7c 	bl	8001924 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e34:	461a      	mov	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	791b      	ldrb	r3, [r3, #4]
 8001e3e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e44:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001e4a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e50:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e58:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001e5a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e60:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e62:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e68:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e76:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e84:	2001      	movs	r0, #1
 8001e86:	f7ff fd4d 	bl	8001924 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e92:	461a      	mov	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6013      	str	r3, [r2, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	f8de3f23 	.word	0xf8de3f23

08001ea4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b0a6      	sub	sp, #152	; 0x98
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001eac:	2301      	movs	r3, #1
 8001eae:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f0a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f10:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff fe86 	bl	8001c30 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f24:	2301      	movs	r3, #1
 8001f26:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001f32:	2301      	movs	r3, #1
 8001f34:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f46:	2300      	movs	r3, #0
 8001f48:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f50:	2301      	movs	r3, #1
 8001f52:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f58:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f5e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f64:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001f66:	2301      	movs	r3, #1
 8001f68:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f74:	f107 0308 	add.w	r3, r7, #8
 8001f78:	4619      	mov	r1, r3
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ff08 	bl	8001d90 <ETH_SetDMAConfig>
}
 8001f80:	bf00      	nop
 8001f82:	3798      	adds	r7, #152	; 0x98
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b087      	sub	sp, #28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3305      	adds	r3, #5
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	021b      	lsls	r3, r3, #8
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	3204      	adds	r2, #4
 8001fa0:	7812      	ldrb	r2, [r2, #0]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <ETH_MACAddressConfig+0x68>)
 8001faa:	4413      	add	r3, r2
 8001fac:	461a      	mov	r2, r3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3303      	adds	r3, #3
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	061a      	lsls	r2, r3, #24
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	041b      	lsls	r3, r3, #16
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	021b      	lsls	r3, r3, #8
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	7812      	ldrb	r2, [r2, #0]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <ETH_MACAddressConfig+0x6c>)
 8001fda:	4413      	add	r3, r2
 8001fdc:	461a      	mov	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	6013      	str	r3, [r2, #0]
}
 8001fe2:	bf00      	nop
 8001fe4:	371c      	adds	r7, #28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40028040 	.word	0x40028040
 8001ff4:	40028044 	.word	0x40028044

08001ff8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	e03e      	b.n	8002084 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68d9      	ldr	r1, [r3, #12]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	440b      	add	r3, r1
 8002016:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2200      	movs	r2, #0
 8002022:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2200      	movs	r2, #0
 800202e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	3206      	adds	r2, #6
 8002038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d80c      	bhi.n	8002068 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68d9      	ldr	r1, [r3, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	440b      	add	r3, r1
 8002060:	461a      	mov	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	e004      	b.n	8002072 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	461a      	mov	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	3301      	adds	r3, #1
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b03      	cmp	r3, #3
 8002088:	d9bd      	bls.n	8002006 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800209c:	611a      	str	r2, [r3, #16]
}
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b085      	sub	sp, #20
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	e046      	b.n	8002146 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6919      	ldr	r1, [r3, #16]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	440b      	add	r3, r1
 80020c8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2200      	movs	r2, #0
 80020d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2200      	movs	r2, #0
 80020da:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2200      	movs	r2, #0
 80020e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2200      	movs	r2, #0
 80020e6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2200      	movs	r2, #0
 80020ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80020f4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80020fc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800210a:	68b9      	ldr	r1, [r7, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	3212      	adds	r2, #18
 8002112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2b02      	cmp	r3, #2
 800211a:	d80c      	bhi.n	8002136 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6919      	ldr	r1, [r3, #16]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	440b      	add	r3, r1
 800212e:	461a      	mov	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	60da      	str	r2, [r3, #12]
 8002134:	e004      	b.n	8002140 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	461a      	mov	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	3301      	adds	r3, #1
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b03      	cmp	r3, #3
 800214a:	d9b5      	bls.n	80020b8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002176:	60da      	str	r2, [r3, #12]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	e175      	b.n	8002490 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80021a4:	2201      	movs	r2, #1
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	429a      	cmp	r2, r3
 80021be:	f040 8164 	bne.w	800248a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d005      	beq.n	80021da <HAL_GPIO_Init+0x56>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d130      	bne.n	800223c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	2203      	movs	r2, #3
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002210:	2201      	movs	r2, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	f003 0201 	and.w	r2, r3, #1
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b03      	cmp	r3, #3
 8002246:	d017      	beq.n	8002278 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	2203      	movs	r2, #3
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d123      	bne.n	80022cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	08da      	lsrs	r2, r3, #3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3208      	adds	r2, #8
 800228c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	220f      	movs	r2, #15
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	08da      	lsrs	r2, r3, #3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3208      	adds	r2, #8
 80022c6:	69b9      	ldr	r1, [r7, #24]
 80022c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	2203      	movs	r2, #3
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0203 	and.w	r2, r3, #3
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80be 	beq.w	800248a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230e:	4b66      	ldr	r3, [pc, #408]	; (80024a8 <HAL_GPIO_Init+0x324>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	4a65      	ldr	r2, [pc, #404]	; (80024a8 <HAL_GPIO_Init+0x324>)
 8002314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002318:	6453      	str	r3, [r2, #68]	; 0x44
 800231a:	4b63      	ldr	r3, [pc, #396]	; (80024a8 <HAL_GPIO_Init+0x324>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002326:	4a61      	ldr	r2, [pc, #388]	; (80024ac <HAL_GPIO_Init+0x328>)
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	3302      	adds	r3, #2
 800232e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002332:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	220f      	movs	r2, #15
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a58      	ldr	r2, [pc, #352]	; (80024b0 <HAL_GPIO_Init+0x32c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d037      	beq.n	80023c2 <HAL_GPIO_Init+0x23e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a57      	ldr	r2, [pc, #348]	; (80024b4 <HAL_GPIO_Init+0x330>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d031      	beq.n	80023be <HAL_GPIO_Init+0x23a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a56      	ldr	r2, [pc, #344]	; (80024b8 <HAL_GPIO_Init+0x334>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d02b      	beq.n	80023ba <HAL_GPIO_Init+0x236>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a55      	ldr	r2, [pc, #340]	; (80024bc <HAL_GPIO_Init+0x338>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d025      	beq.n	80023b6 <HAL_GPIO_Init+0x232>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a54      	ldr	r2, [pc, #336]	; (80024c0 <HAL_GPIO_Init+0x33c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d01f      	beq.n	80023b2 <HAL_GPIO_Init+0x22e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a53      	ldr	r2, [pc, #332]	; (80024c4 <HAL_GPIO_Init+0x340>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d019      	beq.n	80023ae <HAL_GPIO_Init+0x22a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a52      	ldr	r2, [pc, #328]	; (80024c8 <HAL_GPIO_Init+0x344>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d013      	beq.n	80023aa <HAL_GPIO_Init+0x226>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a51      	ldr	r2, [pc, #324]	; (80024cc <HAL_GPIO_Init+0x348>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00d      	beq.n	80023a6 <HAL_GPIO_Init+0x222>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a50      	ldr	r2, [pc, #320]	; (80024d0 <HAL_GPIO_Init+0x34c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d007      	beq.n	80023a2 <HAL_GPIO_Init+0x21e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a4f      	ldr	r2, [pc, #316]	; (80024d4 <HAL_GPIO_Init+0x350>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d101      	bne.n	800239e <HAL_GPIO_Init+0x21a>
 800239a:	2309      	movs	r3, #9
 800239c:	e012      	b.n	80023c4 <HAL_GPIO_Init+0x240>
 800239e:	230a      	movs	r3, #10
 80023a0:	e010      	b.n	80023c4 <HAL_GPIO_Init+0x240>
 80023a2:	2308      	movs	r3, #8
 80023a4:	e00e      	b.n	80023c4 <HAL_GPIO_Init+0x240>
 80023a6:	2307      	movs	r3, #7
 80023a8:	e00c      	b.n	80023c4 <HAL_GPIO_Init+0x240>
 80023aa:	2306      	movs	r3, #6
 80023ac:	e00a      	b.n	80023c4 <HAL_GPIO_Init+0x240>
 80023ae:	2305      	movs	r3, #5
 80023b0:	e008      	b.n	80023c4 <HAL_GPIO_Init+0x240>
 80023b2:	2304      	movs	r3, #4
 80023b4:	e006      	b.n	80023c4 <HAL_GPIO_Init+0x240>
 80023b6:	2303      	movs	r3, #3
 80023b8:	e004      	b.n	80023c4 <HAL_GPIO_Init+0x240>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e002      	b.n	80023c4 <HAL_GPIO_Init+0x240>
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <HAL_GPIO_Init+0x240>
 80023c2:	2300      	movs	r3, #0
 80023c4:	69fa      	ldr	r2, [r7, #28]
 80023c6:	f002 0203 	and.w	r2, r2, #3
 80023ca:	0092      	lsls	r2, r2, #2
 80023cc:	4093      	lsls	r3, r2
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80023d4:	4935      	ldr	r1, [pc, #212]	; (80024ac <HAL_GPIO_Init+0x328>)
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	3302      	adds	r3, #2
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023e2:	4b3d      	ldr	r3, [pc, #244]	; (80024d8 <HAL_GPIO_Init+0x354>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002406:	4a34      	ldr	r2, [pc, #208]	; (80024d8 <HAL_GPIO_Init+0x354>)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800240c:	4b32      	ldr	r3, [pc, #200]	; (80024d8 <HAL_GPIO_Init+0x354>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002430:	4a29      	ldr	r2, [pc, #164]	; (80024d8 <HAL_GPIO_Init+0x354>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002436:	4b28      	ldr	r3, [pc, #160]	; (80024d8 <HAL_GPIO_Init+0x354>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800245a:	4a1f      	ldr	r2, [pc, #124]	; (80024d8 <HAL_GPIO_Init+0x354>)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002460:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <HAL_GPIO_Init+0x354>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002484:	4a14      	ldr	r2, [pc, #80]	; (80024d8 <HAL_GPIO_Init+0x354>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3301      	adds	r3, #1
 800248e:	61fb      	str	r3, [r7, #28]
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	2b0f      	cmp	r3, #15
 8002494:	f67f ae86 	bls.w	80021a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	3724      	adds	r7, #36	; 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40013800 	.word	0x40013800
 80024b0:	40020000 	.word	0x40020000
 80024b4:	40020400 	.word	0x40020400
 80024b8:	40020800 	.word	0x40020800
 80024bc:	40020c00 	.word	0x40020c00
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40021400 	.word	0x40021400
 80024c8:	40021800 	.word	0x40021800
 80024cc:	40021c00 	.word	0x40021c00
 80024d0:	40022000 	.word	0x40022000
 80024d4:	40022400 	.word	0x40022400
 80024d8:	40013c00 	.word	0x40013c00

080024dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	807b      	strh	r3, [r7, #2]
 80024e8:	4613      	mov	r3, r2
 80024ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024ec:	787b      	ldrb	r3, [r7, #1]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024f2:	887a      	ldrh	r2, [r7, #2]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80024f8:	e003      	b.n	8002502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80024fa:	887b      	ldrh	r3, [r7, #2]
 80024fc:	041a      	lsls	r2, r3, #16
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	619a      	str	r2, [r3, #24]
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800250e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002510:	b08f      	sub	sp, #60	; 0x3c
 8002512:	af0a      	add	r7, sp, #40	; 0x28
 8002514:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e116      	b.n	800274e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff f8f2 	bl	8001724 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2203      	movs	r2, #3
 8002544:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d102      	bne.n	800255a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f001 ff16 	bl	8004390 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	603b      	str	r3, [r7, #0]
 800256a:	687e      	ldr	r6, [r7, #4]
 800256c:	466d      	mov	r5, sp
 800256e:	f106 0410 	add.w	r4, r6, #16
 8002572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002574:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002576:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002578:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800257a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800257e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002582:	1d33      	adds	r3, r6, #4
 8002584:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002586:	6838      	ldr	r0, [r7, #0]
 8002588:	f001 feaa 	bl	80042e0 <USB_CoreInit>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d005      	beq.n	800259e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2202      	movs	r2, #2
 8002596:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e0d7      	b.n	800274e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2100      	movs	r1, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f001 ff04 	bl	80043b2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025aa:	2300      	movs	r3, #0
 80025ac:	73fb      	strb	r3, [r7, #15]
 80025ae:	e04a      	b.n	8002646 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4413      	add	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	333d      	adds	r3, #61	; 0x3d
 80025c0:	2201      	movs	r2, #1
 80025c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	333c      	adds	r3, #60	; 0x3c
 80025d4:	7bfa      	ldrb	r2, [r7, #15]
 80025d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025d8:	7bfa      	ldrb	r2, [r7, #15]
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	b298      	uxth	r0, r3
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	3344      	adds	r3, #68	; 0x44
 80025ec:	4602      	mov	r2, r0
 80025ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025f0:	7bfa      	ldrb	r2, [r7, #15]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	3340      	adds	r3, #64	; 0x40
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002604:	7bfa      	ldrb	r2, [r7, #15]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4413      	add	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	3348      	adds	r3, #72	; 0x48
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	334c      	adds	r3, #76	; 0x4c
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800262c:	7bfa      	ldrb	r2, [r7, #15]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4413      	add	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	3354      	adds	r3, #84	; 0x54
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	3301      	adds	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
 8002646:	7bfa      	ldrb	r2, [r7, #15]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	429a      	cmp	r2, r3
 800264e:	d3af      	bcc.n	80025b0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002650:	2300      	movs	r3, #0
 8002652:	73fb      	strb	r3, [r7, #15]
 8002654:	e044      	b.n	80026e0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002656:	7bfa      	ldrb	r2, [r7, #15]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800266c:	7bfa      	ldrb	r2, [r7, #15]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800267e:	7bfa      	ldrb	r2, [r7, #15]
 8002680:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002682:	7bfa      	ldrb	r2, [r7, #15]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002698:	7bfa      	ldrb	r2, [r7, #15]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026ae:	7bfa      	ldrb	r2, [r7, #15]
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026c4:	7bfa      	ldrb	r2, [r7, #15]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	3301      	adds	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
 80026e0:	7bfa      	ldrb	r2, [r7, #15]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d3b5      	bcc.n	8002656 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	687e      	ldr	r6, [r7, #4]
 80026f2:	466d      	mov	r5, sp
 80026f4:	f106 0410 	add.w	r4, r6, #16
 80026f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002700:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002704:	e885 0003 	stmia.w	r5, {r0, r1}
 8002708:	1d33      	adds	r3, r6, #4
 800270a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800270c:	6838      	ldr	r0, [r7, #0]
 800270e:	f001 fe9d 	bl	800444c <USB_DevInit>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e014      	b.n	800274e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	2b01      	cmp	r3, #1
 800273a:	d102      	bne.n	8002742 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f80b 	bl	8002758 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f002 f85b 	bl	8004802 <USB_DevDisconnect>

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002758 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <HAL_PCDEx_ActivateLPM+0x44>)
 8002788:	4313      	orrs	r3, r2
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	10000003 	.word	0x10000003

080027a0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027a4:	4b05      	ldr	r3, [pc, #20]	; (80027bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a04      	ldr	r2, [pc, #16]	; (80027bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ae:	6013      	str	r3, [r2, #0]
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40007000 	.word	0x40007000

080027c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80027c8:	2300      	movs	r3, #0
 80027ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e291      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 8087 	beq.w	80028f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027e4:	4b96      	ldr	r3, [pc, #600]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 030c 	and.w	r3, r3, #12
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d00c      	beq.n	800280a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027f0:	4b93      	ldr	r3, [pc, #588]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 030c 	and.w	r3, r3, #12
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d112      	bne.n	8002822 <HAL_RCC_OscConfig+0x62>
 80027fc:	4b90      	ldr	r3, [pc, #576]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002808:	d10b      	bne.n	8002822 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280a:	4b8d      	ldr	r3, [pc, #564]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d06c      	beq.n	80028f0 <HAL_RCC_OscConfig+0x130>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d168      	bne.n	80028f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e26b      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800282a:	d106      	bne.n	800283a <HAL_RCC_OscConfig+0x7a>
 800282c:	4b84      	ldr	r3, [pc, #528]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a83      	ldr	r2, [pc, #524]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	e02e      	b.n	8002898 <HAL_RCC_OscConfig+0xd8>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10c      	bne.n	800285c <HAL_RCC_OscConfig+0x9c>
 8002842:	4b7f      	ldr	r3, [pc, #508]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a7e      	ldr	r2, [pc, #504]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	4b7c      	ldr	r3, [pc, #496]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a7b      	ldr	r2, [pc, #492]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002854:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	e01d      	b.n	8002898 <HAL_RCC_OscConfig+0xd8>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002864:	d10c      	bne.n	8002880 <HAL_RCC_OscConfig+0xc0>
 8002866:	4b76      	ldr	r3, [pc, #472]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a75      	ldr	r2, [pc, #468]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 800286c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	4b73      	ldr	r3, [pc, #460]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a72      	ldr	r2, [pc, #456]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e00b      	b.n	8002898 <HAL_RCC_OscConfig+0xd8>
 8002880:	4b6f      	ldr	r3, [pc, #444]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a6e      	ldr	r2, [pc, #440]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288a:	6013      	str	r3, [r2, #0]
 800288c:	4b6c      	ldr	r3, [pc, #432]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a6b      	ldr	r2, [pc, #428]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002896:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d013      	beq.n	80028c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7ff f834 	bl	800190c <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a8:	f7ff f830 	bl	800190c <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b64      	cmp	r3, #100	; 0x64
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e21f      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ba:	4b61      	ldr	r3, [pc, #388]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0xe8>
 80028c6:	e014      	b.n	80028f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7ff f820 	bl	800190c <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d0:	f7ff f81c 	bl	800190c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b64      	cmp	r3, #100	; 0x64
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e20b      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e2:	4b57      	ldr	r3, [pc, #348]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCC_OscConfig+0x110>
 80028ee:	e000      	b.n	80028f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d069      	beq.n	80029d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028fe:	4b50      	ldr	r3, [pc, #320]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 030c 	and.w	r3, r3, #12
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00b      	beq.n	8002922 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800290a:	4b4d      	ldr	r3, [pc, #308]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	2b08      	cmp	r3, #8
 8002914:	d11c      	bne.n	8002950 <HAL_RCC_OscConfig+0x190>
 8002916:	4b4a      	ldr	r3, [pc, #296]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d116      	bne.n	8002950 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002922:	4b47      	ldr	r3, [pc, #284]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <HAL_RCC_OscConfig+0x17a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d001      	beq.n	800293a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e1df      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293a:	4b41      	ldr	r3, [pc, #260]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	493d      	ldr	r1, [pc, #244]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294e:	e040      	b.n	80029d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d023      	beq.n	80029a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002958:	4b39      	ldr	r3, [pc, #228]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a38      	ldr	r2, [pc, #224]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002964:	f7fe ffd2 	bl	800190c <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800296c:	f7fe ffce 	bl	800190c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e1bd      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297e:	4b30      	ldr	r3, [pc, #192]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298a:	4b2d      	ldr	r3, [pc, #180]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4929      	ldr	r1, [pc, #164]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]
 800299e:	e018      	b.n	80029d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a0:	4b27      	ldr	r3, [pc, #156]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a26      	ldr	r2, [pc, #152]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 80029a6:	f023 0301 	bic.w	r3, r3, #1
 80029aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ac:	f7fe ffae 	bl	800190c <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b4:	f7fe ffaa 	bl	800190c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e199      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c6:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d038      	beq.n	8002a50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d019      	beq.n	8002a1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e6:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 80029e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ea:	4a15      	ldr	r2, [pc, #84]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f2:	f7fe ff8b 	bl	800190c <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029fa:	f7fe ff87 	bl	800190c <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e176      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x23a>
 8002a18:	e01a      	b.n	8002a50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a1a:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1e:	4a08      	ldr	r2, [pc, #32]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002a20:	f023 0301 	bic.w	r3, r3, #1
 8002a24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a26:	f7fe ff71 	bl	800190c <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2c:	e00a      	b.n	8002a44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a2e:	f7fe ff6d 	bl	800190c <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d903      	bls.n	8002a44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e15c      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
 8002a40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a44:	4b91      	ldr	r3, [pc, #580]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1ee      	bne.n	8002a2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80a4 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a5e:	4b8b      	ldr	r3, [pc, #556]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10d      	bne.n	8002a86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a6a:	4b88      	ldr	r3, [pc, #544]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	4a87      	ldr	r2, [pc, #540]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a74:	6413      	str	r3, [r2, #64]	; 0x40
 8002a76:	4b85      	ldr	r3, [pc, #532]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	60bb      	str	r3, [r7, #8]
 8002a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a82:	2301      	movs	r3, #1
 8002a84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a86:	4b82      	ldr	r3, [pc, #520]	; (8002c90 <HAL_RCC_OscConfig+0x4d0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d118      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a92:	4b7f      	ldr	r3, [pc, #508]	; (8002c90 <HAL_RCC_OscConfig+0x4d0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a7e      	ldr	r2, [pc, #504]	; (8002c90 <HAL_RCC_OscConfig+0x4d0>)
 8002a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a9e:	f7fe ff35 	bl	800190c <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa6:	f7fe ff31 	bl	800190c <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b64      	cmp	r3, #100	; 0x64
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e120      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab8:	4b75      	ldr	r3, [pc, #468]	; (8002c90 <HAL_RCC_OscConfig+0x4d0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f0      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d106      	bne.n	8002ada <HAL_RCC_OscConfig+0x31a>
 8002acc:	4b6f      	ldr	r3, [pc, #444]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad0:	4a6e      	ldr	r2, [pc, #440]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad8:	e02d      	b.n	8002b36 <HAL_RCC_OscConfig+0x376>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10c      	bne.n	8002afc <HAL_RCC_OscConfig+0x33c>
 8002ae2:	4b6a      	ldr	r3, [pc, #424]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae6:	4a69      	ldr	r2, [pc, #420]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002ae8:	f023 0301 	bic.w	r3, r3, #1
 8002aec:	6713      	str	r3, [r2, #112]	; 0x70
 8002aee:	4b67      	ldr	r3, [pc, #412]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	4a66      	ldr	r2, [pc, #408]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002af4:	f023 0304 	bic.w	r3, r3, #4
 8002af8:	6713      	str	r3, [r2, #112]	; 0x70
 8002afa:	e01c      	b.n	8002b36 <HAL_RCC_OscConfig+0x376>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b05      	cmp	r3, #5
 8002b02:	d10c      	bne.n	8002b1e <HAL_RCC_OscConfig+0x35e>
 8002b04:	4b61      	ldr	r3, [pc, #388]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	4a60      	ldr	r2, [pc, #384]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002b0a:	f043 0304 	orr.w	r3, r3, #4
 8002b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b10:	4b5e      	ldr	r3, [pc, #376]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	4a5d      	ldr	r2, [pc, #372]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b1c:	e00b      	b.n	8002b36 <HAL_RCC_OscConfig+0x376>
 8002b1e:	4b5b      	ldr	r3, [pc, #364]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	4a5a      	ldr	r2, [pc, #360]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002b24:	f023 0301 	bic.w	r3, r3, #1
 8002b28:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2a:	4b58      	ldr	r3, [pc, #352]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2e:	4a57      	ldr	r2, [pc, #348]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002b30:	f023 0304 	bic.w	r3, r3, #4
 8002b34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d015      	beq.n	8002b6a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3e:	f7fe fee5 	bl	800190c <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b44:	e00a      	b.n	8002b5c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b46:	f7fe fee1 	bl	800190c <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e0ce      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5c:	4b4b      	ldr	r3, [pc, #300]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0ee      	beq.n	8002b46 <HAL_RCC_OscConfig+0x386>
 8002b68:	e014      	b.n	8002b94 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6a:	f7fe fecf 	bl	800190c <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b70:	e00a      	b.n	8002b88 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b72:	f7fe fecb 	bl	800190c <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e0b8      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b88:	4b40      	ldr	r3, [pc, #256]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1ee      	bne.n	8002b72 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b94:	7dfb      	ldrb	r3, [r7, #23]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d105      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b9a:	4b3c      	ldr	r3, [pc, #240]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	4a3b      	ldr	r2, [pc, #236]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 80a4 	beq.w	8002cf8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bb0:	4b36      	ldr	r3, [pc, #216]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 030c 	and.w	r3, r3, #12
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d06b      	beq.n	8002c94 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d149      	bne.n	8002c58 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc4:	4b31      	ldr	r3, [pc, #196]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a30      	ldr	r2, [pc, #192]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd0:	f7fe fe9c 	bl	800190c <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7fe fe98 	bl	800190c <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e087      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bea:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69da      	ldr	r2, [r3, #28]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	019b      	lsls	r3, r3, #6
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	085b      	lsrs	r3, r3, #1
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	041b      	lsls	r3, r3, #16
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	061b      	lsls	r3, r3, #24
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	4a1b      	ldr	r2, [pc, #108]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002c1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c22:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c24:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7fe fe6c 	bl	800190c <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c38:	f7fe fe68 	bl	800190c <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e057      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4a:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x478>
 8002c56:	e04f      	b.n	8002cf8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c58:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a0b      	ldr	r2, [pc, #44]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002c5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7fe fe52 	bl	800190c <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7fe fe4e 	bl	800190c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e03d      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7e:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x4ac>
 8002c8a:	e035      	b.n	8002cf8 <HAL_RCC_OscConfig+0x538>
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c94:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <HAL_RCC_OscConfig+0x544>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d028      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d121      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d11a      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d111      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cda:	085b      	lsrs	r3, r3, #1
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d107      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800

08002d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0d0      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d20:	4b6a      	ldr	r3, [pc, #424]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 030f 	and.w	r3, r3, #15
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d910      	bls.n	8002d50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2e:	4b67      	ldr	r3, [pc, #412]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 020f 	bic.w	r2, r3, #15
 8002d36:	4965      	ldr	r1, [pc, #404]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3e:	4b63      	ldr	r3, [pc, #396]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0b8      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d020      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d68:	4b59      	ldr	r3, [pc, #356]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4a58      	ldr	r2, [pc, #352]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d80:	4b53      	ldr	r3, [pc, #332]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	4a52      	ldr	r2, [pc, #328]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d8c:	4b50      	ldr	r3, [pc, #320]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	494d      	ldr	r1, [pc, #308]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d040      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db2:	4b47      	ldr	r3, [pc, #284]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d115      	bne.n	8002dea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e07f      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dca:	4b41      	ldr	r3, [pc, #260]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d109      	bne.n	8002dea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e073      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dda:	4b3d      	ldr	r3, [pc, #244]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e06b      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dea:	4b39      	ldr	r3, [pc, #228]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f023 0203 	bic.w	r2, r3, #3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	4936      	ldr	r1, [pc, #216]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dfc:	f7fe fd86 	bl	800190c <HAL_GetTick>
 8002e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e02:	e00a      	b.n	8002e1a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e04:	f7fe fd82 	bl	800190c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e053      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1a:	4b2d      	ldr	r3, [pc, #180]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 020c 	and.w	r2, r3, #12
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d1eb      	bne.n	8002e04 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d210      	bcs.n	8002e5c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 020f 	bic.w	r2, r3, #15
 8002e42:	4922      	ldr	r1, [pc, #136]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4a:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e032      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e68:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4916      	ldr	r1, [pc, #88]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d009      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e86:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	490e      	ldr	r1, [pc, #56]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e9a:	f000 f821 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	091b      	lsrs	r3, r3, #4
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	490a      	ldr	r1, [pc, #40]	; (8002ed4 <HAL_RCC_ClockConfig+0x1cc>)
 8002eac:	5ccb      	ldrb	r3, [r1, r3]
 8002eae:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb2:	4a09      	ldr	r2, [pc, #36]	; (8002ed8 <HAL_RCC_ClockConfig+0x1d0>)
 8002eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <HAL_RCC_ClockConfig+0x1d4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe fce2 	bl	8001884 <HAL_InitTick>

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40023c00 	.word	0x40023c00
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	08008788 	.word	0x08008788
 8002ed8:	20001f68 	.word	0x20001f68
 8002edc:	20001f6c 	.word	0x20001f6c

08002ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee4:	b094      	sub	sp, #80	; 0x50
 8002ee6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	647b      	str	r3, [r7, #68]	; 0x44
 8002eec:	2300      	movs	r3, #0
 8002eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ef8:	4b79      	ldr	r3, [pc, #484]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 030c 	and.w	r3, r3, #12
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d00d      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x40>
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	f200 80e1 	bhi.w	80030cc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <HAL_RCC_GetSysClockFreq+0x34>
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d003      	beq.n	8002f1a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f12:	e0db      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f14:	4b73      	ldr	r3, [pc, #460]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f18:	e0db      	b.n	80030d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f1a:	4b73      	ldr	r3, [pc, #460]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f1e:	e0d8      	b.n	80030d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f20:	4b6f      	ldr	r3, [pc, #444]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f28:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f2a:	4b6d      	ldr	r3, [pc, #436]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d063      	beq.n	8002ffe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f36:	4b6a      	ldr	r3, [pc, #424]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	099b      	lsrs	r3, r3, #6
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f48:	633b      	str	r3, [r7, #48]	; 0x30
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f52:	4622      	mov	r2, r4
 8002f54:	462b      	mov	r3, r5
 8002f56:	f04f 0000 	mov.w	r0, #0
 8002f5a:	f04f 0100 	mov.w	r1, #0
 8002f5e:	0159      	lsls	r1, r3, #5
 8002f60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f64:	0150      	lsls	r0, r2, #5
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	1a51      	subs	r1, r2, r1
 8002f6e:	6139      	str	r1, [r7, #16]
 8002f70:	4629      	mov	r1, r5
 8002f72:	eb63 0301 	sbc.w	r3, r3, r1
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f84:	4659      	mov	r1, fp
 8002f86:	018b      	lsls	r3, r1, #6
 8002f88:	4651      	mov	r1, sl
 8002f8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f8e:	4651      	mov	r1, sl
 8002f90:	018a      	lsls	r2, r1, #6
 8002f92:	4651      	mov	r1, sl
 8002f94:	ebb2 0801 	subs.w	r8, r2, r1
 8002f98:	4659      	mov	r1, fp
 8002f9a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002faa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fb2:	4690      	mov	r8, r2
 8002fb4:	4699      	mov	r9, r3
 8002fb6:	4623      	mov	r3, r4
 8002fb8:	eb18 0303 	adds.w	r3, r8, r3
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	462b      	mov	r3, r5
 8002fc0:	eb49 0303 	adc.w	r3, r9, r3
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fd2:	4629      	mov	r1, r5
 8002fd4:	024b      	lsls	r3, r1, #9
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fdc:	4621      	mov	r1, r4
 8002fde:	024a      	lsls	r2, r1, #9
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ff0:	f7fd fe0a 	bl	8000c08 <__aeabi_uldivmod>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ffc:	e058      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ffe:	4b38      	ldr	r3, [pc, #224]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	099b      	lsrs	r3, r3, #6
 8003004:	2200      	movs	r2, #0
 8003006:	4618      	mov	r0, r3
 8003008:	4611      	mov	r1, r2
 800300a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800300e:	623b      	str	r3, [r7, #32]
 8003010:	2300      	movs	r3, #0
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
 8003014:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003018:	4642      	mov	r2, r8
 800301a:	464b      	mov	r3, r9
 800301c:	f04f 0000 	mov.w	r0, #0
 8003020:	f04f 0100 	mov.w	r1, #0
 8003024:	0159      	lsls	r1, r3, #5
 8003026:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800302a:	0150      	lsls	r0, r2, #5
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4641      	mov	r1, r8
 8003032:	ebb2 0a01 	subs.w	sl, r2, r1
 8003036:	4649      	mov	r1, r9
 8003038:	eb63 0b01 	sbc.w	fp, r3, r1
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003048:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800304c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003050:	ebb2 040a 	subs.w	r4, r2, sl
 8003054:	eb63 050b 	sbc.w	r5, r3, fp
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	00eb      	lsls	r3, r5, #3
 8003062:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003066:	00e2      	lsls	r2, r4, #3
 8003068:	4614      	mov	r4, r2
 800306a:	461d      	mov	r5, r3
 800306c:	4643      	mov	r3, r8
 800306e:	18e3      	adds	r3, r4, r3
 8003070:	603b      	str	r3, [r7, #0]
 8003072:	464b      	mov	r3, r9
 8003074:	eb45 0303 	adc.w	r3, r5, r3
 8003078:	607b      	str	r3, [r7, #4]
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003086:	4629      	mov	r1, r5
 8003088:	028b      	lsls	r3, r1, #10
 800308a:	4621      	mov	r1, r4
 800308c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003090:	4621      	mov	r1, r4
 8003092:	028a      	lsls	r2, r1, #10
 8003094:	4610      	mov	r0, r2
 8003096:	4619      	mov	r1, r3
 8003098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800309a:	2200      	movs	r2, #0
 800309c:	61bb      	str	r3, [r7, #24]
 800309e:	61fa      	str	r2, [r7, #28]
 80030a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030a4:	f7fd fdb0 	bl	8000c08 <__aeabi_uldivmod>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4613      	mov	r3, r2
 80030ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	0c1b      	lsrs	r3, r3, #16
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	3301      	adds	r3, #1
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80030c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030ca:	e002      	b.n	80030d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80030ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3750      	adds	r7, #80	; 0x50
 80030d8:	46bd      	mov	sp, r7
 80030da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800
 80030e4:	00f42400 	.word	0x00f42400
 80030e8:	007a1200 	.word	0x007a1200

080030ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f0:	4b03      	ldr	r3, [pc, #12]	; (8003100 <HAL_RCC_GetHCLKFreq+0x14>)
 80030f2:	681b      	ldr	r3, [r3, #0]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	20001f68 	.word	0x20001f68

08003104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003108:	f7ff fff0 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 800310c:	4602      	mov	r2, r0
 800310e:	4b05      	ldr	r3, [pc, #20]	; (8003124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	0a9b      	lsrs	r3, r3, #10
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	4903      	ldr	r1, [pc, #12]	; (8003128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800311a:	5ccb      	ldrb	r3, [r1, r3]
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003120:	4618      	mov	r0, r3
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40023800 	.word	0x40023800
 8003128:	08008798 	.word	0x08008798

0800312c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003130:	f7ff ffdc 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 8003134:	4602      	mov	r2, r0
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	0b5b      	lsrs	r3, r3, #13
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	4903      	ldr	r1, [pc, #12]	; (8003150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003142:	5ccb      	ldrb	r3, [r1, r3]
 8003144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003148:	4618      	mov	r0, r3
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40023800 	.word	0x40023800
 8003150:	08008798 	.word	0x08008798

08003154 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d012      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800317c:	4b69      	ldr	r3, [pc, #420]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	4a68      	ldr	r2, [pc, #416]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003182:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003186:	6093      	str	r3, [r2, #8]
 8003188:	4b66      	ldr	r3, [pc, #408]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003190:	4964      	ldr	r1, [pc, #400]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003192:	4313      	orrs	r3, r2
 8003194:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800319e:	2301      	movs	r3, #1
 80031a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d017      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031ae:	4b5d      	ldr	r3, [pc, #372]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031bc:	4959      	ldr	r1, [pc, #356]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031cc:	d101      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80031ce:	2301      	movs	r3, #1
 80031d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80031da:	2301      	movs	r3, #1
 80031dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d017      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031ea:	4b4e      	ldr	r3, [pc, #312]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	494a      	ldr	r1, [pc, #296]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003208:	d101      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800320a:	2301      	movs	r3, #1
 800320c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003216:	2301      	movs	r3, #1
 8003218:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003226:	2301      	movs	r3, #1
 8003228:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0320 	and.w	r3, r3, #32
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 808b 	beq.w	800334e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003238:	4b3a      	ldr	r3, [pc, #232]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	4a39      	ldr	r2, [pc, #228]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800323e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003242:	6413      	str	r3, [r2, #64]	; 0x40
 8003244:	4b37      	ldr	r3, [pc, #220]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003250:	4b35      	ldr	r3, [pc, #212]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a34      	ldr	r2, [pc, #208]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800325c:	f7fe fb56 	bl	800190c <HAL_GetTick>
 8003260:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003264:	f7fe fb52 	bl	800190c <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b64      	cmp	r3, #100	; 0x64
 8003270:	d901      	bls.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e357      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003276:	4b2c      	ldr	r3, [pc, #176]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003282:	4b28      	ldr	r3, [pc, #160]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800328a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d035      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	429a      	cmp	r2, r3
 800329e:	d02e      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032a0:	4b20      	ldr	r3, [pc, #128]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032aa:	4b1e      	ldr	r3, [pc, #120]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ae:	4a1d      	ldr	r2, [pc, #116]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032b6:	4b1b      	ldr	r3, [pc, #108]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ba:	4a1a      	ldr	r2, [pc, #104]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80032c2:	4a18      	ldr	r2, [pc, #96]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032c8:	4b16      	ldr	r3, [pc, #88]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d114      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fe fb1a 	bl	800190c <HAL_GetTick>
 80032d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032da:	e00a      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032dc:	f7fe fb16 	bl	800190c <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e319      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f2:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0ee      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003306:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800330a:	d111      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003318:	4b04      	ldr	r3, [pc, #16]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800331a:	400b      	ands	r3, r1
 800331c:	4901      	ldr	r1, [pc, #4]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800331e:	4313      	orrs	r3, r2
 8003320:	608b      	str	r3, [r1, #8]
 8003322:	e00b      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003324:	40023800 	.word	0x40023800
 8003328:	40007000 	.word	0x40007000
 800332c:	0ffffcff 	.word	0x0ffffcff
 8003330:	4baa      	ldr	r3, [pc, #680]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	4aa9      	ldr	r2, [pc, #676]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003336:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800333a:	6093      	str	r3, [r2, #8]
 800333c:	4ba7      	ldr	r3, [pc, #668]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800333e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003348:	49a4      	ldr	r1, [pc, #656]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800334a:	4313      	orrs	r3, r2
 800334c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0310 	and.w	r3, r3, #16
 8003356:	2b00      	cmp	r3, #0
 8003358:	d010      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800335a:	4ba0      	ldr	r3, [pc, #640]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800335c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003360:	4a9e      	ldr	r2, [pc, #632]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003366:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800336a:	4b9c      	ldr	r3, [pc, #624]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800336c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003374:	4999      	ldr	r1, [pc, #612]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00a      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003388:	4b94      	ldr	r3, [pc, #592]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003396:	4991      	ldr	r1, [pc, #580]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033aa:	4b8c      	ldr	r3, [pc, #560]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033b8:	4988      	ldr	r1, [pc, #544]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00a      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033cc:	4b83      	ldr	r3, [pc, #524]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033da:	4980      	ldr	r1, [pc, #512]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033ee:	4b7b      	ldr	r3, [pc, #492]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fc:	4977      	ldr	r1, [pc, #476]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003410:	4b72      	ldr	r3, [pc, #456]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003416:	f023 0203 	bic.w	r2, r3, #3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	496f      	ldr	r1, [pc, #444]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003432:	4b6a      	ldr	r3, [pc, #424]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003438:	f023 020c 	bic.w	r2, r3, #12
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003440:	4966      	ldr	r1, [pc, #408]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003454:	4b61      	ldr	r3, [pc, #388]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003462:	495e      	ldr	r1, [pc, #376]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003476:	4b59      	ldr	r3, [pc, #356]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003484:	4955      	ldr	r1, [pc, #340]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003498:	4b50      	ldr	r3, [pc, #320]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a6:	494d      	ldr	r1, [pc, #308]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80034ba:	4b48      	ldr	r3, [pc, #288]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c8:	4944      	ldr	r1, [pc, #272]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80034dc:	4b3f      	ldr	r3, [pc, #252]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ea:	493c      	ldr	r1, [pc, #240]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80034fe:	4b37      	ldr	r3, [pc, #220]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003504:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350c:	4933      	ldr	r1, [pc, #204]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003520:	4b2e      	ldr	r3, [pc, #184]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800352e:	492b      	ldr	r1, [pc, #172]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d011      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003542:	4b26      	ldr	r3, [pc, #152]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003548:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003550:	4922      	ldr	r1, [pc, #136]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800355c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003560:	d101      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003562:	2301      	movs	r3, #1
 8003564:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003572:	2301      	movs	r3, #1
 8003574:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003582:	4b16      	ldr	r3, [pc, #88]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003588:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003590:	4912      	ldr	r1, [pc, #72]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003592:	4313      	orrs	r3, r2
 8003594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00b      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035a4:	4b0d      	ldr	r3, [pc, #52]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035b4:	4909      	ldr	r1, [pc, #36]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d006      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 80d9 	beq.w	8003782 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80035d0:	4b02      	ldr	r3, [pc, #8]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a01      	ldr	r2, [pc, #4]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035da:	e001      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80035dc:	40023800 	.word	0x40023800
 80035e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e2:	f7fe f993 	bl	800190c <HAL_GetTick>
 80035e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035e8:	e008      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035ea:	f7fe f98f 	bl	800190c <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b64      	cmp	r3, #100	; 0x64
 80035f6:	d901      	bls.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e194      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035fc:	4b6c      	ldr	r3, [pc, #432]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f0      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d021      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003618:	2b00      	cmp	r3, #0
 800361a:	d11d      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800361c:	4b64      	ldr	r3, [pc, #400]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800361e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003622:	0c1b      	lsrs	r3, r3, #16
 8003624:	f003 0303 	and.w	r3, r3, #3
 8003628:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800362a:	4b61      	ldr	r3, [pc, #388]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800362c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003630:	0e1b      	lsrs	r3, r3, #24
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	019a      	lsls	r2, r3, #6
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	041b      	lsls	r3, r3, #16
 8003642:	431a      	orrs	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	061b      	lsls	r3, r3, #24
 8003648:	431a      	orrs	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	071b      	lsls	r3, r3, #28
 8003650:	4957      	ldr	r1, [pc, #348]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d004      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003668:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800366c:	d00a      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003676:	2b00      	cmp	r3, #0
 8003678:	d02e      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003682:	d129      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003684:	4b4a      	ldr	r3, [pc, #296]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800368a:	0c1b      	lsrs	r3, r3, #16
 800368c:	f003 0303 	and.w	r3, r3, #3
 8003690:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003692:	4b47      	ldr	r3, [pc, #284]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003698:	0f1b      	lsrs	r3, r3, #28
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	019a      	lsls	r2, r3, #6
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	041b      	lsls	r3, r3, #16
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	061b      	lsls	r3, r3, #24
 80036b2:	431a      	orrs	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	071b      	lsls	r3, r3, #28
 80036b8:	493d      	ldr	r1, [pc, #244]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80036c0:	4b3b      	ldr	r3, [pc, #236]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036c6:	f023 021f 	bic.w	r2, r3, #31
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	3b01      	subs	r3, #1
 80036d0:	4937      	ldr	r1, [pc, #220]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d01d      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036e4:	4b32      	ldr	r3, [pc, #200]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ea:	0e1b      	lsrs	r3, r3, #24
 80036ec:	f003 030f 	and.w	r3, r3, #15
 80036f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036f2:	4b2f      	ldr	r3, [pc, #188]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036f8:	0f1b      	lsrs	r3, r3, #28
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	019a      	lsls	r2, r3, #6
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	041b      	lsls	r3, r3, #16
 800370c:	431a      	orrs	r2, r3
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	061b      	lsls	r3, r3, #24
 8003712:	431a      	orrs	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	071b      	lsls	r3, r3, #28
 8003718:	4925      	ldr	r1, [pc, #148]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800371a:	4313      	orrs	r3, r2
 800371c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d011      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	019a      	lsls	r2, r3, #6
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	041b      	lsls	r3, r3, #16
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	061b      	lsls	r3, r3, #24
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	071b      	lsls	r3, r3, #28
 8003748:	4919      	ldr	r1, [pc, #100]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003750:	4b17      	ldr	r3, [pc, #92]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a16      	ldr	r2, [pc, #88]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003756:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800375a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800375c:	f7fe f8d6 	bl	800190c <HAL_GetTick>
 8003760:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003764:	f7fe f8d2 	bl	800190c <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	; 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e0d7      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003776:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	2b01      	cmp	r3, #1
 8003786:	f040 80cd 	bne.w	8003924 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800378a:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a08      	ldr	r2, [pc, #32]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003796:	f7fe f8b9 	bl	800190c <HAL_GetTick>
 800379a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800379c:	e00a      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800379e:	f7fe f8b5 	bl	800190c <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b64      	cmp	r3, #100	; 0x64
 80037aa:	d903      	bls.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e0ba      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80037b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037b4:	4b5e      	ldr	r3, [pc, #376]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037c0:	d0ed      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d009      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d02e      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d12a      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037ea:	4b51      	ldr	r3, [pc, #324]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f0:	0c1b      	lsrs	r3, r3, #16
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037f8:	4b4d      	ldr	r3, [pc, #308]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fe:	0f1b      	lsrs	r3, r3, #28
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	019a      	lsls	r2, r3, #6
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	041b      	lsls	r3, r3, #16
 8003810:	431a      	orrs	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	061b      	lsls	r3, r3, #24
 8003818:	431a      	orrs	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	071b      	lsls	r3, r3, #28
 800381e:	4944      	ldr	r1, [pc, #272]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003826:	4b42      	ldr	r3, [pc, #264]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800382c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003834:	3b01      	subs	r3, #1
 8003836:	021b      	lsls	r3, r3, #8
 8003838:	493d      	ldr	r1, [pc, #244]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d022      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003850:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003854:	d11d      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003856:	4b36      	ldr	r3, [pc, #216]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385c:	0e1b      	lsrs	r3, r3, #24
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003864:	4b32      	ldr	r3, [pc, #200]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386a:	0f1b      	lsrs	r3, r3, #28
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	019a      	lsls	r2, r3, #6
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	041b      	lsls	r3, r3, #16
 800387e:	431a      	orrs	r2, r3
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	061b      	lsls	r3, r3, #24
 8003884:	431a      	orrs	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	071b      	lsls	r3, r3, #28
 800388a:	4929      	ldr	r1, [pc, #164]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800388c:	4313      	orrs	r3, r2
 800388e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b00      	cmp	r3, #0
 800389c:	d028      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800389e:	4b24      	ldr	r3, [pc, #144]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a4:	0e1b      	lsrs	r3, r3, #24
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038ac:	4b20      	ldr	r3, [pc, #128]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	0c1b      	lsrs	r3, r3, #16
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	019a      	lsls	r2, r3, #6
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	041b      	lsls	r3, r3, #16
 80038c4:	431a      	orrs	r2, r3
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	061b      	lsls	r3, r3, #24
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	071b      	lsls	r3, r3, #28
 80038d2:	4917      	ldr	r1, [pc, #92]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80038da:	4b15      	ldr	r3, [pc, #84]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	4911      	ldr	r1, [pc, #68]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80038f0:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a0e      	ldr	r2, [pc, #56]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038fc:	f7fe f806 	bl	800190c <HAL_GetTick>
 8003900:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003904:	f7fe f802 	bl	800190c <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b64      	cmp	r3, #100	; 0x64
 8003910:	d901      	bls.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e007      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003916:	4b06      	ldr	r3, [pc, #24]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800391e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003922:	d1ef      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3720      	adds	r7, #32
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40023800 	.word	0x40023800

08003934 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e040      	b.n	80039c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fd fe56 	bl	8001608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2224      	movs	r2, #36	; 0x24
 8003960:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0201 	bic.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f8b0 	bl	8003ad8 <UART_SetConfig>
 8003978:	4603      	mov	r3, r0
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e022      	b.n	80039c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fb08 	bl	8003fa0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800399e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 fb8f 	bl	80040e4 <UART_CheckIdleState>
 80039c6:	4603      	mov	r3, r0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08a      	sub	sp, #40	; 0x28
 80039d4:	af02      	add	r7, sp, #8
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	603b      	str	r3, [r7, #0]
 80039dc:	4613      	mov	r3, r2
 80039de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d171      	bne.n	8003acc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <HAL_UART_Transmit+0x24>
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e06a      	b.n	8003ace <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2221      	movs	r2, #33	; 0x21
 8003a04:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a06:	f7fd ff81 	bl	800190c <HAL_GetTick>
 8003a0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	88fa      	ldrh	r2, [r7, #6]
 8003a10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	88fa      	ldrh	r2, [r7, #6]
 8003a18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a24:	d108      	bne.n	8003a38 <HAL_UART_Transmit+0x68>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d104      	bne.n	8003a38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	61bb      	str	r3, [r7, #24]
 8003a36:	e003      	b.n	8003a40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a40:	e02c      	b.n	8003a9c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2180      	movs	r1, #128	; 0x80
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 fb80 	bl	8004152 <UART_WaitOnFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e038      	b.n	8003ace <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10b      	bne.n	8003a7a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	3302      	adds	r3, #2
 8003a76:	61bb      	str	r3, [r7, #24]
 8003a78:	e007      	b.n	8003a8a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	781a      	ldrb	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	3301      	adds	r3, #1
 8003a88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1cc      	bne.n	8003a42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2140      	movs	r1, #64	; 0x40
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 fb4d 	bl	8004152 <UART_WaitOnFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e005      	b.n	8003ace <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e000      	b.n	8003ace <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003acc:	2302      	movs	r3, #2
  }
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3720      	adds	r7, #32
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	4ba6      	ldr	r3, [pc, #664]	; (8003d9c <UART_SetConfig+0x2c4>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6812      	ldr	r2, [r2, #0]
 8003b0a:	6979      	ldr	r1, [r7, #20]
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a94      	ldr	r2, [pc, #592]	; (8003da0 <UART_SetConfig+0x2c8>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d120      	bne.n	8003b96 <UART_SetConfig+0xbe>
 8003b54:	4b93      	ldr	r3, [pc, #588]	; (8003da4 <UART_SetConfig+0x2cc>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d816      	bhi.n	8003b90 <UART_SetConfig+0xb8>
 8003b62:	a201      	add	r2, pc, #4	; (adr r2, 8003b68 <UART_SetConfig+0x90>)
 8003b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b68:	08003b79 	.word	0x08003b79
 8003b6c:	08003b85 	.word	0x08003b85
 8003b70:	08003b7f 	.word	0x08003b7f
 8003b74:	08003b8b 	.word	0x08003b8b
 8003b78:	2301      	movs	r3, #1
 8003b7a:	77fb      	strb	r3, [r7, #31]
 8003b7c:	e150      	b.n	8003e20 <UART_SetConfig+0x348>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	77fb      	strb	r3, [r7, #31]
 8003b82:	e14d      	b.n	8003e20 <UART_SetConfig+0x348>
 8003b84:	2304      	movs	r3, #4
 8003b86:	77fb      	strb	r3, [r7, #31]
 8003b88:	e14a      	b.n	8003e20 <UART_SetConfig+0x348>
 8003b8a:	2308      	movs	r3, #8
 8003b8c:	77fb      	strb	r3, [r7, #31]
 8003b8e:	e147      	b.n	8003e20 <UART_SetConfig+0x348>
 8003b90:	2310      	movs	r3, #16
 8003b92:	77fb      	strb	r3, [r7, #31]
 8003b94:	e144      	b.n	8003e20 <UART_SetConfig+0x348>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a83      	ldr	r2, [pc, #524]	; (8003da8 <UART_SetConfig+0x2d0>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d132      	bne.n	8003c06 <UART_SetConfig+0x12e>
 8003ba0:	4b80      	ldr	r3, [pc, #512]	; (8003da4 <UART_SetConfig+0x2cc>)
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba6:	f003 030c 	and.w	r3, r3, #12
 8003baa:	2b0c      	cmp	r3, #12
 8003bac:	d828      	bhi.n	8003c00 <UART_SetConfig+0x128>
 8003bae:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <UART_SetConfig+0xdc>)
 8003bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb4:	08003be9 	.word	0x08003be9
 8003bb8:	08003c01 	.word	0x08003c01
 8003bbc:	08003c01 	.word	0x08003c01
 8003bc0:	08003c01 	.word	0x08003c01
 8003bc4:	08003bf5 	.word	0x08003bf5
 8003bc8:	08003c01 	.word	0x08003c01
 8003bcc:	08003c01 	.word	0x08003c01
 8003bd0:	08003c01 	.word	0x08003c01
 8003bd4:	08003bef 	.word	0x08003bef
 8003bd8:	08003c01 	.word	0x08003c01
 8003bdc:	08003c01 	.word	0x08003c01
 8003be0:	08003c01 	.word	0x08003c01
 8003be4:	08003bfb 	.word	0x08003bfb
 8003be8:	2300      	movs	r3, #0
 8003bea:	77fb      	strb	r3, [r7, #31]
 8003bec:	e118      	b.n	8003e20 <UART_SetConfig+0x348>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	77fb      	strb	r3, [r7, #31]
 8003bf2:	e115      	b.n	8003e20 <UART_SetConfig+0x348>
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	77fb      	strb	r3, [r7, #31]
 8003bf8:	e112      	b.n	8003e20 <UART_SetConfig+0x348>
 8003bfa:	2308      	movs	r3, #8
 8003bfc:	77fb      	strb	r3, [r7, #31]
 8003bfe:	e10f      	b.n	8003e20 <UART_SetConfig+0x348>
 8003c00:	2310      	movs	r3, #16
 8003c02:	77fb      	strb	r3, [r7, #31]
 8003c04:	e10c      	b.n	8003e20 <UART_SetConfig+0x348>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a68      	ldr	r2, [pc, #416]	; (8003dac <UART_SetConfig+0x2d4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d120      	bne.n	8003c52 <UART_SetConfig+0x17a>
 8003c10:	4b64      	ldr	r3, [pc, #400]	; (8003da4 <UART_SetConfig+0x2cc>)
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c1a:	2b30      	cmp	r3, #48	; 0x30
 8003c1c:	d013      	beq.n	8003c46 <UART_SetConfig+0x16e>
 8003c1e:	2b30      	cmp	r3, #48	; 0x30
 8003c20:	d814      	bhi.n	8003c4c <UART_SetConfig+0x174>
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d009      	beq.n	8003c3a <UART_SetConfig+0x162>
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	d810      	bhi.n	8003c4c <UART_SetConfig+0x174>
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <UART_SetConfig+0x15c>
 8003c2e:	2b10      	cmp	r3, #16
 8003c30:	d006      	beq.n	8003c40 <UART_SetConfig+0x168>
 8003c32:	e00b      	b.n	8003c4c <UART_SetConfig+0x174>
 8003c34:	2300      	movs	r3, #0
 8003c36:	77fb      	strb	r3, [r7, #31]
 8003c38:	e0f2      	b.n	8003e20 <UART_SetConfig+0x348>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	77fb      	strb	r3, [r7, #31]
 8003c3e:	e0ef      	b.n	8003e20 <UART_SetConfig+0x348>
 8003c40:	2304      	movs	r3, #4
 8003c42:	77fb      	strb	r3, [r7, #31]
 8003c44:	e0ec      	b.n	8003e20 <UART_SetConfig+0x348>
 8003c46:	2308      	movs	r3, #8
 8003c48:	77fb      	strb	r3, [r7, #31]
 8003c4a:	e0e9      	b.n	8003e20 <UART_SetConfig+0x348>
 8003c4c:	2310      	movs	r3, #16
 8003c4e:	77fb      	strb	r3, [r7, #31]
 8003c50:	e0e6      	b.n	8003e20 <UART_SetConfig+0x348>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a56      	ldr	r2, [pc, #344]	; (8003db0 <UART_SetConfig+0x2d8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d120      	bne.n	8003c9e <UART_SetConfig+0x1c6>
 8003c5c:	4b51      	ldr	r3, [pc, #324]	; (8003da4 <UART_SetConfig+0x2cc>)
 8003c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c66:	2bc0      	cmp	r3, #192	; 0xc0
 8003c68:	d013      	beq.n	8003c92 <UART_SetConfig+0x1ba>
 8003c6a:	2bc0      	cmp	r3, #192	; 0xc0
 8003c6c:	d814      	bhi.n	8003c98 <UART_SetConfig+0x1c0>
 8003c6e:	2b80      	cmp	r3, #128	; 0x80
 8003c70:	d009      	beq.n	8003c86 <UART_SetConfig+0x1ae>
 8003c72:	2b80      	cmp	r3, #128	; 0x80
 8003c74:	d810      	bhi.n	8003c98 <UART_SetConfig+0x1c0>
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <UART_SetConfig+0x1a8>
 8003c7a:	2b40      	cmp	r3, #64	; 0x40
 8003c7c:	d006      	beq.n	8003c8c <UART_SetConfig+0x1b4>
 8003c7e:	e00b      	b.n	8003c98 <UART_SetConfig+0x1c0>
 8003c80:	2300      	movs	r3, #0
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	e0cc      	b.n	8003e20 <UART_SetConfig+0x348>
 8003c86:	2302      	movs	r3, #2
 8003c88:	77fb      	strb	r3, [r7, #31]
 8003c8a:	e0c9      	b.n	8003e20 <UART_SetConfig+0x348>
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	77fb      	strb	r3, [r7, #31]
 8003c90:	e0c6      	b.n	8003e20 <UART_SetConfig+0x348>
 8003c92:	2308      	movs	r3, #8
 8003c94:	77fb      	strb	r3, [r7, #31]
 8003c96:	e0c3      	b.n	8003e20 <UART_SetConfig+0x348>
 8003c98:	2310      	movs	r3, #16
 8003c9a:	77fb      	strb	r3, [r7, #31]
 8003c9c:	e0c0      	b.n	8003e20 <UART_SetConfig+0x348>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a44      	ldr	r2, [pc, #272]	; (8003db4 <UART_SetConfig+0x2dc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d125      	bne.n	8003cf4 <UART_SetConfig+0x21c>
 8003ca8:	4b3e      	ldr	r3, [pc, #248]	; (8003da4 <UART_SetConfig+0x2cc>)
 8003caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cb6:	d017      	beq.n	8003ce8 <UART_SetConfig+0x210>
 8003cb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cbc:	d817      	bhi.n	8003cee <UART_SetConfig+0x216>
 8003cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc2:	d00b      	beq.n	8003cdc <UART_SetConfig+0x204>
 8003cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc8:	d811      	bhi.n	8003cee <UART_SetConfig+0x216>
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <UART_SetConfig+0x1fe>
 8003cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd2:	d006      	beq.n	8003ce2 <UART_SetConfig+0x20a>
 8003cd4:	e00b      	b.n	8003cee <UART_SetConfig+0x216>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	77fb      	strb	r3, [r7, #31]
 8003cda:	e0a1      	b.n	8003e20 <UART_SetConfig+0x348>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	77fb      	strb	r3, [r7, #31]
 8003ce0:	e09e      	b.n	8003e20 <UART_SetConfig+0x348>
 8003ce2:	2304      	movs	r3, #4
 8003ce4:	77fb      	strb	r3, [r7, #31]
 8003ce6:	e09b      	b.n	8003e20 <UART_SetConfig+0x348>
 8003ce8:	2308      	movs	r3, #8
 8003cea:	77fb      	strb	r3, [r7, #31]
 8003cec:	e098      	b.n	8003e20 <UART_SetConfig+0x348>
 8003cee:	2310      	movs	r3, #16
 8003cf0:	77fb      	strb	r3, [r7, #31]
 8003cf2:	e095      	b.n	8003e20 <UART_SetConfig+0x348>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a2f      	ldr	r2, [pc, #188]	; (8003db8 <UART_SetConfig+0x2e0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d125      	bne.n	8003d4a <UART_SetConfig+0x272>
 8003cfe:	4b29      	ldr	r3, [pc, #164]	; (8003da4 <UART_SetConfig+0x2cc>)
 8003d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d0c:	d017      	beq.n	8003d3e <UART_SetConfig+0x266>
 8003d0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d12:	d817      	bhi.n	8003d44 <UART_SetConfig+0x26c>
 8003d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d18:	d00b      	beq.n	8003d32 <UART_SetConfig+0x25a>
 8003d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d1e:	d811      	bhi.n	8003d44 <UART_SetConfig+0x26c>
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <UART_SetConfig+0x254>
 8003d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d28:	d006      	beq.n	8003d38 <UART_SetConfig+0x260>
 8003d2a:	e00b      	b.n	8003d44 <UART_SetConfig+0x26c>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	77fb      	strb	r3, [r7, #31]
 8003d30:	e076      	b.n	8003e20 <UART_SetConfig+0x348>
 8003d32:	2302      	movs	r3, #2
 8003d34:	77fb      	strb	r3, [r7, #31]
 8003d36:	e073      	b.n	8003e20 <UART_SetConfig+0x348>
 8003d38:	2304      	movs	r3, #4
 8003d3a:	77fb      	strb	r3, [r7, #31]
 8003d3c:	e070      	b.n	8003e20 <UART_SetConfig+0x348>
 8003d3e:	2308      	movs	r3, #8
 8003d40:	77fb      	strb	r3, [r7, #31]
 8003d42:	e06d      	b.n	8003e20 <UART_SetConfig+0x348>
 8003d44:	2310      	movs	r3, #16
 8003d46:	77fb      	strb	r3, [r7, #31]
 8003d48:	e06a      	b.n	8003e20 <UART_SetConfig+0x348>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1b      	ldr	r2, [pc, #108]	; (8003dbc <UART_SetConfig+0x2e4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d138      	bne.n	8003dc6 <UART_SetConfig+0x2ee>
 8003d54:	4b13      	ldr	r3, [pc, #76]	; (8003da4 <UART_SetConfig+0x2cc>)
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003d5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d62:	d017      	beq.n	8003d94 <UART_SetConfig+0x2bc>
 8003d64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d68:	d82a      	bhi.n	8003dc0 <UART_SetConfig+0x2e8>
 8003d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d6e:	d00b      	beq.n	8003d88 <UART_SetConfig+0x2b0>
 8003d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d74:	d824      	bhi.n	8003dc0 <UART_SetConfig+0x2e8>
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <UART_SetConfig+0x2aa>
 8003d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d7e:	d006      	beq.n	8003d8e <UART_SetConfig+0x2b6>
 8003d80:	e01e      	b.n	8003dc0 <UART_SetConfig+0x2e8>
 8003d82:	2300      	movs	r3, #0
 8003d84:	77fb      	strb	r3, [r7, #31]
 8003d86:	e04b      	b.n	8003e20 <UART_SetConfig+0x348>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	77fb      	strb	r3, [r7, #31]
 8003d8c:	e048      	b.n	8003e20 <UART_SetConfig+0x348>
 8003d8e:	2304      	movs	r3, #4
 8003d90:	77fb      	strb	r3, [r7, #31]
 8003d92:	e045      	b.n	8003e20 <UART_SetConfig+0x348>
 8003d94:	2308      	movs	r3, #8
 8003d96:	77fb      	strb	r3, [r7, #31]
 8003d98:	e042      	b.n	8003e20 <UART_SetConfig+0x348>
 8003d9a:	bf00      	nop
 8003d9c:	efff69f3 	.word	0xefff69f3
 8003da0:	40011000 	.word	0x40011000
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40004400 	.word	0x40004400
 8003dac:	40004800 	.word	0x40004800
 8003db0:	40004c00 	.word	0x40004c00
 8003db4:	40005000 	.word	0x40005000
 8003db8:	40011400 	.word	0x40011400
 8003dbc:	40007800 	.word	0x40007800
 8003dc0:	2310      	movs	r3, #16
 8003dc2:	77fb      	strb	r3, [r7, #31]
 8003dc4:	e02c      	b.n	8003e20 <UART_SetConfig+0x348>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a72      	ldr	r2, [pc, #456]	; (8003f94 <UART_SetConfig+0x4bc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d125      	bne.n	8003e1c <UART_SetConfig+0x344>
 8003dd0:	4b71      	ldr	r3, [pc, #452]	; (8003f98 <UART_SetConfig+0x4c0>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003dda:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003dde:	d017      	beq.n	8003e10 <UART_SetConfig+0x338>
 8003de0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003de4:	d817      	bhi.n	8003e16 <UART_SetConfig+0x33e>
 8003de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dea:	d00b      	beq.n	8003e04 <UART_SetConfig+0x32c>
 8003dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003df0:	d811      	bhi.n	8003e16 <UART_SetConfig+0x33e>
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <UART_SetConfig+0x326>
 8003df6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dfa:	d006      	beq.n	8003e0a <UART_SetConfig+0x332>
 8003dfc:	e00b      	b.n	8003e16 <UART_SetConfig+0x33e>
 8003dfe:	2300      	movs	r3, #0
 8003e00:	77fb      	strb	r3, [r7, #31]
 8003e02:	e00d      	b.n	8003e20 <UART_SetConfig+0x348>
 8003e04:	2302      	movs	r3, #2
 8003e06:	77fb      	strb	r3, [r7, #31]
 8003e08:	e00a      	b.n	8003e20 <UART_SetConfig+0x348>
 8003e0a:	2304      	movs	r3, #4
 8003e0c:	77fb      	strb	r3, [r7, #31]
 8003e0e:	e007      	b.n	8003e20 <UART_SetConfig+0x348>
 8003e10:	2308      	movs	r3, #8
 8003e12:	77fb      	strb	r3, [r7, #31]
 8003e14:	e004      	b.n	8003e20 <UART_SetConfig+0x348>
 8003e16:	2310      	movs	r3, #16
 8003e18:	77fb      	strb	r3, [r7, #31]
 8003e1a:	e001      	b.n	8003e20 <UART_SetConfig+0x348>
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e28:	d15b      	bne.n	8003ee2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003e2a:	7ffb      	ldrb	r3, [r7, #31]
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d828      	bhi.n	8003e82 <UART_SetConfig+0x3aa>
 8003e30:	a201      	add	r2, pc, #4	; (adr r2, 8003e38 <UART_SetConfig+0x360>)
 8003e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e36:	bf00      	nop
 8003e38:	08003e5d 	.word	0x08003e5d
 8003e3c:	08003e65 	.word	0x08003e65
 8003e40:	08003e6d 	.word	0x08003e6d
 8003e44:	08003e83 	.word	0x08003e83
 8003e48:	08003e73 	.word	0x08003e73
 8003e4c:	08003e83 	.word	0x08003e83
 8003e50:	08003e83 	.word	0x08003e83
 8003e54:	08003e83 	.word	0x08003e83
 8003e58:	08003e7b 	.word	0x08003e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e5c:	f7ff f952 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8003e60:	61b8      	str	r0, [r7, #24]
        break;
 8003e62:	e013      	b.n	8003e8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e64:	f7ff f962 	bl	800312c <HAL_RCC_GetPCLK2Freq>
 8003e68:	61b8      	str	r0, [r7, #24]
        break;
 8003e6a:	e00f      	b.n	8003e8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e6c:	4b4b      	ldr	r3, [pc, #300]	; (8003f9c <UART_SetConfig+0x4c4>)
 8003e6e:	61bb      	str	r3, [r7, #24]
        break;
 8003e70:	e00c      	b.n	8003e8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e72:	f7ff f835 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 8003e76:	61b8      	str	r0, [r7, #24]
        break;
 8003e78:	e008      	b.n	8003e8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e7e:	61bb      	str	r3, [r7, #24]
        break;
 8003e80:	e004      	b.n	8003e8c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	77bb      	strb	r3, [r7, #30]
        break;
 8003e8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d074      	beq.n	8003f7c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	005a      	lsls	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	085b      	lsrs	r3, r3, #1
 8003e9c:	441a      	add	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	2b0f      	cmp	r3, #15
 8003eac:	d916      	bls.n	8003edc <UART_SetConfig+0x404>
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb4:	d212      	bcs.n	8003edc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	f023 030f 	bic.w	r3, r3, #15
 8003ebe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	085b      	lsrs	r3, r3, #1
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	89fb      	ldrh	r3, [r7, #14]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	89fa      	ldrh	r2, [r7, #14]
 8003ed8:	60da      	str	r2, [r3, #12]
 8003eda:	e04f      	b.n	8003f7c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	77bb      	strb	r3, [r7, #30]
 8003ee0:	e04c      	b.n	8003f7c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ee2:	7ffb      	ldrb	r3, [r7, #31]
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d828      	bhi.n	8003f3a <UART_SetConfig+0x462>
 8003ee8:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <UART_SetConfig+0x418>)
 8003eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003f15 	.word	0x08003f15
 8003ef4:	08003f1d 	.word	0x08003f1d
 8003ef8:	08003f25 	.word	0x08003f25
 8003efc:	08003f3b 	.word	0x08003f3b
 8003f00:	08003f2b 	.word	0x08003f2b
 8003f04:	08003f3b 	.word	0x08003f3b
 8003f08:	08003f3b 	.word	0x08003f3b
 8003f0c:	08003f3b 	.word	0x08003f3b
 8003f10:	08003f33 	.word	0x08003f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f14:	f7ff f8f6 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8003f18:	61b8      	str	r0, [r7, #24]
        break;
 8003f1a:	e013      	b.n	8003f44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f1c:	f7ff f906 	bl	800312c <HAL_RCC_GetPCLK2Freq>
 8003f20:	61b8      	str	r0, [r7, #24]
        break;
 8003f22:	e00f      	b.n	8003f44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f24:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <UART_SetConfig+0x4c4>)
 8003f26:	61bb      	str	r3, [r7, #24]
        break;
 8003f28:	e00c      	b.n	8003f44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f2a:	f7fe ffd9 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 8003f2e:	61b8      	str	r0, [r7, #24]
        break;
 8003f30:	e008      	b.n	8003f44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f36:	61bb      	str	r3, [r7, #24]
        break;
 8003f38:	e004      	b.n	8003f44 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	77bb      	strb	r3, [r7, #30]
        break;
 8003f42:	bf00      	nop
    }

    if (pclk != 0U)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d018      	beq.n	8003f7c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	085a      	lsrs	r2, r3, #1
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	441a      	add	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b0f      	cmp	r3, #15
 8003f62:	d909      	bls.n	8003f78 <UART_SetConfig+0x4a0>
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f6a:	d205      	bcs.n	8003f78 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	60da      	str	r2, [r3, #12]
 8003f76:	e001      	b.n	8003f7c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f88:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3720      	adds	r7, #32
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40007c00 	.word	0x40007c00
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	00f42400 	.word	0x00f42400

08003fa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00a      	beq.n	800400e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407c:	2b00      	cmp	r3, #0
 800407e:	d01a      	beq.n	80040b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800409e:	d10a      	bne.n	80040b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	605a      	str	r2, [r3, #4]
  }
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040f4:	f7fd fc0a 	bl	800190c <HAL_GetTick>
 80040f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b08      	cmp	r3, #8
 8004106:	d10e      	bne.n	8004126 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004108:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f81b 	bl	8004152 <UART_WaitOnFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e011      	b.n	800414a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b09c      	sub	sp, #112	; 0x70
 8004156:	af00      	add	r7, sp, #0
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	603b      	str	r3, [r7, #0]
 800415e:	4613      	mov	r3, r2
 8004160:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004162:	e0a7      	b.n	80042b4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416a:	f000 80a3 	beq.w	80042b4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416e:	f7fd fbcd 	bl	800190c <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800417a:	429a      	cmp	r2, r3
 800417c:	d302      	bcc.n	8004184 <UART_WaitOnFlagUntilTimeout+0x32>
 800417e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004180:	2b00      	cmp	r3, #0
 8004182:	d13f      	bne.n	8004204 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004194:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004198:	667b      	str	r3, [r7, #100]	; 0x64
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80041b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e6      	bne.n	8004184 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3308      	adds	r3, #8
 80041bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c0:	e853 3f00 	ldrex	r3, [r3]
 80041c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c8:	f023 0301 	bic.w	r3, r3, #1
 80041cc:	663b      	str	r3, [r7, #96]	; 0x60
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3308      	adds	r3, #8
 80041d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80041d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041de:	e841 2300 	strex	r3, r2, [r1]
 80041e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1e5      	bne.n	80041b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2220      	movs	r2, #32
 80041ee:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e068      	b.n	80042d6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b00      	cmp	r3, #0
 8004210:	d050      	beq.n	80042b4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800421c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004220:	d148      	bne.n	80042b4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800422a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004234:	e853 3f00 	ldrex	r3, [r3]
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004240:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	461a      	mov	r2, r3
 8004248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424a:	637b      	str	r3, [r7, #52]	; 0x34
 800424c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004250:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004252:	e841 2300 	strex	r3, r2, [r1]
 8004256:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1e6      	bne.n	800422c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3308      	adds	r3, #8
 8004264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	613b      	str	r3, [r7, #16]
   return(result);
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f023 0301 	bic.w	r3, r3, #1
 8004274:	66bb      	str	r3, [r7, #104]	; 0x68
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3308      	adds	r3, #8
 800427c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800427e:	623a      	str	r2, [r7, #32]
 8004280:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	69f9      	ldr	r1, [r7, #28]
 8004284:	6a3a      	ldr	r2, [r7, #32]
 8004286:	e841 2300 	strex	r3, r2, [r1]
 800428a:	61bb      	str	r3, [r7, #24]
   return(result);
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1e5      	bne.n	800425e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2220      	movs	r2, #32
 8004296:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2220      	movs	r2, #32
 800429c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e010      	b.n	80042d6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69da      	ldr	r2, [r3, #28]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	4013      	ands	r3, r2
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	bf0c      	ite	eq
 80042c4:	2301      	moveq	r3, #1
 80042c6:	2300      	movne	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	461a      	mov	r2, r3
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	f43f af48 	beq.w	8004164 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3770      	adds	r7, #112	; 0x70
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042e0:	b084      	sub	sp, #16
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	f107 001c 	add.w	r0, r7, #28
 80042ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d120      	bne.n	800433a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	4b20      	ldr	r3, [pc, #128]	; (800438c <USB_CoreInit+0xac>)
 800430a:	4013      	ands	r3, r2
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800431c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800431e:	2b01      	cmp	r3, #1
 8004320:	d105      	bne.n	800432e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 fa96 	bl	8004860 <USB_CoreReset>
 8004334:	4603      	mov	r3, r0
 8004336:	73fb      	strb	r3, [r7, #15]
 8004338:	e010      	b.n	800435c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fa8a 	bl	8004860 <USB_CoreReset>
 800434c:	4603      	mov	r3, r0
 800434e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435e:	2b01      	cmp	r3, #1
 8004360:	d10b      	bne.n	800437a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f043 0206 	orr.w	r2, r3, #6
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f043 0220 	orr.w	r2, r3, #32
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800437a:	7bfb      	ldrb	r3, [r7, #15]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004386:	b004      	add	sp, #16
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	ffbdffbf 	.word	0xffbdffbf

08004390 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f023 0201 	bic.w	r2, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b084      	sub	sp, #16
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	460b      	mov	r3, r1
 80043bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80043ce:	78fb      	ldrb	r3, [r7, #3]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d115      	bne.n	8004400 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80043e0:	2001      	movs	r0, #1
 80043e2:	f7fd fa9f 	bl	8001924 <HAL_Delay>
      ms++;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3301      	adds	r3, #1
 80043ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 fa29 	bl	8004844 <USB_GetMode>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d01e      	beq.n	8004436 <USB_SetCurrentMode+0x84>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b31      	cmp	r3, #49	; 0x31
 80043fc:	d9f0      	bls.n	80043e0 <USB_SetCurrentMode+0x2e>
 80043fe:	e01a      	b.n	8004436 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d115      	bne.n	8004432 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004412:	2001      	movs	r0, #1
 8004414:	f7fd fa86 	bl	8001924 <HAL_Delay>
      ms++;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3301      	adds	r3, #1
 800441c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fa10 	bl	8004844 <USB_GetMode>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d005      	beq.n	8004436 <USB_SetCurrentMode+0x84>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b31      	cmp	r3, #49	; 0x31
 800442e:	d9f0      	bls.n	8004412 <USB_SetCurrentMode+0x60>
 8004430:	e001      	b.n	8004436 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e005      	b.n	8004442 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2b32      	cmp	r3, #50	; 0x32
 800443a:	d101      	bne.n	8004440 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e000      	b.n	8004442 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800444c:	b084      	sub	sp, #16
 800444e:	b580      	push	{r7, lr}
 8004450:	b086      	sub	sp, #24
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800445a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004466:	2300      	movs	r3, #0
 8004468:	613b      	str	r3, [r7, #16]
 800446a:	e009      	b.n	8004480 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	3340      	adds	r3, #64	; 0x40
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	2200      	movs	r2, #0
 8004478:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	3301      	adds	r3, #1
 800447e:	613b      	str	r3, [r7, #16]
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2b0e      	cmp	r3, #14
 8004484:	d9f2      	bls.n	800446c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004488:	2b00      	cmp	r3, #0
 800448a:	d11c      	bne.n	80044c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800449a:	f043 0302 	orr.w	r3, r3, #2
 800449e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	e005      	b.n	80044d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044d8:	461a      	mov	r2, r3
 80044da:	2300      	movs	r3, #0
 80044dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e4:	4619      	mov	r1, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ec:	461a      	mov	r2, r3
 80044ee:	680b      	ldr	r3, [r1, #0]
 80044f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d10c      	bne.n	8004512 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80044f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d104      	bne.n	8004508 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80044fe:	2100      	movs	r1, #0
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f965 	bl	80047d0 <USB_SetDevSpeed>
 8004506:	e008      	b.n	800451a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004508:	2101      	movs	r1, #1
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f960 	bl	80047d0 <USB_SetDevSpeed>
 8004510:	e003      	b.n	800451a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004512:	2103      	movs	r1, #3
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f95b 	bl	80047d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800451a:	2110      	movs	r1, #16
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f8f3 	bl	8004708 <USB_FlushTxFifo>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f91f 	bl	8004770 <USB_FlushRxFifo>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004542:	461a      	mov	r2, r3
 8004544:	2300      	movs	r3, #0
 8004546:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454e:	461a      	mov	r2, r3
 8004550:	2300      	movs	r3, #0
 8004552:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455a:	461a      	mov	r2, r3
 800455c:	2300      	movs	r3, #0
 800455e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004560:	2300      	movs	r3, #0
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	e043      	b.n	80045ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4413      	add	r3, r2
 800456e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004578:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800457c:	d118      	bne.n	80045b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10a      	bne.n	800459a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004590:	461a      	mov	r2, r3
 8004592:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	e013      	b.n	80045c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a6:	461a      	mov	r2, r3
 80045a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	e008      	b.n	80045c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045bc:	461a      	mov	r2, r3
 80045be:	2300      	movs	r3, #0
 80045c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ce:	461a      	mov	r2, r3
 80045d0:	2300      	movs	r3, #0
 80045d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e0:	461a      	mov	r2, r3
 80045e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	3301      	adds	r3, #1
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d3b7      	bcc.n	8004566 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045f6:	2300      	movs	r3, #0
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	e043      	b.n	8004684 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800460e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004612:	d118      	bne.n	8004646 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004626:	461a      	mov	r2, r3
 8004628:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	e013      	b.n	8004658 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463c:	461a      	mov	r2, r3
 800463e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	e008      	b.n	8004658 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004652:	461a      	mov	r2, r3
 8004654:	2300      	movs	r3, #0
 8004656:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004664:	461a      	mov	r2, r3
 8004666:	2300      	movs	r3, #0
 8004668:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004676:	461a      	mov	r2, r3
 8004678:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800467c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	3301      	adds	r3, #1
 8004682:	613b      	str	r3, [r7, #16]
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	429a      	cmp	r2, r3
 800468a:	d3b7      	bcc.n	80045fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800469a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800469e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80046ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d105      	bne.n	80046c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	f043 0210 	orr.w	r2, r3, #16
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	699a      	ldr	r2, [r3, #24]
 80046c4:	4b0e      	ldr	r3, [pc, #56]	; (8004700 <USB_DevInit+0x2b4>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80046cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d005      	beq.n	80046de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	f043 0208 	orr.w	r2, r3, #8
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80046de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d105      	bne.n	80046f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699a      	ldr	r2, [r3, #24]
 80046e8:	4b06      	ldr	r3, [pc, #24]	; (8004704 <USB_DevInit+0x2b8>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80046f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046fc:	b004      	add	sp, #16
 80046fe:	4770      	bx	lr
 8004700:	803c3800 	.word	0x803c3800
 8004704:	40000004 	.word	0x40000004

08004708 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3301      	adds	r3, #1
 800471a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4a13      	ldr	r2, [pc, #76]	; (800476c <USB_FlushTxFifo+0x64>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d901      	bls.n	8004728 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e01b      	b.n	8004760 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	daf2      	bge.n	8004716 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	019b      	lsls	r3, r3, #6
 8004738:	f043 0220 	orr.w	r2, r3, #32
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	3301      	adds	r3, #1
 8004744:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4a08      	ldr	r2, [pc, #32]	; (800476c <USB_FlushTxFifo+0x64>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d901      	bls.n	8004752 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e006      	b.n	8004760 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f003 0320 	and.w	r3, r3, #32
 800475a:	2b20      	cmp	r3, #32
 800475c:	d0f0      	beq.n	8004740 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	00030d40 	.word	0x00030d40

08004770 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3301      	adds	r3, #1
 8004780:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4a11      	ldr	r2, [pc, #68]	; (80047cc <USB_FlushRxFifo+0x5c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d901      	bls.n	800478e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e018      	b.n	80047c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	daf2      	bge.n	800477c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2210      	movs	r2, #16
 800479e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3301      	adds	r3, #1
 80047a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4a08      	ldr	r2, [pc, #32]	; (80047cc <USB_FlushRxFifo+0x5c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d901      	bls.n	80047b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e006      	b.n	80047c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f003 0310 	and.w	r3, r3, #16
 80047ba:	2b10      	cmp	r3, #16
 80047bc:	d0f0      	beq.n	80047a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	00030d40 	.word	0x00030d40

080047d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	68f9      	ldr	r1, [r7, #12]
 80047ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047f0:	4313      	orrs	r3, r2
 80047f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004802:	b480      	push	{r7}
 8004804:	b085      	sub	sp, #20
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800481c:	f023 0303 	bic.w	r3, r3, #3
 8004820:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004830:	f043 0302 	orr.w	r3, r3, #2
 8004834:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	f003 0301 	and.w	r3, r3, #1
}
 8004854:	4618      	mov	r0, r3
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	3301      	adds	r3, #1
 8004870:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4a13      	ldr	r2, [pc, #76]	; (80048c4 <USB_CoreReset+0x64>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d901      	bls.n	800487e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e01b      	b.n	80048b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	daf2      	bge.n	800486c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f043 0201 	orr.w	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3301      	adds	r3, #1
 800489a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4a09      	ldr	r2, [pc, #36]	; (80048c4 <USB_CoreReset+0x64>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d901      	bls.n	80048a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e006      	b.n	80048b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d0f0      	beq.n	8004896 <USB_CoreReset+0x36>

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	00030d40 	.word	0x00030d40

080048c8 <RunAllTests>:
#include "CuTest.h"

CuSuite* CuGetCmsisDspSuite(void);

int RunAllTests(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
	CuString *output = CuStringNew();
 80048ce:	f000 f97c 	bl	8004bca <CuStringNew>
 80048d2:	6078      	str	r0, [r7, #4]
	CuSuite* suite = CuSuiteNew();
 80048d4:	f000 fbdb 	bl	800508e <CuSuiteNew>
 80048d8:	6038      	str	r0, [r7, #0]

	CuSuiteAddSuite(suite, CuGetCmsisDspSuite());
 80048da:	f000 f90f 	bl	8004afc <CuGetCmsisDspSuite>
 80048de:	4603      	mov	r3, r0
 80048e0:	4619      	mov	r1, r3
 80048e2:	6838      	ldr	r0, [r7, #0]
 80048e4:	f000 fc0c 	bl	8005100 <CuSuiteAddSuite>

	CuSuiteRun(suite);
 80048e8:	6838      	ldr	r0, [r7, #0]
 80048ea:	f000 fc28 	bl	800513e <CuSuiteRun>
	CuSuiteSummary(suite, output);
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	6838      	ldr	r0, [r7, #0]
 80048f2:	f000 fc4f 	bl	8005194 <CuSuiteSummary>
	CuSuiteDetails(suite, output);
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	6838      	ldr	r0, [r7, #0]
 80048fa:	f000 fc7b 	bl	80051f4 <CuSuiteDetails>
	HAL_UART_Transmit(&huart3, (uint8_t*)output->buffer, output->length, 0xffff);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6899      	ldr	r1, [r3, #8]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	b29a      	uxth	r2, r3
 8004908:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800490c:	4805      	ldr	r0, [pc, #20]	; (8004924 <RunAllTests+0x5c>)
 800490e:	f7ff f85f 	bl	80039d0 <HAL_UART_Transmit>
	return suite->failCount;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004918:	685b      	ldr	r3, [r3, #4]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20003350 	.word	0x20003350

08004928 <RMSE>:
 * @param[in] y    : Input vector
 * @param[in] len  : Vectors length
 * @return Root mean square error: sqrt(sum( (yref - y)^2 ))
 */
float32_t RMSE(const float32_t* y, const float32_t* yref, const uint32_t len)
{
 8004928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800492c:	b089      	sub	sp, #36	; 0x24
 800492e:	af00      	add	r7, sp, #0
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	607a      	str	r2, [r7, #4]
 8004936:	466b      	mov	r3, sp
 8004938:	461e      	mov	r6, r3
  float32_t err[len];
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3b01      	subs	r3, #1
 800493e:	61fb      	str	r3, [r7, #28]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	4698      	mov	r8, r3
 8004946:	4691      	mov	r9, r2
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	f04f 0300 	mov.w	r3, #0
 8004950:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8004954:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8004958:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	461c      	mov	r4, r3
 8004962:	4615      	mov	r5, r2
 8004964:	f04f 0200 	mov.w	r2, #0
 8004968:	f04f 0300 	mov.w	r3, #0
 800496c:	016b      	lsls	r3, r5, #5
 800496e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8004972:	0162      	lsls	r2, r4, #5
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	3307      	adds	r3, #7
 800497a:	08db      	lsrs	r3, r3, #3
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	ebad 0d03 	sub.w	sp, sp, r3
 8004982:	466b      	mov	r3, sp
 8004984:	3303      	adds	r3, #3
 8004986:	089b      	lsrs	r3, r3, #2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	61bb      	str	r3, [r7, #24]
  arm_sub_f32(yref, y, err, len);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	68f9      	ldr	r1, [r7, #12]
 8004992:	68b8      	ldr	r0, [r7, #8]
 8004994:	f000 fe32 	bl	80055fc <arm_sub_f32>
  float32_t rmse;
  arm_rms_f32(err, len, &rmse);
 8004998:	f107 0314 	add.w	r3, r7, #20
 800499c:	461a      	mov	r2, r3
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	69b8      	ldr	r0, [r7, #24]
 80049a2:	f000 fcbb 	bl	800531c <arm_rms_f32>
  return rmse;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	46b5      	mov	sp, r6
 80049aa:	ee07 3a90 	vmov	s15, r3
}
 80049ae:	eeb0 0a67 	vmov.f32	s0, s15
 80049b2:	3724      	adds	r7, #36	; 0x24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049ba:	0000      	movs	r0, r0
 80049bc:	0000      	movs	r0, r0
	...

080049c0 <TestCmsisDsp_RMSE>:

void TestCmsisDsp_RMSE(CuTest *tc)
{
 80049c0:	b5b0      	push	{r4, r5, r7, lr}
 80049c2:	b08a      	sub	sp, #40	; 0x28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  const float32_t a[] = { 0.8150f, 0.9060f, 0.1270f };
 80049c8:	4a1b      	ldr	r2, [pc, #108]	; (8004a38 <TestCmsisDsp_RMSE+0x78>)
 80049ca:	f107 0314 	add.w	r3, r7, #20
 80049ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80049d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  const float32_t b[] = { 0.9130f, 0.6320f, 0.0980f };
 80049d4:	4a19      	ldr	r2, [pc, #100]	; (8004a3c <TestCmsisDsp_RMSE+0x7c>)
 80049d6:	f107 0308 	add.w	r3, r7, #8
 80049da:	ca07      	ldmia	r2, {r0, r1, r2}
 80049dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  const float32_t c_ref = 0.1688402f;
 80049e0:	4b17      	ldr	r3, [pc, #92]	; (8004a40 <TestCmsisDsp_RMSE+0x80>)
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24

  // CMSIS DSP implementation of root mean square error
  float32_t c = RMSE(a, b, 3);
 80049e4:	f107 0108 	add.w	r1, r7, #8
 80049e8:	f107 0314 	add.w	r3, r7, #20
 80049ec:	2203      	movs	r2, #3
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff ff9a 	bl	8004928 <RMSE>
 80049f4:	ed87 0a08 	vstr	s0, [r7, #32]

  CuAssertDblEquals(tc, c_ref, c, 1e-7f);
 80049f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049fa:	f7fb fdd5 	bl	80005a8 <__aeabi_f2d>
 80049fe:	4604      	mov	r4, r0
 8004a00:	460d      	mov	r5, r1
 8004a02:	6a38      	ldr	r0, [r7, #32]
 8004a04:	f7fb fdd0 	bl	80005a8 <__aeabi_f2d>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	ed9f 2b08 	vldr	d2, [pc, #32]	; 8004a30 <TestCmsisDsp_RMSE+0x70>
 8004a10:	ec43 2b11 	vmov	d1, r2, r3
 8004a14:	ec45 4b10 	vmov	d0, r4, r5
 8004a18:	2300      	movs	r3, #0
 8004a1a:	2222      	movs	r2, #34	; 0x22
 8004a1c:	4909      	ldr	r1, [pc, #36]	; (8004a44 <TestCmsisDsp_RMSE+0x84>)
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 faac 	bl	8004f7c <CuAssertDblEquals_LineMsg>
}
 8004a24:	bf00      	nop
 8004a26:	3728      	adds	r7, #40	; 0x28
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bdb0      	pop	{r4, r5, r7, pc}
 8004a2c:	f3af 8000 	nop.w
 8004a30:	a0000000 	.word	0xa0000000
 8004a34:	3e7ad7f2 	.word	0x3e7ad7f2
 8004a38:	080085dc 	.word	0x080085dc
 8004a3c:	080085e8 	.word	0x080085e8
 8004a40:	3e2ce472 	.word	0x3e2ce472
 8004a44:	080085c0 	.word	0x080085c0

08004a48 <TestCmsisDsp_IIR>:
float32_t SWV_IIR1;
#include "stm32f7xx_hal.h"
#endif

void TestCmsisDsp_IIR(CuTest *tc)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  // Initialize FIR filter instance
  arm_biquad_cascade_df1_init_f32(&IIR1, IIR1_NUM_STAGES, IIR1_COEFFS, IIR1_STATE);
 8004a50:	4b23      	ldr	r3, [pc, #140]	; (8004ae0 <TestCmsisDsp_IIR+0x98>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	4b23      	ldr	r3, [pc, #140]	; (8004ae4 <TestCmsisDsp_IIR+0x9c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2101      	movs	r1, #1
 8004a5a:	4823      	ldr	r0, [pc, #140]	; (8004ae8 <TestCmsisDsp_IIR+0xa0>)
 8004a5c:	f000 fcc6 	bl	80053ec <arm_biquad_cascade_df1_init_f32>

  // Filter test signal sample by sample
  for(uint32_t i = 0; i < X2_LEN; i++)
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	e010      	b.n	8004a88 <TestCmsisDsp_IIR+0x40>
  {
    arm_biquad_cascade_df1_f32(&IIR1, &X2[i], &Y2[i], 1);
 8004a66:	4b21      	ldr	r3, [pc, #132]	; (8004aec <TestCmsisDsp_IIR+0xa4>)
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	18d1      	adds	r1, r2, r3
 8004a70:	4b1f      	ldr	r3, [pc, #124]	; (8004af0 <TestCmsisDsp_IIR+0xa8>)
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	441a      	add	r2, r3
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	481a      	ldr	r0, [pc, #104]	; (8004ae8 <TestCmsisDsp_IIR+0xa0>)
 8004a7e:	f000 fcc3 	bl	8005408 <arm_biquad_cascade_df1_f32>
  for(uint32_t i = 0; i < X2_LEN; i++)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	3301      	adds	r3, #1
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a8e:	d3ea      	bcc.n	8004a66 <TestCmsisDsp_IIR+0x1e>
    SWV_IIR1 = Y2[i];
    HAL_Delay(0);
    #endif
  }

  float32_t rmse = RMSE(Y2_REF, Y2, Y2_LEN);
 8004a90:	4b18      	ldr	r3, [pc, #96]	; (8004af4 <TestCmsisDsp_IIR+0xac>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a16      	ldr	r2, [pc, #88]	; (8004af0 <TestCmsisDsp_IIR+0xa8>)
 8004a96:	6811      	ldr	r1, [r2, #0]
 8004a98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff ff43 	bl	8004928 <RMSE>
 8004aa2:	ed87 0a02 	vstr	s0, [r7, #8]

  CuAssertDblEquals(tc, 0.0f, rmse, 1e-4f);
 8004aa6:	68b8      	ldr	r0, [r7, #8]
 8004aa8:	f7fb fd7e 	bl	80005a8 <__aeabi_f2d>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	ed9f 2b07 	vldr	d2, [pc, #28]	; 8004ad0 <TestCmsisDsp_IIR+0x88>
 8004ab4:	ec43 2b11 	vmov	d1, r2, r3
 8004ab8:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8004ad8 <TestCmsisDsp_IIR+0x90>
 8004abc:	2300      	movs	r3, #0
 8004abe:	2278      	movs	r2, #120	; 0x78
 8004ac0:	490d      	ldr	r1, [pc, #52]	; (8004af8 <TestCmsisDsp_IIR+0xb0>)
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fa5a 	bl	8004f7c <CuAssertDblEquals_LineMsg>
}
 8004ac8:	bf00      	nop
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	e0000000 	.word	0xe0000000
 8004ad4:	3f1a36e2 	.word	0x3f1a36e2
	...
 8004ae0:	20000018 	.word	0x20000018
 8004ae4:	20000000 	.word	0x20000000
 8004ae8:	200022b0 	.word	0x200022b0
 8004aec:	20000fbc 	.word	0x20000fbc
 8004af0:	20001f64 	.word	0x20001f64
 8004af4:	20001f60 	.word	0x20001f60
 8004af8:	080085c0 	.word	0x080085c0

08004afc <CuGetCmsisDspSuite>:
  CuAssertDblEquals(tc, 0.0f, rmse, 1e-10f);
}


CuSuite* CuGetCmsisDspSuite(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
  CuSuite* suite = CuSuiteNew();
 8004b02:	f000 fac4 	bl	800508e <CuSuiteNew>
 8004b06:	6078      	str	r0, [r7, #4]

  SUITE_ADD_TEST(suite, TestCmsisDsp_RMSE);
 8004b08:	490b      	ldr	r1, [pc, #44]	; (8004b38 <CuGetCmsisDspSuite+0x3c>)
 8004b0a:	480c      	ldr	r0, [pc, #48]	; (8004b3c <CuGetCmsisDspSuite+0x40>)
 8004b0c:	f000 f96b 	bl	8004de6 <CuTestNew>
 8004b10:	4603      	mov	r3, r0
 8004b12:	4619      	mov	r1, r3
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 facb 	bl	80050b0 <CuSuiteAdd>
  // L10: CMSIS DSP pt. 1
  //SUITE_ADD_TEST(suite, TestCmsisDsp_MAT_MULT);
  //SUITE_ADD_TEST(suite, TestCmsisDsp_FIR);
  // L11: CMSIS DSP pt. 2
  SUITE_ADD_TEST(suite, TestCmsisDsp_IIR);
 8004b1a:	4909      	ldr	r1, [pc, #36]	; (8004b40 <CuGetCmsisDspSuite+0x44>)
 8004b1c:	4809      	ldr	r0, [pc, #36]	; (8004b44 <CuGetCmsisDspSuite+0x48>)
 8004b1e:	f000 f962 	bl	8004de6 <CuTestNew>
 8004b22:	4603      	mov	r3, r0
 8004b24:	4619      	mov	r1, r3
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fac2 	bl	80050b0 <CuSuiteAdd>
  //SUITE_ADD_TEST(suite, TestCmsisDsp_PID);

  return suite;
 8004b2c:	687b      	ldr	r3, [r7, #4]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	080049c1 	.word	0x080049c1
 8004b3c:	080085f4 	.word	0x080085f4
 8004b40:	08004a49 	.word	0x08004a49
 8004b44:	08008608 	.word	0x08008608

08004b48 <CuStrAlloc>:
/*-------------------------------------------------------------------------*
 * CuStr
 *-------------------------------------------------------------------------*/

char* CuStrAlloc(size_t size)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
	char* newStr = (char*) malloc( sizeof(char) * (size) );
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fe07 	bl	8005764 <malloc>
 8004b56:	4603      	mov	r3, r0
 8004b58:	60fb      	str	r3, [r7, #12]
	return newStr;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <CuStrCopy>:

char* CuStrCopy(const char* old)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
	size_t len = strlen(old);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7fb fb5d 	bl	800022c <strlen>
 8004b72:	60f8      	str	r0, [r7, #12]
	char* newStr = CuStrAlloc(len + 1);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	3301      	adds	r3, #1
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff ffe5 	bl	8004b48 <CuStrAlloc>
 8004b7e:	60b8      	str	r0, [r7, #8]
	strcpy(newStr, old);
 8004b80:	6879      	ldr	r1, [r7, #4]
 8004b82:	68b8      	ldr	r0, [r7, #8]
 8004b84:	f001 fd19 	bl	80065ba <strcpy>
	return newStr;
 8004b88:	68bb      	ldr	r3, [r7, #8]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <CuStringInit>:
/*-------------------------------------------------------------------------*
 * CuString
 *-------------------------------------------------------------------------*/

void CuStringInit(CuString* str)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b082      	sub	sp, #8
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
	str->length = 0;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]
	str->size = STRING_MAX;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ba6:	605a      	str	r2, [r3, #4]
	str->buffer = (char*) malloc(sizeof(char) * str->size);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 fdd9 	bl	8005764 <malloc>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	609a      	str	r2, [r3, #8]
	str->buffer[0] = '\0';
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	701a      	strb	r2, [r3, #0]
}
 8004bc2:	bf00      	nop
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <CuStringNew>:

CuString* CuStringNew(void)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
	CuString* str = (CuString*) malloc(sizeof(CuString));
 8004bd0:	200c      	movs	r0, #12
 8004bd2:	f000 fdc7 	bl	8005764 <malloc>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	607b      	str	r3, [r7, #4]
	str->length = 0;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]
	str->size = STRING_MAX;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004be6:	605a      	str	r2, [r3, #4]
	str->buffer = (char*) malloc(sizeof(char) * str->size);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 fdb9 	bl	8005764 <malloc>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	609a      	str	r2, [r3, #8]
	str->buffer[0] = '\0';
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	701a      	strb	r2, [r3, #0]
	return str;
 8004c02:	687b      	ldr	r3, [r7, #4]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <CuStringResize>:
        free(str->buffer);
        free(str);
}

void CuStringResize(CuString* str, size_t newSize)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
	str->buffer = (char*) realloc(str->buffer, sizeof(char) * newSize);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	6839      	ldr	r1, [r7, #0]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f001 fc85 	bl	800652c <realloc>
 8004c22:	4602      	mov	r2, r0
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	609a      	str	r2, [r3, #8]
	str->size = newSize;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	605a      	str	r2, [r3, #4]
}
 8004c2e:	bf00      	nop
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <CuStringAppend>:

void CuStringAppend(CuString* str, const char* text)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
	size_t length;

	if (text == NULL) {
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <CuStringAppend+0x14>
		text = "NULL";
 8004c48:	4b14      	ldr	r3, [pc, #80]	; (8004c9c <CuStringAppend+0x64>)
 8004c4a:	603b      	str	r3, [r7, #0]
	}

	length = strlen(text);
 8004c4c:	6838      	ldr	r0, [r7, #0]
 8004c4e:	f7fb faed 	bl	800022c <strlen>
 8004c52:	60f8      	str	r0, [r7, #12]
	if (str->length + length + 1 >= str->size)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d309      	bcc.n	8004c7a <CuStringAppend+0x42>
		CuStringResize(str, str->length + length + 1 + STRING_INC);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f203 1301 	addw	r3, r3, #257	; 0x101
 8004c72:	4619      	mov	r1, r3
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff ffc9 	bl	8004c0c <CuStringResize>
	str->length += length;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	441a      	add	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	601a      	str	r2, [r3, #0]
	strcat(str->buffer, text);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	6839      	ldr	r1, [r7, #0]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f001 fc85 	bl	800659c <strcat>
}
 8004c92:	bf00      	nop
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	0800861c 	.word	0x0800861c

08004ca0 <CuStringAppendFormat>:
	text[1] = '\0';
	CuStringAppend(str, text);
}

void CuStringAppendFormat(CuString* str, const char* format, ...)
{
 8004ca0:	b40e      	push	{r1, r2, r3}
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8004ca8:	b085      	sub	sp, #20
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	f107 0310 	add.w	r3, r7, #16
 8004cb0:	f843 0c0c 	str.w	r0, [r3, #-12]
	va_list argp;
	char buf[HUGE_STRING_LEN];
	va_start(argp, format);
 8004cb4:	f242 0320 	movw	r3, #8224	; 0x2020
 8004cb8:	443b      	add	r3, r7
 8004cba:	f242 020c 	movw	r2, #8204	; 0x200c
 8004cbe:	443a      	add	r2, r7
 8004cc0:	6013      	str	r3, [r2, #0]
	vsprintf(buf, format, argp);
 8004cc2:	4b13      	ldr	r3, [pc, #76]	; (8004d10 <CuStringAppendFormat+0x70>)
 8004cc4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004cc8:	f103 0310 	add.w	r3, r3, #16
 8004ccc:	443b      	add	r3, r7
 8004cce:	f242 020c 	movw	r2, #8204	; 0x200c
 8004cd2:	443a      	add	r2, r7
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	f242 011c 	movw	r1, #8220	; 0x201c
 8004cda:	4439      	add	r1, r7
 8004cdc:	6809      	ldr	r1, [r1, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f001 fc8a 	bl	80065f8 <vsiprintf>
	va_end(argp);
	CuStringAppend(str, buf);
 8004ce4:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <CuStringAppendFormat+0x70>)
 8004ce6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004cea:	f103 0310 	add.w	r3, r3, #16
 8004cee:	443b      	add	r3, r7
 8004cf0:	f107 0210 	add.w	r2, r7, #16
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8004cfa:	f7ff ff9d 	bl	8004c38 <CuStringAppend>
}
 8004cfe:	bf00      	nop
 8004d00:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d0c:	b003      	add	sp, #12
 8004d0e:	4770      	bx	lr
 8004d10:	ffffdffc 	.word	0xffffdffc

08004d14 <CuStringInsert>:

void CuStringInsert(CuString* str, const char* text, size_t pos)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
    size_t length = strlen(text);
 8004d20:	68b8      	ldr	r0, [r7, #8]
 8004d22:	f7fb fa83 	bl	800022c <strlen>
 8004d26:	6178      	str	r0, [r7, #20]
	if (pos > str->length)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d902      	bls.n	8004d38 <CuStringInsert+0x24>
		pos = str->length;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	607b      	str	r3, [r7, #4]
	if (str->length + length + 1 >= str->size)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	4413      	add	r3, r2
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d309      	bcc.n	8004d5e <CuStringInsert+0x4a>
		CuStringResize(str, str->length + length + 1 + STRING_INC);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	4413      	add	r3, r2
 8004d52:	f203 1301 	addw	r3, r3, #257	; 0x101
 8004d56:	4619      	mov	r1, r3
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f7ff ff57 	bl	8004c0c <CuStringResize>
	memmove(str->buffer + pos + length, str->buffer + pos, (str->length - pos) + 1);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	440b      	add	r3, r1
 8004d68:	18d0      	adds	r0, r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	689a      	ldr	r2, [r3, #8]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	18d1      	adds	r1, r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	f000 fd0f 	bl	80057a0 <memmove>
	str->length += length;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	441a      	add	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	601a      	str	r2, [r3, #0]
	memcpy(str->buffer + pos, text, length);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4413      	add	r3, r2
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	68b9      	ldr	r1, [r7, #8]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fcf2 	bl	8005784 <memcpy>
}
 8004da0:	bf00      	nop
 8004da2:	3718      	adds	r7, #24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <CuTestInit>:
/*-------------------------------------------------------------------------*
 * CuTest
 *-------------------------------------------------------------------------*/

void CuTestInit(CuTest* t, const char* name, TestFunction function)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
	t->name = CuStrCopy(name);
 8004db4:	68b8      	ldr	r0, [r7, #8]
 8004db6:	f7ff fed5 	bl	8004b64 <CuStrCopy>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	601a      	str	r2, [r3, #0]
	t->failed = 0;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	609a      	str	r2, [r3, #8]
	t->ran = 0;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	60da      	str	r2, [r3, #12]
        t->message = NULL;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	611a      	str	r2, [r3, #16]
	t->function = function;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	605a      	str	r2, [r3, #4]
	t->jumpBuf = NULL;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	615a      	str	r2, [r3, #20]
}
 8004dde:	bf00      	nop
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <CuTestNew>:

CuTest* CuTestNew(const char* name, TestFunction function)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	6039      	str	r1, [r7, #0]
	CuTest* tc = CU_ALLOC(CuTest);
 8004df0:	2018      	movs	r0, #24
 8004df2:	f000 fcb7 	bl	8005764 <malloc>
 8004df6:	4603      	mov	r3, r0
 8004df8:	60fb      	str	r3, [r7, #12]
	CuTestInit(tc, name, function);
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f7ff ffd2 	bl	8004da8 <CuTestInit>
	return tc;
 8004e04:	68fb      	ldr	r3, [r7, #12]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <CuTestRun>:
        free(t->name);
        free(t);
}

void CuTestRun(CuTest* tc)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b09a      	sub	sp, #104	; 0x68
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
	jmp_buf buf;
	tc->jumpBuf = &buf;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f107 020c 	add.w	r2, r7, #12
 8004e1c:	615a      	str	r2, [r3, #20]
	if (setjmp(buf) == 0)
 8004e1e:	f107 030c 	add.w	r3, r7, #12
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fb f9f4 	bl	8000210 <setjmp>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <CuTestRun+0x2e>
	{
		tc->ran = 1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	60da      	str	r2, [r3, #12]
		(tc->function)(tc);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	4798      	blx	r3
	}
	tc->jumpBuf = 0;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	615a      	str	r2, [r3, #20]
}
 8004e42:	bf00      	nop
 8004e44:	3768      	adds	r7, #104	; 0x68
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <CuFailInternal>:

static void CuFailInternal(CuTest* tc, const char* file, int line, CuString* string)
{
 8004e4c:	b590      	push	{r4, r7, lr}
 8004e4e:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	f107 0410 	add.w	r4, r7, #16
 8004e5a:	f844 0c04 	str.w	r0, [r4, #-4]
 8004e5e:	f107 0010 	add.w	r0, r7, #16
 8004e62:	f840 1c08 	str.w	r1, [r0, #-8]
 8004e66:	f107 0110 	add.w	r1, r7, #16
 8004e6a:	f841 2c0c 	str.w	r2, [r1, #-12]
 8004e6e:	f107 0210 	add.w	r2, r7, #16
 8004e72:	f842 3c10 	str.w	r3, [r2, #-16]
	char buf[HUGE_STRING_LEN];

	sprintf(buf, "%s:%d: ", file, line);
 8004e76:	f107 0310 	add.w	r3, r7, #16
 8004e7a:	f107 0210 	add.w	r2, r7, #16
 8004e7e:	f107 0010 	add.w	r0, r7, #16
 8004e82:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8004e86:	f852 2c08 	ldr.w	r2, [r2, #-8]
 8004e8a:	4924      	ldr	r1, [pc, #144]	; (8004f1c <CuFailInternal+0xd0>)
 8004e8c:	f001 fb66 	bl	800655c <siprintf>
	CuStringInsert(string, buf, 0);
 8004e90:	f107 0310 	add.w	r3, r7, #16
 8004e94:	f107 0210 	add.w	r2, r7, #16
 8004e98:	4610      	mov	r0, r2
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	f850 0c10 	ldr.w	r0, [r0, #-16]
 8004ea2:	f7ff ff37 	bl	8004d14 <CuStringInsert>

	tc->failed = 1;
 8004ea6:	f107 0310 	add.w	r3, r7, #16
 8004eaa:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	609a      	str	r2, [r3, #8]
        free(tc->message);
 8004eb2:	f107 0310 	add.w	r3, r7, #16
 8004eb6:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 fc59 	bl	8005774 <free>
        tc->message = CuStringNew();
 8004ec2:	f7ff fe82 	bl	8004bca <CuStringNew>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	f107 0310 	add.w	r3, r7, #16
 8004ecc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8004ed0:	611a      	str	r2, [r3, #16]
        CuStringAppend(tc->message, string->buffer);
 8004ed2:	f107 0310 	add.w	r3, r7, #16
 8004ed6:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8004eda:	691a      	ldr	r2, [r3, #16]
 8004edc:	f107 0310 	add.w	r3, r7, #16
 8004ee0:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4610      	mov	r0, r2
 8004eea:	f7ff fea5 	bl	8004c38 <CuStringAppend>
	if (tc->jumpBuf != 0) longjmp(*(tc->jumpBuf), 0);
 8004eee:	f107 0310 	add.w	r3, r7, #16
 8004ef2:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d008      	beq.n	8004f0e <CuFailInternal+0xc2>
 8004efc:	f107 0310 	add.w	r3, r7, #16
 8004f00:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	2100      	movs	r1, #0
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fb f987 	bl	800021c <longjmp>
}
 8004f0e:	bf00      	nop
 8004f10:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd90      	pop	{r4, r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	08008624 	.word	0x08008624

08004f20 <CuFail_Line>:

void CuFail_Line(CuTest* tc, const char* file, int line, const char* message2, const char* message)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b088      	sub	sp, #32
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]
	CuString string;

	CuStringInit(&string);
 8004f2e:	f107 0314 	add.w	r3, r7, #20
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff fe2d 	bl	8004b92 <CuStringInit>
	if (message2 != NULL)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00b      	beq.n	8004f56 <CuFail_Line+0x36>
	{
		CuStringAppend(&string, message2);
 8004f3e:	f107 0314 	add.w	r3, r7, #20
 8004f42:	6839      	ldr	r1, [r7, #0]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff fe77 	bl	8004c38 <CuStringAppend>
		CuStringAppend(&string, ": ");
 8004f4a:	f107 0314 	add.w	r3, r7, #20
 8004f4e:	490a      	ldr	r1, [pc, #40]	; (8004f78 <CuFail_Line+0x58>)
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff fe71 	bl	8004c38 <CuStringAppend>
	}
	CuStringAppend(&string, message);
 8004f56:	f107 0314 	add.w	r3, r7, #20
 8004f5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7ff fe6b 	bl	8004c38 <CuStringAppend>
	CuFailInternal(tc, file, line, &string);
 8004f62:	f107 0314 	add.w	r3, r7, #20
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	68b9      	ldr	r1, [r7, #8]
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f7ff ff6e 	bl	8004e4c <CuFailInternal>
}
 8004f70:	bf00      	nop
 8004f72:	3720      	adds	r7, #32
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	0800862c 	.word	0x0800862c

08004f7c <CuAssertDblEquals_LineMsg>:
	CuFail_Line(tc, file, line, message, buf);
}

void CuAssertDblEquals_LineMsg(CuTest* tc, const char* file, int line, const char* message,
	double expected, double actual, double delta)
{
 8004f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f7e:	b0cd      	sub	sp, #308	; 0x134
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	f507 7694 	add.w	r6, r7, #296	; 0x128
 8004f86:	f5a6 7682 	sub.w	r6, r6, #260	; 0x104
 8004f8a:	6030      	str	r0, [r6, #0]
 8004f8c:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8004f90:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8004f94:	6001      	str	r1, [r0, #0]
 8004f96:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8004f9a:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8004f9e:	600a      	str	r2, [r1, #0]
 8004fa0:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8004fa4:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	f107 0318 	add.w	r3, r7, #24
 8004fae:	ed03 0b02 	vstr	d0, [r3, #-8]
 8004fb2:	f107 0308 	add.w	r3, r7, #8
 8004fb6:	ed83 1b00 	vstr	d1, [r3]
 8004fba:	f107 0308 	add.w	r3, r7, #8
 8004fbe:	ed03 2b02 	vstr	d2, [r3, #-8]
	char buf[STRING_MAX];
	if (fabs(expected - actual) <= delta) return;
 8004fc2:	f107 0318 	add.w	r3, r7, #24
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	f107 0308 	add.w	r3, r7, #8
 8004fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd0:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8004fd4:	f7fb f988 	bl	80002e8 <__aeabi_dsub>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4614      	mov	r4, r2
 8004fde:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004fe2:	f107 0308 	add.w	r3, r7, #8
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4622      	mov	r2, r4
 8004fea:	462b      	mov	r3, r5
 8004fec:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8004ff0:	f7fb fdb8 	bl	8000b64 <__aeabi_dcmpge>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d129      	bne.n	800504e <CuAssertDblEquals_LineMsg+0xd2>
	sprintf(buf, "expected <%f> but was <%f>", expected, actual);
 8004ffa:	f107 0318 	add.w	r3, r7, #24
 8004ffe:	4619      	mov	r1, r3
 8005000:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8005004:	f107 0308 	add.w	r3, r7, #8
 8005008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500c:	e9cd 2300 	strd	r2, r3, [sp]
 8005010:	e951 2302 	ldrd	r2, r3, [r1, #-8]
 8005014:	4910      	ldr	r1, [pc, #64]	; (8005058 <CuAssertDblEquals_LineMsg+0xdc>)
 8005016:	f001 faa1 	bl	800655c <siprintf>

	CuFail_Line(tc, file, line, message, buf);
 800501a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800501e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005022:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8005026:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800502a:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800502e:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8005032:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8005036:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800503a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800503e:	9400      	str	r4, [sp, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	6809      	ldr	r1, [r1, #0]
 8005046:	6800      	ldr	r0, [r0, #0]
 8005048:	f7ff ff6a 	bl	8004f20 <CuFail_Line>
 800504c:	e000      	b.n	8005050 <CuAssertDblEquals_LineMsg+0xd4>
	if (fabs(expected - actual) <= delta) return;
 800504e:	bf00      	nop
}
 8005050:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8005054:	46bd      	mov	sp, r7
 8005056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005058:	08008668 	.word	0x08008668

0800505c <CuSuiteInit>:
/*-------------------------------------------------------------------------*
 * CuSuite
 *-------------------------------------------------------------------------*/

void CuSuiteInit(CuSuite* testSuite)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
	testSuite->count = 0;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]
	testSuite->failCount = 0;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005070:	461a      	mov	r2, r3
 8005072:	2300      	movs	r3, #0
 8005074:	6053      	str	r3, [r2, #4]
        memset(testSuite->list, 0, sizeof(testSuite->list));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	3304      	adds	r3, #4
 800507a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800507e:	2100      	movs	r1, #0
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fba7 	bl	80057d4 <memset>
}
 8005086:	bf00      	nop
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <CuSuiteNew>:

CuSuite* CuSuiteNew(void)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b082      	sub	sp, #8
 8005092:	af00      	add	r7, sp, #0
	CuSuite* testSuite = CU_ALLOC(CuSuite);
 8005094:	f241 0008 	movw	r0, #4104	; 0x1008
 8005098:	f000 fb64 	bl	8005764 <malloc>
 800509c:	4603      	mov	r3, r0
 800509e:	607b      	str	r3, [r7, #4]
	CuSuiteInit(testSuite);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7ff ffdb 	bl	800505c <CuSuiteInit>
	return testSuite;
 80050a6:	687b      	ldr	r3, [r7, #4]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <CuSuiteAdd>:
        free(testSuite);

}

void CuSuiteAdd(CuSuite* testSuite, CuTest *testCase)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
	assert(testSuite->count < MAX_TEST_CASES);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c2:	db06      	blt.n	80050d2 <CuSuiteAdd+0x22>
 80050c4:	4b0b      	ldr	r3, [pc, #44]	; (80050f4 <CuSuiteAdd+0x44>)
 80050c6:	4a0c      	ldr	r2, [pc, #48]	; (80050f8 <CuSuiteAdd+0x48>)
 80050c8:	f44f 7189 	mov.w	r1, #274	; 0x112
 80050cc:	480b      	ldr	r0, [pc, #44]	; (80050fc <CuSuiteAdd+0x4c>)
 80050ce:	f000 faef 	bl	80056b0 <__assert_func>
	testSuite->list[testSuite->count] = testCase;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	605a      	str	r2, [r3, #4]
	testSuite->count++;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	601a      	str	r2, [r3, #0]
}
 80050ea:	bf00      	nop
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	080086ac 	.word	0x080086ac
 80050f8:	080087a0 	.word	0x080087a0
 80050fc:	080086d0 	.word	0x080086d0

08005100 <CuSuiteAddSuite>:

void CuSuiteAddSuite(CuSuite* testSuite, CuSuite* testSuite2)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
	int i;
	for (i = 0 ; i < testSuite2->count ; ++i)
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	e00c      	b.n	800512a <CuSuiteAddSuite+0x2a>
	{
		CuTest* testCase = testSuite2->list[i];
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	60bb      	str	r3, [r7, #8]
		CuSuiteAdd(testSuite, testCase);
 800511c:	68b9      	ldr	r1, [r7, #8]
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7ff ffc6 	bl	80050b0 <CuSuiteAdd>
	for (i = 0 ; i < testSuite2->count ; ++i)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	3301      	adds	r3, #1
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	429a      	cmp	r2, r3
 8005132:	dbed      	blt.n	8005110 <CuSuiteAddSuite+0x10>
	}
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <CuSuiteRun>:

void CuSuiteRun(CuSuite* testSuite)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b084      	sub	sp, #16
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0 ; i < testSuite->count ; ++i)
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	e018      	b.n	800517e <CuSuiteRun+0x40>
	{
		CuTest* testCase = testSuite->list[i];
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	60bb      	str	r3, [r7, #8]
		CuTestRun(testCase);
 8005158:	68b8      	ldr	r0, [r7, #8]
 800515a:	f7ff fe58 	bl	8004e0e <CuTestRun>
		if (testCase->failed) { testSuite->failCount += 1; }
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d008      	beq.n	8005178 <CuSuiteRun+0x3a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	3301      	adds	r3, #1
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005176:	6053      	str	r3, [r2, #4]
	for (i = 0 ; i < testSuite->count ; ++i)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	3301      	adds	r3, #1
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	429a      	cmp	r2, r3
 8005186:	dbe1      	blt.n	800514c <CuSuiteRun+0xe>
	}
}
 8005188:	bf00      	nop
 800518a:	bf00      	nop
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <CuSuiteSummary>:

void CuSuiteSummary(CuSuite* testSuite, CuString* summary)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
	int i;
	for (i = 0 ; i < testSuite->count ; ++i)
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
 80051a2:	e013      	b.n	80051cc <CuSuiteSummary+0x38>
	{
		CuTest* testCase = testSuite->list[i];
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	60bb      	str	r3, [r7, #8]
		CuStringAppend(summary, testCase->failed ? "F" : ".");
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <CuSuiteSummary+0x28>
 80051b8:	4b0b      	ldr	r3, [pc, #44]	; (80051e8 <CuSuiteSummary+0x54>)
 80051ba:	e000      	b.n	80051be <CuSuiteSummary+0x2a>
 80051bc:	4b0b      	ldr	r3, [pc, #44]	; (80051ec <CuSuiteSummary+0x58>)
 80051be:	4619      	mov	r1, r3
 80051c0:	6838      	ldr	r0, [r7, #0]
 80051c2:	f7ff fd39 	bl	8004c38 <CuStringAppend>
	for (i = 0 ; i < testSuite->count ; ++i)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3301      	adds	r3, #1
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	dbe6      	blt.n	80051a4 <CuSuiteSummary+0x10>
	}
	CuStringAppend(summary, "\n\n");
 80051d6:	4906      	ldr	r1, [pc, #24]	; (80051f0 <CuSuiteSummary+0x5c>)
 80051d8:	6838      	ldr	r0, [r7, #0]
 80051da:	f7ff fd2d 	bl	8004c38 <CuStringAppend>
}
 80051de:	bf00      	nop
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	080086e8 	.word	0x080086e8
 80051ec:	080086ec 	.word	0x080086ec
 80051f0:	080086f0 	.word	0x080086f0

080051f4 <CuSuiteDetails>:

void CuSuiteDetails(CuSuite* testSuite, CuString* details)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08a      	sub	sp, #40	; 0x28
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
	int i;
	int failCount = 0;
 80051fe:	2300      	movs	r3, #0
 8005200:	61bb      	str	r3, [r7, #24]

	if (testSuite->failCount == 0)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d115      	bne.n	800523a <CuSuiteDetails+0x46>
	{
		int passCount = testSuite->count - testSuite->failCount;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	613b      	str	r3, [r7, #16]
		const char* testWord = passCount == 1 ? "test" : "tests";
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d101      	bne.n	8005228 <CuSuiteDetails+0x34>
 8005224:	4b33      	ldr	r3, [pc, #204]	; (80052f4 <CuSuiteDetails+0x100>)
 8005226:	e000      	b.n	800522a <CuSuiteDetails+0x36>
 8005228:	4b33      	ldr	r3, [pc, #204]	; (80052f8 <CuSuiteDetails+0x104>)
 800522a:	60fb      	str	r3, [r7, #12]
		CuStringAppendFormat(details, "OK (%d %s)\n", passCount, testWord);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4932      	ldr	r1, [pc, #200]	; (80052fc <CuSuiteDetails+0x108>)
 8005232:	6838      	ldr	r0, [r7, #0]
 8005234:	f7ff fd34 	bl	8004ca0 <CuStringAppendFormat>

		CuStringAppendFormat(details, "Runs: %d ",   testSuite->count);
		CuStringAppendFormat(details, "Passes: %d ", testSuite->count - testSuite->failCount);
		CuStringAppendFormat(details, "Fails: %d\n",  testSuite->failCount);
	}
}
 8005238:	e057      	b.n	80052ea <CuSuiteDetails+0xf6>
		if (testSuite->failCount == 1)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d104      	bne.n	8005250 <CuSuiteDetails+0x5c>
			CuStringAppend(details, "There was 1 failure:\n");
 8005246:	492e      	ldr	r1, [pc, #184]	; (8005300 <CuSuiteDetails+0x10c>)
 8005248:	6838      	ldr	r0, [r7, #0]
 800524a:	f7ff fcf5 	bl	8004c38 <CuStringAppend>
 800524e:	e008      	b.n	8005262 <CuSuiteDetails+0x6e>
			CuStringAppendFormat(details, "There were %d failures:\n", testSuite->failCount);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	461a      	mov	r2, r3
 800525a:	492a      	ldr	r1, [pc, #168]	; (8005304 <CuSuiteDetails+0x110>)
 800525c:	6838      	ldr	r0, [r7, #0]
 800525e:	f7ff fd1f 	bl	8004ca0 <CuStringAppendFormat>
		for (i = 0 ; i < testSuite->count ; ++i)
 8005262:	2300      	movs	r3, #0
 8005264:	61fb      	str	r3, [r7, #28]
 8005266:	e01b      	b.n	80052a0 <CuSuiteDetails+0xac>
			CuTest* testCase = testSuite->list[i];
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	617b      	str	r3, [r7, #20]
			if (testCase->failed)
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00e      	beq.n	800529a <CuSuiteDetails+0xa6>
				failCount++;
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	3301      	adds	r3, #1
 8005280:	61bb      	str	r3, [r7, #24]
				CuStringAppendFormat(details, "%d) %s: %s\n",
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	681a      	ldr	r2, [r3, #0]
					failCount, testCase->name, testCase->message->buffer);
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	691b      	ldr	r3, [r3, #16]
				CuStringAppendFormat(details, "%d) %s: %s\n",
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	4613      	mov	r3, r2
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	491d      	ldr	r1, [pc, #116]	; (8005308 <CuSuiteDetails+0x114>)
 8005294:	6838      	ldr	r0, [r7, #0]
 8005296:	f7ff fd03 	bl	8004ca0 <CuStringAppendFormat>
		for (i = 0 ; i < testSuite->count ; ++i)
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	3301      	adds	r3, #1
 800529e:	61fb      	str	r3, [r7, #28]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69fa      	ldr	r2, [r7, #28]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	dbde      	blt.n	8005268 <CuSuiteDetails+0x74>
		CuStringAppend(details, "\n!!!FAILURES!!!\n");
 80052aa:	4918      	ldr	r1, [pc, #96]	; (800530c <CuSuiteDetails+0x118>)
 80052ac:	6838      	ldr	r0, [r7, #0]
 80052ae:	f7ff fcc3 	bl	8004c38 <CuStringAppend>
		CuStringAppendFormat(details, "Runs: %d ",   testSuite->count);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	4915      	ldr	r1, [pc, #84]	; (8005310 <CuSuiteDetails+0x11c>)
 80052ba:	6838      	ldr	r0, [r7, #0]
 80052bc:	f7ff fcf0 	bl	8004ca0 <CuStringAppendFormat>
		CuStringAppendFormat(details, "Passes: %d ", testSuite->count - testSuite->failCount);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	461a      	mov	r2, r3
 80052d0:	4910      	ldr	r1, [pc, #64]	; (8005314 <CuSuiteDetails+0x120>)
 80052d2:	6838      	ldr	r0, [r7, #0]
 80052d4:	f7ff fce4 	bl	8004ca0 <CuStringAppendFormat>
		CuStringAppendFormat(details, "Fails: %d\n",  testSuite->failCount);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	461a      	mov	r2, r3
 80052e2:	490d      	ldr	r1, [pc, #52]	; (8005318 <CuSuiteDetails+0x124>)
 80052e4:	6838      	ldr	r0, [r7, #0]
 80052e6:	f7ff fcdb 	bl	8004ca0 <CuStringAppendFormat>
}
 80052ea:	bf00      	nop
 80052ec:	3720      	adds	r7, #32
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	080086f4 	.word	0x080086f4
 80052f8:	080086fc 	.word	0x080086fc
 80052fc:	08008704 	.word	0x08008704
 8005300:	08008710 	.word	0x08008710
 8005304:	08008728 	.word	0x08008728
 8005308:	08008744 	.word	0x08008744
 800530c:	08008750 	.word	0x08008750
 8005310:	08008764 	.word	0x08008764
 8005314:	08008770 	.word	0x08008770
 8005318:	0800877c 	.word	0x0800877c

0800531c <arm_rms_f32>:
 800531c:	b530      	push	{r4, r5, lr}
 800531e:	088d      	lsrs	r5, r1, #2
 8005320:	ed2d 8b02 	vpush	{d8}
 8005324:	b083      	sub	sp, #12
 8005326:	d054      	beq.n	80053d2 <arm_rms_f32+0xb6>
 8005328:	f100 0310 	add.w	r3, r0, #16
 800532c:	462c      	mov	r4, r5
 800532e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80053e8 <arm_rms_f32+0xcc>
 8005332:	ed53 6a04 	vldr	s13, [r3, #-16]
 8005336:	3c01      	subs	r4, #1
 8005338:	ed13 7a03 	vldr	s14, [r3, #-12]
 800533c:	f103 0310 	add.w	r3, r3, #16
 8005340:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8005344:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 8005348:	ee27 7a07 	vmul.f32	s14, s14, s14
 800534c:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8005350:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005354:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8005358:	ee26 6a06 	vmul.f32	s12, s12, s12
 800535c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005360:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005364:	ee76 5a27 	vadd.f32	s11, s12, s15
 8005368:	d1e3      	bne.n	8005332 <arm_rms_f32+0x16>
 800536a:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800536e:	f011 0303 	ands.w	r3, r1, #3
 8005372:	d015      	beq.n	80053a0 <arm_rms_f32+0x84>
 8005374:	edd0 7a00 	vldr	s15, [r0]
 8005378:	3b01      	subs	r3, #1
 800537a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800537e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005382:	d00d      	beq.n	80053a0 <arm_rms_f32+0x84>
 8005384:	edd0 7a01 	vldr	s15, [r0, #4]
 8005388:	2b01      	cmp	r3, #1
 800538a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800538e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005392:	d005      	beq.n	80053a0 <arm_rms_f32+0x84>
 8005394:	edd0 7a02 	vldr	s15, [r0, #8]
 8005398:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800539c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80053a0:	ee07 1a90 	vmov	s15, r1
 80053a4:	2300      	movs	r3, #0
 80053a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053aa:	ee85 0aa7 	vdiv.f32	s0, s11, s15
 80053ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80053b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b6:	db0f      	blt.n	80053d8 <arm_rms_f32+0xbc>
 80053b8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80053bc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80053c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c4:	d40a      	bmi.n	80053dc <arm_rms_f32+0xc0>
 80053c6:	ed82 8a00 	vstr	s16, [r2]
 80053ca:	b003      	add	sp, #12
 80053cc:	ecbd 8b02 	vpop	{d8}
 80053d0:	bd30      	pop	{r4, r5, pc}
 80053d2:	eddf 5a05 	vldr	s11, [pc, #20]	; 80053e8 <arm_rms_f32+0xcc>
 80053d6:	e7ca      	b.n	800536e <arm_rms_f32+0x52>
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	e7f6      	b.n	80053ca <arm_rms_f32+0xae>
 80053dc:	9201      	str	r2, [sp, #4]
 80053de:	f003 f8c1 	bl	8008564 <sqrtf>
 80053e2:	9a01      	ldr	r2, [sp, #4]
 80053e4:	e7ef      	b.n	80053c6 <arm_rms_f32+0xaa>
 80053e6:	bf00      	nop
 80053e8:	00000000 	.word	0x00000000

080053ec <arm_biquad_cascade_df1_init_f32>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	4615      	mov	r5, r2
 80053f0:	460a      	mov	r2, r1
 80053f2:	4604      	mov	r4, r0
 80053f4:	2100      	movs	r1, #0
 80053f6:	6002      	str	r2, [r0, #0]
 80053f8:	0112      	lsls	r2, r2, #4
 80053fa:	6085      	str	r5, [r0, #8]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 f9e9 	bl	80057d4 <memset>
 8005402:	6060      	str	r0, [r4, #4]
 8005404:	bd38      	pop	{r3, r4, r5, pc}
 8005406:	bf00      	nop

08005408 <arm_biquad_cascade_df1_f32>:
 8005408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800540c:	4694      	mov	ip, r2
 800540e:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8005412:	f003 0203 	and.w	r2, r3, #3
 8005416:	6807      	ldr	r7, [r0, #0]
 8005418:	ea4f 190e 	mov.w	r9, lr, lsl #4
 800541c:	eb0c 180e 	add.w	r8, ip, lr, lsl #4
 8005420:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
 8005424:	3614      	adds	r6, #20
 8005426:	3510      	adds	r5, #16
 8005428:	ed56 3a05 	vldr	s7, [r6, #-20]	; 0xffffffec
 800542c:	ed56 1a04 	vldr	s3, [r6, #-16]
 8005430:	ed16 2a03 	vldr	s4, [r6, #-12]
 8005434:	ed56 2a02 	vldr	s5, [r6, #-8]
 8005438:	ed16 3a01 	vldr	s6, [r6, #-4]
 800543c:	ed15 4a04 	vldr	s8, [r5, #-16]
 8005440:	ed15 5a03 	vldr	s10, [r5, #-12]
 8005444:	ed15 7a02 	vldr	s14, [r5, #-8]
 8005448:	ed55 7a01 	vldr	s15, [r5, #-4]
 800544c:	f1be 0f00 	cmp.w	lr, #0
 8005450:	f000 80cf 	beq.w	80055f2 <arm_biquad_cascade_df1_f32+0x1ea>
 8005454:	f101 0010 	add.w	r0, r1, #16
 8005458:	f10c 0310 	add.w	r3, ip, #16
 800545c:	4674      	mov	r4, lr
 800545e:	ed50 5a04 	vldr	s11, [r0, #-16]
 8005462:	ee61 4a84 	vmul.f32	s9, s3, s8
 8005466:	ee22 5a05 	vmul.f32	s10, s4, s10
 800546a:	3c01      	subs	r4, #1
 800546c:	ee63 6aa5 	vmul.f32	s13, s7, s11
 8005470:	f100 0010 	add.w	r0, r0, #16
 8005474:	ee22 6a87 	vmul.f32	s12, s5, s14
 8005478:	f103 0310 	add.w	r3, r3, #16
 800547c:	ee63 7a27 	vmul.f32	s15, s6, s15
 8005480:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005484:	ee21 0aa5 	vmul.f32	s0, s3, s11
 8005488:	ee22 1a04 	vmul.f32	s2, s4, s8
 800548c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005490:	ee23 5a07 	vmul.f32	s10, s6, s14
 8005494:	ee22 4a25 	vmul.f32	s8, s4, s11
 8005498:	ee76 6a86 	vadd.f32	s13, s13, s12
 800549c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054a0:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 80054a4:	ee62 5aa7 	vmul.f32	s11, s5, s15
 80054a8:	ed10 6a07 	vldr	s12, [r0, #-28]	; 0xffffffe4
 80054ac:	ee63 7a27 	vmul.f32	s15, s6, s15
 80054b0:	ee63 6a86 	vmul.f32	s13, s7, s12
 80054b4:	ee61 0a86 	vmul.f32	s1, s3, s12
 80054b8:	ee62 4a06 	vmul.f32	s9, s4, s12
 80054bc:	ee36 7a80 	vadd.f32	s14, s13, s0
 80054c0:	ee37 7a01 	vadd.f32	s14, s14, s2
 80054c4:	ee37 7a25 	vadd.f32	s14, s14, s11
 80054c8:	ee37 7a05 	vadd.f32	s14, s14, s10
 80054cc:	ed03 7a07 	vstr	s14, [r3, #-28]	; 0xffffffe4
 80054d0:	ee62 6a87 	vmul.f32	s13, s5, s14
 80054d4:	ed10 5a06 	vldr	s10, [r0, #-24]	; 0xffffffe8
 80054d8:	ee23 7a07 	vmul.f32	s14, s6, s14
 80054dc:	ee63 5a85 	vmul.f32	s11, s7, s10
 80054e0:	ee21 1a85 	vmul.f32	s2, s3, s10
 80054e4:	ee75 5aa0 	vadd.f32	s11, s11, s1
 80054e8:	ee75 5a84 	vadd.f32	s11, s11, s8
 80054ec:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80054f0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80054f4:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 80054f8:	ee62 6aa7 	vmul.f32	s13, s5, s15
 80054fc:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 8005500:	ee23 6a84 	vmul.f32	s12, s7, s8
 8005504:	ee36 6a01 	vadd.f32	s12, s12, s2
 8005508:	ee36 6a24 	vadd.f32	s12, s12, s9
 800550c:	ee36 6a26 	vadd.f32	s12, s12, s13
 8005510:	ee36 7a07 	vadd.f32	s14, s12, s14
 8005514:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8005518:	d1a1      	bne.n	800545e <arm_biquad_cascade_df1_f32+0x56>
 800551a:	4449      	add	r1, r9
 800551c:	4643      	mov	r3, r8
 800551e:	2a00      	cmp	r2, #0
 8005520:	d045      	beq.n	80055ae <arm_biquad_cascade_df1_f32+0x1a6>
 8005522:	edd1 6a00 	vldr	s13, [r1]
 8005526:	ee61 5a84 	vmul.f32	s11, s3, s8
 800552a:	ee22 5a05 	vmul.f32	s10, s4, s10
 800552e:	2a01      	cmp	r2, #1
 8005530:	ee63 4aa6 	vmul.f32	s9, s7, s13
 8005534:	ee22 6a87 	vmul.f32	s12, s5, s14
 8005538:	ee63 7a27 	vmul.f32	s15, s6, s15
 800553c:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8005540:	ee35 5a85 	vadd.f32	s10, s11, s10
 8005544:	ee35 6a06 	vadd.f32	s12, s10, s12
 8005548:	ee36 6a27 	vadd.f32	s12, s12, s15
 800554c:	ed83 6a00 	vstr	s12, [r3]
 8005550:	d03d      	beq.n	80055ce <arm_biquad_cascade_df1_f32+0x1c6>
 8005552:	ed91 5a01 	vldr	s10, [r1, #4]
 8005556:	ee61 5aa6 	vmul.f32	s11, s3, s13
 800555a:	ee22 4a04 	vmul.f32	s8, s4, s8
 800555e:	2a02      	cmp	r2, #2
 8005560:	ee65 4a23 	vmul.f32	s9, s10, s7
 8005564:	ee62 7a86 	vmul.f32	s15, s5, s12
 8005568:	ee23 7a07 	vmul.f32	s14, s6, s14
 800556c:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8005570:	ee35 4a84 	vadd.f32	s8, s11, s8
 8005574:	ee74 7a27 	vadd.f32	s15, s8, s15
 8005578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800557c:	edc3 7a01 	vstr	s15, [r3, #4]
 8005580:	d02e      	beq.n	80055e0 <arm_biquad_cascade_df1_f32+0x1d8>
 8005582:	ed91 4a02 	vldr	s8, [r1, #8]
 8005586:	ee22 2a26 	vmul.f32	s4, s4, s13
 800558a:	ee65 1a21 	vmul.f32	s3, s10, s3
 800558e:	ee63 6a84 	vmul.f32	s13, s7, s8
 8005592:	ee67 2aa2 	vmul.f32	s5, s15, s5
 8005596:	ee23 3a06 	vmul.f32	s6, s6, s12
 800559a:	ee76 6aa1 	vadd.f32	s13, s13, s3
 800559e:	ee76 6a82 	vadd.f32	s13, s13, s4
 80055a2:	ee76 6aa2 	vadd.f32	s13, s13, s5
 80055a6:	ee36 7a83 	vadd.f32	s14, s13, s6
 80055aa:	ed83 7a02 	vstr	s14, [r3, #8]
 80055ae:	3f01      	subs	r7, #1
 80055b0:	ed05 4a04 	vstr	s8, [r5, #-16]
 80055b4:	ed05 5a03 	vstr	s10, [r5, #-12]
 80055b8:	f106 0614 	add.w	r6, r6, #20
 80055bc:	ed05 7a02 	vstr	s14, [r5, #-8]
 80055c0:	f105 0510 	add.w	r5, r5, #16
 80055c4:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 80055c8:	d015      	beq.n	80055f6 <arm_biquad_cascade_df1_f32+0x1ee>
 80055ca:	4661      	mov	r1, ip
 80055cc:	e72c      	b.n	8005428 <arm_biquad_cascade_df1_f32+0x20>
 80055ce:	eef0 7a47 	vmov.f32	s15, s14
 80055d2:	eeb0 5a44 	vmov.f32	s10, s8
 80055d6:	eeb0 7a46 	vmov.f32	s14, s12
 80055da:	eeb0 4a66 	vmov.f32	s8, s13
 80055de:	e7e6      	b.n	80055ae <arm_biquad_cascade_df1_f32+0x1a6>
 80055e0:	eeb0 7a67 	vmov.f32	s14, s15
 80055e4:	eeb0 4a45 	vmov.f32	s8, s10
 80055e8:	eef0 7a46 	vmov.f32	s15, s12
 80055ec:	eeb0 5a66 	vmov.f32	s10, s13
 80055f0:	e7dd      	b.n	80055ae <arm_biquad_cascade_df1_f32+0x1a6>
 80055f2:	4663      	mov	r3, ip
 80055f4:	e793      	b.n	800551e <arm_biquad_cascade_df1_f32+0x116>
 80055f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055fa:	bf00      	nop

080055fc <arm_sub_f32>:
 80055fc:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8005600:	b4f0      	push	{r4, r5, r6, r7}
 8005602:	d034      	beq.n	800566e <arm_sub_f32+0x72>
 8005604:	f100 0610 	add.w	r6, r0, #16
 8005608:	f101 0510 	add.w	r5, r1, #16
 800560c:	f102 0410 	add.w	r4, r2, #16
 8005610:	4667      	mov	r7, ip
 8005612:	ed15 7a04 	vldr	s14, [r5, #-16]
 8005616:	3f01      	subs	r7, #1
 8005618:	ed56 7a04 	vldr	s15, [r6, #-16]
 800561c:	f105 0510 	add.w	r5, r5, #16
 8005620:	f106 0610 	add.w	r6, r6, #16
 8005624:	f104 0410 	add.w	r4, r4, #16
 8005628:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800562c:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 8005630:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 8005634:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 8005638:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800563c:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 8005640:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 8005644:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8005648:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800564c:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 8005650:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8005654:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8005658:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800565c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8005660:	d1d7      	bne.n	8005612 <arm_sub_f32+0x16>
 8005662:	eb00 100c 	add.w	r0, r0, ip, lsl #4
 8005666:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 800566a:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 800566e:	f013 0303 	ands.w	r3, r3, #3
 8005672:	d01b      	beq.n	80056ac <arm_sub_f32+0xb0>
 8005674:	edd0 7a00 	vldr	s15, [r0]
 8005678:	3b01      	subs	r3, #1
 800567a:	ed91 7a00 	vldr	s14, [r1]
 800567e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005682:	edc2 7a00 	vstr	s15, [r2]
 8005686:	d011      	beq.n	80056ac <arm_sub_f32+0xb0>
 8005688:	edd0 7a01 	vldr	s15, [r0, #4]
 800568c:	2b01      	cmp	r3, #1
 800568e:	ed91 7a01 	vldr	s14, [r1, #4]
 8005692:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005696:	edc2 7a01 	vstr	s15, [r2, #4]
 800569a:	d007      	beq.n	80056ac <arm_sub_f32+0xb0>
 800569c:	edd0 7a02 	vldr	s15, [r0, #8]
 80056a0:	ed91 7a02 	vldr	s14, [r1, #8]
 80056a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80056a8:	edc2 7a02 	vstr	s15, [r2, #8]
 80056ac:	bcf0      	pop	{r4, r5, r6, r7}
 80056ae:	4770      	bx	lr

080056b0 <__assert_func>:
 80056b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056b2:	4614      	mov	r4, r2
 80056b4:	461a      	mov	r2, r3
 80056b6:	4b09      	ldr	r3, [pc, #36]	; (80056dc <__assert_func+0x2c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4605      	mov	r5, r0
 80056bc:	68d8      	ldr	r0, [r3, #12]
 80056be:	b14c      	cbz	r4, 80056d4 <__assert_func+0x24>
 80056c0:	4b07      	ldr	r3, [pc, #28]	; (80056e0 <__assert_func+0x30>)
 80056c2:	9100      	str	r1, [sp, #0]
 80056c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80056c8:	4906      	ldr	r1, [pc, #24]	; (80056e4 <__assert_func+0x34>)
 80056ca:	462b      	mov	r3, r5
 80056cc:	f000 f814 	bl	80056f8 <fiprintf>
 80056d0:	f001 f85c 	bl	800678c <abort>
 80056d4:	4b04      	ldr	r3, [pc, #16]	; (80056e8 <__assert_func+0x38>)
 80056d6:	461c      	mov	r4, r3
 80056d8:	e7f3      	b.n	80056c2 <__assert_func+0x12>
 80056da:	bf00      	nop
 80056dc:	20001f74 	.word	0x20001f74
 80056e0:	080087ab 	.word	0x080087ab
 80056e4:	080087b8 	.word	0x080087b8
 80056e8:	080087e6 	.word	0x080087e6

080056ec <__errno>:
 80056ec:	4b01      	ldr	r3, [pc, #4]	; (80056f4 <__errno+0x8>)
 80056ee:	6818      	ldr	r0, [r3, #0]
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	20001f74 	.word	0x20001f74

080056f8 <fiprintf>:
 80056f8:	b40e      	push	{r1, r2, r3}
 80056fa:	b503      	push	{r0, r1, lr}
 80056fc:	4601      	mov	r1, r0
 80056fe:	ab03      	add	r3, sp, #12
 8005700:	4805      	ldr	r0, [pc, #20]	; (8005718 <fiprintf+0x20>)
 8005702:	f853 2b04 	ldr.w	r2, [r3], #4
 8005706:	6800      	ldr	r0, [r0, #0]
 8005708:	9301      	str	r3, [sp, #4]
 800570a:	f000 f975 	bl	80059f8 <_vfiprintf_r>
 800570e:	b002      	add	sp, #8
 8005710:	f85d eb04 	ldr.w	lr, [sp], #4
 8005714:	b003      	add	sp, #12
 8005716:	4770      	bx	lr
 8005718:	20001f74 	.word	0x20001f74

0800571c <__libc_init_array>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	4d0d      	ldr	r5, [pc, #52]	; (8005754 <__libc_init_array+0x38>)
 8005720:	4c0d      	ldr	r4, [pc, #52]	; (8005758 <__libc_init_array+0x3c>)
 8005722:	1b64      	subs	r4, r4, r5
 8005724:	10a4      	asrs	r4, r4, #2
 8005726:	2600      	movs	r6, #0
 8005728:	42a6      	cmp	r6, r4
 800572a:	d109      	bne.n	8005740 <__libc_init_array+0x24>
 800572c:	4d0b      	ldr	r5, [pc, #44]	; (800575c <__libc_init_array+0x40>)
 800572e:	4c0c      	ldr	r4, [pc, #48]	; (8005760 <__libc_init_array+0x44>)
 8005730:	f002 ff3a 	bl	80085a8 <_init>
 8005734:	1b64      	subs	r4, r4, r5
 8005736:	10a4      	asrs	r4, r4, #2
 8005738:	2600      	movs	r6, #0
 800573a:	42a6      	cmp	r6, r4
 800573c:	d105      	bne.n	800574a <__libc_init_array+0x2e>
 800573e:	bd70      	pop	{r4, r5, r6, pc}
 8005740:	f855 3b04 	ldr.w	r3, [r5], #4
 8005744:	4798      	blx	r3
 8005746:	3601      	adds	r6, #1
 8005748:	e7ee      	b.n	8005728 <__libc_init_array+0xc>
 800574a:	f855 3b04 	ldr.w	r3, [r5], #4
 800574e:	4798      	blx	r3
 8005750:	3601      	adds	r6, #1
 8005752:	e7f2      	b.n	800573a <__libc_init_array+0x1e>
 8005754:	08008b90 	.word	0x08008b90
 8005758:	08008b90 	.word	0x08008b90
 800575c:	08008b90 	.word	0x08008b90
 8005760:	08008b94 	.word	0x08008b94

08005764 <malloc>:
 8005764:	4b02      	ldr	r3, [pc, #8]	; (8005770 <malloc+0xc>)
 8005766:	4601      	mov	r1, r0
 8005768:	6818      	ldr	r0, [r3, #0]
 800576a:	f000 b8a7 	b.w	80058bc <_malloc_r>
 800576e:	bf00      	nop
 8005770:	20001f74 	.word	0x20001f74

08005774 <free>:
 8005774:	4b02      	ldr	r3, [pc, #8]	; (8005780 <free+0xc>)
 8005776:	4601      	mov	r1, r0
 8005778:	6818      	ldr	r0, [r3, #0]
 800577a:	f000 b833 	b.w	80057e4 <_free_r>
 800577e:	bf00      	nop
 8005780:	20001f74 	.word	0x20001f74

08005784 <memcpy>:
 8005784:	440a      	add	r2, r1
 8005786:	4291      	cmp	r1, r2
 8005788:	f100 33ff 	add.w	r3, r0, #4294967295
 800578c:	d100      	bne.n	8005790 <memcpy+0xc>
 800578e:	4770      	bx	lr
 8005790:	b510      	push	{r4, lr}
 8005792:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005796:	f803 4f01 	strb.w	r4, [r3, #1]!
 800579a:	4291      	cmp	r1, r2
 800579c:	d1f9      	bne.n	8005792 <memcpy+0xe>
 800579e:	bd10      	pop	{r4, pc}

080057a0 <memmove>:
 80057a0:	4288      	cmp	r0, r1
 80057a2:	b510      	push	{r4, lr}
 80057a4:	eb01 0402 	add.w	r4, r1, r2
 80057a8:	d902      	bls.n	80057b0 <memmove+0x10>
 80057aa:	4284      	cmp	r4, r0
 80057ac:	4623      	mov	r3, r4
 80057ae:	d807      	bhi.n	80057c0 <memmove+0x20>
 80057b0:	1e43      	subs	r3, r0, #1
 80057b2:	42a1      	cmp	r1, r4
 80057b4:	d008      	beq.n	80057c8 <memmove+0x28>
 80057b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057be:	e7f8      	b.n	80057b2 <memmove+0x12>
 80057c0:	4402      	add	r2, r0
 80057c2:	4601      	mov	r1, r0
 80057c4:	428a      	cmp	r2, r1
 80057c6:	d100      	bne.n	80057ca <memmove+0x2a>
 80057c8:	bd10      	pop	{r4, pc}
 80057ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057d2:	e7f7      	b.n	80057c4 <memmove+0x24>

080057d4 <memset>:
 80057d4:	4402      	add	r2, r0
 80057d6:	4603      	mov	r3, r0
 80057d8:	4293      	cmp	r3, r2
 80057da:	d100      	bne.n	80057de <memset+0xa>
 80057dc:	4770      	bx	lr
 80057de:	f803 1b01 	strb.w	r1, [r3], #1
 80057e2:	e7f9      	b.n	80057d8 <memset+0x4>

080057e4 <_free_r>:
 80057e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057e6:	2900      	cmp	r1, #0
 80057e8:	d044      	beq.n	8005874 <_free_r+0x90>
 80057ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ee:	9001      	str	r0, [sp, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f1a1 0404 	sub.w	r4, r1, #4
 80057f6:	bfb8      	it	lt
 80057f8:	18e4      	addlt	r4, r4, r3
 80057fa:	f002 f86b 	bl	80078d4 <__malloc_lock>
 80057fe:	4a1e      	ldr	r2, [pc, #120]	; (8005878 <_free_r+0x94>)
 8005800:	9801      	ldr	r0, [sp, #4]
 8005802:	6813      	ldr	r3, [r2, #0]
 8005804:	b933      	cbnz	r3, 8005814 <_free_r+0x30>
 8005806:	6063      	str	r3, [r4, #4]
 8005808:	6014      	str	r4, [r2, #0]
 800580a:	b003      	add	sp, #12
 800580c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005810:	f002 b866 	b.w	80078e0 <__malloc_unlock>
 8005814:	42a3      	cmp	r3, r4
 8005816:	d908      	bls.n	800582a <_free_r+0x46>
 8005818:	6825      	ldr	r5, [r4, #0]
 800581a:	1961      	adds	r1, r4, r5
 800581c:	428b      	cmp	r3, r1
 800581e:	bf01      	itttt	eq
 8005820:	6819      	ldreq	r1, [r3, #0]
 8005822:	685b      	ldreq	r3, [r3, #4]
 8005824:	1949      	addeq	r1, r1, r5
 8005826:	6021      	streq	r1, [r4, #0]
 8005828:	e7ed      	b.n	8005806 <_free_r+0x22>
 800582a:	461a      	mov	r2, r3
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	b10b      	cbz	r3, 8005834 <_free_r+0x50>
 8005830:	42a3      	cmp	r3, r4
 8005832:	d9fa      	bls.n	800582a <_free_r+0x46>
 8005834:	6811      	ldr	r1, [r2, #0]
 8005836:	1855      	adds	r5, r2, r1
 8005838:	42a5      	cmp	r5, r4
 800583a:	d10b      	bne.n	8005854 <_free_r+0x70>
 800583c:	6824      	ldr	r4, [r4, #0]
 800583e:	4421      	add	r1, r4
 8005840:	1854      	adds	r4, r2, r1
 8005842:	42a3      	cmp	r3, r4
 8005844:	6011      	str	r1, [r2, #0]
 8005846:	d1e0      	bne.n	800580a <_free_r+0x26>
 8005848:	681c      	ldr	r4, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	6053      	str	r3, [r2, #4]
 800584e:	4421      	add	r1, r4
 8005850:	6011      	str	r1, [r2, #0]
 8005852:	e7da      	b.n	800580a <_free_r+0x26>
 8005854:	d902      	bls.n	800585c <_free_r+0x78>
 8005856:	230c      	movs	r3, #12
 8005858:	6003      	str	r3, [r0, #0]
 800585a:	e7d6      	b.n	800580a <_free_r+0x26>
 800585c:	6825      	ldr	r5, [r4, #0]
 800585e:	1961      	adds	r1, r4, r5
 8005860:	428b      	cmp	r3, r1
 8005862:	bf04      	itt	eq
 8005864:	6819      	ldreq	r1, [r3, #0]
 8005866:	685b      	ldreq	r3, [r3, #4]
 8005868:	6063      	str	r3, [r4, #4]
 800586a:	bf04      	itt	eq
 800586c:	1949      	addeq	r1, r1, r5
 800586e:	6021      	streq	r1, [r4, #0]
 8005870:	6054      	str	r4, [r2, #4]
 8005872:	e7ca      	b.n	800580a <_free_r+0x26>
 8005874:	b003      	add	sp, #12
 8005876:	bd30      	pop	{r4, r5, pc}
 8005878:	200038e4 	.word	0x200038e4

0800587c <sbrk_aligned>:
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	4e0e      	ldr	r6, [pc, #56]	; (80058b8 <sbrk_aligned+0x3c>)
 8005880:	460c      	mov	r4, r1
 8005882:	6831      	ldr	r1, [r6, #0]
 8005884:	4605      	mov	r5, r0
 8005886:	b911      	cbnz	r1, 800588e <sbrk_aligned+0x12>
 8005888:	f000 fe58 	bl	800653c <_sbrk_r>
 800588c:	6030      	str	r0, [r6, #0]
 800588e:	4621      	mov	r1, r4
 8005890:	4628      	mov	r0, r5
 8005892:	f000 fe53 	bl	800653c <_sbrk_r>
 8005896:	1c43      	adds	r3, r0, #1
 8005898:	d00a      	beq.n	80058b0 <sbrk_aligned+0x34>
 800589a:	1cc4      	adds	r4, r0, #3
 800589c:	f024 0403 	bic.w	r4, r4, #3
 80058a0:	42a0      	cmp	r0, r4
 80058a2:	d007      	beq.n	80058b4 <sbrk_aligned+0x38>
 80058a4:	1a21      	subs	r1, r4, r0
 80058a6:	4628      	mov	r0, r5
 80058a8:	f000 fe48 	bl	800653c <_sbrk_r>
 80058ac:	3001      	adds	r0, #1
 80058ae:	d101      	bne.n	80058b4 <sbrk_aligned+0x38>
 80058b0:	f04f 34ff 	mov.w	r4, #4294967295
 80058b4:	4620      	mov	r0, r4
 80058b6:	bd70      	pop	{r4, r5, r6, pc}
 80058b8:	200038e8 	.word	0x200038e8

080058bc <_malloc_r>:
 80058bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c0:	1ccd      	adds	r5, r1, #3
 80058c2:	f025 0503 	bic.w	r5, r5, #3
 80058c6:	3508      	adds	r5, #8
 80058c8:	2d0c      	cmp	r5, #12
 80058ca:	bf38      	it	cc
 80058cc:	250c      	movcc	r5, #12
 80058ce:	2d00      	cmp	r5, #0
 80058d0:	4607      	mov	r7, r0
 80058d2:	db01      	blt.n	80058d8 <_malloc_r+0x1c>
 80058d4:	42a9      	cmp	r1, r5
 80058d6:	d905      	bls.n	80058e4 <_malloc_r+0x28>
 80058d8:	230c      	movs	r3, #12
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	2600      	movs	r6, #0
 80058de:	4630      	mov	r0, r6
 80058e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058e4:	4e2e      	ldr	r6, [pc, #184]	; (80059a0 <_malloc_r+0xe4>)
 80058e6:	f001 fff5 	bl	80078d4 <__malloc_lock>
 80058ea:	6833      	ldr	r3, [r6, #0]
 80058ec:	461c      	mov	r4, r3
 80058ee:	bb34      	cbnz	r4, 800593e <_malloc_r+0x82>
 80058f0:	4629      	mov	r1, r5
 80058f2:	4638      	mov	r0, r7
 80058f4:	f7ff ffc2 	bl	800587c <sbrk_aligned>
 80058f8:	1c43      	adds	r3, r0, #1
 80058fa:	4604      	mov	r4, r0
 80058fc:	d14d      	bne.n	800599a <_malloc_r+0xde>
 80058fe:	6834      	ldr	r4, [r6, #0]
 8005900:	4626      	mov	r6, r4
 8005902:	2e00      	cmp	r6, #0
 8005904:	d140      	bne.n	8005988 <_malloc_r+0xcc>
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	4631      	mov	r1, r6
 800590a:	4638      	mov	r0, r7
 800590c:	eb04 0803 	add.w	r8, r4, r3
 8005910:	f000 fe14 	bl	800653c <_sbrk_r>
 8005914:	4580      	cmp	r8, r0
 8005916:	d13a      	bne.n	800598e <_malloc_r+0xd2>
 8005918:	6821      	ldr	r1, [r4, #0]
 800591a:	3503      	adds	r5, #3
 800591c:	1a6d      	subs	r5, r5, r1
 800591e:	f025 0503 	bic.w	r5, r5, #3
 8005922:	3508      	adds	r5, #8
 8005924:	2d0c      	cmp	r5, #12
 8005926:	bf38      	it	cc
 8005928:	250c      	movcc	r5, #12
 800592a:	4629      	mov	r1, r5
 800592c:	4638      	mov	r0, r7
 800592e:	f7ff ffa5 	bl	800587c <sbrk_aligned>
 8005932:	3001      	adds	r0, #1
 8005934:	d02b      	beq.n	800598e <_malloc_r+0xd2>
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	442b      	add	r3, r5
 800593a:	6023      	str	r3, [r4, #0]
 800593c:	e00e      	b.n	800595c <_malloc_r+0xa0>
 800593e:	6822      	ldr	r2, [r4, #0]
 8005940:	1b52      	subs	r2, r2, r5
 8005942:	d41e      	bmi.n	8005982 <_malloc_r+0xc6>
 8005944:	2a0b      	cmp	r2, #11
 8005946:	d916      	bls.n	8005976 <_malloc_r+0xba>
 8005948:	1961      	adds	r1, r4, r5
 800594a:	42a3      	cmp	r3, r4
 800594c:	6025      	str	r5, [r4, #0]
 800594e:	bf18      	it	ne
 8005950:	6059      	strne	r1, [r3, #4]
 8005952:	6863      	ldr	r3, [r4, #4]
 8005954:	bf08      	it	eq
 8005956:	6031      	streq	r1, [r6, #0]
 8005958:	5162      	str	r2, [r4, r5]
 800595a:	604b      	str	r3, [r1, #4]
 800595c:	4638      	mov	r0, r7
 800595e:	f104 060b 	add.w	r6, r4, #11
 8005962:	f001 ffbd 	bl	80078e0 <__malloc_unlock>
 8005966:	f026 0607 	bic.w	r6, r6, #7
 800596a:	1d23      	adds	r3, r4, #4
 800596c:	1af2      	subs	r2, r6, r3
 800596e:	d0b6      	beq.n	80058de <_malloc_r+0x22>
 8005970:	1b9b      	subs	r3, r3, r6
 8005972:	50a3      	str	r3, [r4, r2]
 8005974:	e7b3      	b.n	80058de <_malloc_r+0x22>
 8005976:	6862      	ldr	r2, [r4, #4]
 8005978:	42a3      	cmp	r3, r4
 800597a:	bf0c      	ite	eq
 800597c:	6032      	streq	r2, [r6, #0]
 800597e:	605a      	strne	r2, [r3, #4]
 8005980:	e7ec      	b.n	800595c <_malloc_r+0xa0>
 8005982:	4623      	mov	r3, r4
 8005984:	6864      	ldr	r4, [r4, #4]
 8005986:	e7b2      	b.n	80058ee <_malloc_r+0x32>
 8005988:	4634      	mov	r4, r6
 800598a:	6876      	ldr	r6, [r6, #4]
 800598c:	e7b9      	b.n	8005902 <_malloc_r+0x46>
 800598e:	230c      	movs	r3, #12
 8005990:	603b      	str	r3, [r7, #0]
 8005992:	4638      	mov	r0, r7
 8005994:	f001 ffa4 	bl	80078e0 <__malloc_unlock>
 8005998:	e7a1      	b.n	80058de <_malloc_r+0x22>
 800599a:	6025      	str	r5, [r4, #0]
 800599c:	e7de      	b.n	800595c <_malloc_r+0xa0>
 800599e:	bf00      	nop
 80059a0:	200038e4 	.word	0x200038e4

080059a4 <__sfputc_r>:
 80059a4:	6893      	ldr	r3, [r2, #8]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	b410      	push	{r4}
 80059ac:	6093      	str	r3, [r2, #8]
 80059ae:	da08      	bge.n	80059c2 <__sfputc_r+0x1e>
 80059b0:	6994      	ldr	r4, [r2, #24]
 80059b2:	42a3      	cmp	r3, r4
 80059b4:	db01      	blt.n	80059ba <__sfputc_r+0x16>
 80059b6:	290a      	cmp	r1, #10
 80059b8:	d103      	bne.n	80059c2 <__sfputc_r+0x1e>
 80059ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059be:	f000 be25 	b.w	800660c <__swbuf_r>
 80059c2:	6813      	ldr	r3, [r2, #0]
 80059c4:	1c58      	adds	r0, r3, #1
 80059c6:	6010      	str	r0, [r2, #0]
 80059c8:	7019      	strb	r1, [r3, #0]
 80059ca:	4608      	mov	r0, r1
 80059cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <__sfputs_r>:
 80059d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d4:	4606      	mov	r6, r0
 80059d6:	460f      	mov	r7, r1
 80059d8:	4614      	mov	r4, r2
 80059da:	18d5      	adds	r5, r2, r3
 80059dc:	42ac      	cmp	r4, r5
 80059de:	d101      	bne.n	80059e4 <__sfputs_r+0x12>
 80059e0:	2000      	movs	r0, #0
 80059e2:	e007      	b.n	80059f4 <__sfputs_r+0x22>
 80059e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059e8:	463a      	mov	r2, r7
 80059ea:	4630      	mov	r0, r6
 80059ec:	f7ff ffda 	bl	80059a4 <__sfputc_r>
 80059f0:	1c43      	adds	r3, r0, #1
 80059f2:	d1f3      	bne.n	80059dc <__sfputs_r+0xa>
 80059f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080059f8 <_vfiprintf_r>:
 80059f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059fc:	460d      	mov	r5, r1
 80059fe:	b09d      	sub	sp, #116	; 0x74
 8005a00:	4614      	mov	r4, r2
 8005a02:	4698      	mov	r8, r3
 8005a04:	4606      	mov	r6, r0
 8005a06:	b118      	cbz	r0, 8005a10 <_vfiprintf_r+0x18>
 8005a08:	6983      	ldr	r3, [r0, #24]
 8005a0a:	b90b      	cbnz	r3, 8005a10 <_vfiprintf_r+0x18>
 8005a0c:	f001 fe58 	bl	80076c0 <__sinit>
 8005a10:	4b89      	ldr	r3, [pc, #548]	; (8005c38 <_vfiprintf_r+0x240>)
 8005a12:	429d      	cmp	r5, r3
 8005a14:	d11b      	bne.n	8005a4e <_vfiprintf_r+0x56>
 8005a16:	6875      	ldr	r5, [r6, #4]
 8005a18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a1a:	07d9      	lsls	r1, r3, #31
 8005a1c:	d405      	bmi.n	8005a2a <_vfiprintf_r+0x32>
 8005a1e:	89ab      	ldrh	r3, [r5, #12]
 8005a20:	059a      	lsls	r2, r3, #22
 8005a22:	d402      	bmi.n	8005a2a <_vfiprintf_r+0x32>
 8005a24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a26:	f001 feee 	bl	8007806 <__retarget_lock_acquire_recursive>
 8005a2a:	89ab      	ldrh	r3, [r5, #12]
 8005a2c:	071b      	lsls	r3, r3, #28
 8005a2e:	d501      	bpl.n	8005a34 <_vfiprintf_r+0x3c>
 8005a30:	692b      	ldr	r3, [r5, #16]
 8005a32:	b9eb      	cbnz	r3, 8005a70 <_vfiprintf_r+0x78>
 8005a34:	4629      	mov	r1, r5
 8005a36:	4630      	mov	r0, r6
 8005a38:	f000 fe3a 	bl	80066b0 <__swsetup_r>
 8005a3c:	b1c0      	cbz	r0, 8005a70 <_vfiprintf_r+0x78>
 8005a3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a40:	07dc      	lsls	r4, r3, #31
 8005a42:	d50e      	bpl.n	8005a62 <_vfiprintf_r+0x6a>
 8005a44:	f04f 30ff 	mov.w	r0, #4294967295
 8005a48:	b01d      	add	sp, #116	; 0x74
 8005a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a4e:	4b7b      	ldr	r3, [pc, #492]	; (8005c3c <_vfiprintf_r+0x244>)
 8005a50:	429d      	cmp	r5, r3
 8005a52:	d101      	bne.n	8005a58 <_vfiprintf_r+0x60>
 8005a54:	68b5      	ldr	r5, [r6, #8]
 8005a56:	e7df      	b.n	8005a18 <_vfiprintf_r+0x20>
 8005a58:	4b79      	ldr	r3, [pc, #484]	; (8005c40 <_vfiprintf_r+0x248>)
 8005a5a:	429d      	cmp	r5, r3
 8005a5c:	bf08      	it	eq
 8005a5e:	68f5      	ldreq	r5, [r6, #12]
 8005a60:	e7da      	b.n	8005a18 <_vfiprintf_r+0x20>
 8005a62:	89ab      	ldrh	r3, [r5, #12]
 8005a64:	0598      	lsls	r0, r3, #22
 8005a66:	d4ed      	bmi.n	8005a44 <_vfiprintf_r+0x4c>
 8005a68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a6a:	f001 fecd 	bl	8007808 <__retarget_lock_release_recursive>
 8005a6e:	e7e9      	b.n	8005a44 <_vfiprintf_r+0x4c>
 8005a70:	2300      	movs	r3, #0
 8005a72:	9309      	str	r3, [sp, #36]	; 0x24
 8005a74:	2320      	movs	r3, #32
 8005a76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a7e:	2330      	movs	r3, #48	; 0x30
 8005a80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005c44 <_vfiprintf_r+0x24c>
 8005a84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a88:	f04f 0901 	mov.w	r9, #1
 8005a8c:	4623      	mov	r3, r4
 8005a8e:	469a      	mov	sl, r3
 8005a90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a94:	b10a      	cbz	r2, 8005a9a <_vfiprintf_r+0xa2>
 8005a96:	2a25      	cmp	r2, #37	; 0x25
 8005a98:	d1f9      	bne.n	8005a8e <_vfiprintf_r+0x96>
 8005a9a:	ebba 0b04 	subs.w	fp, sl, r4
 8005a9e:	d00b      	beq.n	8005ab8 <_vfiprintf_r+0xc0>
 8005aa0:	465b      	mov	r3, fp
 8005aa2:	4622      	mov	r2, r4
 8005aa4:	4629      	mov	r1, r5
 8005aa6:	4630      	mov	r0, r6
 8005aa8:	f7ff ff93 	bl	80059d2 <__sfputs_r>
 8005aac:	3001      	adds	r0, #1
 8005aae:	f000 80aa 	beq.w	8005c06 <_vfiprintf_r+0x20e>
 8005ab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ab4:	445a      	add	r2, fp
 8005ab6:	9209      	str	r2, [sp, #36]	; 0x24
 8005ab8:	f89a 3000 	ldrb.w	r3, [sl]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 80a2 	beq.w	8005c06 <_vfiprintf_r+0x20e>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005acc:	f10a 0a01 	add.w	sl, sl, #1
 8005ad0:	9304      	str	r3, [sp, #16]
 8005ad2:	9307      	str	r3, [sp, #28]
 8005ad4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ad8:	931a      	str	r3, [sp, #104]	; 0x68
 8005ada:	4654      	mov	r4, sl
 8005adc:	2205      	movs	r2, #5
 8005ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ae2:	4858      	ldr	r0, [pc, #352]	; (8005c44 <_vfiprintf_r+0x24c>)
 8005ae4:	f7fa fbac 	bl	8000240 <memchr>
 8005ae8:	9a04      	ldr	r2, [sp, #16]
 8005aea:	b9d8      	cbnz	r0, 8005b24 <_vfiprintf_r+0x12c>
 8005aec:	06d1      	lsls	r1, r2, #27
 8005aee:	bf44      	itt	mi
 8005af0:	2320      	movmi	r3, #32
 8005af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005af6:	0713      	lsls	r3, r2, #28
 8005af8:	bf44      	itt	mi
 8005afa:	232b      	movmi	r3, #43	; 0x2b
 8005afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b00:	f89a 3000 	ldrb.w	r3, [sl]
 8005b04:	2b2a      	cmp	r3, #42	; 0x2a
 8005b06:	d015      	beq.n	8005b34 <_vfiprintf_r+0x13c>
 8005b08:	9a07      	ldr	r2, [sp, #28]
 8005b0a:	4654      	mov	r4, sl
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	f04f 0c0a 	mov.w	ip, #10
 8005b12:	4621      	mov	r1, r4
 8005b14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b18:	3b30      	subs	r3, #48	; 0x30
 8005b1a:	2b09      	cmp	r3, #9
 8005b1c:	d94e      	bls.n	8005bbc <_vfiprintf_r+0x1c4>
 8005b1e:	b1b0      	cbz	r0, 8005b4e <_vfiprintf_r+0x156>
 8005b20:	9207      	str	r2, [sp, #28]
 8005b22:	e014      	b.n	8005b4e <_vfiprintf_r+0x156>
 8005b24:	eba0 0308 	sub.w	r3, r0, r8
 8005b28:	fa09 f303 	lsl.w	r3, r9, r3
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	9304      	str	r3, [sp, #16]
 8005b30:	46a2      	mov	sl, r4
 8005b32:	e7d2      	b.n	8005ada <_vfiprintf_r+0xe2>
 8005b34:	9b03      	ldr	r3, [sp, #12]
 8005b36:	1d19      	adds	r1, r3, #4
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	9103      	str	r1, [sp, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	bfbb      	ittet	lt
 8005b40:	425b      	neglt	r3, r3
 8005b42:	f042 0202 	orrlt.w	r2, r2, #2
 8005b46:	9307      	strge	r3, [sp, #28]
 8005b48:	9307      	strlt	r3, [sp, #28]
 8005b4a:	bfb8      	it	lt
 8005b4c:	9204      	strlt	r2, [sp, #16]
 8005b4e:	7823      	ldrb	r3, [r4, #0]
 8005b50:	2b2e      	cmp	r3, #46	; 0x2e
 8005b52:	d10c      	bne.n	8005b6e <_vfiprintf_r+0x176>
 8005b54:	7863      	ldrb	r3, [r4, #1]
 8005b56:	2b2a      	cmp	r3, #42	; 0x2a
 8005b58:	d135      	bne.n	8005bc6 <_vfiprintf_r+0x1ce>
 8005b5a:	9b03      	ldr	r3, [sp, #12]
 8005b5c:	1d1a      	adds	r2, r3, #4
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	9203      	str	r2, [sp, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	bfb8      	it	lt
 8005b66:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b6a:	3402      	adds	r4, #2
 8005b6c:	9305      	str	r3, [sp, #20]
 8005b6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005c54 <_vfiprintf_r+0x25c>
 8005b72:	7821      	ldrb	r1, [r4, #0]
 8005b74:	2203      	movs	r2, #3
 8005b76:	4650      	mov	r0, sl
 8005b78:	f7fa fb62 	bl	8000240 <memchr>
 8005b7c:	b140      	cbz	r0, 8005b90 <_vfiprintf_r+0x198>
 8005b7e:	2340      	movs	r3, #64	; 0x40
 8005b80:	eba0 000a 	sub.w	r0, r0, sl
 8005b84:	fa03 f000 	lsl.w	r0, r3, r0
 8005b88:	9b04      	ldr	r3, [sp, #16]
 8005b8a:	4303      	orrs	r3, r0
 8005b8c:	3401      	adds	r4, #1
 8005b8e:	9304      	str	r3, [sp, #16]
 8005b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b94:	482c      	ldr	r0, [pc, #176]	; (8005c48 <_vfiprintf_r+0x250>)
 8005b96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b9a:	2206      	movs	r2, #6
 8005b9c:	f7fa fb50 	bl	8000240 <memchr>
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	d03f      	beq.n	8005c24 <_vfiprintf_r+0x22c>
 8005ba4:	4b29      	ldr	r3, [pc, #164]	; (8005c4c <_vfiprintf_r+0x254>)
 8005ba6:	bb1b      	cbnz	r3, 8005bf0 <_vfiprintf_r+0x1f8>
 8005ba8:	9b03      	ldr	r3, [sp, #12]
 8005baa:	3307      	adds	r3, #7
 8005bac:	f023 0307 	bic.w	r3, r3, #7
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	9303      	str	r3, [sp, #12]
 8005bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb6:	443b      	add	r3, r7
 8005bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bba:	e767      	b.n	8005a8c <_vfiprintf_r+0x94>
 8005bbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bc0:	460c      	mov	r4, r1
 8005bc2:	2001      	movs	r0, #1
 8005bc4:	e7a5      	b.n	8005b12 <_vfiprintf_r+0x11a>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	3401      	adds	r4, #1
 8005bca:	9305      	str	r3, [sp, #20]
 8005bcc:	4619      	mov	r1, r3
 8005bce:	f04f 0c0a 	mov.w	ip, #10
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bd8:	3a30      	subs	r2, #48	; 0x30
 8005bda:	2a09      	cmp	r2, #9
 8005bdc:	d903      	bls.n	8005be6 <_vfiprintf_r+0x1ee>
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d0c5      	beq.n	8005b6e <_vfiprintf_r+0x176>
 8005be2:	9105      	str	r1, [sp, #20]
 8005be4:	e7c3      	b.n	8005b6e <_vfiprintf_r+0x176>
 8005be6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bea:	4604      	mov	r4, r0
 8005bec:	2301      	movs	r3, #1
 8005bee:	e7f0      	b.n	8005bd2 <_vfiprintf_r+0x1da>
 8005bf0:	ab03      	add	r3, sp, #12
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	462a      	mov	r2, r5
 8005bf6:	4b16      	ldr	r3, [pc, #88]	; (8005c50 <_vfiprintf_r+0x258>)
 8005bf8:	a904      	add	r1, sp, #16
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	f000 f8cc 	bl	8005d98 <_printf_float>
 8005c00:	4607      	mov	r7, r0
 8005c02:	1c78      	adds	r0, r7, #1
 8005c04:	d1d6      	bne.n	8005bb4 <_vfiprintf_r+0x1bc>
 8005c06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c08:	07d9      	lsls	r1, r3, #31
 8005c0a:	d405      	bmi.n	8005c18 <_vfiprintf_r+0x220>
 8005c0c:	89ab      	ldrh	r3, [r5, #12]
 8005c0e:	059a      	lsls	r2, r3, #22
 8005c10:	d402      	bmi.n	8005c18 <_vfiprintf_r+0x220>
 8005c12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c14:	f001 fdf8 	bl	8007808 <__retarget_lock_release_recursive>
 8005c18:	89ab      	ldrh	r3, [r5, #12]
 8005c1a:	065b      	lsls	r3, r3, #25
 8005c1c:	f53f af12 	bmi.w	8005a44 <_vfiprintf_r+0x4c>
 8005c20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c22:	e711      	b.n	8005a48 <_vfiprintf_r+0x50>
 8005c24:	ab03      	add	r3, sp, #12
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	462a      	mov	r2, r5
 8005c2a:	4b09      	ldr	r3, [pc, #36]	; (8005c50 <_vfiprintf_r+0x258>)
 8005c2c:	a904      	add	r1, sp, #16
 8005c2e:	4630      	mov	r0, r6
 8005c30:	f000 fb56 	bl	80062e0 <_printf_i>
 8005c34:	e7e4      	b.n	8005c00 <_vfiprintf_r+0x208>
 8005c36:	bf00      	nop
 8005c38:	080088e4 	.word	0x080088e4
 8005c3c:	08008904 	.word	0x08008904
 8005c40:	080088c4 	.word	0x080088c4
 8005c44:	080087ec 	.word	0x080087ec
 8005c48:	080087f6 	.word	0x080087f6
 8005c4c:	08005d99 	.word	0x08005d99
 8005c50:	080059d3 	.word	0x080059d3
 8005c54:	080087f2 	.word	0x080087f2

08005c58 <__cvt>:
 8005c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c5c:	ec55 4b10 	vmov	r4, r5, d0
 8005c60:	2d00      	cmp	r5, #0
 8005c62:	460e      	mov	r6, r1
 8005c64:	4619      	mov	r1, r3
 8005c66:	462b      	mov	r3, r5
 8005c68:	bfbb      	ittet	lt
 8005c6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005c6e:	461d      	movlt	r5, r3
 8005c70:	2300      	movge	r3, #0
 8005c72:	232d      	movlt	r3, #45	; 0x2d
 8005c74:	700b      	strb	r3, [r1, #0]
 8005c76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005c7c:	4691      	mov	r9, r2
 8005c7e:	f023 0820 	bic.w	r8, r3, #32
 8005c82:	bfbc      	itt	lt
 8005c84:	4622      	movlt	r2, r4
 8005c86:	4614      	movlt	r4, r2
 8005c88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c8c:	d005      	beq.n	8005c9a <__cvt+0x42>
 8005c8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005c92:	d100      	bne.n	8005c96 <__cvt+0x3e>
 8005c94:	3601      	adds	r6, #1
 8005c96:	2102      	movs	r1, #2
 8005c98:	e000      	b.n	8005c9c <__cvt+0x44>
 8005c9a:	2103      	movs	r1, #3
 8005c9c:	ab03      	add	r3, sp, #12
 8005c9e:	9301      	str	r3, [sp, #4]
 8005ca0:	ab02      	add	r3, sp, #8
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	ec45 4b10 	vmov	d0, r4, r5
 8005ca8:	4653      	mov	r3, sl
 8005caa:	4632      	mov	r2, r6
 8005cac:	f000 fe00 	bl	80068b0 <_dtoa_r>
 8005cb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005cb4:	4607      	mov	r7, r0
 8005cb6:	d102      	bne.n	8005cbe <__cvt+0x66>
 8005cb8:	f019 0f01 	tst.w	r9, #1
 8005cbc:	d022      	beq.n	8005d04 <__cvt+0xac>
 8005cbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cc2:	eb07 0906 	add.w	r9, r7, r6
 8005cc6:	d110      	bne.n	8005cea <__cvt+0x92>
 8005cc8:	783b      	ldrb	r3, [r7, #0]
 8005cca:	2b30      	cmp	r3, #48	; 0x30
 8005ccc:	d10a      	bne.n	8005ce4 <__cvt+0x8c>
 8005cce:	2200      	movs	r2, #0
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	f7fa ff27 	bl	8000b28 <__aeabi_dcmpeq>
 8005cda:	b918      	cbnz	r0, 8005ce4 <__cvt+0x8c>
 8005cdc:	f1c6 0601 	rsb	r6, r6, #1
 8005ce0:	f8ca 6000 	str.w	r6, [sl]
 8005ce4:	f8da 3000 	ldr.w	r3, [sl]
 8005ce8:	4499      	add	r9, r3
 8005cea:	2200      	movs	r2, #0
 8005cec:	2300      	movs	r3, #0
 8005cee:	4620      	mov	r0, r4
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	f7fa ff19 	bl	8000b28 <__aeabi_dcmpeq>
 8005cf6:	b108      	cbz	r0, 8005cfc <__cvt+0xa4>
 8005cf8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005cfc:	2230      	movs	r2, #48	; 0x30
 8005cfe:	9b03      	ldr	r3, [sp, #12]
 8005d00:	454b      	cmp	r3, r9
 8005d02:	d307      	bcc.n	8005d14 <__cvt+0xbc>
 8005d04:	9b03      	ldr	r3, [sp, #12]
 8005d06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d08:	1bdb      	subs	r3, r3, r7
 8005d0a:	4638      	mov	r0, r7
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	b004      	add	sp, #16
 8005d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d14:	1c59      	adds	r1, r3, #1
 8005d16:	9103      	str	r1, [sp, #12]
 8005d18:	701a      	strb	r2, [r3, #0]
 8005d1a:	e7f0      	b.n	8005cfe <__cvt+0xa6>

08005d1c <__exponent>:
 8005d1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2900      	cmp	r1, #0
 8005d22:	bfb8      	it	lt
 8005d24:	4249      	neglt	r1, r1
 8005d26:	f803 2b02 	strb.w	r2, [r3], #2
 8005d2a:	bfb4      	ite	lt
 8005d2c:	222d      	movlt	r2, #45	; 0x2d
 8005d2e:	222b      	movge	r2, #43	; 0x2b
 8005d30:	2909      	cmp	r1, #9
 8005d32:	7042      	strb	r2, [r0, #1]
 8005d34:	dd2a      	ble.n	8005d8c <__exponent+0x70>
 8005d36:	f10d 0407 	add.w	r4, sp, #7
 8005d3a:	46a4      	mov	ip, r4
 8005d3c:	270a      	movs	r7, #10
 8005d3e:	46a6      	mov	lr, r4
 8005d40:	460a      	mov	r2, r1
 8005d42:	fb91 f6f7 	sdiv	r6, r1, r7
 8005d46:	fb07 1516 	mls	r5, r7, r6, r1
 8005d4a:	3530      	adds	r5, #48	; 0x30
 8005d4c:	2a63      	cmp	r2, #99	; 0x63
 8005d4e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005d52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005d56:	4631      	mov	r1, r6
 8005d58:	dcf1      	bgt.n	8005d3e <__exponent+0x22>
 8005d5a:	3130      	adds	r1, #48	; 0x30
 8005d5c:	f1ae 0502 	sub.w	r5, lr, #2
 8005d60:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005d64:	1c44      	adds	r4, r0, #1
 8005d66:	4629      	mov	r1, r5
 8005d68:	4561      	cmp	r1, ip
 8005d6a:	d30a      	bcc.n	8005d82 <__exponent+0x66>
 8005d6c:	f10d 0209 	add.w	r2, sp, #9
 8005d70:	eba2 020e 	sub.w	r2, r2, lr
 8005d74:	4565      	cmp	r5, ip
 8005d76:	bf88      	it	hi
 8005d78:	2200      	movhi	r2, #0
 8005d7a:	4413      	add	r3, r2
 8005d7c:	1a18      	subs	r0, r3, r0
 8005d7e:	b003      	add	sp, #12
 8005d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d86:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005d8a:	e7ed      	b.n	8005d68 <__exponent+0x4c>
 8005d8c:	2330      	movs	r3, #48	; 0x30
 8005d8e:	3130      	adds	r1, #48	; 0x30
 8005d90:	7083      	strb	r3, [r0, #2]
 8005d92:	70c1      	strb	r1, [r0, #3]
 8005d94:	1d03      	adds	r3, r0, #4
 8005d96:	e7f1      	b.n	8005d7c <__exponent+0x60>

08005d98 <_printf_float>:
 8005d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9c:	ed2d 8b02 	vpush	{d8}
 8005da0:	b08d      	sub	sp, #52	; 0x34
 8005da2:	460c      	mov	r4, r1
 8005da4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005da8:	4616      	mov	r6, r2
 8005daa:	461f      	mov	r7, r3
 8005dac:	4605      	mov	r5, r0
 8005dae:	f001 fd25 	bl	80077fc <_localeconv_r>
 8005db2:	f8d0 a000 	ldr.w	sl, [r0]
 8005db6:	4650      	mov	r0, sl
 8005db8:	f7fa fa38 	bl	800022c <strlen>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	930a      	str	r3, [sp, #40]	; 0x28
 8005dc0:	6823      	ldr	r3, [r4, #0]
 8005dc2:	9305      	str	r3, [sp, #20]
 8005dc4:	f8d8 3000 	ldr.w	r3, [r8]
 8005dc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005dcc:	3307      	adds	r3, #7
 8005dce:	f023 0307 	bic.w	r3, r3, #7
 8005dd2:	f103 0208 	add.w	r2, r3, #8
 8005dd6:	f8c8 2000 	str.w	r2, [r8]
 8005dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dde:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005de2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005de6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005dea:	9307      	str	r3, [sp, #28]
 8005dec:	f8cd 8018 	str.w	r8, [sp, #24]
 8005df0:	ee08 0a10 	vmov	s16, r0
 8005df4:	4b9f      	ldr	r3, [pc, #636]	; (8006074 <_printf_float+0x2dc>)
 8005df6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8005dfe:	f7fa fec5 	bl	8000b8c <__aeabi_dcmpun>
 8005e02:	bb88      	cbnz	r0, 8005e68 <_printf_float+0xd0>
 8005e04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e08:	4b9a      	ldr	r3, [pc, #616]	; (8006074 <_printf_float+0x2dc>)
 8005e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e0e:	f7fa fe9f 	bl	8000b50 <__aeabi_dcmple>
 8005e12:	bb48      	cbnz	r0, 8005e68 <_printf_float+0xd0>
 8005e14:	2200      	movs	r2, #0
 8005e16:	2300      	movs	r3, #0
 8005e18:	4640      	mov	r0, r8
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	f7fa fe8e 	bl	8000b3c <__aeabi_dcmplt>
 8005e20:	b110      	cbz	r0, 8005e28 <_printf_float+0x90>
 8005e22:	232d      	movs	r3, #45	; 0x2d
 8005e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e28:	4b93      	ldr	r3, [pc, #588]	; (8006078 <_printf_float+0x2e0>)
 8005e2a:	4894      	ldr	r0, [pc, #592]	; (800607c <_printf_float+0x2e4>)
 8005e2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005e30:	bf94      	ite	ls
 8005e32:	4698      	movls	r8, r3
 8005e34:	4680      	movhi	r8, r0
 8005e36:	2303      	movs	r3, #3
 8005e38:	6123      	str	r3, [r4, #16]
 8005e3a:	9b05      	ldr	r3, [sp, #20]
 8005e3c:	f023 0204 	bic.w	r2, r3, #4
 8005e40:	6022      	str	r2, [r4, #0]
 8005e42:	f04f 0900 	mov.w	r9, #0
 8005e46:	9700      	str	r7, [sp, #0]
 8005e48:	4633      	mov	r3, r6
 8005e4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	4628      	mov	r0, r5
 8005e50:	f000 f9d8 	bl	8006204 <_printf_common>
 8005e54:	3001      	adds	r0, #1
 8005e56:	f040 8090 	bne.w	8005f7a <_printf_float+0x1e2>
 8005e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5e:	b00d      	add	sp, #52	; 0x34
 8005e60:	ecbd 8b02 	vpop	{d8}
 8005e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e68:	4642      	mov	r2, r8
 8005e6a:	464b      	mov	r3, r9
 8005e6c:	4640      	mov	r0, r8
 8005e6e:	4649      	mov	r1, r9
 8005e70:	f7fa fe8c 	bl	8000b8c <__aeabi_dcmpun>
 8005e74:	b140      	cbz	r0, 8005e88 <_printf_float+0xf0>
 8005e76:	464b      	mov	r3, r9
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	bfbc      	itt	lt
 8005e7c:	232d      	movlt	r3, #45	; 0x2d
 8005e7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e82:	487f      	ldr	r0, [pc, #508]	; (8006080 <_printf_float+0x2e8>)
 8005e84:	4b7f      	ldr	r3, [pc, #508]	; (8006084 <_printf_float+0x2ec>)
 8005e86:	e7d1      	b.n	8005e2c <_printf_float+0x94>
 8005e88:	6863      	ldr	r3, [r4, #4]
 8005e8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005e8e:	9206      	str	r2, [sp, #24]
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	d13f      	bne.n	8005f14 <_printf_float+0x17c>
 8005e94:	2306      	movs	r3, #6
 8005e96:	6063      	str	r3, [r4, #4]
 8005e98:	9b05      	ldr	r3, [sp, #20]
 8005e9a:	6861      	ldr	r1, [r4, #4]
 8005e9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	9303      	str	r3, [sp, #12]
 8005ea4:	ab0a      	add	r3, sp, #40	; 0x28
 8005ea6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005eaa:	ab09      	add	r3, sp, #36	; 0x24
 8005eac:	ec49 8b10 	vmov	d0, r8, r9
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	6022      	str	r2, [r4, #0]
 8005eb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005eb8:	4628      	mov	r0, r5
 8005eba:	f7ff fecd 	bl	8005c58 <__cvt>
 8005ebe:	9b06      	ldr	r3, [sp, #24]
 8005ec0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ec2:	2b47      	cmp	r3, #71	; 0x47
 8005ec4:	4680      	mov	r8, r0
 8005ec6:	d108      	bne.n	8005eda <_printf_float+0x142>
 8005ec8:	1cc8      	adds	r0, r1, #3
 8005eca:	db02      	blt.n	8005ed2 <_printf_float+0x13a>
 8005ecc:	6863      	ldr	r3, [r4, #4]
 8005ece:	4299      	cmp	r1, r3
 8005ed0:	dd41      	ble.n	8005f56 <_printf_float+0x1be>
 8005ed2:	f1ab 0b02 	sub.w	fp, fp, #2
 8005ed6:	fa5f fb8b 	uxtb.w	fp, fp
 8005eda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ede:	d820      	bhi.n	8005f22 <_printf_float+0x18a>
 8005ee0:	3901      	subs	r1, #1
 8005ee2:	465a      	mov	r2, fp
 8005ee4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ee8:	9109      	str	r1, [sp, #36]	; 0x24
 8005eea:	f7ff ff17 	bl	8005d1c <__exponent>
 8005eee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ef0:	1813      	adds	r3, r2, r0
 8005ef2:	2a01      	cmp	r2, #1
 8005ef4:	4681      	mov	r9, r0
 8005ef6:	6123      	str	r3, [r4, #16]
 8005ef8:	dc02      	bgt.n	8005f00 <_printf_float+0x168>
 8005efa:	6822      	ldr	r2, [r4, #0]
 8005efc:	07d2      	lsls	r2, r2, #31
 8005efe:	d501      	bpl.n	8005f04 <_printf_float+0x16c>
 8005f00:	3301      	adds	r3, #1
 8005f02:	6123      	str	r3, [r4, #16]
 8005f04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d09c      	beq.n	8005e46 <_printf_float+0xae>
 8005f0c:	232d      	movs	r3, #45	; 0x2d
 8005f0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f12:	e798      	b.n	8005e46 <_printf_float+0xae>
 8005f14:	9a06      	ldr	r2, [sp, #24]
 8005f16:	2a47      	cmp	r2, #71	; 0x47
 8005f18:	d1be      	bne.n	8005e98 <_printf_float+0x100>
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1bc      	bne.n	8005e98 <_printf_float+0x100>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e7b9      	b.n	8005e96 <_printf_float+0xfe>
 8005f22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005f26:	d118      	bne.n	8005f5a <_printf_float+0x1c2>
 8005f28:	2900      	cmp	r1, #0
 8005f2a:	6863      	ldr	r3, [r4, #4]
 8005f2c:	dd0b      	ble.n	8005f46 <_printf_float+0x1ae>
 8005f2e:	6121      	str	r1, [r4, #16]
 8005f30:	b913      	cbnz	r3, 8005f38 <_printf_float+0x1a0>
 8005f32:	6822      	ldr	r2, [r4, #0]
 8005f34:	07d0      	lsls	r0, r2, #31
 8005f36:	d502      	bpl.n	8005f3e <_printf_float+0x1a6>
 8005f38:	3301      	adds	r3, #1
 8005f3a:	440b      	add	r3, r1
 8005f3c:	6123      	str	r3, [r4, #16]
 8005f3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f40:	f04f 0900 	mov.w	r9, #0
 8005f44:	e7de      	b.n	8005f04 <_printf_float+0x16c>
 8005f46:	b913      	cbnz	r3, 8005f4e <_printf_float+0x1b6>
 8005f48:	6822      	ldr	r2, [r4, #0]
 8005f4a:	07d2      	lsls	r2, r2, #31
 8005f4c:	d501      	bpl.n	8005f52 <_printf_float+0x1ba>
 8005f4e:	3302      	adds	r3, #2
 8005f50:	e7f4      	b.n	8005f3c <_printf_float+0x1a4>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e7f2      	b.n	8005f3c <_printf_float+0x1a4>
 8005f56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f5c:	4299      	cmp	r1, r3
 8005f5e:	db05      	blt.n	8005f6c <_printf_float+0x1d4>
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	6121      	str	r1, [r4, #16]
 8005f64:	07d8      	lsls	r0, r3, #31
 8005f66:	d5ea      	bpl.n	8005f3e <_printf_float+0x1a6>
 8005f68:	1c4b      	adds	r3, r1, #1
 8005f6a:	e7e7      	b.n	8005f3c <_printf_float+0x1a4>
 8005f6c:	2900      	cmp	r1, #0
 8005f6e:	bfd4      	ite	le
 8005f70:	f1c1 0202 	rsble	r2, r1, #2
 8005f74:	2201      	movgt	r2, #1
 8005f76:	4413      	add	r3, r2
 8005f78:	e7e0      	b.n	8005f3c <_printf_float+0x1a4>
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	055a      	lsls	r2, r3, #21
 8005f7e:	d407      	bmi.n	8005f90 <_printf_float+0x1f8>
 8005f80:	6923      	ldr	r3, [r4, #16]
 8005f82:	4642      	mov	r2, r8
 8005f84:	4631      	mov	r1, r6
 8005f86:	4628      	mov	r0, r5
 8005f88:	47b8      	blx	r7
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	d12c      	bne.n	8005fe8 <_printf_float+0x250>
 8005f8e:	e764      	b.n	8005e5a <_printf_float+0xc2>
 8005f90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f94:	f240 80e0 	bls.w	8006158 <_printf_float+0x3c0>
 8005f98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f7fa fdc2 	bl	8000b28 <__aeabi_dcmpeq>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	d034      	beq.n	8006012 <_printf_float+0x27a>
 8005fa8:	4a37      	ldr	r2, [pc, #220]	; (8006088 <_printf_float+0x2f0>)
 8005faa:	2301      	movs	r3, #1
 8005fac:	4631      	mov	r1, r6
 8005fae:	4628      	mov	r0, r5
 8005fb0:	47b8      	blx	r7
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	f43f af51 	beq.w	8005e5a <_printf_float+0xc2>
 8005fb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	db02      	blt.n	8005fc6 <_printf_float+0x22e>
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	07d8      	lsls	r0, r3, #31
 8005fc4:	d510      	bpl.n	8005fe8 <_printf_float+0x250>
 8005fc6:	ee18 3a10 	vmov	r3, s16
 8005fca:	4652      	mov	r2, sl
 8005fcc:	4631      	mov	r1, r6
 8005fce:	4628      	mov	r0, r5
 8005fd0:	47b8      	blx	r7
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	f43f af41 	beq.w	8005e5a <_printf_float+0xc2>
 8005fd8:	f04f 0800 	mov.w	r8, #0
 8005fdc:	f104 091a 	add.w	r9, r4, #26
 8005fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	4543      	cmp	r3, r8
 8005fe6:	dc09      	bgt.n	8005ffc <_printf_float+0x264>
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	079b      	lsls	r3, r3, #30
 8005fec:	f100 8105 	bmi.w	80061fa <_printf_float+0x462>
 8005ff0:	68e0      	ldr	r0, [r4, #12]
 8005ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ff4:	4298      	cmp	r0, r3
 8005ff6:	bfb8      	it	lt
 8005ff8:	4618      	movlt	r0, r3
 8005ffa:	e730      	b.n	8005e5e <_printf_float+0xc6>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	464a      	mov	r2, r9
 8006000:	4631      	mov	r1, r6
 8006002:	4628      	mov	r0, r5
 8006004:	47b8      	blx	r7
 8006006:	3001      	adds	r0, #1
 8006008:	f43f af27 	beq.w	8005e5a <_printf_float+0xc2>
 800600c:	f108 0801 	add.w	r8, r8, #1
 8006010:	e7e6      	b.n	8005fe0 <_printf_float+0x248>
 8006012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006014:	2b00      	cmp	r3, #0
 8006016:	dc39      	bgt.n	800608c <_printf_float+0x2f4>
 8006018:	4a1b      	ldr	r2, [pc, #108]	; (8006088 <_printf_float+0x2f0>)
 800601a:	2301      	movs	r3, #1
 800601c:	4631      	mov	r1, r6
 800601e:	4628      	mov	r0, r5
 8006020:	47b8      	blx	r7
 8006022:	3001      	adds	r0, #1
 8006024:	f43f af19 	beq.w	8005e5a <_printf_float+0xc2>
 8006028:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800602c:	4313      	orrs	r3, r2
 800602e:	d102      	bne.n	8006036 <_printf_float+0x29e>
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	07d9      	lsls	r1, r3, #31
 8006034:	d5d8      	bpl.n	8005fe8 <_printf_float+0x250>
 8006036:	ee18 3a10 	vmov	r3, s16
 800603a:	4652      	mov	r2, sl
 800603c:	4631      	mov	r1, r6
 800603e:	4628      	mov	r0, r5
 8006040:	47b8      	blx	r7
 8006042:	3001      	adds	r0, #1
 8006044:	f43f af09 	beq.w	8005e5a <_printf_float+0xc2>
 8006048:	f04f 0900 	mov.w	r9, #0
 800604c:	f104 0a1a 	add.w	sl, r4, #26
 8006050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006052:	425b      	negs	r3, r3
 8006054:	454b      	cmp	r3, r9
 8006056:	dc01      	bgt.n	800605c <_printf_float+0x2c4>
 8006058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800605a:	e792      	b.n	8005f82 <_printf_float+0x1ea>
 800605c:	2301      	movs	r3, #1
 800605e:	4652      	mov	r2, sl
 8006060:	4631      	mov	r1, r6
 8006062:	4628      	mov	r0, r5
 8006064:	47b8      	blx	r7
 8006066:	3001      	adds	r0, #1
 8006068:	f43f aef7 	beq.w	8005e5a <_printf_float+0xc2>
 800606c:	f109 0901 	add.w	r9, r9, #1
 8006070:	e7ee      	b.n	8006050 <_printf_float+0x2b8>
 8006072:	bf00      	nop
 8006074:	7fefffff 	.word	0x7fefffff
 8006078:	080087fd 	.word	0x080087fd
 800607c:	08008801 	.word	0x08008801
 8006080:	08008809 	.word	0x08008809
 8006084:	08008805 	.word	0x08008805
 8006088:	0800880d 	.word	0x0800880d
 800608c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800608e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006090:	429a      	cmp	r2, r3
 8006092:	bfa8      	it	ge
 8006094:	461a      	movge	r2, r3
 8006096:	2a00      	cmp	r2, #0
 8006098:	4691      	mov	r9, r2
 800609a:	dc37      	bgt.n	800610c <_printf_float+0x374>
 800609c:	f04f 0b00 	mov.w	fp, #0
 80060a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060a4:	f104 021a 	add.w	r2, r4, #26
 80060a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060aa:	9305      	str	r3, [sp, #20]
 80060ac:	eba3 0309 	sub.w	r3, r3, r9
 80060b0:	455b      	cmp	r3, fp
 80060b2:	dc33      	bgt.n	800611c <_printf_float+0x384>
 80060b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060b8:	429a      	cmp	r2, r3
 80060ba:	db3b      	blt.n	8006134 <_printf_float+0x39c>
 80060bc:	6823      	ldr	r3, [r4, #0]
 80060be:	07da      	lsls	r2, r3, #31
 80060c0:	d438      	bmi.n	8006134 <_printf_float+0x39c>
 80060c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060c4:	9a05      	ldr	r2, [sp, #20]
 80060c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060c8:	1a9a      	subs	r2, r3, r2
 80060ca:	eba3 0901 	sub.w	r9, r3, r1
 80060ce:	4591      	cmp	r9, r2
 80060d0:	bfa8      	it	ge
 80060d2:	4691      	movge	r9, r2
 80060d4:	f1b9 0f00 	cmp.w	r9, #0
 80060d8:	dc35      	bgt.n	8006146 <_printf_float+0x3ae>
 80060da:	f04f 0800 	mov.w	r8, #0
 80060de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060e2:	f104 0a1a 	add.w	sl, r4, #26
 80060e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060ea:	1a9b      	subs	r3, r3, r2
 80060ec:	eba3 0309 	sub.w	r3, r3, r9
 80060f0:	4543      	cmp	r3, r8
 80060f2:	f77f af79 	ble.w	8005fe8 <_printf_float+0x250>
 80060f6:	2301      	movs	r3, #1
 80060f8:	4652      	mov	r2, sl
 80060fa:	4631      	mov	r1, r6
 80060fc:	4628      	mov	r0, r5
 80060fe:	47b8      	blx	r7
 8006100:	3001      	adds	r0, #1
 8006102:	f43f aeaa 	beq.w	8005e5a <_printf_float+0xc2>
 8006106:	f108 0801 	add.w	r8, r8, #1
 800610a:	e7ec      	b.n	80060e6 <_printf_float+0x34e>
 800610c:	4613      	mov	r3, r2
 800610e:	4631      	mov	r1, r6
 8006110:	4642      	mov	r2, r8
 8006112:	4628      	mov	r0, r5
 8006114:	47b8      	blx	r7
 8006116:	3001      	adds	r0, #1
 8006118:	d1c0      	bne.n	800609c <_printf_float+0x304>
 800611a:	e69e      	b.n	8005e5a <_printf_float+0xc2>
 800611c:	2301      	movs	r3, #1
 800611e:	4631      	mov	r1, r6
 8006120:	4628      	mov	r0, r5
 8006122:	9205      	str	r2, [sp, #20]
 8006124:	47b8      	blx	r7
 8006126:	3001      	adds	r0, #1
 8006128:	f43f ae97 	beq.w	8005e5a <_printf_float+0xc2>
 800612c:	9a05      	ldr	r2, [sp, #20]
 800612e:	f10b 0b01 	add.w	fp, fp, #1
 8006132:	e7b9      	b.n	80060a8 <_printf_float+0x310>
 8006134:	ee18 3a10 	vmov	r3, s16
 8006138:	4652      	mov	r2, sl
 800613a:	4631      	mov	r1, r6
 800613c:	4628      	mov	r0, r5
 800613e:	47b8      	blx	r7
 8006140:	3001      	adds	r0, #1
 8006142:	d1be      	bne.n	80060c2 <_printf_float+0x32a>
 8006144:	e689      	b.n	8005e5a <_printf_float+0xc2>
 8006146:	9a05      	ldr	r2, [sp, #20]
 8006148:	464b      	mov	r3, r9
 800614a:	4442      	add	r2, r8
 800614c:	4631      	mov	r1, r6
 800614e:	4628      	mov	r0, r5
 8006150:	47b8      	blx	r7
 8006152:	3001      	adds	r0, #1
 8006154:	d1c1      	bne.n	80060da <_printf_float+0x342>
 8006156:	e680      	b.n	8005e5a <_printf_float+0xc2>
 8006158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800615a:	2a01      	cmp	r2, #1
 800615c:	dc01      	bgt.n	8006162 <_printf_float+0x3ca>
 800615e:	07db      	lsls	r3, r3, #31
 8006160:	d538      	bpl.n	80061d4 <_printf_float+0x43c>
 8006162:	2301      	movs	r3, #1
 8006164:	4642      	mov	r2, r8
 8006166:	4631      	mov	r1, r6
 8006168:	4628      	mov	r0, r5
 800616a:	47b8      	blx	r7
 800616c:	3001      	adds	r0, #1
 800616e:	f43f ae74 	beq.w	8005e5a <_printf_float+0xc2>
 8006172:	ee18 3a10 	vmov	r3, s16
 8006176:	4652      	mov	r2, sl
 8006178:	4631      	mov	r1, r6
 800617a:	4628      	mov	r0, r5
 800617c:	47b8      	blx	r7
 800617e:	3001      	adds	r0, #1
 8006180:	f43f ae6b 	beq.w	8005e5a <_printf_float+0xc2>
 8006184:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006188:	2200      	movs	r2, #0
 800618a:	2300      	movs	r3, #0
 800618c:	f7fa fccc 	bl	8000b28 <__aeabi_dcmpeq>
 8006190:	b9d8      	cbnz	r0, 80061ca <_printf_float+0x432>
 8006192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006194:	f108 0201 	add.w	r2, r8, #1
 8006198:	3b01      	subs	r3, #1
 800619a:	4631      	mov	r1, r6
 800619c:	4628      	mov	r0, r5
 800619e:	47b8      	blx	r7
 80061a0:	3001      	adds	r0, #1
 80061a2:	d10e      	bne.n	80061c2 <_printf_float+0x42a>
 80061a4:	e659      	b.n	8005e5a <_printf_float+0xc2>
 80061a6:	2301      	movs	r3, #1
 80061a8:	4652      	mov	r2, sl
 80061aa:	4631      	mov	r1, r6
 80061ac:	4628      	mov	r0, r5
 80061ae:	47b8      	blx	r7
 80061b0:	3001      	adds	r0, #1
 80061b2:	f43f ae52 	beq.w	8005e5a <_printf_float+0xc2>
 80061b6:	f108 0801 	add.w	r8, r8, #1
 80061ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061bc:	3b01      	subs	r3, #1
 80061be:	4543      	cmp	r3, r8
 80061c0:	dcf1      	bgt.n	80061a6 <_printf_float+0x40e>
 80061c2:	464b      	mov	r3, r9
 80061c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80061c8:	e6dc      	b.n	8005f84 <_printf_float+0x1ec>
 80061ca:	f04f 0800 	mov.w	r8, #0
 80061ce:	f104 0a1a 	add.w	sl, r4, #26
 80061d2:	e7f2      	b.n	80061ba <_printf_float+0x422>
 80061d4:	2301      	movs	r3, #1
 80061d6:	4642      	mov	r2, r8
 80061d8:	e7df      	b.n	800619a <_printf_float+0x402>
 80061da:	2301      	movs	r3, #1
 80061dc:	464a      	mov	r2, r9
 80061de:	4631      	mov	r1, r6
 80061e0:	4628      	mov	r0, r5
 80061e2:	47b8      	blx	r7
 80061e4:	3001      	adds	r0, #1
 80061e6:	f43f ae38 	beq.w	8005e5a <_printf_float+0xc2>
 80061ea:	f108 0801 	add.w	r8, r8, #1
 80061ee:	68e3      	ldr	r3, [r4, #12]
 80061f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061f2:	1a5b      	subs	r3, r3, r1
 80061f4:	4543      	cmp	r3, r8
 80061f6:	dcf0      	bgt.n	80061da <_printf_float+0x442>
 80061f8:	e6fa      	b.n	8005ff0 <_printf_float+0x258>
 80061fa:	f04f 0800 	mov.w	r8, #0
 80061fe:	f104 0919 	add.w	r9, r4, #25
 8006202:	e7f4      	b.n	80061ee <_printf_float+0x456>

08006204 <_printf_common>:
 8006204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006208:	4616      	mov	r6, r2
 800620a:	4699      	mov	r9, r3
 800620c:	688a      	ldr	r2, [r1, #8]
 800620e:	690b      	ldr	r3, [r1, #16]
 8006210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006214:	4293      	cmp	r3, r2
 8006216:	bfb8      	it	lt
 8006218:	4613      	movlt	r3, r2
 800621a:	6033      	str	r3, [r6, #0]
 800621c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006220:	4607      	mov	r7, r0
 8006222:	460c      	mov	r4, r1
 8006224:	b10a      	cbz	r2, 800622a <_printf_common+0x26>
 8006226:	3301      	adds	r3, #1
 8006228:	6033      	str	r3, [r6, #0]
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	0699      	lsls	r1, r3, #26
 800622e:	bf42      	ittt	mi
 8006230:	6833      	ldrmi	r3, [r6, #0]
 8006232:	3302      	addmi	r3, #2
 8006234:	6033      	strmi	r3, [r6, #0]
 8006236:	6825      	ldr	r5, [r4, #0]
 8006238:	f015 0506 	ands.w	r5, r5, #6
 800623c:	d106      	bne.n	800624c <_printf_common+0x48>
 800623e:	f104 0a19 	add.w	sl, r4, #25
 8006242:	68e3      	ldr	r3, [r4, #12]
 8006244:	6832      	ldr	r2, [r6, #0]
 8006246:	1a9b      	subs	r3, r3, r2
 8006248:	42ab      	cmp	r3, r5
 800624a:	dc26      	bgt.n	800629a <_printf_common+0x96>
 800624c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006250:	1e13      	subs	r3, r2, #0
 8006252:	6822      	ldr	r2, [r4, #0]
 8006254:	bf18      	it	ne
 8006256:	2301      	movne	r3, #1
 8006258:	0692      	lsls	r2, r2, #26
 800625a:	d42b      	bmi.n	80062b4 <_printf_common+0xb0>
 800625c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006260:	4649      	mov	r1, r9
 8006262:	4638      	mov	r0, r7
 8006264:	47c0      	blx	r8
 8006266:	3001      	adds	r0, #1
 8006268:	d01e      	beq.n	80062a8 <_printf_common+0xa4>
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	68e5      	ldr	r5, [r4, #12]
 800626e:	6832      	ldr	r2, [r6, #0]
 8006270:	f003 0306 	and.w	r3, r3, #6
 8006274:	2b04      	cmp	r3, #4
 8006276:	bf08      	it	eq
 8006278:	1aad      	subeq	r5, r5, r2
 800627a:	68a3      	ldr	r3, [r4, #8]
 800627c:	6922      	ldr	r2, [r4, #16]
 800627e:	bf0c      	ite	eq
 8006280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006284:	2500      	movne	r5, #0
 8006286:	4293      	cmp	r3, r2
 8006288:	bfc4      	itt	gt
 800628a:	1a9b      	subgt	r3, r3, r2
 800628c:	18ed      	addgt	r5, r5, r3
 800628e:	2600      	movs	r6, #0
 8006290:	341a      	adds	r4, #26
 8006292:	42b5      	cmp	r5, r6
 8006294:	d11a      	bne.n	80062cc <_printf_common+0xc8>
 8006296:	2000      	movs	r0, #0
 8006298:	e008      	b.n	80062ac <_printf_common+0xa8>
 800629a:	2301      	movs	r3, #1
 800629c:	4652      	mov	r2, sl
 800629e:	4649      	mov	r1, r9
 80062a0:	4638      	mov	r0, r7
 80062a2:	47c0      	blx	r8
 80062a4:	3001      	adds	r0, #1
 80062a6:	d103      	bne.n	80062b0 <_printf_common+0xac>
 80062a8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062b0:	3501      	adds	r5, #1
 80062b2:	e7c6      	b.n	8006242 <_printf_common+0x3e>
 80062b4:	18e1      	adds	r1, r4, r3
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	2030      	movs	r0, #48	; 0x30
 80062ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062be:	4422      	add	r2, r4
 80062c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062c8:	3302      	adds	r3, #2
 80062ca:	e7c7      	b.n	800625c <_printf_common+0x58>
 80062cc:	2301      	movs	r3, #1
 80062ce:	4622      	mov	r2, r4
 80062d0:	4649      	mov	r1, r9
 80062d2:	4638      	mov	r0, r7
 80062d4:	47c0      	blx	r8
 80062d6:	3001      	adds	r0, #1
 80062d8:	d0e6      	beq.n	80062a8 <_printf_common+0xa4>
 80062da:	3601      	adds	r6, #1
 80062dc:	e7d9      	b.n	8006292 <_printf_common+0x8e>
	...

080062e0 <_printf_i>:
 80062e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062e4:	7e0f      	ldrb	r7, [r1, #24]
 80062e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062e8:	2f78      	cmp	r7, #120	; 0x78
 80062ea:	4691      	mov	r9, r2
 80062ec:	4680      	mov	r8, r0
 80062ee:	460c      	mov	r4, r1
 80062f0:	469a      	mov	sl, r3
 80062f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062f6:	d807      	bhi.n	8006308 <_printf_i+0x28>
 80062f8:	2f62      	cmp	r7, #98	; 0x62
 80062fa:	d80a      	bhi.n	8006312 <_printf_i+0x32>
 80062fc:	2f00      	cmp	r7, #0
 80062fe:	f000 80d8 	beq.w	80064b2 <_printf_i+0x1d2>
 8006302:	2f58      	cmp	r7, #88	; 0x58
 8006304:	f000 80a3 	beq.w	800644e <_printf_i+0x16e>
 8006308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800630c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006310:	e03a      	b.n	8006388 <_printf_i+0xa8>
 8006312:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006316:	2b15      	cmp	r3, #21
 8006318:	d8f6      	bhi.n	8006308 <_printf_i+0x28>
 800631a:	a101      	add	r1, pc, #4	; (adr r1, 8006320 <_printf_i+0x40>)
 800631c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006320:	08006379 	.word	0x08006379
 8006324:	0800638d 	.word	0x0800638d
 8006328:	08006309 	.word	0x08006309
 800632c:	08006309 	.word	0x08006309
 8006330:	08006309 	.word	0x08006309
 8006334:	08006309 	.word	0x08006309
 8006338:	0800638d 	.word	0x0800638d
 800633c:	08006309 	.word	0x08006309
 8006340:	08006309 	.word	0x08006309
 8006344:	08006309 	.word	0x08006309
 8006348:	08006309 	.word	0x08006309
 800634c:	08006499 	.word	0x08006499
 8006350:	080063bd 	.word	0x080063bd
 8006354:	0800647b 	.word	0x0800647b
 8006358:	08006309 	.word	0x08006309
 800635c:	08006309 	.word	0x08006309
 8006360:	080064bb 	.word	0x080064bb
 8006364:	08006309 	.word	0x08006309
 8006368:	080063bd 	.word	0x080063bd
 800636c:	08006309 	.word	0x08006309
 8006370:	08006309 	.word	0x08006309
 8006374:	08006483 	.word	0x08006483
 8006378:	682b      	ldr	r3, [r5, #0]
 800637a:	1d1a      	adds	r2, r3, #4
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	602a      	str	r2, [r5, #0]
 8006380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006388:	2301      	movs	r3, #1
 800638a:	e0a3      	b.n	80064d4 <_printf_i+0x1f4>
 800638c:	6820      	ldr	r0, [r4, #0]
 800638e:	6829      	ldr	r1, [r5, #0]
 8006390:	0606      	lsls	r6, r0, #24
 8006392:	f101 0304 	add.w	r3, r1, #4
 8006396:	d50a      	bpl.n	80063ae <_printf_i+0xce>
 8006398:	680e      	ldr	r6, [r1, #0]
 800639a:	602b      	str	r3, [r5, #0]
 800639c:	2e00      	cmp	r6, #0
 800639e:	da03      	bge.n	80063a8 <_printf_i+0xc8>
 80063a0:	232d      	movs	r3, #45	; 0x2d
 80063a2:	4276      	negs	r6, r6
 80063a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063a8:	485e      	ldr	r0, [pc, #376]	; (8006524 <_printf_i+0x244>)
 80063aa:	230a      	movs	r3, #10
 80063ac:	e019      	b.n	80063e2 <_printf_i+0x102>
 80063ae:	680e      	ldr	r6, [r1, #0]
 80063b0:	602b      	str	r3, [r5, #0]
 80063b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063b6:	bf18      	it	ne
 80063b8:	b236      	sxthne	r6, r6
 80063ba:	e7ef      	b.n	800639c <_printf_i+0xbc>
 80063bc:	682b      	ldr	r3, [r5, #0]
 80063be:	6820      	ldr	r0, [r4, #0]
 80063c0:	1d19      	adds	r1, r3, #4
 80063c2:	6029      	str	r1, [r5, #0]
 80063c4:	0601      	lsls	r1, r0, #24
 80063c6:	d501      	bpl.n	80063cc <_printf_i+0xec>
 80063c8:	681e      	ldr	r6, [r3, #0]
 80063ca:	e002      	b.n	80063d2 <_printf_i+0xf2>
 80063cc:	0646      	lsls	r6, r0, #25
 80063ce:	d5fb      	bpl.n	80063c8 <_printf_i+0xe8>
 80063d0:	881e      	ldrh	r6, [r3, #0]
 80063d2:	4854      	ldr	r0, [pc, #336]	; (8006524 <_printf_i+0x244>)
 80063d4:	2f6f      	cmp	r7, #111	; 0x6f
 80063d6:	bf0c      	ite	eq
 80063d8:	2308      	moveq	r3, #8
 80063da:	230a      	movne	r3, #10
 80063dc:	2100      	movs	r1, #0
 80063de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063e2:	6865      	ldr	r5, [r4, #4]
 80063e4:	60a5      	str	r5, [r4, #8]
 80063e6:	2d00      	cmp	r5, #0
 80063e8:	bfa2      	ittt	ge
 80063ea:	6821      	ldrge	r1, [r4, #0]
 80063ec:	f021 0104 	bicge.w	r1, r1, #4
 80063f0:	6021      	strge	r1, [r4, #0]
 80063f2:	b90e      	cbnz	r6, 80063f8 <_printf_i+0x118>
 80063f4:	2d00      	cmp	r5, #0
 80063f6:	d04d      	beq.n	8006494 <_printf_i+0x1b4>
 80063f8:	4615      	mov	r5, r2
 80063fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80063fe:	fb03 6711 	mls	r7, r3, r1, r6
 8006402:	5dc7      	ldrb	r7, [r0, r7]
 8006404:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006408:	4637      	mov	r7, r6
 800640a:	42bb      	cmp	r3, r7
 800640c:	460e      	mov	r6, r1
 800640e:	d9f4      	bls.n	80063fa <_printf_i+0x11a>
 8006410:	2b08      	cmp	r3, #8
 8006412:	d10b      	bne.n	800642c <_printf_i+0x14c>
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	07de      	lsls	r6, r3, #31
 8006418:	d508      	bpl.n	800642c <_printf_i+0x14c>
 800641a:	6923      	ldr	r3, [r4, #16]
 800641c:	6861      	ldr	r1, [r4, #4]
 800641e:	4299      	cmp	r1, r3
 8006420:	bfde      	ittt	le
 8006422:	2330      	movle	r3, #48	; 0x30
 8006424:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006428:	f105 35ff 	addle.w	r5, r5, #4294967295
 800642c:	1b52      	subs	r2, r2, r5
 800642e:	6122      	str	r2, [r4, #16]
 8006430:	f8cd a000 	str.w	sl, [sp]
 8006434:	464b      	mov	r3, r9
 8006436:	aa03      	add	r2, sp, #12
 8006438:	4621      	mov	r1, r4
 800643a:	4640      	mov	r0, r8
 800643c:	f7ff fee2 	bl	8006204 <_printf_common>
 8006440:	3001      	adds	r0, #1
 8006442:	d14c      	bne.n	80064de <_printf_i+0x1fe>
 8006444:	f04f 30ff 	mov.w	r0, #4294967295
 8006448:	b004      	add	sp, #16
 800644a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800644e:	4835      	ldr	r0, [pc, #212]	; (8006524 <_printf_i+0x244>)
 8006450:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006454:	6829      	ldr	r1, [r5, #0]
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	f851 6b04 	ldr.w	r6, [r1], #4
 800645c:	6029      	str	r1, [r5, #0]
 800645e:	061d      	lsls	r5, r3, #24
 8006460:	d514      	bpl.n	800648c <_printf_i+0x1ac>
 8006462:	07df      	lsls	r7, r3, #31
 8006464:	bf44      	itt	mi
 8006466:	f043 0320 	orrmi.w	r3, r3, #32
 800646a:	6023      	strmi	r3, [r4, #0]
 800646c:	b91e      	cbnz	r6, 8006476 <_printf_i+0x196>
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	f023 0320 	bic.w	r3, r3, #32
 8006474:	6023      	str	r3, [r4, #0]
 8006476:	2310      	movs	r3, #16
 8006478:	e7b0      	b.n	80063dc <_printf_i+0xfc>
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	f043 0320 	orr.w	r3, r3, #32
 8006480:	6023      	str	r3, [r4, #0]
 8006482:	2378      	movs	r3, #120	; 0x78
 8006484:	4828      	ldr	r0, [pc, #160]	; (8006528 <_printf_i+0x248>)
 8006486:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800648a:	e7e3      	b.n	8006454 <_printf_i+0x174>
 800648c:	0659      	lsls	r1, r3, #25
 800648e:	bf48      	it	mi
 8006490:	b2b6      	uxthmi	r6, r6
 8006492:	e7e6      	b.n	8006462 <_printf_i+0x182>
 8006494:	4615      	mov	r5, r2
 8006496:	e7bb      	b.n	8006410 <_printf_i+0x130>
 8006498:	682b      	ldr	r3, [r5, #0]
 800649a:	6826      	ldr	r6, [r4, #0]
 800649c:	6961      	ldr	r1, [r4, #20]
 800649e:	1d18      	adds	r0, r3, #4
 80064a0:	6028      	str	r0, [r5, #0]
 80064a2:	0635      	lsls	r5, r6, #24
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	d501      	bpl.n	80064ac <_printf_i+0x1cc>
 80064a8:	6019      	str	r1, [r3, #0]
 80064aa:	e002      	b.n	80064b2 <_printf_i+0x1d2>
 80064ac:	0670      	lsls	r0, r6, #25
 80064ae:	d5fb      	bpl.n	80064a8 <_printf_i+0x1c8>
 80064b0:	8019      	strh	r1, [r3, #0]
 80064b2:	2300      	movs	r3, #0
 80064b4:	6123      	str	r3, [r4, #16]
 80064b6:	4615      	mov	r5, r2
 80064b8:	e7ba      	b.n	8006430 <_printf_i+0x150>
 80064ba:	682b      	ldr	r3, [r5, #0]
 80064bc:	1d1a      	adds	r2, r3, #4
 80064be:	602a      	str	r2, [r5, #0]
 80064c0:	681d      	ldr	r5, [r3, #0]
 80064c2:	6862      	ldr	r2, [r4, #4]
 80064c4:	2100      	movs	r1, #0
 80064c6:	4628      	mov	r0, r5
 80064c8:	f7f9 feba 	bl	8000240 <memchr>
 80064cc:	b108      	cbz	r0, 80064d2 <_printf_i+0x1f2>
 80064ce:	1b40      	subs	r0, r0, r5
 80064d0:	6060      	str	r0, [r4, #4]
 80064d2:	6863      	ldr	r3, [r4, #4]
 80064d4:	6123      	str	r3, [r4, #16]
 80064d6:	2300      	movs	r3, #0
 80064d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064dc:	e7a8      	b.n	8006430 <_printf_i+0x150>
 80064de:	6923      	ldr	r3, [r4, #16]
 80064e0:	462a      	mov	r2, r5
 80064e2:	4649      	mov	r1, r9
 80064e4:	4640      	mov	r0, r8
 80064e6:	47d0      	blx	sl
 80064e8:	3001      	adds	r0, #1
 80064ea:	d0ab      	beq.n	8006444 <_printf_i+0x164>
 80064ec:	6823      	ldr	r3, [r4, #0]
 80064ee:	079b      	lsls	r3, r3, #30
 80064f0:	d413      	bmi.n	800651a <_printf_i+0x23a>
 80064f2:	68e0      	ldr	r0, [r4, #12]
 80064f4:	9b03      	ldr	r3, [sp, #12]
 80064f6:	4298      	cmp	r0, r3
 80064f8:	bfb8      	it	lt
 80064fa:	4618      	movlt	r0, r3
 80064fc:	e7a4      	b.n	8006448 <_printf_i+0x168>
 80064fe:	2301      	movs	r3, #1
 8006500:	4632      	mov	r2, r6
 8006502:	4649      	mov	r1, r9
 8006504:	4640      	mov	r0, r8
 8006506:	47d0      	blx	sl
 8006508:	3001      	adds	r0, #1
 800650a:	d09b      	beq.n	8006444 <_printf_i+0x164>
 800650c:	3501      	adds	r5, #1
 800650e:	68e3      	ldr	r3, [r4, #12]
 8006510:	9903      	ldr	r1, [sp, #12]
 8006512:	1a5b      	subs	r3, r3, r1
 8006514:	42ab      	cmp	r3, r5
 8006516:	dcf2      	bgt.n	80064fe <_printf_i+0x21e>
 8006518:	e7eb      	b.n	80064f2 <_printf_i+0x212>
 800651a:	2500      	movs	r5, #0
 800651c:	f104 0619 	add.w	r6, r4, #25
 8006520:	e7f5      	b.n	800650e <_printf_i+0x22e>
 8006522:	bf00      	nop
 8006524:	0800880f 	.word	0x0800880f
 8006528:	08008820 	.word	0x08008820

0800652c <realloc>:
 800652c:	4b02      	ldr	r3, [pc, #8]	; (8006538 <realloc+0xc>)
 800652e:	460a      	mov	r2, r1
 8006530:	4601      	mov	r1, r0
 8006532:	6818      	ldr	r0, [r3, #0]
 8006534:	f001 bd74 	b.w	8008020 <_realloc_r>
 8006538:	20001f74 	.word	0x20001f74

0800653c <_sbrk_r>:
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	4d06      	ldr	r5, [pc, #24]	; (8006558 <_sbrk_r+0x1c>)
 8006540:	2300      	movs	r3, #0
 8006542:	4604      	mov	r4, r0
 8006544:	4608      	mov	r0, r1
 8006546:	602b      	str	r3, [r5, #0]
 8006548:	f7fa ffe6 	bl	8001518 <_sbrk>
 800654c:	1c43      	adds	r3, r0, #1
 800654e:	d102      	bne.n	8006556 <_sbrk_r+0x1a>
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	b103      	cbz	r3, 8006556 <_sbrk_r+0x1a>
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	bd38      	pop	{r3, r4, r5, pc}
 8006558:	200038f0 	.word	0x200038f0

0800655c <siprintf>:
 800655c:	b40e      	push	{r1, r2, r3}
 800655e:	b500      	push	{lr}
 8006560:	b09c      	sub	sp, #112	; 0x70
 8006562:	ab1d      	add	r3, sp, #116	; 0x74
 8006564:	9002      	str	r0, [sp, #8]
 8006566:	9006      	str	r0, [sp, #24]
 8006568:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800656c:	4809      	ldr	r0, [pc, #36]	; (8006594 <siprintf+0x38>)
 800656e:	9107      	str	r1, [sp, #28]
 8006570:	9104      	str	r1, [sp, #16]
 8006572:	4909      	ldr	r1, [pc, #36]	; (8006598 <siprintf+0x3c>)
 8006574:	f853 2b04 	ldr.w	r2, [r3], #4
 8006578:	9105      	str	r1, [sp, #20]
 800657a:	6800      	ldr	r0, [r0, #0]
 800657c:	9301      	str	r3, [sp, #4]
 800657e:	a902      	add	r1, sp, #8
 8006580:	f001 fdd8 	bl	8008134 <_svfiprintf_r>
 8006584:	9b02      	ldr	r3, [sp, #8]
 8006586:	2200      	movs	r2, #0
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	b01c      	add	sp, #112	; 0x70
 800658c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006590:	b003      	add	sp, #12
 8006592:	4770      	bx	lr
 8006594:	20001f74 	.word	0x20001f74
 8006598:	ffff0208 	.word	0xffff0208

0800659c <strcat>:
 800659c:	b510      	push	{r4, lr}
 800659e:	4602      	mov	r2, r0
 80065a0:	7814      	ldrb	r4, [r2, #0]
 80065a2:	4613      	mov	r3, r2
 80065a4:	3201      	adds	r2, #1
 80065a6:	2c00      	cmp	r4, #0
 80065a8:	d1fa      	bne.n	80065a0 <strcat+0x4>
 80065aa:	3b01      	subs	r3, #1
 80065ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065b4:	2a00      	cmp	r2, #0
 80065b6:	d1f9      	bne.n	80065ac <strcat+0x10>
 80065b8:	bd10      	pop	{r4, pc}

080065ba <strcpy>:
 80065ba:	4603      	mov	r3, r0
 80065bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065c0:	f803 2b01 	strb.w	r2, [r3], #1
 80065c4:	2a00      	cmp	r2, #0
 80065c6:	d1f9      	bne.n	80065bc <strcpy+0x2>
 80065c8:	4770      	bx	lr
	...

080065cc <_vsiprintf_r>:
 80065cc:	b500      	push	{lr}
 80065ce:	b09b      	sub	sp, #108	; 0x6c
 80065d0:	9100      	str	r1, [sp, #0]
 80065d2:	9104      	str	r1, [sp, #16]
 80065d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065d8:	9105      	str	r1, [sp, #20]
 80065da:	9102      	str	r1, [sp, #8]
 80065dc:	4905      	ldr	r1, [pc, #20]	; (80065f4 <_vsiprintf_r+0x28>)
 80065de:	9103      	str	r1, [sp, #12]
 80065e0:	4669      	mov	r1, sp
 80065e2:	f001 fda7 	bl	8008134 <_svfiprintf_r>
 80065e6:	9b00      	ldr	r3, [sp, #0]
 80065e8:	2200      	movs	r2, #0
 80065ea:	701a      	strb	r2, [r3, #0]
 80065ec:	b01b      	add	sp, #108	; 0x6c
 80065ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80065f2:	bf00      	nop
 80065f4:	ffff0208 	.word	0xffff0208

080065f8 <vsiprintf>:
 80065f8:	4613      	mov	r3, r2
 80065fa:	460a      	mov	r2, r1
 80065fc:	4601      	mov	r1, r0
 80065fe:	4802      	ldr	r0, [pc, #8]	; (8006608 <vsiprintf+0x10>)
 8006600:	6800      	ldr	r0, [r0, #0]
 8006602:	f7ff bfe3 	b.w	80065cc <_vsiprintf_r>
 8006606:	bf00      	nop
 8006608:	20001f74 	.word	0x20001f74

0800660c <__swbuf_r>:
 800660c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660e:	460e      	mov	r6, r1
 8006610:	4614      	mov	r4, r2
 8006612:	4605      	mov	r5, r0
 8006614:	b118      	cbz	r0, 800661e <__swbuf_r+0x12>
 8006616:	6983      	ldr	r3, [r0, #24]
 8006618:	b90b      	cbnz	r3, 800661e <__swbuf_r+0x12>
 800661a:	f001 f851 	bl	80076c0 <__sinit>
 800661e:	4b21      	ldr	r3, [pc, #132]	; (80066a4 <__swbuf_r+0x98>)
 8006620:	429c      	cmp	r4, r3
 8006622:	d12b      	bne.n	800667c <__swbuf_r+0x70>
 8006624:	686c      	ldr	r4, [r5, #4]
 8006626:	69a3      	ldr	r3, [r4, #24]
 8006628:	60a3      	str	r3, [r4, #8]
 800662a:	89a3      	ldrh	r3, [r4, #12]
 800662c:	071a      	lsls	r2, r3, #28
 800662e:	d52f      	bpl.n	8006690 <__swbuf_r+0x84>
 8006630:	6923      	ldr	r3, [r4, #16]
 8006632:	b36b      	cbz	r3, 8006690 <__swbuf_r+0x84>
 8006634:	6923      	ldr	r3, [r4, #16]
 8006636:	6820      	ldr	r0, [r4, #0]
 8006638:	1ac0      	subs	r0, r0, r3
 800663a:	6963      	ldr	r3, [r4, #20]
 800663c:	b2f6      	uxtb	r6, r6
 800663e:	4283      	cmp	r3, r0
 8006640:	4637      	mov	r7, r6
 8006642:	dc04      	bgt.n	800664e <__swbuf_r+0x42>
 8006644:	4621      	mov	r1, r4
 8006646:	4628      	mov	r0, r5
 8006648:	f000 ffa6 	bl	8007598 <_fflush_r>
 800664c:	bb30      	cbnz	r0, 800669c <__swbuf_r+0x90>
 800664e:	68a3      	ldr	r3, [r4, #8]
 8006650:	3b01      	subs	r3, #1
 8006652:	60a3      	str	r3, [r4, #8]
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	6022      	str	r2, [r4, #0]
 800665a:	701e      	strb	r6, [r3, #0]
 800665c:	6963      	ldr	r3, [r4, #20]
 800665e:	3001      	adds	r0, #1
 8006660:	4283      	cmp	r3, r0
 8006662:	d004      	beq.n	800666e <__swbuf_r+0x62>
 8006664:	89a3      	ldrh	r3, [r4, #12]
 8006666:	07db      	lsls	r3, r3, #31
 8006668:	d506      	bpl.n	8006678 <__swbuf_r+0x6c>
 800666a:	2e0a      	cmp	r6, #10
 800666c:	d104      	bne.n	8006678 <__swbuf_r+0x6c>
 800666e:	4621      	mov	r1, r4
 8006670:	4628      	mov	r0, r5
 8006672:	f000 ff91 	bl	8007598 <_fflush_r>
 8006676:	b988      	cbnz	r0, 800669c <__swbuf_r+0x90>
 8006678:	4638      	mov	r0, r7
 800667a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800667c:	4b0a      	ldr	r3, [pc, #40]	; (80066a8 <__swbuf_r+0x9c>)
 800667e:	429c      	cmp	r4, r3
 8006680:	d101      	bne.n	8006686 <__swbuf_r+0x7a>
 8006682:	68ac      	ldr	r4, [r5, #8]
 8006684:	e7cf      	b.n	8006626 <__swbuf_r+0x1a>
 8006686:	4b09      	ldr	r3, [pc, #36]	; (80066ac <__swbuf_r+0xa0>)
 8006688:	429c      	cmp	r4, r3
 800668a:	bf08      	it	eq
 800668c:	68ec      	ldreq	r4, [r5, #12]
 800668e:	e7ca      	b.n	8006626 <__swbuf_r+0x1a>
 8006690:	4621      	mov	r1, r4
 8006692:	4628      	mov	r0, r5
 8006694:	f000 f80c 	bl	80066b0 <__swsetup_r>
 8006698:	2800      	cmp	r0, #0
 800669a:	d0cb      	beq.n	8006634 <__swbuf_r+0x28>
 800669c:	f04f 37ff 	mov.w	r7, #4294967295
 80066a0:	e7ea      	b.n	8006678 <__swbuf_r+0x6c>
 80066a2:	bf00      	nop
 80066a4:	080088e4 	.word	0x080088e4
 80066a8:	08008904 	.word	0x08008904
 80066ac:	080088c4 	.word	0x080088c4

080066b0 <__swsetup_r>:
 80066b0:	4b32      	ldr	r3, [pc, #200]	; (800677c <__swsetup_r+0xcc>)
 80066b2:	b570      	push	{r4, r5, r6, lr}
 80066b4:	681d      	ldr	r5, [r3, #0]
 80066b6:	4606      	mov	r6, r0
 80066b8:	460c      	mov	r4, r1
 80066ba:	b125      	cbz	r5, 80066c6 <__swsetup_r+0x16>
 80066bc:	69ab      	ldr	r3, [r5, #24]
 80066be:	b913      	cbnz	r3, 80066c6 <__swsetup_r+0x16>
 80066c0:	4628      	mov	r0, r5
 80066c2:	f000 fffd 	bl	80076c0 <__sinit>
 80066c6:	4b2e      	ldr	r3, [pc, #184]	; (8006780 <__swsetup_r+0xd0>)
 80066c8:	429c      	cmp	r4, r3
 80066ca:	d10f      	bne.n	80066ec <__swsetup_r+0x3c>
 80066cc:	686c      	ldr	r4, [r5, #4]
 80066ce:	89a3      	ldrh	r3, [r4, #12]
 80066d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066d4:	0719      	lsls	r1, r3, #28
 80066d6:	d42c      	bmi.n	8006732 <__swsetup_r+0x82>
 80066d8:	06dd      	lsls	r5, r3, #27
 80066da:	d411      	bmi.n	8006700 <__swsetup_r+0x50>
 80066dc:	2309      	movs	r3, #9
 80066de:	6033      	str	r3, [r6, #0]
 80066e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80066e4:	81a3      	strh	r3, [r4, #12]
 80066e6:	f04f 30ff 	mov.w	r0, #4294967295
 80066ea:	e03e      	b.n	800676a <__swsetup_r+0xba>
 80066ec:	4b25      	ldr	r3, [pc, #148]	; (8006784 <__swsetup_r+0xd4>)
 80066ee:	429c      	cmp	r4, r3
 80066f0:	d101      	bne.n	80066f6 <__swsetup_r+0x46>
 80066f2:	68ac      	ldr	r4, [r5, #8]
 80066f4:	e7eb      	b.n	80066ce <__swsetup_r+0x1e>
 80066f6:	4b24      	ldr	r3, [pc, #144]	; (8006788 <__swsetup_r+0xd8>)
 80066f8:	429c      	cmp	r4, r3
 80066fa:	bf08      	it	eq
 80066fc:	68ec      	ldreq	r4, [r5, #12]
 80066fe:	e7e6      	b.n	80066ce <__swsetup_r+0x1e>
 8006700:	0758      	lsls	r0, r3, #29
 8006702:	d512      	bpl.n	800672a <__swsetup_r+0x7a>
 8006704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006706:	b141      	cbz	r1, 800671a <__swsetup_r+0x6a>
 8006708:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800670c:	4299      	cmp	r1, r3
 800670e:	d002      	beq.n	8006716 <__swsetup_r+0x66>
 8006710:	4630      	mov	r0, r6
 8006712:	f7ff f867 	bl	80057e4 <_free_r>
 8006716:	2300      	movs	r3, #0
 8006718:	6363      	str	r3, [r4, #52]	; 0x34
 800671a:	89a3      	ldrh	r3, [r4, #12]
 800671c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006720:	81a3      	strh	r3, [r4, #12]
 8006722:	2300      	movs	r3, #0
 8006724:	6063      	str	r3, [r4, #4]
 8006726:	6923      	ldr	r3, [r4, #16]
 8006728:	6023      	str	r3, [r4, #0]
 800672a:	89a3      	ldrh	r3, [r4, #12]
 800672c:	f043 0308 	orr.w	r3, r3, #8
 8006730:	81a3      	strh	r3, [r4, #12]
 8006732:	6923      	ldr	r3, [r4, #16]
 8006734:	b94b      	cbnz	r3, 800674a <__swsetup_r+0x9a>
 8006736:	89a3      	ldrh	r3, [r4, #12]
 8006738:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800673c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006740:	d003      	beq.n	800674a <__swsetup_r+0x9a>
 8006742:	4621      	mov	r1, r4
 8006744:	4630      	mov	r0, r6
 8006746:	f001 f885 	bl	8007854 <__smakebuf_r>
 800674a:	89a0      	ldrh	r0, [r4, #12]
 800674c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006750:	f010 0301 	ands.w	r3, r0, #1
 8006754:	d00a      	beq.n	800676c <__swsetup_r+0xbc>
 8006756:	2300      	movs	r3, #0
 8006758:	60a3      	str	r3, [r4, #8]
 800675a:	6963      	ldr	r3, [r4, #20]
 800675c:	425b      	negs	r3, r3
 800675e:	61a3      	str	r3, [r4, #24]
 8006760:	6923      	ldr	r3, [r4, #16]
 8006762:	b943      	cbnz	r3, 8006776 <__swsetup_r+0xc6>
 8006764:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006768:	d1ba      	bne.n	80066e0 <__swsetup_r+0x30>
 800676a:	bd70      	pop	{r4, r5, r6, pc}
 800676c:	0781      	lsls	r1, r0, #30
 800676e:	bf58      	it	pl
 8006770:	6963      	ldrpl	r3, [r4, #20]
 8006772:	60a3      	str	r3, [r4, #8]
 8006774:	e7f4      	b.n	8006760 <__swsetup_r+0xb0>
 8006776:	2000      	movs	r0, #0
 8006778:	e7f7      	b.n	800676a <__swsetup_r+0xba>
 800677a:	bf00      	nop
 800677c:	20001f74 	.word	0x20001f74
 8006780:	080088e4 	.word	0x080088e4
 8006784:	08008904 	.word	0x08008904
 8006788:	080088c4 	.word	0x080088c4

0800678c <abort>:
 800678c:	b508      	push	{r3, lr}
 800678e:	2006      	movs	r0, #6
 8006790:	f001 fdf8 	bl	8008384 <raise>
 8006794:	2001      	movs	r0, #1
 8006796:	f7fa fe47 	bl	8001428 <_exit>

0800679a <quorem>:
 800679a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679e:	6903      	ldr	r3, [r0, #16]
 80067a0:	690c      	ldr	r4, [r1, #16]
 80067a2:	42a3      	cmp	r3, r4
 80067a4:	4607      	mov	r7, r0
 80067a6:	f2c0 8081 	blt.w	80068ac <quorem+0x112>
 80067aa:	3c01      	subs	r4, #1
 80067ac:	f101 0814 	add.w	r8, r1, #20
 80067b0:	f100 0514 	add.w	r5, r0, #20
 80067b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067b8:	9301      	str	r3, [sp, #4]
 80067ba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80067be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067c2:	3301      	adds	r3, #1
 80067c4:	429a      	cmp	r2, r3
 80067c6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80067ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80067ce:	fbb2 f6f3 	udiv	r6, r2, r3
 80067d2:	d331      	bcc.n	8006838 <quorem+0x9e>
 80067d4:	f04f 0e00 	mov.w	lr, #0
 80067d8:	4640      	mov	r0, r8
 80067da:	46ac      	mov	ip, r5
 80067dc:	46f2      	mov	sl, lr
 80067de:	f850 2b04 	ldr.w	r2, [r0], #4
 80067e2:	b293      	uxth	r3, r2
 80067e4:	fb06 e303 	mla	r3, r6, r3, lr
 80067e8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	ebaa 0303 	sub.w	r3, sl, r3
 80067f2:	f8dc a000 	ldr.w	sl, [ip]
 80067f6:	0c12      	lsrs	r2, r2, #16
 80067f8:	fa13 f38a 	uxtah	r3, r3, sl
 80067fc:	fb06 e202 	mla	r2, r6, r2, lr
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	9b00      	ldr	r3, [sp, #0]
 8006804:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006808:	b292      	uxth	r2, r2
 800680a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800680e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006812:	f8bd 3000 	ldrh.w	r3, [sp]
 8006816:	4581      	cmp	r9, r0
 8006818:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800681c:	f84c 3b04 	str.w	r3, [ip], #4
 8006820:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006824:	d2db      	bcs.n	80067de <quorem+0x44>
 8006826:	f855 300b 	ldr.w	r3, [r5, fp]
 800682a:	b92b      	cbnz	r3, 8006838 <quorem+0x9e>
 800682c:	9b01      	ldr	r3, [sp, #4]
 800682e:	3b04      	subs	r3, #4
 8006830:	429d      	cmp	r5, r3
 8006832:	461a      	mov	r2, r3
 8006834:	d32e      	bcc.n	8006894 <quorem+0xfa>
 8006836:	613c      	str	r4, [r7, #16]
 8006838:	4638      	mov	r0, r7
 800683a:	f001 fad9 	bl	8007df0 <__mcmp>
 800683e:	2800      	cmp	r0, #0
 8006840:	db24      	blt.n	800688c <quorem+0xf2>
 8006842:	3601      	adds	r6, #1
 8006844:	4628      	mov	r0, r5
 8006846:	f04f 0c00 	mov.w	ip, #0
 800684a:	f858 2b04 	ldr.w	r2, [r8], #4
 800684e:	f8d0 e000 	ldr.w	lr, [r0]
 8006852:	b293      	uxth	r3, r2
 8006854:	ebac 0303 	sub.w	r3, ip, r3
 8006858:	0c12      	lsrs	r2, r2, #16
 800685a:	fa13 f38e 	uxtah	r3, r3, lr
 800685e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006862:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006866:	b29b      	uxth	r3, r3
 8006868:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800686c:	45c1      	cmp	r9, r8
 800686e:	f840 3b04 	str.w	r3, [r0], #4
 8006872:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006876:	d2e8      	bcs.n	800684a <quorem+0xb0>
 8006878:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800687c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006880:	b922      	cbnz	r2, 800688c <quorem+0xf2>
 8006882:	3b04      	subs	r3, #4
 8006884:	429d      	cmp	r5, r3
 8006886:	461a      	mov	r2, r3
 8006888:	d30a      	bcc.n	80068a0 <quorem+0x106>
 800688a:	613c      	str	r4, [r7, #16]
 800688c:	4630      	mov	r0, r6
 800688e:	b003      	add	sp, #12
 8006890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006894:	6812      	ldr	r2, [r2, #0]
 8006896:	3b04      	subs	r3, #4
 8006898:	2a00      	cmp	r2, #0
 800689a:	d1cc      	bne.n	8006836 <quorem+0x9c>
 800689c:	3c01      	subs	r4, #1
 800689e:	e7c7      	b.n	8006830 <quorem+0x96>
 80068a0:	6812      	ldr	r2, [r2, #0]
 80068a2:	3b04      	subs	r3, #4
 80068a4:	2a00      	cmp	r2, #0
 80068a6:	d1f0      	bne.n	800688a <quorem+0xf0>
 80068a8:	3c01      	subs	r4, #1
 80068aa:	e7eb      	b.n	8006884 <quorem+0xea>
 80068ac:	2000      	movs	r0, #0
 80068ae:	e7ee      	b.n	800688e <quorem+0xf4>

080068b0 <_dtoa_r>:
 80068b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b4:	ed2d 8b04 	vpush	{d8-d9}
 80068b8:	ec57 6b10 	vmov	r6, r7, d0
 80068bc:	b093      	sub	sp, #76	; 0x4c
 80068be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80068c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80068c4:	9106      	str	r1, [sp, #24]
 80068c6:	ee10 aa10 	vmov	sl, s0
 80068ca:	4604      	mov	r4, r0
 80068cc:	9209      	str	r2, [sp, #36]	; 0x24
 80068ce:	930c      	str	r3, [sp, #48]	; 0x30
 80068d0:	46bb      	mov	fp, r7
 80068d2:	b975      	cbnz	r5, 80068f2 <_dtoa_r+0x42>
 80068d4:	2010      	movs	r0, #16
 80068d6:	f7fe ff45 	bl	8005764 <malloc>
 80068da:	4602      	mov	r2, r0
 80068dc:	6260      	str	r0, [r4, #36]	; 0x24
 80068de:	b920      	cbnz	r0, 80068ea <_dtoa_r+0x3a>
 80068e0:	4ba7      	ldr	r3, [pc, #668]	; (8006b80 <_dtoa_r+0x2d0>)
 80068e2:	21ea      	movs	r1, #234	; 0xea
 80068e4:	48a7      	ldr	r0, [pc, #668]	; (8006b84 <_dtoa_r+0x2d4>)
 80068e6:	f7fe fee3 	bl	80056b0 <__assert_func>
 80068ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80068ee:	6005      	str	r5, [r0, #0]
 80068f0:	60c5      	str	r5, [r0, #12]
 80068f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068f4:	6819      	ldr	r1, [r3, #0]
 80068f6:	b151      	cbz	r1, 800690e <_dtoa_r+0x5e>
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	604a      	str	r2, [r1, #4]
 80068fc:	2301      	movs	r3, #1
 80068fe:	4093      	lsls	r3, r2
 8006900:	608b      	str	r3, [r1, #8]
 8006902:	4620      	mov	r0, r4
 8006904:	f001 f832 	bl	800796c <_Bfree>
 8006908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800690a:	2200      	movs	r2, #0
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	1e3b      	subs	r3, r7, #0
 8006910:	bfaa      	itet	ge
 8006912:	2300      	movge	r3, #0
 8006914:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006918:	f8c8 3000 	strge.w	r3, [r8]
 800691c:	4b9a      	ldr	r3, [pc, #616]	; (8006b88 <_dtoa_r+0x2d8>)
 800691e:	bfbc      	itt	lt
 8006920:	2201      	movlt	r2, #1
 8006922:	f8c8 2000 	strlt.w	r2, [r8]
 8006926:	ea33 030b 	bics.w	r3, r3, fp
 800692a:	d11b      	bne.n	8006964 <_dtoa_r+0xb4>
 800692c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800692e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006938:	4333      	orrs	r3, r6
 800693a:	f000 8592 	beq.w	8007462 <_dtoa_r+0xbb2>
 800693e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006940:	b963      	cbnz	r3, 800695c <_dtoa_r+0xac>
 8006942:	4b92      	ldr	r3, [pc, #584]	; (8006b8c <_dtoa_r+0x2dc>)
 8006944:	e022      	b.n	800698c <_dtoa_r+0xdc>
 8006946:	4b92      	ldr	r3, [pc, #584]	; (8006b90 <_dtoa_r+0x2e0>)
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	3308      	adds	r3, #8
 800694c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800694e:	6013      	str	r3, [r2, #0]
 8006950:	9801      	ldr	r0, [sp, #4]
 8006952:	b013      	add	sp, #76	; 0x4c
 8006954:	ecbd 8b04 	vpop	{d8-d9}
 8006958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800695c:	4b8b      	ldr	r3, [pc, #556]	; (8006b8c <_dtoa_r+0x2dc>)
 800695e:	9301      	str	r3, [sp, #4]
 8006960:	3303      	adds	r3, #3
 8006962:	e7f3      	b.n	800694c <_dtoa_r+0x9c>
 8006964:	2200      	movs	r2, #0
 8006966:	2300      	movs	r3, #0
 8006968:	4650      	mov	r0, sl
 800696a:	4659      	mov	r1, fp
 800696c:	f7fa f8dc 	bl	8000b28 <__aeabi_dcmpeq>
 8006970:	ec4b ab19 	vmov	d9, sl, fp
 8006974:	4680      	mov	r8, r0
 8006976:	b158      	cbz	r0, 8006990 <_dtoa_r+0xe0>
 8006978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800697a:	2301      	movs	r3, #1
 800697c:	6013      	str	r3, [r2, #0]
 800697e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 856b 	beq.w	800745c <_dtoa_r+0xbac>
 8006986:	4883      	ldr	r0, [pc, #524]	; (8006b94 <_dtoa_r+0x2e4>)
 8006988:	6018      	str	r0, [r3, #0]
 800698a:	1e43      	subs	r3, r0, #1
 800698c:	9301      	str	r3, [sp, #4]
 800698e:	e7df      	b.n	8006950 <_dtoa_r+0xa0>
 8006990:	ec4b ab10 	vmov	d0, sl, fp
 8006994:	aa10      	add	r2, sp, #64	; 0x40
 8006996:	a911      	add	r1, sp, #68	; 0x44
 8006998:	4620      	mov	r0, r4
 800699a:	f001 facf 	bl	8007f3c <__d2b>
 800699e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80069a2:	ee08 0a10 	vmov	s16, r0
 80069a6:	2d00      	cmp	r5, #0
 80069a8:	f000 8084 	beq.w	8006ab4 <_dtoa_r+0x204>
 80069ac:	ee19 3a90 	vmov	r3, s19
 80069b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80069b8:	4656      	mov	r6, sl
 80069ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80069be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80069c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80069c6:	4b74      	ldr	r3, [pc, #464]	; (8006b98 <_dtoa_r+0x2e8>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	4630      	mov	r0, r6
 80069cc:	4639      	mov	r1, r7
 80069ce:	f7f9 fc8b 	bl	80002e8 <__aeabi_dsub>
 80069d2:	a365      	add	r3, pc, #404	; (adr r3, 8006b68 <_dtoa_r+0x2b8>)
 80069d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d8:	f7f9 fe3e 	bl	8000658 <__aeabi_dmul>
 80069dc:	a364      	add	r3, pc, #400	; (adr r3, 8006b70 <_dtoa_r+0x2c0>)
 80069de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e2:	f7f9 fc83 	bl	80002ec <__adddf3>
 80069e6:	4606      	mov	r6, r0
 80069e8:	4628      	mov	r0, r5
 80069ea:	460f      	mov	r7, r1
 80069ec:	f7f9 fdca 	bl	8000584 <__aeabi_i2d>
 80069f0:	a361      	add	r3, pc, #388	; (adr r3, 8006b78 <_dtoa_r+0x2c8>)
 80069f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f6:	f7f9 fe2f 	bl	8000658 <__aeabi_dmul>
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	4630      	mov	r0, r6
 8006a00:	4639      	mov	r1, r7
 8006a02:	f7f9 fc73 	bl	80002ec <__adddf3>
 8006a06:	4606      	mov	r6, r0
 8006a08:	460f      	mov	r7, r1
 8006a0a:	f7fa f8d5 	bl	8000bb8 <__aeabi_d2iz>
 8006a0e:	2200      	movs	r2, #0
 8006a10:	9000      	str	r0, [sp, #0]
 8006a12:	2300      	movs	r3, #0
 8006a14:	4630      	mov	r0, r6
 8006a16:	4639      	mov	r1, r7
 8006a18:	f7fa f890 	bl	8000b3c <__aeabi_dcmplt>
 8006a1c:	b150      	cbz	r0, 8006a34 <_dtoa_r+0x184>
 8006a1e:	9800      	ldr	r0, [sp, #0]
 8006a20:	f7f9 fdb0 	bl	8000584 <__aeabi_i2d>
 8006a24:	4632      	mov	r2, r6
 8006a26:	463b      	mov	r3, r7
 8006a28:	f7fa f87e 	bl	8000b28 <__aeabi_dcmpeq>
 8006a2c:	b910      	cbnz	r0, 8006a34 <_dtoa_r+0x184>
 8006a2e:	9b00      	ldr	r3, [sp, #0]
 8006a30:	3b01      	subs	r3, #1
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	9b00      	ldr	r3, [sp, #0]
 8006a36:	2b16      	cmp	r3, #22
 8006a38:	d85a      	bhi.n	8006af0 <_dtoa_r+0x240>
 8006a3a:	9a00      	ldr	r2, [sp, #0]
 8006a3c:	4b57      	ldr	r3, [pc, #348]	; (8006b9c <_dtoa_r+0x2ec>)
 8006a3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a46:	ec51 0b19 	vmov	r0, r1, d9
 8006a4a:	f7fa f877 	bl	8000b3c <__aeabi_dcmplt>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	d050      	beq.n	8006af4 <_dtoa_r+0x244>
 8006a52:	9b00      	ldr	r3, [sp, #0]
 8006a54:	3b01      	subs	r3, #1
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	2300      	movs	r3, #0
 8006a5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a5e:	1b5d      	subs	r5, r3, r5
 8006a60:	1e6b      	subs	r3, r5, #1
 8006a62:	9305      	str	r3, [sp, #20]
 8006a64:	bf45      	ittet	mi
 8006a66:	f1c5 0301 	rsbmi	r3, r5, #1
 8006a6a:	9304      	strmi	r3, [sp, #16]
 8006a6c:	2300      	movpl	r3, #0
 8006a6e:	2300      	movmi	r3, #0
 8006a70:	bf4c      	ite	mi
 8006a72:	9305      	strmi	r3, [sp, #20]
 8006a74:	9304      	strpl	r3, [sp, #16]
 8006a76:	9b00      	ldr	r3, [sp, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	db3d      	blt.n	8006af8 <_dtoa_r+0x248>
 8006a7c:	9b05      	ldr	r3, [sp, #20]
 8006a7e:	9a00      	ldr	r2, [sp, #0]
 8006a80:	920a      	str	r2, [sp, #40]	; 0x28
 8006a82:	4413      	add	r3, r2
 8006a84:	9305      	str	r3, [sp, #20]
 8006a86:	2300      	movs	r3, #0
 8006a88:	9307      	str	r3, [sp, #28]
 8006a8a:	9b06      	ldr	r3, [sp, #24]
 8006a8c:	2b09      	cmp	r3, #9
 8006a8e:	f200 8089 	bhi.w	8006ba4 <_dtoa_r+0x2f4>
 8006a92:	2b05      	cmp	r3, #5
 8006a94:	bfc4      	itt	gt
 8006a96:	3b04      	subgt	r3, #4
 8006a98:	9306      	strgt	r3, [sp, #24]
 8006a9a:	9b06      	ldr	r3, [sp, #24]
 8006a9c:	f1a3 0302 	sub.w	r3, r3, #2
 8006aa0:	bfcc      	ite	gt
 8006aa2:	2500      	movgt	r5, #0
 8006aa4:	2501      	movle	r5, #1
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	f200 8087 	bhi.w	8006bba <_dtoa_r+0x30a>
 8006aac:	e8df f003 	tbb	[pc, r3]
 8006ab0:	59383a2d 	.word	0x59383a2d
 8006ab4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006ab8:	441d      	add	r5, r3
 8006aba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006abe:	2b20      	cmp	r3, #32
 8006ac0:	bfc1      	itttt	gt
 8006ac2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006ac6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006aca:	fa0b f303 	lslgt.w	r3, fp, r3
 8006ace:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006ad2:	bfda      	itte	le
 8006ad4:	f1c3 0320 	rsble	r3, r3, #32
 8006ad8:	fa06 f003 	lslle.w	r0, r6, r3
 8006adc:	4318      	orrgt	r0, r3
 8006ade:	f7f9 fd41 	bl	8000564 <__aeabi_ui2d>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	4606      	mov	r6, r0
 8006ae6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006aea:	3d01      	subs	r5, #1
 8006aec:	930e      	str	r3, [sp, #56]	; 0x38
 8006aee:	e76a      	b.n	80069c6 <_dtoa_r+0x116>
 8006af0:	2301      	movs	r3, #1
 8006af2:	e7b2      	b.n	8006a5a <_dtoa_r+0x1aa>
 8006af4:	900b      	str	r0, [sp, #44]	; 0x2c
 8006af6:	e7b1      	b.n	8006a5c <_dtoa_r+0x1ac>
 8006af8:	9b04      	ldr	r3, [sp, #16]
 8006afa:	9a00      	ldr	r2, [sp, #0]
 8006afc:	1a9b      	subs	r3, r3, r2
 8006afe:	9304      	str	r3, [sp, #16]
 8006b00:	4253      	negs	r3, r2
 8006b02:	9307      	str	r3, [sp, #28]
 8006b04:	2300      	movs	r3, #0
 8006b06:	930a      	str	r3, [sp, #40]	; 0x28
 8006b08:	e7bf      	b.n	8006a8a <_dtoa_r+0x1da>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	9308      	str	r3, [sp, #32]
 8006b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	dc55      	bgt.n	8006bc0 <_dtoa_r+0x310>
 8006b14:	2301      	movs	r3, #1
 8006b16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b1e:	e00c      	b.n	8006b3a <_dtoa_r+0x28a>
 8006b20:	2301      	movs	r3, #1
 8006b22:	e7f3      	b.n	8006b0c <_dtoa_r+0x25c>
 8006b24:	2300      	movs	r3, #0
 8006b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b28:	9308      	str	r3, [sp, #32]
 8006b2a:	9b00      	ldr	r3, [sp, #0]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	9302      	str	r3, [sp, #8]
 8006b30:	3301      	adds	r3, #1
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	9303      	str	r3, [sp, #12]
 8006b36:	bfb8      	it	lt
 8006b38:	2301      	movlt	r3, #1
 8006b3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	6042      	str	r2, [r0, #4]
 8006b40:	2204      	movs	r2, #4
 8006b42:	f102 0614 	add.w	r6, r2, #20
 8006b46:	429e      	cmp	r6, r3
 8006b48:	6841      	ldr	r1, [r0, #4]
 8006b4a:	d93d      	bls.n	8006bc8 <_dtoa_r+0x318>
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f000 fecd 	bl	80078ec <_Balloc>
 8006b52:	9001      	str	r0, [sp, #4]
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d13b      	bne.n	8006bd0 <_dtoa_r+0x320>
 8006b58:	4b11      	ldr	r3, [pc, #68]	; (8006ba0 <_dtoa_r+0x2f0>)
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006b60:	e6c0      	b.n	80068e4 <_dtoa_r+0x34>
 8006b62:	2301      	movs	r3, #1
 8006b64:	e7df      	b.n	8006b26 <_dtoa_r+0x276>
 8006b66:	bf00      	nop
 8006b68:	636f4361 	.word	0x636f4361
 8006b6c:	3fd287a7 	.word	0x3fd287a7
 8006b70:	8b60c8b3 	.word	0x8b60c8b3
 8006b74:	3fc68a28 	.word	0x3fc68a28
 8006b78:	509f79fb 	.word	0x509f79fb
 8006b7c:	3fd34413 	.word	0x3fd34413
 8006b80:	0800883e 	.word	0x0800883e
 8006b84:	08008855 	.word	0x08008855
 8006b88:	7ff00000 	.word	0x7ff00000
 8006b8c:	0800883a 	.word	0x0800883a
 8006b90:	08008831 	.word	0x08008831
 8006b94:	0800880e 	.word	0x0800880e
 8006b98:	3ff80000 	.word	0x3ff80000
 8006b9c:	080089a8 	.word	0x080089a8
 8006ba0:	080088b0 	.word	0x080088b0
 8006ba4:	2501      	movs	r5, #1
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	9306      	str	r3, [sp, #24]
 8006baa:	9508      	str	r5, [sp, #32]
 8006bac:	f04f 33ff 	mov.w	r3, #4294967295
 8006bb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	2312      	movs	r3, #18
 8006bb8:	e7b0      	b.n	8006b1c <_dtoa_r+0x26c>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	9308      	str	r3, [sp, #32]
 8006bbe:	e7f5      	b.n	8006bac <_dtoa_r+0x2fc>
 8006bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006bc6:	e7b8      	b.n	8006b3a <_dtoa_r+0x28a>
 8006bc8:	3101      	adds	r1, #1
 8006bca:	6041      	str	r1, [r0, #4]
 8006bcc:	0052      	lsls	r2, r2, #1
 8006bce:	e7b8      	b.n	8006b42 <_dtoa_r+0x292>
 8006bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bd2:	9a01      	ldr	r2, [sp, #4]
 8006bd4:	601a      	str	r2, [r3, #0]
 8006bd6:	9b03      	ldr	r3, [sp, #12]
 8006bd8:	2b0e      	cmp	r3, #14
 8006bda:	f200 809d 	bhi.w	8006d18 <_dtoa_r+0x468>
 8006bde:	2d00      	cmp	r5, #0
 8006be0:	f000 809a 	beq.w	8006d18 <_dtoa_r+0x468>
 8006be4:	9b00      	ldr	r3, [sp, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	dd32      	ble.n	8006c50 <_dtoa_r+0x3a0>
 8006bea:	4ab7      	ldr	r2, [pc, #732]	; (8006ec8 <_dtoa_r+0x618>)
 8006bec:	f003 030f 	and.w	r3, r3, #15
 8006bf0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006bf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bf8:	9b00      	ldr	r3, [sp, #0]
 8006bfa:	05d8      	lsls	r0, r3, #23
 8006bfc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006c00:	d516      	bpl.n	8006c30 <_dtoa_r+0x380>
 8006c02:	4bb2      	ldr	r3, [pc, #712]	; (8006ecc <_dtoa_r+0x61c>)
 8006c04:	ec51 0b19 	vmov	r0, r1, d9
 8006c08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c0c:	f7f9 fe4e 	bl	80008ac <__aeabi_ddiv>
 8006c10:	f007 070f 	and.w	r7, r7, #15
 8006c14:	4682      	mov	sl, r0
 8006c16:	468b      	mov	fp, r1
 8006c18:	2503      	movs	r5, #3
 8006c1a:	4eac      	ldr	r6, [pc, #688]	; (8006ecc <_dtoa_r+0x61c>)
 8006c1c:	b957      	cbnz	r7, 8006c34 <_dtoa_r+0x384>
 8006c1e:	4642      	mov	r2, r8
 8006c20:	464b      	mov	r3, r9
 8006c22:	4650      	mov	r0, sl
 8006c24:	4659      	mov	r1, fp
 8006c26:	f7f9 fe41 	bl	80008ac <__aeabi_ddiv>
 8006c2a:	4682      	mov	sl, r0
 8006c2c:	468b      	mov	fp, r1
 8006c2e:	e028      	b.n	8006c82 <_dtoa_r+0x3d2>
 8006c30:	2502      	movs	r5, #2
 8006c32:	e7f2      	b.n	8006c1a <_dtoa_r+0x36a>
 8006c34:	07f9      	lsls	r1, r7, #31
 8006c36:	d508      	bpl.n	8006c4a <_dtoa_r+0x39a>
 8006c38:	4640      	mov	r0, r8
 8006c3a:	4649      	mov	r1, r9
 8006c3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c40:	f7f9 fd0a 	bl	8000658 <__aeabi_dmul>
 8006c44:	3501      	adds	r5, #1
 8006c46:	4680      	mov	r8, r0
 8006c48:	4689      	mov	r9, r1
 8006c4a:	107f      	asrs	r7, r7, #1
 8006c4c:	3608      	adds	r6, #8
 8006c4e:	e7e5      	b.n	8006c1c <_dtoa_r+0x36c>
 8006c50:	f000 809b 	beq.w	8006d8a <_dtoa_r+0x4da>
 8006c54:	9b00      	ldr	r3, [sp, #0]
 8006c56:	4f9d      	ldr	r7, [pc, #628]	; (8006ecc <_dtoa_r+0x61c>)
 8006c58:	425e      	negs	r6, r3
 8006c5a:	4b9b      	ldr	r3, [pc, #620]	; (8006ec8 <_dtoa_r+0x618>)
 8006c5c:	f006 020f 	and.w	r2, r6, #15
 8006c60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c68:	ec51 0b19 	vmov	r0, r1, d9
 8006c6c:	f7f9 fcf4 	bl	8000658 <__aeabi_dmul>
 8006c70:	1136      	asrs	r6, r6, #4
 8006c72:	4682      	mov	sl, r0
 8006c74:	468b      	mov	fp, r1
 8006c76:	2300      	movs	r3, #0
 8006c78:	2502      	movs	r5, #2
 8006c7a:	2e00      	cmp	r6, #0
 8006c7c:	d17a      	bne.n	8006d74 <_dtoa_r+0x4c4>
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1d3      	bne.n	8006c2a <_dtoa_r+0x37a>
 8006c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 8082 	beq.w	8006d8e <_dtoa_r+0x4de>
 8006c8a:	4b91      	ldr	r3, [pc, #580]	; (8006ed0 <_dtoa_r+0x620>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	4650      	mov	r0, sl
 8006c90:	4659      	mov	r1, fp
 8006c92:	f7f9 ff53 	bl	8000b3c <__aeabi_dcmplt>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d079      	beq.n	8006d8e <_dtoa_r+0x4de>
 8006c9a:	9b03      	ldr	r3, [sp, #12]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d076      	beq.n	8006d8e <_dtoa_r+0x4de>
 8006ca0:	9b02      	ldr	r3, [sp, #8]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	dd36      	ble.n	8006d14 <_dtoa_r+0x464>
 8006ca6:	9b00      	ldr	r3, [sp, #0]
 8006ca8:	4650      	mov	r0, sl
 8006caa:	4659      	mov	r1, fp
 8006cac:	1e5f      	subs	r7, r3, #1
 8006cae:	2200      	movs	r2, #0
 8006cb0:	4b88      	ldr	r3, [pc, #544]	; (8006ed4 <_dtoa_r+0x624>)
 8006cb2:	f7f9 fcd1 	bl	8000658 <__aeabi_dmul>
 8006cb6:	9e02      	ldr	r6, [sp, #8]
 8006cb8:	4682      	mov	sl, r0
 8006cba:	468b      	mov	fp, r1
 8006cbc:	3501      	adds	r5, #1
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	f7f9 fc60 	bl	8000584 <__aeabi_i2d>
 8006cc4:	4652      	mov	r2, sl
 8006cc6:	465b      	mov	r3, fp
 8006cc8:	f7f9 fcc6 	bl	8000658 <__aeabi_dmul>
 8006ccc:	4b82      	ldr	r3, [pc, #520]	; (8006ed8 <_dtoa_r+0x628>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f7f9 fb0c 	bl	80002ec <__adddf3>
 8006cd4:	46d0      	mov	r8, sl
 8006cd6:	46d9      	mov	r9, fp
 8006cd8:	4682      	mov	sl, r0
 8006cda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006cde:	2e00      	cmp	r6, #0
 8006ce0:	d158      	bne.n	8006d94 <_dtoa_r+0x4e4>
 8006ce2:	4b7e      	ldr	r3, [pc, #504]	; (8006edc <_dtoa_r+0x62c>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	4640      	mov	r0, r8
 8006ce8:	4649      	mov	r1, r9
 8006cea:	f7f9 fafd 	bl	80002e8 <__aeabi_dsub>
 8006cee:	4652      	mov	r2, sl
 8006cf0:	465b      	mov	r3, fp
 8006cf2:	4680      	mov	r8, r0
 8006cf4:	4689      	mov	r9, r1
 8006cf6:	f7f9 ff3f 	bl	8000b78 <__aeabi_dcmpgt>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	f040 8295 	bne.w	800722a <_dtoa_r+0x97a>
 8006d00:	4652      	mov	r2, sl
 8006d02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006d06:	4640      	mov	r0, r8
 8006d08:	4649      	mov	r1, r9
 8006d0a:	f7f9 ff17 	bl	8000b3c <__aeabi_dcmplt>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	f040 8289 	bne.w	8007226 <_dtoa_r+0x976>
 8006d14:	ec5b ab19 	vmov	sl, fp, d9
 8006d18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f2c0 8148 	blt.w	8006fb0 <_dtoa_r+0x700>
 8006d20:	9a00      	ldr	r2, [sp, #0]
 8006d22:	2a0e      	cmp	r2, #14
 8006d24:	f300 8144 	bgt.w	8006fb0 <_dtoa_r+0x700>
 8006d28:	4b67      	ldr	r3, [pc, #412]	; (8006ec8 <_dtoa_r+0x618>)
 8006d2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f280 80d5 	bge.w	8006ee4 <_dtoa_r+0x634>
 8006d3a:	9b03      	ldr	r3, [sp, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f300 80d1 	bgt.w	8006ee4 <_dtoa_r+0x634>
 8006d42:	f040 826f 	bne.w	8007224 <_dtoa_r+0x974>
 8006d46:	4b65      	ldr	r3, [pc, #404]	; (8006edc <_dtoa_r+0x62c>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	4640      	mov	r0, r8
 8006d4c:	4649      	mov	r1, r9
 8006d4e:	f7f9 fc83 	bl	8000658 <__aeabi_dmul>
 8006d52:	4652      	mov	r2, sl
 8006d54:	465b      	mov	r3, fp
 8006d56:	f7f9 ff05 	bl	8000b64 <__aeabi_dcmpge>
 8006d5a:	9e03      	ldr	r6, [sp, #12]
 8006d5c:	4637      	mov	r7, r6
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	f040 8245 	bne.w	80071ee <_dtoa_r+0x93e>
 8006d64:	9d01      	ldr	r5, [sp, #4]
 8006d66:	2331      	movs	r3, #49	; 0x31
 8006d68:	f805 3b01 	strb.w	r3, [r5], #1
 8006d6c:	9b00      	ldr	r3, [sp, #0]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	e240      	b.n	80071f6 <_dtoa_r+0x946>
 8006d74:	07f2      	lsls	r2, r6, #31
 8006d76:	d505      	bpl.n	8006d84 <_dtoa_r+0x4d4>
 8006d78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d7c:	f7f9 fc6c 	bl	8000658 <__aeabi_dmul>
 8006d80:	3501      	adds	r5, #1
 8006d82:	2301      	movs	r3, #1
 8006d84:	1076      	asrs	r6, r6, #1
 8006d86:	3708      	adds	r7, #8
 8006d88:	e777      	b.n	8006c7a <_dtoa_r+0x3ca>
 8006d8a:	2502      	movs	r5, #2
 8006d8c:	e779      	b.n	8006c82 <_dtoa_r+0x3d2>
 8006d8e:	9f00      	ldr	r7, [sp, #0]
 8006d90:	9e03      	ldr	r6, [sp, #12]
 8006d92:	e794      	b.n	8006cbe <_dtoa_r+0x40e>
 8006d94:	9901      	ldr	r1, [sp, #4]
 8006d96:	4b4c      	ldr	r3, [pc, #304]	; (8006ec8 <_dtoa_r+0x618>)
 8006d98:	4431      	add	r1, r6
 8006d9a:	910d      	str	r1, [sp, #52]	; 0x34
 8006d9c:	9908      	ldr	r1, [sp, #32]
 8006d9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006da2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006da6:	2900      	cmp	r1, #0
 8006da8:	d043      	beq.n	8006e32 <_dtoa_r+0x582>
 8006daa:	494d      	ldr	r1, [pc, #308]	; (8006ee0 <_dtoa_r+0x630>)
 8006dac:	2000      	movs	r0, #0
 8006dae:	f7f9 fd7d 	bl	80008ac <__aeabi_ddiv>
 8006db2:	4652      	mov	r2, sl
 8006db4:	465b      	mov	r3, fp
 8006db6:	f7f9 fa97 	bl	80002e8 <__aeabi_dsub>
 8006dba:	9d01      	ldr	r5, [sp, #4]
 8006dbc:	4682      	mov	sl, r0
 8006dbe:	468b      	mov	fp, r1
 8006dc0:	4649      	mov	r1, r9
 8006dc2:	4640      	mov	r0, r8
 8006dc4:	f7f9 fef8 	bl	8000bb8 <__aeabi_d2iz>
 8006dc8:	4606      	mov	r6, r0
 8006dca:	f7f9 fbdb 	bl	8000584 <__aeabi_i2d>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4640      	mov	r0, r8
 8006dd4:	4649      	mov	r1, r9
 8006dd6:	f7f9 fa87 	bl	80002e8 <__aeabi_dsub>
 8006dda:	3630      	adds	r6, #48	; 0x30
 8006ddc:	f805 6b01 	strb.w	r6, [r5], #1
 8006de0:	4652      	mov	r2, sl
 8006de2:	465b      	mov	r3, fp
 8006de4:	4680      	mov	r8, r0
 8006de6:	4689      	mov	r9, r1
 8006de8:	f7f9 fea8 	bl	8000b3c <__aeabi_dcmplt>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	d163      	bne.n	8006eb8 <_dtoa_r+0x608>
 8006df0:	4642      	mov	r2, r8
 8006df2:	464b      	mov	r3, r9
 8006df4:	4936      	ldr	r1, [pc, #216]	; (8006ed0 <_dtoa_r+0x620>)
 8006df6:	2000      	movs	r0, #0
 8006df8:	f7f9 fa76 	bl	80002e8 <__aeabi_dsub>
 8006dfc:	4652      	mov	r2, sl
 8006dfe:	465b      	mov	r3, fp
 8006e00:	f7f9 fe9c 	bl	8000b3c <__aeabi_dcmplt>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	f040 80b5 	bne.w	8006f74 <_dtoa_r+0x6c4>
 8006e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e0c:	429d      	cmp	r5, r3
 8006e0e:	d081      	beq.n	8006d14 <_dtoa_r+0x464>
 8006e10:	4b30      	ldr	r3, [pc, #192]	; (8006ed4 <_dtoa_r+0x624>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	4650      	mov	r0, sl
 8006e16:	4659      	mov	r1, fp
 8006e18:	f7f9 fc1e 	bl	8000658 <__aeabi_dmul>
 8006e1c:	4b2d      	ldr	r3, [pc, #180]	; (8006ed4 <_dtoa_r+0x624>)
 8006e1e:	4682      	mov	sl, r0
 8006e20:	468b      	mov	fp, r1
 8006e22:	4640      	mov	r0, r8
 8006e24:	4649      	mov	r1, r9
 8006e26:	2200      	movs	r2, #0
 8006e28:	f7f9 fc16 	bl	8000658 <__aeabi_dmul>
 8006e2c:	4680      	mov	r8, r0
 8006e2e:	4689      	mov	r9, r1
 8006e30:	e7c6      	b.n	8006dc0 <_dtoa_r+0x510>
 8006e32:	4650      	mov	r0, sl
 8006e34:	4659      	mov	r1, fp
 8006e36:	f7f9 fc0f 	bl	8000658 <__aeabi_dmul>
 8006e3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e3c:	9d01      	ldr	r5, [sp, #4]
 8006e3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e40:	4682      	mov	sl, r0
 8006e42:	468b      	mov	fp, r1
 8006e44:	4649      	mov	r1, r9
 8006e46:	4640      	mov	r0, r8
 8006e48:	f7f9 feb6 	bl	8000bb8 <__aeabi_d2iz>
 8006e4c:	4606      	mov	r6, r0
 8006e4e:	f7f9 fb99 	bl	8000584 <__aeabi_i2d>
 8006e52:	3630      	adds	r6, #48	; 0x30
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	4640      	mov	r0, r8
 8006e5a:	4649      	mov	r1, r9
 8006e5c:	f7f9 fa44 	bl	80002e8 <__aeabi_dsub>
 8006e60:	f805 6b01 	strb.w	r6, [r5], #1
 8006e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e66:	429d      	cmp	r5, r3
 8006e68:	4680      	mov	r8, r0
 8006e6a:	4689      	mov	r9, r1
 8006e6c:	f04f 0200 	mov.w	r2, #0
 8006e70:	d124      	bne.n	8006ebc <_dtoa_r+0x60c>
 8006e72:	4b1b      	ldr	r3, [pc, #108]	; (8006ee0 <_dtoa_r+0x630>)
 8006e74:	4650      	mov	r0, sl
 8006e76:	4659      	mov	r1, fp
 8006e78:	f7f9 fa38 	bl	80002ec <__adddf3>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4640      	mov	r0, r8
 8006e82:	4649      	mov	r1, r9
 8006e84:	f7f9 fe78 	bl	8000b78 <__aeabi_dcmpgt>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	d173      	bne.n	8006f74 <_dtoa_r+0x6c4>
 8006e8c:	4652      	mov	r2, sl
 8006e8e:	465b      	mov	r3, fp
 8006e90:	4913      	ldr	r1, [pc, #76]	; (8006ee0 <_dtoa_r+0x630>)
 8006e92:	2000      	movs	r0, #0
 8006e94:	f7f9 fa28 	bl	80002e8 <__aeabi_dsub>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4640      	mov	r0, r8
 8006e9e:	4649      	mov	r1, r9
 8006ea0:	f7f9 fe4c 	bl	8000b3c <__aeabi_dcmplt>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	f43f af35 	beq.w	8006d14 <_dtoa_r+0x464>
 8006eaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006eac:	1e6b      	subs	r3, r5, #1
 8006eae:	930f      	str	r3, [sp, #60]	; 0x3c
 8006eb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006eb4:	2b30      	cmp	r3, #48	; 0x30
 8006eb6:	d0f8      	beq.n	8006eaa <_dtoa_r+0x5fa>
 8006eb8:	9700      	str	r7, [sp, #0]
 8006eba:	e049      	b.n	8006f50 <_dtoa_r+0x6a0>
 8006ebc:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <_dtoa_r+0x624>)
 8006ebe:	f7f9 fbcb 	bl	8000658 <__aeabi_dmul>
 8006ec2:	4680      	mov	r8, r0
 8006ec4:	4689      	mov	r9, r1
 8006ec6:	e7bd      	b.n	8006e44 <_dtoa_r+0x594>
 8006ec8:	080089a8 	.word	0x080089a8
 8006ecc:	08008980 	.word	0x08008980
 8006ed0:	3ff00000 	.word	0x3ff00000
 8006ed4:	40240000 	.word	0x40240000
 8006ed8:	401c0000 	.word	0x401c0000
 8006edc:	40140000 	.word	0x40140000
 8006ee0:	3fe00000 	.word	0x3fe00000
 8006ee4:	9d01      	ldr	r5, [sp, #4]
 8006ee6:	4656      	mov	r6, sl
 8006ee8:	465f      	mov	r7, fp
 8006eea:	4642      	mov	r2, r8
 8006eec:	464b      	mov	r3, r9
 8006eee:	4630      	mov	r0, r6
 8006ef0:	4639      	mov	r1, r7
 8006ef2:	f7f9 fcdb 	bl	80008ac <__aeabi_ddiv>
 8006ef6:	f7f9 fe5f 	bl	8000bb8 <__aeabi_d2iz>
 8006efa:	4682      	mov	sl, r0
 8006efc:	f7f9 fb42 	bl	8000584 <__aeabi_i2d>
 8006f00:	4642      	mov	r2, r8
 8006f02:	464b      	mov	r3, r9
 8006f04:	f7f9 fba8 	bl	8000658 <__aeabi_dmul>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	4639      	mov	r1, r7
 8006f10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006f14:	f7f9 f9e8 	bl	80002e8 <__aeabi_dsub>
 8006f18:	f805 6b01 	strb.w	r6, [r5], #1
 8006f1c:	9e01      	ldr	r6, [sp, #4]
 8006f1e:	9f03      	ldr	r7, [sp, #12]
 8006f20:	1bae      	subs	r6, r5, r6
 8006f22:	42b7      	cmp	r7, r6
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	d135      	bne.n	8006f96 <_dtoa_r+0x6e6>
 8006f2a:	f7f9 f9df 	bl	80002ec <__adddf3>
 8006f2e:	4642      	mov	r2, r8
 8006f30:	464b      	mov	r3, r9
 8006f32:	4606      	mov	r6, r0
 8006f34:	460f      	mov	r7, r1
 8006f36:	f7f9 fe1f 	bl	8000b78 <__aeabi_dcmpgt>
 8006f3a:	b9d0      	cbnz	r0, 8006f72 <_dtoa_r+0x6c2>
 8006f3c:	4642      	mov	r2, r8
 8006f3e:	464b      	mov	r3, r9
 8006f40:	4630      	mov	r0, r6
 8006f42:	4639      	mov	r1, r7
 8006f44:	f7f9 fdf0 	bl	8000b28 <__aeabi_dcmpeq>
 8006f48:	b110      	cbz	r0, 8006f50 <_dtoa_r+0x6a0>
 8006f4a:	f01a 0f01 	tst.w	sl, #1
 8006f4e:	d110      	bne.n	8006f72 <_dtoa_r+0x6c2>
 8006f50:	4620      	mov	r0, r4
 8006f52:	ee18 1a10 	vmov	r1, s16
 8006f56:	f000 fd09 	bl	800796c <_Bfree>
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	9800      	ldr	r0, [sp, #0]
 8006f5e:	702b      	strb	r3, [r5, #0]
 8006f60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f62:	3001      	adds	r0, #1
 8006f64:	6018      	str	r0, [r3, #0]
 8006f66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f43f acf1 	beq.w	8006950 <_dtoa_r+0xa0>
 8006f6e:	601d      	str	r5, [r3, #0]
 8006f70:	e4ee      	b.n	8006950 <_dtoa_r+0xa0>
 8006f72:	9f00      	ldr	r7, [sp, #0]
 8006f74:	462b      	mov	r3, r5
 8006f76:	461d      	mov	r5, r3
 8006f78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f7c:	2a39      	cmp	r2, #57	; 0x39
 8006f7e:	d106      	bne.n	8006f8e <_dtoa_r+0x6de>
 8006f80:	9a01      	ldr	r2, [sp, #4]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d1f7      	bne.n	8006f76 <_dtoa_r+0x6c6>
 8006f86:	9901      	ldr	r1, [sp, #4]
 8006f88:	2230      	movs	r2, #48	; 0x30
 8006f8a:	3701      	adds	r7, #1
 8006f8c:	700a      	strb	r2, [r1, #0]
 8006f8e:	781a      	ldrb	r2, [r3, #0]
 8006f90:	3201      	adds	r2, #1
 8006f92:	701a      	strb	r2, [r3, #0]
 8006f94:	e790      	b.n	8006eb8 <_dtoa_r+0x608>
 8006f96:	4ba6      	ldr	r3, [pc, #664]	; (8007230 <_dtoa_r+0x980>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f7f9 fb5d 	bl	8000658 <__aeabi_dmul>
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	4606      	mov	r6, r0
 8006fa4:	460f      	mov	r7, r1
 8006fa6:	f7f9 fdbf 	bl	8000b28 <__aeabi_dcmpeq>
 8006faa:	2800      	cmp	r0, #0
 8006fac:	d09d      	beq.n	8006eea <_dtoa_r+0x63a>
 8006fae:	e7cf      	b.n	8006f50 <_dtoa_r+0x6a0>
 8006fb0:	9a08      	ldr	r2, [sp, #32]
 8006fb2:	2a00      	cmp	r2, #0
 8006fb4:	f000 80d7 	beq.w	8007166 <_dtoa_r+0x8b6>
 8006fb8:	9a06      	ldr	r2, [sp, #24]
 8006fba:	2a01      	cmp	r2, #1
 8006fbc:	f300 80ba 	bgt.w	8007134 <_dtoa_r+0x884>
 8006fc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fc2:	2a00      	cmp	r2, #0
 8006fc4:	f000 80b2 	beq.w	800712c <_dtoa_r+0x87c>
 8006fc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006fcc:	9e07      	ldr	r6, [sp, #28]
 8006fce:	9d04      	ldr	r5, [sp, #16]
 8006fd0:	9a04      	ldr	r2, [sp, #16]
 8006fd2:	441a      	add	r2, r3
 8006fd4:	9204      	str	r2, [sp, #16]
 8006fd6:	9a05      	ldr	r2, [sp, #20]
 8006fd8:	2101      	movs	r1, #1
 8006fda:	441a      	add	r2, r3
 8006fdc:	4620      	mov	r0, r4
 8006fde:	9205      	str	r2, [sp, #20]
 8006fe0:	f000 fd7c 	bl	8007adc <__i2b>
 8006fe4:	4607      	mov	r7, r0
 8006fe6:	2d00      	cmp	r5, #0
 8006fe8:	dd0c      	ble.n	8007004 <_dtoa_r+0x754>
 8006fea:	9b05      	ldr	r3, [sp, #20]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	dd09      	ble.n	8007004 <_dtoa_r+0x754>
 8006ff0:	42ab      	cmp	r3, r5
 8006ff2:	9a04      	ldr	r2, [sp, #16]
 8006ff4:	bfa8      	it	ge
 8006ff6:	462b      	movge	r3, r5
 8006ff8:	1ad2      	subs	r2, r2, r3
 8006ffa:	9204      	str	r2, [sp, #16]
 8006ffc:	9a05      	ldr	r2, [sp, #20]
 8006ffe:	1aed      	subs	r5, r5, r3
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	9305      	str	r3, [sp, #20]
 8007004:	9b07      	ldr	r3, [sp, #28]
 8007006:	b31b      	cbz	r3, 8007050 <_dtoa_r+0x7a0>
 8007008:	9b08      	ldr	r3, [sp, #32]
 800700a:	2b00      	cmp	r3, #0
 800700c:	f000 80af 	beq.w	800716e <_dtoa_r+0x8be>
 8007010:	2e00      	cmp	r6, #0
 8007012:	dd13      	ble.n	800703c <_dtoa_r+0x78c>
 8007014:	4639      	mov	r1, r7
 8007016:	4632      	mov	r2, r6
 8007018:	4620      	mov	r0, r4
 800701a:	f000 fe1f 	bl	8007c5c <__pow5mult>
 800701e:	ee18 2a10 	vmov	r2, s16
 8007022:	4601      	mov	r1, r0
 8007024:	4607      	mov	r7, r0
 8007026:	4620      	mov	r0, r4
 8007028:	f000 fd6e 	bl	8007b08 <__multiply>
 800702c:	ee18 1a10 	vmov	r1, s16
 8007030:	4680      	mov	r8, r0
 8007032:	4620      	mov	r0, r4
 8007034:	f000 fc9a 	bl	800796c <_Bfree>
 8007038:	ee08 8a10 	vmov	s16, r8
 800703c:	9b07      	ldr	r3, [sp, #28]
 800703e:	1b9a      	subs	r2, r3, r6
 8007040:	d006      	beq.n	8007050 <_dtoa_r+0x7a0>
 8007042:	ee18 1a10 	vmov	r1, s16
 8007046:	4620      	mov	r0, r4
 8007048:	f000 fe08 	bl	8007c5c <__pow5mult>
 800704c:	ee08 0a10 	vmov	s16, r0
 8007050:	2101      	movs	r1, #1
 8007052:	4620      	mov	r0, r4
 8007054:	f000 fd42 	bl	8007adc <__i2b>
 8007058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800705a:	2b00      	cmp	r3, #0
 800705c:	4606      	mov	r6, r0
 800705e:	f340 8088 	ble.w	8007172 <_dtoa_r+0x8c2>
 8007062:	461a      	mov	r2, r3
 8007064:	4601      	mov	r1, r0
 8007066:	4620      	mov	r0, r4
 8007068:	f000 fdf8 	bl	8007c5c <__pow5mult>
 800706c:	9b06      	ldr	r3, [sp, #24]
 800706e:	2b01      	cmp	r3, #1
 8007070:	4606      	mov	r6, r0
 8007072:	f340 8081 	ble.w	8007178 <_dtoa_r+0x8c8>
 8007076:	f04f 0800 	mov.w	r8, #0
 800707a:	6933      	ldr	r3, [r6, #16]
 800707c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007080:	6918      	ldr	r0, [r3, #16]
 8007082:	f000 fcdb 	bl	8007a3c <__hi0bits>
 8007086:	f1c0 0020 	rsb	r0, r0, #32
 800708a:	9b05      	ldr	r3, [sp, #20]
 800708c:	4418      	add	r0, r3
 800708e:	f010 001f 	ands.w	r0, r0, #31
 8007092:	f000 8092 	beq.w	80071ba <_dtoa_r+0x90a>
 8007096:	f1c0 0320 	rsb	r3, r0, #32
 800709a:	2b04      	cmp	r3, #4
 800709c:	f340 808a 	ble.w	80071b4 <_dtoa_r+0x904>
 80070a0:	f1c0 001c 	rsb	r0, r0, #28
 80070a4:	9b04      	ldr	r3, [sp, #16]
 80070a6:	4403      	add	r3, r0
 80070a8:	9304      	str	r3, [sp, #16]
 80070aa:	9b05      	ldr	r3, [sp, #20]
 80070ac:	4403      	add	r3, r0
 80070ae:	4405      	add	r5, r0
 80070b0:	9305      	str	r3, [sp, #20]
 80070b2:	9b04      	ldr	r3, [sp, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	dd07      	ble.n	80070c8 <_dtoa_r+0x818>
 80070b8:	ee18 1a10 	vmov	r1, s16
 80070bc:	461a      	mov	r2, r3
 80070be:	4620      	mov	r0, r4
 80070c0:	f000 fe26 	bl	8007d10 <__lshift>
 80070c4:	ee08 0a10 	vmov	s16, r0
 80070c8:	9b05      	ldr	r3, [sp, #20]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	dd05      	ble.n	80070da <_dtoa_r+0x82a>
 80070ce:	4631      	mov	r1, r6
 80070d0:	461a      	mov	r2, r3
 80070d2:	4620      	mov	r0, r4
 80070d4:	f000 fe1c 	bl	8007d10 <__lshift>
 80070d8:	4606      	mov	r6, r0
 80070da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d06e      	beq.n	80071be <_dtoa_r+0x90e>
 80070e0:	ee18 0a10 	vmov	r0, s16
 80070e4:	4631      	mov	r1, r6
 80070e6:	f000 fe83 	bl	8007df0 <__mcmp>
 80070ea:	2800      	cmp	r0, #0
 80070ec:	da67      	bge.n	80071be <_dtoa_r+0x90e>
 80070ee:	9b00      	ldr	r3, [sp, #0]
 80070f0:	3b01      	subs	r3, #1
 80070f2:	ee18 1a10 	vmov	r1, s16
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	220a      	movs	r2, #10
 80070fa:	2300      	movs	r3, #0
 80070fc:	4620      	mov	r0, r4
 80070fe:	f000 fc57 	bl	80079b0 <__multadd>
 8007102:	9b08      	ldr	r3, [sp, #32]
 8007104:	ee08 0a10 	vmov	s16, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 81b1 	beq.w	8007470 <_dtoa_r+0xbc0>
 800710e:	2300      	movs	r3, #0
 8007110:	4639      	mov	r1, r7
 8007112:	220a      	movs	r2, #10
 8007114:	4620      	mov	r0, r4
 8007116:	f000 fc4b 	bl	80079b0 <__multadd>
 800711a:	9b02      	ldr	r3, [sp, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	4607      	mov	r7, r0
 8007120:	f300 808e 	bgt.w	8007240 <_dtoa_r+0x990>
 8007124:	9b06      	ldr	r3, [sp, #24]
 8007126:	2b02      	cmp	r3, #2
 8007128:	dc51      	bgt.n	80071ce <_dtoa_r+0x91e>
 800712a:	e089      	b.n	8007240 <_dtoa_r+0x990>
 800712c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800712e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007132:	e74b      	b.n	8006fcc <_dtoa_r+0x71c>
 8007134:	9b03      	ldr	r3, [sp, #12]
 8007136:	1e5e      	subs	r6, r3, #1
 8007138:	9b07      	ldr	r3, [sp, #28]
 800713a:	42b3      	cmp	r3, r6
 800713c:	bfbf      	itttt	lt
 800713e:	9b07      	ldrlt	r3, [sp, #28]
 8007140:	9607      	strlt	r6, [sp, #28]
 8007142:	1af2      	sublt	r2, r6, r3
 8007144:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007146:	bfb6      	itet	lt
 8007148:	189b      	addlt	r3, r3, r2
 800714a:	1b9e      	subge	r6, r3, r6
 800714c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800714e:	9b03      	ldr	r3, [sp, #12]
 8007150:	bfb8      	it	lt
 8007152:	2600      	movlt	r6, #0
 8007154:	2b00      	cmp	r3, #0
 8007156:	bfb7      	itett	lt
 8007158:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800715c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007160:	1a9d      	sublt	r5, r3, r2
 8007162:	2300      	movlt	r3, #0
 8007164:	e734      	b.n	8006fd0 <_dtoa_r+0x720>
 8007166:	9e07      	ldr	r6, [sp, #28]
 8007168:	9d04      	ldr	r5, [sp, #16]
 800716a:	9f08      	ldr	r7, [sp, #32]
 800716c:	e73b      	b.n	8006fe6 <_dtoa_r+0x736>
 800716e:	9a07      	ldr	r2, [sp, #28]
 8007170:	e767      	b.n	8007042 <_dtoa_r+0x792>
 8007172:	9b06      	ldr	r3, [sp, #24]
 8007174:	2b01      	cmp	r3, #1
 8007176:	dc18      	bgt.n	80071aa <_dtoa_r+0x8fa>
 8007178:	f1ba 0f00 	cmp.w	sl, #0
 800717c:	d115      	bne.n	80071aa <_dtoa_r+0x8fa>
 800717e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007182:	b993      	cbnz	r3, 80071aa <_dtoa_r+0x8fa>
 8007184:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007188:	0d1b      	lsrs	r3, r3, #20
 800718a:	051b      	lsls	r3, r3, #20
 800718c:	b183      	cbz	r3, 80071b0 <_dtoa_r+0x900>
 800718e:	9b04      	ldr	r3, [sp, #16]
 8007190:	3301      	adds	r3, #1
 8007192:	9304      	str	r3, [sp, #16]
 8007194:	9b05      	ldr	r3, [sp, #20]
 8007196:	3301      	adds	r3, #1
 8007198:	9305      	str	r3, [sp, #20]
 800719a:	f04f 0801 	mov.w	r8, #1
 800719e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f47f af6a 	bne.w	800707a <_dtoa_r+0x7ca>
 80071a6:	2001      	movs	r0, #1
 80071a8:	e76f      	b.n	800708a <_dtoa_r+0x7da>
 80071aa:	f04f 0800 	mov.w	r8, #0
 80071ae:	e7f6      	b.n	800719e <_dtoa_r+0x8ee>
 80071b0:	4698      	mov	r8, r3
 80071b2:	e7f4      	b.n	800719e <_dtoa_r+0x8ee>
 80071b4:	f43f af7d 	beq.w	80070b2 <_dtoa_r+0x802>
 80071b8:	4618      	mov	r0, r3
 80071ba:	301c      	adds	r0, #28
 80071bc:	e772      	b.n	80070a4 <_dtoa_r+0x7f4>
 80071be:	9b03      	ldr	r3, [sp, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	dc37      	bgt.n	8007234 <_dtoa_r+0x984>
 80071c4:	9b06      	ldr	r3, [sp, #24]
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	dd34      	ble.n	8007234 <_dtoa_r+0x984>
 80071ca:	9b03      	ldr	r3, [sp, #12]
 80071cc:	9302      	str	r3, [sp, #8]
 80071ce:	9b02      	ldr	r3, [sp, #8]
 80071d0:	b96b      	cbnz	r3, 80071ee <_dtoa_r+0x93e>
 80071d2:	4631      	mov	r1, r6
 80071d4:	2205      	movs	r2, #5
 80071d6:	4620      	mov	r0, r4
 80071d8:	f000 fbea 	bl	80079b0 <__multadd>
 80071dc:	4601      	mov	r1, r0
 80071de:	4606      	mov	r6, r0
 80071e0:	ee18 0a10 	vmov	r0, s16
 80071e4:	f000 fe04 	bl	8007df0 <__mcmp>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	f73f adbb 	bgt.w	8006d64 <_dtoa_r+0x4b4>
 80071ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071f0:	9d01      	ldr	r5, [sp, #4]
 80071f2:	43db      	mvns	r3, r3
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	f04f 0800 	mov.w	r8, #0
 80071fa:	4631      	mov	r1, r6
 80071fc:	4620      	mov	r0, r4
 80071fe:	f000 fbb5 	bl	800796c <_Bfree>
 8007202:	2f00      	cmp	r7, #0
 8007204:	f43f aea4 	beq.w	8006f50 <_dtoa_r+0x6a0>
 8007208:	f1b8 0f00 	cmp.w	r8, #0
 800720c:	d005      	beq.n	800721a <_dtoa_r+0x96a>
 800720e:	45b8      	cmp	r8, r7
 8007210:	d003      	beq.n	800721a <_dtoa_r+0x96a>
 8007212:	4641      	mov	r1, r8
 8007214:	4620      	mov	r0, r4
 8007216:	f000 fba9 	bl	800796c <_Bfree>
 800721a:	4639      	mov	r1, r7
 800721c:	4620      	mov	r0, r4
 800721e:	f000 fba5 	bl	800796c <_Bfree>
 8007222:	e695      	b.n	8006f50 <_dtoa_r+0x6a0>
 8007224:	2600      	movs	r6, #0
 8007226:	4637      	mov	r7, r6
 8007228:	e7e1      	b.n	80071ee <_dtoa_r+0x93e>
 800722a:	9700      	str	r7, [sp, #0]
 800722c:	4637      	mov	r7, r6
 800722e:	e599      	b.n	8006d64 <_dtoa_r+0x4b4>
 8007230:	40240000 	.word	0x40240000
 8007234:	9b08      	ldr	r3, [sp, #32]
 8007236:	2b00      	cmp	r3, #0
 8007238:	f000 80ca 	beq.w	80073d0 <_dtoa_r+0xb20>
 800723c:	9b03      	ldr	r3, [sp, #12]
 800723e:	9302      	str	r3, [sp, #8]
 8007240:	2d00      	cmp	r5, #0
 8007242:	dd05      	ble.n	8007250 <_dtoa_r+0x9a0>
 8007244:	4639      	mov	r1, r7
 8007246:	462a      	mov	r2, r5
 8007248:	4620      	mov	r0, r4
 800724a:	f000 fd61 	bl	8007d10 <__lshift>
 800724e:	4607      	mov	r7, r0
 8007250:	f1b8 0f00 	cmp.w	r8, #0
 8007254:	d05b      	beq.n	800730e <_dtoa_r+0xa5e>
 8007256:	6879      	ldr	r1, [r7, #4]
 8007258:	4620      	mov	r0, r4
 800725a:	f000 fb47 	bl	80078ec <_Balloc>
 800725e:	4605      	mov	r5, r0
 8007260:	b928      	cbnz	r0, 800726e <_dtoa_r+0x9be>
 8007262:	4b87      	ldr	r3, [pc, #540]	; (8007480 <_dtoa_r+0xbd0>)
 8007264:	4602      	mov	r2, r0
 8007266:	f240 21ea 	movw	r1, #746	; 0x2ea
 800726a:	f7ff bb3b 	b.w	80068e4 <_dtoa_r+0x34>
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	3202      	adds	r2, #2
 8007272:	0092      	lsls	r2, r2, #2
 8007274:	f107 010c 	add.w	r1, r7, #12
 8007278:	300c      	adds	r0, #12
 800727a:	f7fe fa83 	bl	8005784 <memcpy>
 800727e:	2201      	movs	r2, #1
 8007280:	4629      	mov	r1, r5
 8007282:	4620      	mov	r0, r4
 8007284:	f000 fd44 	bl	8007d10 <__lshift>
 8007288:	9b01      	ldr	r3, [sp, #4]
 800728a:	f103 0901 	add.w	r9, r3, #1
 800728e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007292:	4413      	add	r3, r2
 8007294:	9305      	str	r3, [sp, #20]
 8007296:	f00a 0301 	and.w	r3, sl, #1
 800729a:	46b8      	mov	r8, r7
 800729c:	9304      	str	r3, [sp, #16]
 800729e:	4607      	mov	r7, r0
 80072a0:	4631      	mov	r1, r6
 80072a2:	ee18 0a10 	vmov	r0, s16
 80072a6:	f7ff fa78 	bl	800679a <quorem>
 80072aa:	4641      	mov	r1, r8
 80072ac:	9002      	str	r0, [sp, #8]
 80072ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80072b2:	ee18 0a10 	vmov	r0, s16
 80072b6:	f000 fd9b 	bl	8007df0 <__mcmp>
 80072ba:	463a      	mov	r2, r7
 80072bc:	9003      	str	r0, [sp, #12]
 80072be:	4631      	mov	r1, r6
 80072c0:	4620      	mov	r0, r4
 80072c2:	f000 fdb1 	bl	8007e28 <__mdiff>
 80072c6:	68c2      	ldr	r2, [r0, #12]
 80072c8:	f109 3bff 	add.w	fp, r9, #4294967295
 80072cc:	4605      	mov	r5, r0
 80072ce:	bb02      	cbnz	r2, 8007312 <_dtoa_r+0xa62>
 80072d0:	4601      	mov	r1, r0
 80072d2:	ee18 0a10 	vmov	r0, s16
 80072d6:	f000 fd8b 	bl	8007df0 <__mcmp>
 80072da:	4602      	mov	r2, r0
 80072dc:	4629      	mov	r1, r5
 80072de:	4620      	mov	r0, r4
 80072e0:	9207      	str	r2, [sp, #28]
 80072e2:	f000 fb43 	bl	800796c <_Bfree>
 80072e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80072ea:	ea43 0102 	orr.w	r1, r3, r2
 80072ee:	9b04      	ldr	r3, [sp, #16]
 80072f0:	430b      	orrs	r3, r1
 80072f2:	464d      	mov	r5, r9
 80072f4:	d10f      	bne.n	8007316 <_dtoa_r+0xa66>
 80072f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80072fa:	d02a      	beq.n	8007352 <_dtoa_r+0xaa2>
 80072fc:	9b03      	ldr	r3, [sp, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	dd02      	ble.n	8007308 <_dtoa_r+0xa58>
 8007302:	9b02      	ldr	r3, [sp, #8]
 8007304:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007308:	f88b a000 	strb.w	sl, [fp]
 800730c:	e775      	b.n	80071fa <_dtoa_r+0x94a>
 800730e:	4638      	mov	r0, r7
 8007310:	e7ba      	b.n	8007288 <_dtoa_r+0x9d8>
 8007312:	2201      	movs	r2, #1
 8007314:	e7e2      	b.n	80072dc <_dtoa_r+0xa2c>
 8007316:	9b03      	ldr	r3, [sp, #12]
 8007318:	2b00      	cmp	r3, #0
 800731a:	db04      	blt.n	8007326 <_dtoa_r+0xa76>
 800731c:	9906      	ldr	r1, [sp, #24]
 800731e:	430b      	orrs	r3, r1
 8007320:	9904      	ldr	r1, [sp, #16]
 8007322:	430b      	orrs	r3, r1
 8007324:	d122      	bne.n	800736c <_dtoa_r+0xabc>
 8007326:	2a00      	cmp	r2, #0
 8007328:	ddee      	ble.n	8007308 <_dtoa_r+0xa58>
 800732a:	ee18 1a10 	vmov	r1, s16
 800732e:	2201      	movs	r2, #1
 8007330:	4620      	mov	r0, r4
 8007332:	f000 fced 	bl	8007d10 <__lshift>
 8007336:	4631      	mov	r1, r6
 8007338:	ee08 0a10 	vmov	s16, r0
 800733c:	f000 fd58 	bl	8007df0 <__mcmp>
 8007340:	2800      	cmp	r0, #0
 8007342:	dc03      	bgt.n	800734c <_dtoa_r+0xa9c>
 8007344:	d1e0      	bne.n	8007308 <_dtoa_r+0xa58>
 8007346:	f01a 0f01 	tst.w	sl, #1
 800734a:	d0dd      	beq.n	8007308 <_dtoa_r+0xa58>
 800734c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007350:	d1d7      	bne.n	8007302 <_dtoa_r+0xa52>
 8007352:	2339      	movs	r3, #57	; 0x39
 8007354:	f88b 3000 	strb.w	r3, [fp]
 8007358:	462b      	mov	r3, r5
 800735a:	461d      	mov	r5, r3
 800735c:	3b01      	subs	r3, #1
 800735e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007362:	2a39      	cmp	r2, #57	; 0x39
 8007364:	d071      	beq.n	800744a <_dtoa_r+0xb9a>
 8007366:	3201      	adds	r2, #1
 8007368:	701a      	strb	r2, [r3, #0]
 800736a:	e746      	b.n	80071fa <_dtoa_r+0x94a>
 800736c:	2a00      	cmp	r2, #0
 800736e:	dd07      	ble.n	8007380 <_dtoa_r+0xad0>
 8007370:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007374:	d0ed      	beq.n	8007352 <_dtoa_r+0xaa2>
 8007376:	f10a 0301 	add.w	r3, sl, #1
 800737a:	f88b 3000 	strb.w	r3, [fp]
 800737e:	e73c      	b.n	80071fa <_dtoa_r+0x94a>
 8007380:	9b05      	ldr	r3, [sp, #20]
 8007382:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007386:	4599      	cmp	r9, r3
 8007388:	d047      	beq.n	800741a <_dtoa_r+0xb6a>
 800738a:	ee18 1a10 	vmov	r1, s16
 800738e:	2300      	movs	r3, #0
 8007390:	220a      	movs	r2, #10
 8007392:	4620      	mov	r0, r4
 8007394:	f000 fb0c 	bl	80079b0 <__multadd>
 8007398:	45b8      	cmp	r8, r7
 800739a:	ee08 0a10 	vmov	s16, r0
 800739e:	f04f 0300 	mov.w	r3, #0
 80073a2:	f04f 020a 	mov.w	r2, #10
 80073a6:	4641      	mov	r1, r8
 80073a8:	4620      	mov	r0, r4
 80073aa:	d106      	bne.n	80073ba <_dtoa_r+0xb0a>
 80073ac:	f000 fb00 	bl	80079b0 <__multadd>
 80073b0:	4680      	mov	r8, r0
 80073b2:	4607      	mov	r7, r0
 80073b4:	f109 0901 	add.w	r9, r9, #1
 80073b8:	e772      	b.n	80072a0 <_dtoa_r+0x9f0>
 80073ba:	f000 faf9 	bl	80079b0 <__multadd>
 80073be:	4639      	mov	r1, r7
 80073c0:	4680      	mov	r8, r0
 80073c2:	2300      	movs	r3, #0
 80073c4:	220a      	movs	r2, #10
 80073c6:	4620      	mov	r0, r4
 80073c8:	f000 faf2 	bl	80079b0 <__multadd>
 80073cc:	4607      	mov	r7, r0
 80073ce:	e7f1      	b.n	80073b4 <_dtoa_r+0xb04>
 80073d0:	9b03      	ldr	r3, [sp, #12]
 80073d2:	9302      	str	r3, [sp, #8]
 80073d4:	9d01      	ldr	r5, [sp, #4]
 80073d6:	ee18 0a10 	vmov	r0, s16
 80073da:	4631      	mov	r1, r6
 80073dc:	f7ff f9dd 	bl	800679a <quorem>
 80073e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80073e4:	9b01      	ldr	r3, [sp, #4]
 80073e6:	f805 ab01 	strb.w	sl, [r5], #1
 80073ea:	1aea      	subs	r2, r5, r3
 80073ec:	9b02      	ldr	r3, [sp, #8]
 80073ee:	4293      	cmp	r3, r2
 80073f0:	dd09      	ble.n	8007406 <_dtoa_r+0xb56>
 80073f2:	ee18 1a10 	vmov	r1, s16
 80073f6:	2300      	movs	r3, #0
 80073f8:	220a      	movs	r2, #10
 80073fa:	4620      	mov	r0, r4
 80073fc:	f000 fad8 	bl	80079b0 <__multadd>
 8007400:	ee08 0a10 	vmov	s16, r0
 8007404:	e7e7      	b.n	80073d6 <_dtoa_r+0xb26>
 8007406:	9b02      	ldr	r3, [sp, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	bfc8      	it	gt
 800740c:	461d      	movgt	r5, r3
 800740e:	9b01      	ldr	r3, [sp, #4]
 8007410:	bfd8      	it	le
 8007412:	2501      	movle	r5, #1
 8007414:	441d      	add	r5, r3
 8007416:	f04f 0800 	mov.w	r8, #0
 800741a:	ee18 1a10 	vmov	r1, s16
 800741e:	2201      	movs	r2, #1
 8007420:	4620      	mov	r0, r4
 8007422:	f000 fc75 	bl	8007d10 <__lshift>
 8007426:	4631      	mov	r1, r6
 8007428:	ee08 0a10 	vmov	s16, r0
 800742c:	f000 fce0 	bl	8007df0 <__mcmp>
 8007430:	2800      	cmp	r0, #0
 8007432:	dc91      	bgt.n	8007358 <_dtoa_r+0xaa8>
 8007434:	d102      	bne.n	800743c <_dtoa_r+0xb8c>
 8007436:	f01a 0f01 	tst.w	sl, #1
 800743a:	d18d      	bne.n	8007358 <_dtoa_r+0xaa8>
 800743c:	462b      	mov	r3, r5
 800743e:	461d      	mov	r5, r3
 8007440:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007444:	2a30      	cmp	r2, #48	; 0x30
 8007446:	d0fa      	beq.n	800743e <_dtoa_r+0xb8e>
 8007448:	e6d7      	b.n	80071fa <_dtoa_r+0x94a>
 800744a:	9a01      	ldr	r2, [sp, #4]
 800744c:	429a      	cmp	r2, r3
 800744e:	d184      	bne.n	800735a <_dtoa_r+0xaaa>
 8007450:	9b00      	ldr	r3, [sp, #0]
 8007452:	3301      	adds	r3, #1
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	2331      	movs	r3, #49	; 0x31
 8007458:	7013      	strb	r3, [r2, #0]
 800745a:	e6ce      	b.n	80071fa <_dtoa_r+0x94a>
 800745c:	4b09      	ldr	r3, [pc, #36]	; (8007484 <_dtoa_r+0xbd4>)
 800745e:	f7ff ba95 	b.w	800698c <_dtoa_r+0xdc>
 8007462:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007464:	2b00      	cmp	r3, #0
 8007466:	f47f aa6e 	bne.w	8006946 <_dtoa_r+0x96>
 800746a:	4b07      	ldr	r3, [pc, #28]	; (8007488 <_dtoa_r+0xbd8>)
 800746c:	f7ff ba8e 	b.w	800698c <_dtoa_r+0xdc>
 8007470:	9b02      	ldr	r3, [sp, #8]
 8007472:	2b00      	cmp	r3, #0
 8007474:	dcae      	bgt.n	80073d4 <_dtoa_r+0xb24>
 8007476:	9b06      	ldr	r3, [sp, #24]
 8007478:	2b02      	cmp	r3, #2
 800747a:	f73f aea8 	bgt.w	80071ce <_dtoa_r+0x91e>
 800747e:	e7a9      	b.n	80073d4 <_dtoa_r+0xb24>
 8007480:	080088b0 	.word	0x080088b0
 8007484:	0800880d 	.word	0x0800880d
 8007488:	08008831 	.word	0x08008831

0800748c <__sflush_r>:
 800748c:	898a      	ldrh	r2, [r1, #12]
 800748e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007492:	4605      	mov	r5, r0
 8007494:	0710      	lsls	r0, r2, #28
 8007496:	460c      	mov	r4, r1
 8007498:	d458      	bmi.n	800754c <__sflush_r+0xc0>
 800749a:	684b      	ldr	r3, [r1, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	dc05      	bgt.n	80074ac <__sflush_r+0x20>
 80074a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	dc02      	bgt.n	80074ac <__sflush_r+0x20>
 80074a6:	2000      	movs	r0, #0
 80074a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074ae:	2e00      	cmp	r6, #0
 80074b0:	d0f9      	beq.n	80074a6 <__sflush_r+0x1a>
 80074b2:	2300      	movs	r3, #0
 80074b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074b8:	682f      	ldr	r7, [r5, #0]
 80074ba:	602b      	str	r3, [r5, #0]
 80074bc:	d032      	beq.n	8007524 <__sflush_r+0x98>
 80074be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074c0:	89a3      	ldrh	r3, [r4, #12]
 80074c2:	075a      	lsls	r2, r3, #29
 80074c4:	d505      	bpl.n	80074d2 <__sflush_r+0x46>
 80074c6:	6863      	ldr	r3, [r4, #4]
 80074c8:	1ac0      	subs	r0, r0, r3
 80074ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074cc:	b10b      	cbz	r3, 80074d2 <__sflush_r+0x46>
 80074ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074d0:	1ac0      	subs	r0, r0, r3
 80074d2:	2300      	movs	r3, #0
 80074d4:	4602      	mov	r2, r0
 80074d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074d8:	6a21      	ldr	r1, [r4, #32]
 80074da:	4628      	mov	r0, r5
 80074dc:	47b0      	blx	r6
 80074de:	1c43      	adds	r3, r0, #1
 80074e0:	89a3      	ldrh	r3, [r4, #12]
 80074e2:	d106      	bne.n	80074f2 <__sflush_r+0x66>
 80074e4:	6829      	ldr	r1, [r5, #0]
 80074e6:	291d      	cmp	r1, #29
 80074e8:	d82c      	bhi.n	8007544 <__sflush_r+0xb8>
 80074ea:	4a2a      	ldr	r2, [pc, #168]	; (8007594 <__sflush_r+0x108>)
 80074ec:	40ca      	lsrs	r2, r1
 80074ee:	07d6      	lsls	r6, r2, #31
 80074f0:	d528      	bpl.n	8007544 <__sflush_r+0xb8>
 80074f2:	2200      	movs	r2, #0
 80074f4:	6062      	str	r2, [r4, #4]
 80074f6:	04d9      	lsls	r1, r3, #19
 80074f8:	6922      	ldr	r2, [r4, #16]
 80074fa:	6022      	str	r2, [r4, #0]
 80074fc:	d504      	bpl.n	8007508 <__sflush_r+0x7c>
 80074fe:	1c42      	adds	r2, r0, #1
 8007500:	d101      	bne.n	8007506 <__sflush_r+0x7a>
 8007502:	682b      	ldr	r3, [r5, #0]
 8007504:	b903      	cbnz	r3, 8007508 <__sflush_r+0x7c>
 8007506:	6560      	str	r0, [r4, #84]	; 0x54
 8007508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800750a:	602f      	str	r7, [r5, #0]
 800750c:	2900      	cmp	r1, #0
 800750e:	d0ca      	beq.n	80074a6 <__sflush_r+0x1a>
 8007510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007514:	4299      	cmp	r1, r3
 8007516:	d002      	beq.n	800751e <__sflush_r+0x92>
 8007518:	4628      	mov	r0, r5
 800751a:	f7fe f963 	bl	80057e4 <_free_r>
 800751e:	2000      	movs	r0, #0
 8007520:	6360      	str	r0, [r4, #52]	; 0x34
 8007522:	e7c1      	b.n	80074a8 <__sflush_r+0x1c>
 8007524:	6a21      	ldr	r1, [r4, #32]
 8007526:	2301      	movs	r3, #1
 8007528:	4628      	mov	r0, r5
 800752a:	47b0      	blx	r6
 800752c:	1c41      	adds	r1, r0, #1
 800752e:	d1c7      	bne.n	80074c0 <__sflush_r+0x34>
 8007530:	682b      	ldr	r3, [r5, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d0c4      	beq.n	80074c0 <__sflush_r+0x34>
 8007536:	2b1d      	cmp	r3, #29
 8007538:	d001      	beq.n	800753e <__sflush_r+0xb2>
 800753a:	2b16      	cmp	r3, #22
 800753c:	d101      	bne.n	8007542 <__sflush_r+0xb6>
 800753e:	602f      	str	r7, [r5, #0]
 8007540:	e7b1      	b.n	80074a6 <__sflush_r+0x1a>
 8007542:	89a3      	ldrh	r3, [r4, #12]
 8007544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007548:	81a3      	strh	r3, [r4, #12]
 800754a:	e7ad      	b.n	80074a8 <__sflush_r+0x1c>
 800754c:	690f      	ldr	r7, [r1, #16]
 800754e:	2f00      	cmp	r7, #0
 8007550:	d0a9      	beq.n	80074a6 <__sflush_r+0x1a>
 8007552:	0793      	lsls	r3, r2, #30
 8007554:	680e      	ldr	r6, [r1, #0]
 8007556:	bf08      	it	eq
 8007558:	694b      	ldreq	r3, [r1, #20]
 800755a:	600f      	str	r7, [r1, #0]
 800755c:	bf18      	it	ne
 800755e:	2300      	movne	r3, #0
 8007560:	eba6 0807 	sub.w	r8, r6, r7
 8007564:	608b      	str	r3, [r1, #8]
 8007566:	f1b8 0f00 	cmp.w	r8, #0
 800756a:	dd9c      	ble.n	80074a6 <__sflush_r+0x1a>
 800756c:	6a21      	ldr	r1, [r4, #32]
 800756e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007570:	4643      	mov	r3, r8
 8007572:	463a      	mov	r2, r7
 8007574:	4628      	mov	r0, r5
 8007576:	47b0      	blx	r6
 8007578:	2800      	cmp	r0, #0
 800757a:	dc06      	bgt.n	800758a <__sflush_r+0xfe>
 800757c:	89a3      	ldrh	r3, [r4, #12]
 800757e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007582:	81a3      	strh	r3, [r4, #12]
 8007584:	f04f 30ff 	mov.w	r0, #4294967295
 8007588:	e78e      	b.n	80074a8 <__sflush_r+0x1c>
 800758a:	4407      	add	r7, r0
 800758c:	eba8 0800 	sub.w	r8, r8, r0
 8007590:	e7e9      	b.n	8007566 <__sflush_r+0xda>
 8007592:	bf00      	nop
 8007594:	20400001 	.word	0x20400001

08007598 <_fflush_r>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	690b      	ldr	r3, [r1, #16]
 800759c:	4605      	mov	r5, r0
 800759e:	460c      	mov	r4, r1
 80075a0:	b913      	cbnz	r3, 80075a8 <_fflush_r+0x10>
 80075a2:	2500      	movs	r5, #0
 80075a4:	4628      	mov	r0, r5
 80075a6:	bd38      	pop	{r3, r4, r5, pc}
 80075a8:	b118      	cbz	r0, 80075b2 <_fflush_r+0x1a>
 80075aa:	6983      	ldr	r3, [r0, #24]
 80075ac:	b90b      	cbnz	r3, 80075b2 <_fflush_r+0x1a>
 80075ae:	f000 f887 	bl	80076c0 <__sinit>
 80075b2:	4b14      	ldr	r3, [pc, #80]	; (8007604 <_fflush_r+0x6c>)
 80075b4:	429c      	cmp	r4, r3
 80075b6:	d11b      	bne.n	80075f0 <_fflush_r+0x58>
 80075b8:	686c      	ldr	r4, [r5, #4]
 80075ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d0ef      	beq.n	80075a2 <_fflush_r+0xa>
 80075c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075c4:	07d0      	lsls	r0, r2, #31
 80075c6:	d404      	bmi.n	80075d2 <_fflush_r+0x3a>
 80075c8:	0599      	lsls	r1, r3, #22
 80075ca:	d402      	bmi.n	80075d2 <_fflush_r+0x3a>
 80075cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ce:	f000 f91a 	bl	8007806 <__retarget_lock_acquire_recursive>
 80075d2:	4628      	mov	r0, r5
 80075d4:	4621      	mov	r1, r4
 80075d6:	f7ff ff59 	bl	800748c <__sflush_r>
 80075da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075dc:	07da      	lsls	r2, r3, #31
 80075de:	4605      	mov	r5, r0
 80075e0:	d4e0      	bmi.n	80075a4 <_fflush_r+0xc>
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	059b      	lsls	r3, r3, #22
 80075e6:	d4dd      	bmi.n	80075a4 <_fflush_r+0xc>
 80075e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ea:	f000 f90d 	bl	8007808 <__retarget_lock_release_recursive>
 80075ee:	e7d9      	b.n	80075a4 <_fflush_r+0xc>
 80075f0:	4b05      	ldr	r3, [pc, #20]	; (8007608 <_fflush_r+0x70>)
 80075f2:	429c      	cmp	r4, r3
 80075f4:	d101      	bne.n	80075fa <_fflush_r+0x62>
 80075f6:	68ac      	ldr	r4, [r5, #8]
 80075f8:	e7df      	b.n	80075ba <_fflush_r+0x22>
 80075fa:	4b04      	ldr	r3, [pc, #16]	; (800760c <_fflush_r+0x74>)
 80075fc:	429c      	cmp	r4, r3
 80075fe:	bf08      	it	eq
 8007600:	68ec      	ldreq	r4, [r5, #12]
 8007602:	e7da      	b.n	80075ba <_fflush_r+0x22>
 8007604:	080088e4 	.word	0x080088e4
 8007608:	08008904 	.word	0x08008904
 800760c:	080088c4 	.word	0x080088c4

08007610 <std>:
 8007610:	2300      	movs	r3, #0
 8007612:	b510      	push	{r4, lr}
 8007614:	4604      	mov	r4, r0
 8007616:	e9c0 3300 	strd	r3, r3, [r0]
 800761a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800761e:	6083      	str	r3, [r0, #8]
 8007620:	8181      	strh	r1, [r0, #12]
 8007622:	6643      	str	r3, [r0, #100]	; 0x64
 8007624:	81c2      	strh	r2, [r0, #14]
 8007626:	6183      	str	r3, [r0, #24]
 8007628:	4619      	mov	r1, r3
 800762a:	2208      	movs	r2, #8
 800762c:	305c      	adds	r0, #92	; 0x5c
 800762e:	f7fe f8d1 	bl	80057d4 <memset>
 8007632:	4b05      	ldr	r3, [pc, #20]	; (8007648 <std+0x38>)
 8007634:	6263      	str	r3, [r4, #36]	; 0x24
 8007636:	4b05      	ldr	r3, [pc, #20]	; (800764c <std+0x3c>)
 8007638:	62a3      	str	r3, [r4, #40]	; 0x28
 800763a:	4b05      	ldr	r3, [pc, #20]	; (8007650 <std+0x40>)
 800763c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800763e:	4b05      	ldr	r3, [pc, #20]	; (8007654 <std+0x44>)
 8007640:	6224      	str	r4, [r4, #32]
 8007642:	6323      	str	r3, [r4, #48]	; 0x30
 8007644:	bd10      	pop	{r4, pc}
 8007646:	bf00      	nop
 8007648:	080083bd 	.word	0x080083bd
 800764c:	080083df 	.word	0x080083df
 8007650:	08008417 	.word	0x08008417
 8007654:	0800843b 	.word	0x0800843b

08007658 <_cleanup_r>:
 8007658:	4901      	ldr	r1, [pc, #4]	; (8007660 <_cleanup_r+0x8>)
 800765a:	f000 b8af 	b.w	80077bc <_fwalk_reent>
 800765e:	bf00      	nop
 8007660:	08007599 	.word	0x08007599

08007664 <__sfmoreglue>:
 8007664:	b570      	push	{r4, r5, r6, lr}
 8007666:	2268      	movs	r2, #104	; 0x68
 8007668:	1e4d      	subs	r5, r1, #1
 800766a:	4355      	muls	r5, r2
 800766c:	460e      	mov	r6, r1
 800766e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007672:	f7fe f923 	bl	80058bc <_malloc_r>
 8007676:	4604      	mov	r4, r0
 8007678:	b140      	cbz	r0, 800768c <__sfmoreglue+0x28>
 800767a:	2100      	movs	r1, #0
 800767c:	e9c0 1600 	strd	r1, r6, [r0]
 8007680:	300c      	adds	r0, #12
 8007682:	60a0      	str	r0, [r4, #8]
 8007684:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007688:	f7fe f8a4 	bl	80057d4 <memset>
 800768c:	4620      	mov	r0, r4
 800768e:	bd70      	pop	{r4, r5, r6, pc}

08007690 <__sfp_lock_acquire>:
 8007690:	4801      	ldr	r0, [pc, #4]	; (8007698 <__sfp_lock_acquire+0x8>)
 8007692:	f000 b8b8 	b.w	8007806 <__retarget_lock_acquire_recursive>
 8007696:	bf00      	nop
 8007698:	200038ed 	.word	0x200038ed

0800769c <__sfp_lock_release>:
 800769c:	4801      	ldr	r0, [pc, #4]	; (80076a4 <__sfp_lock_release+0x8>)
 800769e:	f000 b8b3 	b.w	8007808 <__retarget_lock_release_recursive>
 80076a2:	bf00      	nop
 80076a4:	200038ed 	.word	0x200038ed

080076a8 <__sinit_lock_acquire>:
 80076a8:	4801      	ldr	r0, [pc, #4]	; (80076b0 <__sinit_lock_acquire+0x8>)
 80076aa:	f000 b8ac 	b.w	8007806 <__retarget_lock_acquire_recursive>
 80076ae:	bf00      	nop
 80076b0:	200038ee 	.word	0x200038ee

080076b4 <__sinit_lock_release>:
 80076b4:	4801      	ldr	r0, [pc, #4]	; (80076bc <__sinit_lock_release+0x8>)
 80076b6:	f000 b8a7 	b.w	8007808 <__retarget_lock_release_recursive>
 80076ba:	bf00      	nop
 80076bc:	200038ee 	.word	0x200038ee

080076c0 <__sinit>:
 80076c0:	b510      	push	{r4, lr}
 80076c2:	4604      	mov	r4, r0
 80076c4:	f7ff fff0 	bl	80076a8 <__sinit_lock_acquire>
 80076c8:	69a3      	ldr	r3, [r4, #24]
 80076ca:	b11b      	cbz	r3, 80076d4 <__sinit+0x14>
 80076cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076d0:	f7ff bff0 	b.w	80076b4 <__sinit_lock_release>
 80076d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80076d8:	6523      	str	r3, [r4, #80]	; 0x50
 80076da:	4b13      	ldr	r3, [pc, #76]	; (8007728 <__sinit+0x68>)
 80076dc:	4a13      	ldr	r2, [pc, #76]	; (800772c <__sinit+0x6c>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80076e2:	42a3      	cmp	r3, r4
 80076e4:	bf04      	itt	eq
 80076e6:	2301      	moveq	r3, #1
 80076e8:	61a3      	streq	r3, [r4, #24]
 80076ea:	4620      	mov	r0, r4
 80076ec:	f000 f820 	bl	8007730 <__sfp>
 80076f0:	6060      	str	r0, [r4, #4]
 80076f2:	4620      	mov	r0, r4
 80076f4:	f000 f81c 	bl	8007730 <__sfp>
 80076f8:	60a0      	str	r0, [r4, #8]
 80076fa:	4620      	mov	r0, r4
 80076fc:	f000 f818 	bl	8007730 <__sfp>
 8007700:	2200      	movs	r2, #0
 8007702:	60e0      	str	r0, [r4, #12]
 8007704:	2104      	movs	r1, #4
 8007706:	6860      	ldr	r0, [r4, #4]
 8007708:	f7ff ff82 	bl	8007610 <std>
 800770c:	68a0      	ldr	r0, [r4, #8]
 800770e:	2201      	movs	r2, #1
 8007710:	2109      	movs	r1, #9
 8007712:	f7ff ff7d 	bl	8007610 <std>
 8007716:	68e0      	ldr	r0, [r4, #12]
 8007718:	2202      	movs	r2, #2
 800771a:	2112      	movs	r1, #18
 800771c:	f7ff ff78 	bl	8007610 <std>
 8007720:	2301      	movs	r3, #1
 8007722:	61a3      	str	r3, [r4, #24]
 8007724:	e7d2      	b.n	80076cc <__sinit+0xc>
 8007726:	bf00      	nop
 8007728:	080087e8 	.word	0x080087e8
 800772c:	08007659 	.word	0x08007659

08007730 <__sfp>:
 8007730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007732:	4607      	mov	r7, r0
 8007734:	f7ff ffac 	bl	8007690 <__sfp_lock_acquire>
 8007738:	4b1e      	ldr	r3, [pc, #120]	; (80077b4 <__sfp+0x84>)
 800773a:	681e      	ldr	r6, [r3, #0]
 800773c:	69b3      	ldr	r3, [r6, #24]
 800773e:	b913      	cbnz	r3, 8007746 <__sfp+0x16>
 8007740:	4630      	mov	r0, r6
 8007742:	f7ff ffbd 	bl	80076c0 <__sinit>
 8007746:	3648      	adds	r6, #72	; 0x48
 8007748:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800774c:	3b01      	subs	r3, #1
 800774e:	d503      	bpl.n	8007758 <__sfp+0x28>
 8007750:	6833      	ldr	r3, [r6, #0]
 8007752:	b30b      	cbz	r3, 8007798 <__sfp+0x68>
 8007754:	6836      	ldr	r6, [r6, #0]
 8007756:	e7f7      	b.n	8007748 <__sfp+0x18>
 8007758:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800775c:	b9d5      	cbnz	r5, 8007794 <__sfp+0x64>
 800775e:	4b16      	ldr	r3, [pc, #88]	; (80077b8 <__sfp+0x88>)
 8007760:	60e3      	str	r3, [r4, #12]
 8007762:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007766:	6665      	str	r5, [r4, #100]	; 0x64
 8007768:	f000 f84c 	bl	8007804 <__retarget_lock_init_recursive>
 800776c:	f7ff ff96 	bl	800769c <__sfp_lock_release>
 8007770:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007774:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007778:	6025      	str	r5, [r4, #0]
 800777a:	61a5      	str	r5, [r4, #24]
 800777c:	2208      	movs	r2, #8
 800777e:	4629      	mov	r1, r5
 8007780:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007784:	f7fe f826 	bl	80057d4 <memset>
 8007788:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800778c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007790:	4620      	mov	r0, r4
 8007792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007794:	3468      	adds	r4, #104	; 0x68
 8007796:	e7d9      	b.n	800774c <__sfp+0x1c>
 8007798:	2104      	movs	r1, #4
 800779a:	4638      	mov	r0, r7
 800779c:	f7ff ff62 	bl	8007664 <__sfmoreglue>
 80077a0:	4604      	mov	r4, r0
 80077a2:	6030      	str	r0, [r6, #0]
 80077a4:	2800      	cmp	r0, #0
 80077a6:	d1d5      	bne.n	8007754 <__sfp+0x24>
 80077a8:	f7ff ff78 	bl	800769c <__sfp_lock_release>
 80077ac:	230c      	movs	r3, #12
 80077ae:	603b      	str	r3, [r7, #0]
 80077b0:	e7ee      	b.n	8007790 <__sfp+0x60>
 80077b2:	bf00      	nop
 80077b4:	080087e8 	.word	0x080087e8
 80077b8:	ffff0001 	.word	0xffff0001

080077bc <_fwalk_reent>:
 80077bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077c0:	4606      	mov	r6, r0
 80077c2:	4688      	mov	r8, r1
 80077c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077c8:	2700      	movs	r7, #0
 80077ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077ce:	f1b9 0901 	subs.w	r9, r9, #1
 80077d2:	d505      	bpl.n	80077e0 <_fwalk_reent+0x24>
 80077d4:	6824      	ldr	r4, [r4, #0]
 80077d6:	2c00      	cmp	r4, #0
 80077d8:	d1f7      	bne.n	80077ca <_fwalk_reent+0xe>
 80077da:	4638      	mov	r0, r7
 80077dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077e0:	89ab      	ldrh	r3, [r5, #12]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d907      	bls.n	80077f6 <_fwalk_reent+0x3a>
 80077e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077ea:	3301      	adds	r3, #1
 80077ec:	d003      	beq.n	80077f6 <_fwalk_reent+0x3a>
 80077ee:	4629      	mov	r1, r5
 80077f0:	4630      	mov	r0, r6
 80077f2:	47c0      	blx	r8
 80077f4:	4307      	orrs	r7, r0
 80077f6:	3568      	adds	r5, #104	; 0x68
 80077f8:	e7e9      	b.n	80077ce <_fwalk_reent+0x12>
	...

080077fc <_localeconv_r>:
 80077fc:	4800      	ldr	r0, [pc, #0]	; (8007800 <_localeconv_r+0x4>)
 80077fe:	4770      	bx	lr
 8007800:	200020c8 	.word	0x200020c8

08007804 <__retarget_lock_init_recursive>:
 8007804:	4770      	bx	lr

08007806 <__retarget_lock_acquire_recursive>:
 8007806:	4770      	bx	lr

08007808 <__retarget_lock_release_recursive>:
 8007808:	4770      	bx	lr

0800780a <__swhatbuf_r>:
 800780a:	b570      	push	{r4, r5, r6, lr}
 800780c:	460e      	mov	r6, r1
 800780e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007812:	2900      	cmp	r1, #0
 8007814:	b096      	sub	sp, #88	; 0x58
 8007816:	4614      	mov	r4, r2
 8007818:	461d      	mov	r5, r3
 800781a:	da08      	bge.n	800782e <__swhatbuf_r+0x24>
 800781c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	602a      	str	r2, [r5, #0]
 8007824:	061a      	lsls	r2, r3, #24
 8007826:	d410      	bmi.n	800784a <__swhatbuf_r+0x40>
 8007828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800782c:	e00e      	b.n	800784c <__swhatbuf_r+0x42>
 800782e:	466a      	mov	r2, sp
 8007830:	f000 fe2a 	bl	8008488 <_fstat_r>
 8007834:	2800      	cmp	r0, #0
 8007836:	dbf1      	blt.n	800781c <__swhatbuf_r+0x12>
 8007838:	9a01      	ldr	r2, [sp, #4]
 800783a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800783e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007842:	425a      	negs	r2, r3
 8007844:	415a      	adcs	r2, r3
 8007846:	602a      	str	r2, [r5, #0]
 8007848:	e7ee      	b.n	8007828 <__swhatbuf_r+0x1e>
 800784a:	2340      	movs	r3, #64	; 0x40
 800784c:	2000      	movs	r0, #0
 800784e:	6023      	str	r3, [r4, #0]
 8007850:	b016      	add	sp, #88	; 0x58
 8007852:	bd70      	pop	{r4, r5, r6, pc}

08007854 <__smakebuf_r>:
 8007854:	898b      	ldrh	r3, [r1, #12]
 8007856:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007858:	079d      	lsls	r5, r3, #30
 800785a:	4606      	mov	r6, r0
 800785c:	460c      	mov	r4, r1
 800785e:	d507      	bpl.n	8007870 <__smakebuf_r+0x1c>
 8007860:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	6123      	str	r3, [r4, #16]
 8007868:	2301      	movs	r3, #1
 800786a:	6163      	str	r3, [r4, #20]
 800786c:	b002      	add	sp, #8
 800786e:	bd70      	pop	{r4, r5, r6, pc}
 8007870:	ab01      	add	r3, sp, #4
 8007872:	466a      	mov	r2, sp
 8007874:	f7ff ffc9 	bl	800780a <__swhatbuf_r>
 8007878:	9900      	ldr	r1, [sp, #0]
 800787a:	4605      	mov	r5, r0
 800787c:	4630      	mov	r0, r6
 800787e:	f7fe f81d 	bl	80058bc <_malloc_r>
 8007882:	b948      	cbnz	r0, 8007898 <__smakebuf_r+0x44>
 8007884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007888:	059a      	lsls	r2, r3, #22
 800788a:	d4ef      	bmi.n	800786c <__smakebuf_r+0x18>
 800788c:	f023 0303 	bic.w	r3, r3, #3
 8007890:	f043 0302 	orr.w	r3, r3, #2
 8007894:	81a3      	strh	r3, [r4, #12]
 8007896:	e7e3      	b.n	8007860 <__smakebuf_r+0xc>
 8007898:	4b0d      	ldr	r3, [pc, #52]	; (80078d0 <__smakebuf_r+0x7c>)
 800789a:	62b3      	str	r3, [r6, #40]	; 0x28
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	6020      	str	r0, [r4, #0]
 80078a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a4:	81a3      	strh	r3, [r4, #12]
 80078a6:	9b00      	ldr	r3, [sp, #0]
 80078a8:	6163      	str	r3, [r4, #20]
 80078aa:	9b01      	ldr	r3, [sp, #4]
 80078ac:	6120      	str	r0, [r4, #16]
 80078ae:	b15b      	cbz	r3, 80078c8 <__smakebuf_r+0x74>
 80078b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078b4:	4630      	mov	r0, r6
 80078b6:	f000 fdf9 	bl	80084ac <_isatty_r>
 80078ba:	b128      	cbz	r0, 80078c8 <__smakebuf_r+0x74>
 80078bc:	89a3      	ldrh	r3, [r4, #12]
 80078be:	f023 0303 	bic.w	r3, r3, #3
 80078c2:	f043 0301 	orr.w	r3, r3, #1
 80078c6:	81a3      	strh	r3, [r4, #12]
 80078c8:	89a0      	ldrh	r0, [r4, #12]
 80078ca:	4305      	orrs	r5, r0
 80078cc:	81a5      	strh	r5, [r4, #12]
 80078ce:	e7cd      	b.n	800786c <__smakebuf_r+0x18>
 80078d0:	08007659 	.word	0x08007659

080078d4 <__malloc_lock>:
 80078d4:	4801      	ldr	r0, [pc, #4]	; (80078dc <__malloc_lock+0x8>)
 80078d6:	f7ff bf96 	b.w	8007806 <__retarget_lock_acquire_recursive>
 80078da:	bf00      	nop
 80078dc:	200038ec 	.word	0x200038ec

080078e0 <__malloc_unlock>:
 80078e0:	4801      	ldr	r0, [pc, #4]	; (80078e8 <__malloc_unlock+0x8>)
 80078e2:	f7ff bf91 	b.w	8007808 <__retarget_lock_release_recursive>
 80078e6:	bf00      	nop
 80078e8:	200038ec 	.word	0x200038ec

080078ec <_Balloc>:
 80078ec:	b570      	push	{r4, r5, r6, lr}
 80078ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80078f0:	4604      	mov	r4, r0
 80078f2:	460d      	mov	r5, r1
 80078f4:	b976      	cbnz	r6, 8007914 <_Balloc+0x28>
 80078f6:	2010      	movs	r0, #16
 80078f8:	f7fd ff34 	bl	8005764 <malloc>
 80078fc:	4602      	mov	r2, r0
 80078fe:	6260      	str	r0, [r4, #36]	; 0x24
 8007900:	b920      	cbnz	r0, 800790c <_Balloc+0x20>
 8007902:	4b18      	ldr	r3, [pc, #96]	; (8007964 <_Balloc+0x78>)
 8007904:	4818      	ldr	r0, [pc, #96]	; (8007968 <_Balloc+0x7c>)
 8007906:	2166      	movs	r1, #102	; 0x66
 8007908:	f7fd fed2 	bl	80056b0 <__assert_func>
 800790c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007910:	6006      	str	r6, [r0, #0]
 8007912:	60c6      	str	r6, [r0, #12]
 8007914:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007916:	68f3      	ldr	r3, [r6, #12]
 8007918:	b183      	cbz	r3, 800793c <_Balloc+0x50>
 800791a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007922:	b9b8      	cbnz	r0, 8007954 <_Balloc+0x68>
 8007924:	2101      	movs	r1, #1
 8007926:	fa01 f605 	lsl.w	r6, r1, r5
 800792a:	1d72      	adds	r2, r6, #5
 800792c:	0092      	lsls	r2, r2, #2
 800792e:	4620      	mov	r0, r4
 8007930:	f000 fb60 	bl	8007ff4 <_calloc_r>
 8007934:	b160      	cbz	r0, 8007950 <_Balloc+0x64>
 8007936:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800793a:	e00e      	b.n	800795a <_Balloc+0x6e>
 800793c:	2221      	movs	r2, #33	; 0x21
 800793e:	2104      	movs	r1, #4
 8007940:	4620      	mov	r0, r4
 8007942:	f000 fb57 	bl	8007ff4 <_calloc_r>
 8007946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007948:	60f0      	str	r0, [r6, #12]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1e4      	bne.n	800791a <_Balloc+0x2e>
 8007950:	2000      	movs	r0, #0
 8007952:	bd70      	pop	{r4, r5, r6, pc}
 8007954:	6802      	ldr	r2, [r0, #0]
 8007956:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800795a:	2300      	movs	r3, #0
 800795c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007960:	e7f7      	b.n	8007952 <_Balloc+0x66>
 8007962:	bf00      	nop
 8007964:	0800883e 	.word	0x0800883e
 8007968:	08008924 	.word	0x08008924

0800796c <_Bfree>:
 800796c:	b570      	push	{r4, r5, r6, lr}
 800796e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007970:	4605      	mov	r5, r0
 8007972:	460c      	mov	r4, r1
 8007974:	b976      	cbnz	r6, 8007994 <_Bfree+0x28>
 8007976:	2010      	movs	r0, #16
 8007978:	f7fd fef4 	bl	8005764 <malloc>
 800797c:	4602      	mov	r2, r0
 800797e:	6268      	str	r0, [r5, #36]	; 0x24
 8007980:	b920      	cbnz	r0, 800798c <_Bfree+0x20>
 8007982:	4b09      	ldr	r3, [pc, #36]	; (80079a8 <_Bfree+0x3c>)
 8007984:	4809      	ldr	r0, [pc, #36]	; (80079ac <_Bfree+0x40>)
 8007986:	218a      	movs	r1, #138	; 0x8a
 8007988:	f7fd fe92 	bl	80056b0 <__assert_func>
 800798c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007990:	6006      	str	r6, [r0, #0]
 8007992:	60c6      	str	r6, [r0, #12]
 8007994:	b13c      	cbz	r4, 80079a6 <_Bfree+0x3a>
 8007996:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007998:	6862      	ldr	r2, [r4, #4]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079a0:	6021      	str	r1, [r4, #0]
 80079a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80079a6:	bd70      	pop	{r4, r5, r6, pc}
 80079a8:	0800883e 	.word	0x0800883e
 80079ac:	08008924 	.word	0x08008924

080079b0 <__multadd>:
 80079b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079b4:	690d      	ldr	r5, [r1, #16]
 80079b6:	4607      	mov	r7, r0
 80079b8:	460c      	mov	r4, r1
 80079ba:	461e      	mov	r6, r3
 80079bc:	f101 0c14 	add.w	ip, r1, #20
 80079c0:	2000      	movs	r0, #0
 80079c2:	f8dc 3000 	ldr.w	r3, [ip]
 80079c6:	b299      	uxth	r1, r3
 80079c8:	fb02 6101 	mla	r1, r2, r1, r6
 80079cc:	0c1e      	lsrs	r6, r3, #16
 80079ce:	0c0b      	lsrs	r3, r1, #16
 80079d0:	fb02 3306 	mla	r3, r2, r6, r3
 80079d4:	b289      	uxth	r1, r1
 80079d6:	3001      	adds	r0, #1
 80079d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80079dc:	4285      	cmp	r5, r0
 80079de:	f84c 1b04 	str.w	r1, [ip], #4
 80079e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80079e6:	dcec      	bgt.n	80079c2 <__multadd+0x12>
 80079e8:	b30e      	cbz	r6, 8007a2e <__multadd+0x7e>
 80079ea:	68a3      	ldr	r3, [r4, #8]
 80079ec:	42ab      	cmp	r3, r5
 80079ee:	dc19      	bgt.n	8007a24 <__multadd+0x74>
 80079f0:	6861      	ldr	r1, [r4, #4]
 80079f2:	4638      	mov	r0, r7
 80079f4:	3101      	adds	r1, #1
 80079f6:	f7ff ff79 	bl	80078ec <_Balloc>
 80079fa:	4680      	mov	r8, r0
 80079fc:	b928      	cbnz	r0, 8007a0a <__multadd+0x5a>
 80079fe:	4602      	mov	r2, r0
 8007a00:	4b0c      	ldr	r3, [pc, #48]	; (8007a34 <__multadd+0x84>)
 8007a02:	480d      	ldr	r0, [pc, #52]	; (8007a38 <__multadd+0x88>)
 8007a04:	21b5      	movs	r1, #181	; 0xb5
 8007a06:	f7fd fe53 	bl	80056b0 <__assert_func>
 8007a0a:	6922      	ldr	r2, [r4, #16]
 8007a0c:	3202      	adds	r2, #2
 8007a0e:	f104 010c 	add.w	r1, r4, #12
 8007a12:	0092      	lsls	r2, r2, #2
 8007a14:	300c      	adds	r0, #12
 8007a16:	f7fd feb5 	bl	8005784 <memcpy>
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	4638      	mov	r0, r7
 8007a1e:	f7ff ffa5 	bl	800796c <_Bfree>
 8007a22:	4644      	mov	r4, r8
 8007a24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a28:	3501      	adds	r5, #1
 8007a2a:	615e      	str	r6, [r3, #20]
 8007a2c:	6125      	str	r5, [r4, #16]
 8007a2e:	4620      	mov	r0, r4
 8007a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a34:	080088b0 	.word	0x080088b0
 8007a38:	08008924 	.word	0x08008924

08007a3c <__hi0bits>:
 8007a3c:	0c03      	lsrs	r3, r0, #16
 8007a3e:	041b      	lsls	r3, r3, #16
 8007a40:	b9d3      	cbnz	r3, 8007a78 <__hi0bits+0x3c>
 8007a42:	0400      	lsls	r0, r0, #16
 8007a44:	2310      	movs	r3, #16
 8007a46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007a4a:	bf04      	itt	eq
 8007a4c:	0200      	lsleq	r0, r0, #8
 8007a4e:	3308      	addeq	r3, #8
 8007a50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007a54:	bf04      	itt	eq
 8007a56:	0100      	lsleq	r0, r0, #4
 8007a58:	3304      	addeq	r3, #4
 8007a5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007a5e:	bf04      	itt	eq
 8007a60:	0080      	lsleq	r0, r0, #2
 8007a62:	3302      	addeq	r3, #2
 8007a64:	2800      	cmp	r0, #0
 8007a66:	db05      	blt.n	8007a74 <__hi0bits+0x38>
 8007a68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007a6c:	f103 0301 	add.w	r3, r3, #1
 8007a70:	bf08      	it	eq
 8007a72:	2320      	moveq	r3, #32
 8007a74:	4618      	mov	r0, r3
 8007a76:	4770      	bx	lr
 8007a78:	2300      	movs	r3, #0
 8007a7a:	e7e4      	b.n	8007a46 <__hi0bits+0xa>

08007a7c <__lo0bits>:
 8007a7c:	6803      	ldr	r3, [r0, #0]
 8007a7e:	f013 0207 	ands.w	r2, r3, #7
 8007a82:	4601      	mov	r1, r0
 8007a84:	d00b      	beq.n	8007a9e <__lo0bits+0x22>
 8007a86:	07da      	lsls	r2, r3, #31
 8007a88:	d423      	bmi.n	8007ad2 <__lo0bits+0x56>
 8007a8a:	0798      	lsls	r0, r3, #30
 8007a8c:	bf49      	itett	mi
 8007a8e:	085b      	lsrmi	r3, r3, #1
 8007a90:	089b      	lsrpl	r3, r3, #2
 8007a92:	2001      	movmi	r0, #1
 8007a94:	600b      	strmi	r3, [r1, #0]
 8007a96:	bf5c      	itt	pl
 8007a98:	600b      	strpl	r3, [r1, #0]
 8007a9a:	2002      	movpl	r0, #2
 8007a9c:	4770      	bx	lr
 8007a9e:	b298      	uxth	r0, r3
 8007aa0:	b9a8      	cbnz	r0, 8007ace <__lo0bits+0x52>
 8007aa2:	0c1b      	lsrs	r3, r3, #16
 8007aa4:	2010      	movs	r0, #16
 8007aa6:	b2da      	uxtb	r2, r3
 8007aa8:	b90a      	cbnz	r2, 8007aae <__lo0bits+0x32>
 8007aaa:	3008      	adds	r0, #8
 8007aac:	0a1b      	lsrs	r3, r3, #8
 8007aae:	071a      	lsls	r2, r3, #28
 8007ab0:	bf04      	itt	eq
 8007ab2:	091b      	lsreq	r3, r3, #4
 8007ab4:	3004      	addeq	r0, #4
 8007ab6:	079a      	lsls	r2, r3, #30
 8007ab8:	bf04      	itt	eq
 8007aba:	089b      	lsreq	r3, r3, #2
 8007abc:	3002      	addeq	r0, #2
 8007abe:	07da      	lsls	r2, r3, #31
 8007ac0:	d403      	bmi.n	8007aca <__lo0bits+0x4e>
 8007ac2:	085b      	lsrs	r3, r3, #1
 8007ac4:	f100 0001 	add.w	r0, r0, #1
 8007ac8:	d005      	beq.n	8007ad6 <__lo0bits+0x5a>
 8007aca:	600b      	str	r3, [r1, #0]
 8007acc:	4770      	bx	lr
 8007ace:	4610      	mov	r0, r2
 8007ad0:	e7e9      	b.n	8007aa6 <__lo0bits+0x2a>
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	4770      	bx	lr
 8007ad6:	2020      	movs	r0, #32
 8007ad8:	4770      	bx	lr
	...

08007adc <__i2b>:
 8007adc:	b510      	push	{r4, lr}
 8007ade:	460c      	mov	r4, r1
 8007ae0:	2101      	movs	r1, #1
 8007ae2:	f7ff ff03 	bl	80078ec <_Balloc>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	b928      	cbnz	r0, 8007af6 <__i2b+0x1a>
 8007aea:	4b05      	ldr	r3, [pc, #20]	; (8007b00 <__i2b+0x24>)
 8007aec:	4805      	ldr	r0, [pc, #20]	; (8007b04 <__i2b+0x28>)
 8007aee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007af2:	f7fd fddd 	bl	80056b0 <__assert_func>
 8007af6:	2301      	movs	r3, #1
 8007af8:	6144      	str	r4, [r0, #20]
 8007afa:	6103      	str	r3, [r0, #16]
 8007afc:	bd10      	pop	{r4, pc}
 8007afe:	bf00      	nop
 8007b00:	080088b0 	.word	0x080088b0
 8007b04:	08008924 	.word	0x08008924

08007b08 <__multiply>:
 8007b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b0c:	4691      	mov	r9, r2
 8007b0e:	690a      	ldr	r2, [r1, #16]
 8007b10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	bfb8      	it	lt
 8007b18:	460b      	movlt	r3, r1
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	bfbc      	itt	lt
 8007b1e:	464c      	movlt	r4, r9
 8007b20:	4699      	movlt	r9, r3
 8007b22:	6927      	ldr	r7, [r4, #16]
 8007b24:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b28:	68a3      	ldr	r3, [r4, #8]
 8007b2a:	6861      	ldr	r1, [r4, #4]
 8007b2c:	eb07 060a 	add.w	r6, r7, sl
 8007b30:	42b3      	cmp	r3, r6
 8007b32:	b085      	sub	sp, #20
 8007b34:	bfb8      	it	lt
 8007b36:	3101      	addlt	r1, #1
 8007b38:	f7ff fed8 	bl	80078ec <_Balloc>
 8007b3c:	b930      	cbnz	r0, 8007b4c <__multiply+0x44>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	4b44      	ldr	r3, [pc, #272]	; (8007c54 <__multiply+0x14c>)
 8007b42:	4845      	ldr	r0, [pc, #276]	; (8007c58 <__multiply+0x150>)
 8007b44:	f240 115d 	movw	r1, #349	; 0x15d
 8007b48:	f7fd fdb2 	bl	80056b0 <__assert_func>
 8007b4c:	f100 0514 	add.w	r5, r0, #20
 8007b50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b54:	462b      	mov	r3, r5
 8007b56:	2200      	movs	r2, #0
 8007b58:	4543      	cmp	r3, r8
 8007b5a:	d321      	bcc.n	8007ba0 <__multiply+0x98>
 8007b5c:	f104 0314 	add.w	r3, r4, #20
 8007b60:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007b64:	f109 0314 	add.w	r3, r9, #20
 8007b68:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007b6c:	9202      	str	r2, [sp, #8]
 8007b6e:	1b3a      	subs	r2, r7, r4
 8007b70:	3a15      	subs	r2, #21
 8007b72:	f022 0203 	bic.w	r2, r2, #3
 8007b76:	3204      	adds	r2, #4
 8007b78:	f104 0115 	add.w	r1, r4, #21
 8007b7c:	428f      	cmp	r7, r1
 8007b7e:	bf38      	it	cc
 8007b80:	2204      	movcc	r2, #4
 8007b82:	9201      	str	r2, [sp, #4]
 8007b84:	9a02      	ldr	r2, [sp, #8]
 8007b86:	9303      	str	r3, [sp, #12]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d80c      	bhi.n	8007ba6 <__multiply+0x9e>
 8007b8c:	2e00      	cmp	r6, #0
 8007b8e:	dd03      	ble.n	8007b98 <__multiply+0x90>
 8007b90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d05a      	beq.n	8007c4e <__multiply+0x146>
 8007b98:	6106      	str	r6, [r0, #16]
 8007b9a:	b005      	add	sp, #20
 8007b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba0:	f843 2b04 	str.w	r2, [r3], #4
 8007ba4:	e7d8      	b.n	8007b58 <__multiply+0x50>
 8007ba6:	f8b3 a000 	ldrh.w	sl, [r3]
 8007baa:	f1ba 0f00 	cmp.w	sl, #0
 8007bae:	d024      	beq.n	8007bfa <__multiply+0xf2>
 8007bb0:	f104 0e14 	add.w	lr, r4, #20
 8007bb4:	46a9      	mov	r9, r5
 8007bb6:	f04f 0c00 	mov.w	ip, #0
 8007bba:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007bbe:	f8d9 1000 	ldr.w	r1, [r9]
 8007bc2:	fa1f fb82 	uxth.w	fp, r2
 8007bc6:	b289      	uxth	r1, r1
 8007bc8:	fb0a 110b 	mla	r1, sl, fp, r1
 8007bcc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007bd0:	f8d9 2000 	ldr.w	r2, [r9]
 8007bd4:	4461      	add	r1, ip
 8007bd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007bda:	fb0a c20b 	mla	r2, sl, fp, ip
 8007bde:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007be2:	b289      	uxth	r1, r1
 8007be4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007be8:	4577      	cmp	r7, lr
 8007bea:	f849 1b04 	str.w	r1, [r9], #4
 8007bee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007bf2:	d8e2      	bhi.n	8007bba <__multiply+0xb2>
 8007bf4:	9a01      	ldr	r2, [sp, #4]
 8007bf6:	f845 c002 	str.w	ip, [r5, r2]
 8007bfa:	9a03      	ldr	r2, [sp, #12]
 8007bfc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c00:	3304      	adds	r3, #4
 8007c02:	f1b9 0f00 	cmp.w	r9, #0
 8007c06:	d020      	beq.n	8007c4a <__multiply+0x142>
 8007c08:	6829      	ldr	r1, [r5, #0]
 8007c0a:	f104 0c14 	add.w	ip, r4, #20
 8007c0e:	46ae      	mov	lr, r5
 8007c10:	f04f 0a00 	mov.w	sl, #0
 8007c14:	f8bc b000 	ldrh.w	fp, [ip]
 8007c18:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007c1c:	fb09 220b 	mla	r2, r9, fp, r2
 8007c20:	4492      	add	sl, r2
 8007c22:	b289      	uxth	r1, r1
 8007c24:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007c28:	f84e 1b04 	str.w	r1, [lr], #4
 8007c2c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007c30:	f8be 1000 	ldrh.w	r1, [lr]
 8007c34:	0c12      	lsrs	r2, r2, #16
 8007c36:	fb09 1102 	mla	r1, r9, r2, r1
 8007c3a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007c3e:	4567      	cmp	r7, ip
 8007c40:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c44:	d8e6      	bhi.n	8007c14 <__multiply+0x10c>
 8007c46:	9a01      	ldr	r2, [sp, #4]
 8007c48:	50a9      	str	r1, [r5, r2]
 8007c4a:	3504      	adds	r5, #4
 8007c4c:	e79a      	b.n	8007b84 <__multiply+0x7c>
 8007c4e:	3e01      	subs	r6, #1
 8007c50:	e79c      	b.n	8007b8c <__multiply+0x84>
 8007c52:	bf00      	nop
 8007c54:	080088b0 	.word	0x080088b0
 8007c58:	08008924 	.word	0x08008924

08007c5c <__pow5mult>:
 8007c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c60:	4615      	mov	r5, r2
 8007c62:	f012 0203 	ands.w	r2, r2, #3
 8007c66:	4606      	mov	r6, r0
 8007c68:	460f      	mov	r7, r1
 8007c6a:	d007      	beq.n	8007c7c <__pow5mult+0x20>
 8007c6c:	4c25      	ldr	r4, [pc, #148]	; (8007d04 <__pow5mult+0xa8>)
 8007c6e:	3a01      	subs	r2, #1
 8007c70:	2300      	movs	r3, #0
 8007c72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c76:	f7ff fe9b 	bl	80079b0 <__multadd>
 8007c7a:	4607      	mov	r7, r0
 8007c7c:	10ad      	asrs	r5, r5, #2
 8007c7e:	d03d      	beq.n	8007cfc <__pow5mult+0xa0>
 8007c80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007c82:	b97c      	cbnz	r4, 8007ca4 <__pow5mult+0x48>
 8007c84:	2010      	movs	r0, #16
 8007c86:	f7fd fd6d 	bl	8005764 <malloc>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	6270      	str	r0, [r6, #36]	; 0x24
 8007c8e:	b928      	cbnz	r0, 8007c9c <__pow5mult+0x40>
 8007c90:	4b1d      	ldr	r3, [pc, #116]	; (8007d08 <__pow5mult+0xac>)
 8007c92:	481e      	ldr	r0, [pc, #120]	; (8007d0c <__pow5mult+0xb0>)
 8007c94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007c98:	f7fd fd0a 	bl	80056b0 <__assert_func>
 8007c9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ca0:	6004      	str	r4, [r0, #0]
 8007ca2:	60c4      	str	r4, [r0, #12]
 8007ca4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007ca8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007cac:	b94c      	cbnz	r4, 8007cc2 <__pow5mult+0x66>
 8007cae:	f240 2171 	movw	r1, #625	; 0x271
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f7ff ff12 	bl	8007adc <__i2b>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	f8c8 0008 	str.w	r0, [r8, #8]
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	6003      	str	r3, [r0, #0]
 8007cc2:	f04f 0900 	mov.w	r9, #0
 8007cc6:	07eb      	lsls	r3, r5, #31
 8007cc8:	d50a      	bpl.n	8007ce0 <__pow5mult+0x84>
 8007cca:	4639      	mov	r1, r7
 8007ccc:	4622      	mov	r2, r4
 8007cce:	4630      	mov	r0, r6
 8007cd0:	f7ff ff1a 	bl	8007b08 <__multiply>
 8007cd4:	4639      	mov	r1, r7
 8007cd6:	4680      	mov	r8, r0
 8007cd8:	4630      	mov	r0, r6
 8007cda:	f7ff fe47 	bl	800796c <_Bfree>
 8007cde:	4647      	mov	r7, r8
 8007ce0:	106d      	asrs	r5, r5, #1
 8007ce2:	d00b      	beq.n	8007cfc <__pow5mult+0xa0>
 8007ce4:	6820      	ldr	r0, [r4, #0]
 8007ce6:	b938      	cbnz	r0, 8007cf8 <__pow5mult+0x9c>
 8007ce8:	4622      	mov	r2, r4
 8007cea:	4621      	mov	r1, r4
 8007cec:	4630      	mov	r0, r6
 8007cee:	f7ff ff0b 	bl	8007b08 <__multiply>
 8007cf2:	6020      	str	r0, [r4, #0]
 8007cf4:	f8c0 9000 	str.w	r9, [r0]
 8007cf8:	4604      	mov	r4, r0
 8007cfa:	e7e4      	b.n	8007cc6 <__pow5mult+0x6a>
 8007cfc:	4638      	mov	r0, r7
 8007cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d02:	bf00      	nop
 8007d04:	08008a70 	.word	0x08008a70
 8007d08:	0800883e 	.word	0x0800883e
 8007d0c:	08008924 	.word	0x08008924

08007d10 <__lshift>:
 8007d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d14:	460c      	mov	r4, r1
 8007d16:	6849      	ldr	r1, [r1, #4]
 8007d18:	6923      	ldr	r3, [r4, #16]
 8007d1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d1e:	68a3      	ldr	r3, [r4, #8]
 8007d20:	4607      	mov	r7, r0
 8007d22:	4691      	mov	r9, r2
 8007d24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d28:	f108 0601 	add.w	r6, r8, #1
 8007d2c:	42b3      	cmp	r3, r6
 8007d2e:	db0b      	blt.n	8007d48 <__lshift+0x38>
 8007d30:	4638      	mov	r0, r7
 8007d32:	f7ff fddb 	bl	80078ec <_Balloc>
 8007d36:	4605      	mov	r5, r0
 8007d38:	b948      	cbnz	r0, 8007d4e <__lshift+0x3e>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	4b2a      	ldr	r3, [pc, #168]	; (8007de8 <__lshift+0xd8>)
 8007d3e:	482b      	ldr	r0, [pc, #172]	; (8007dec <__lshift+0xdc>)
 8007d40:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007d44:	f7fd fcb4 	bl	80056b0 <__assert_func>
 8007d48:	3101      	adds	r1, #1
 8007d4a:	005b      	lsls	r3, r3, #1
 8007d4c:	e7ee      	b.n	8007d2c <__lshift+0x1c>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	f100 0114 	add.w	r1, r0, #20
 8007d54:	f100 0210 	add.w	r2, r0, #16
 8007d58:	4618      	mov	r0, r3
 8007d5a:	4553      	cmp	r3, sl
 8007d5c:	db37      	blt.n	8007dce <__lshift+0xbe>
 8007d5e:	6920      	ldr	r0, [r4, #16]
 8007d60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d64:	f104 0314 	add.w	r3, r4, #20
 8007d68:	f019 091f 	ands.w	r9, r9, #31
 8007d6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007d74:	d02f      	beq.n	8007dd6 <__lshift+0xc6>
 8007d76:	f1c9 0e20 	rsb	lr, r9, #32
 8007d7a:	468a      	mov	sl, r1
 8007d7c:	f04f 0c00 	mov.w	ip, #0
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	fa02 f209 	lsl.w	r2, r2, r9
 8007d86:	ea42 020c 	orr.w	r2, r2, ip
 8007d8a:	f84a 2b04 	str.w	r2, [sl], #4
 8007d8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d92:	4298      	cmp	r0, r3
 8007d94:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007d98:	d8f2      	bhi.n	8007d80 <__lshift+0x70>
 8007d9a:	1b03      	subs	r3, r0, r4
 8007d9c:	3b15      	subs	r3, #21
 8007d9e:	f023 0303 	bic.w	r3, r3, #3
 8007da2:	3304      	adds	r3, #4
 8007da4:	f104 0215 	add.w	r2, r4, #21
 8007da8:	4290      	cmp	r0, r2
 8007daa:	bf38      	it	cc
 8007dac:	2304      	movcc	r3, #4
 8007dae:	f841 c003 	str.w	ip, [r1, r3]
 8007db2:	f1bc 0f00 	cmp.w	ip, #0
 8007db6:	d001      	beq.n	8007dbc <__lshift+0xac>
 8007db8:	f108 0602 	add.w	r6, r8, #2
 8007dbc:	3e01      	subs	r6, #1
 8007dbe:	4638      	mov	r0, r7
 8007dc0:	612e      	str	r6, [r5, #16]
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	f7ff fdd2 	bl	800796c <_Bfree>
 8007dc8:	4628      	mov	r0, r5
 8007dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dce:	f842 0f04 	str.w	r0, [r2, #4]!
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	e7c1      	b.n	8007d5a <__lshift+0x4a>
 8007dd6:	3904      	subs	r1, #4
 8007dd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ddc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007de0:	4298      	cmp	r0, r3
 8007de2:	d8f9      	bhi.n	8007dd8 <__lshift+0xc8>
 8007de4:	e7ea      	b.n	8007dbc <__lshift+0xac>
 8007de6:	bf00      	nop
 8007de8:	080088b0 	.word	0x080088b0
 8007dec:	08008924 	.word	0x08008924

08007df0 <__mcmp>:
 8007df0:	b530      	push	{r4, r5, lr}
 8007df2:	6902      	ldr	r2, [r0, #16]
 8007df4:	690c      	ldr	r4, [r1, #16]
 8007df6:	1b12      	subs	r2, r2, r4
 8007df8:	d10e      	bne.n	8007e18 <__mcmp+0x28>
 8007dfa:	f100 0314 	add.w	r3, r0, #20
 8007dfe:	3114      	adds	r1, #20
 8007e00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007e04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007e08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007e0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007e10:	42a5      	cmp	r5, r4
 8007e12:	d003      	beq.n	8007e1c <__mcmp+0x2c>
 8007e14:	d305      	bcc.n	8007e22 <__mcmp+0x32>
 8007e16:	2201      	movs	r2, #1
 8007e18:	4610      	mov	r0, r2
 8007e1a:	bd30      	pop	{r4, r5, pc}
 8007e1c:	4283      	cmp	r3, r0
 8007e1e:	d3f3      	bcc.n	8007e08 <__mcmp+0x18>
 8007e20:	e7fa      	b.n	8007e18 <__mcmp+0x28>
 8007e22:	f04f 32ff 	mov.w	r2, #4294967295
 8007e26:	e7f7      	b.n	8007e18 <__mcmp+0x28>

08007e28 <__mdiff>:
 8007e28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2c:	460c      	mov	r4, r1
 8007e2e:	4606      	mov	r6, r0
 8007e30:	4611      	mov	r1, r2
 8007e32:	4620      	mov	r0, r4
 8007e34:	4690      	mov	r8, r2
 8007e36:	f7ff ffdb 	bl	8007df0 <__mcmp>
 8007e3a:	1e05      	subs	r5, r0, #0
 8007e3c:	d110      	bne.n	8007e60 <__mdiff+0x38>
 8007e3e:	4629      	mov	r1, r5
 8007e40:	4630      	mov	r0, r6
 8007e42:	f7ff fd53 	bl	80078ec <_Balloc>
 8007e46:	b930      	cbnz	r0, 8007e56 <__mdiff+0x2e>
 8007e48:	4b3a      	ldr	r3, [pc, #232]	; (8007f34 <__mdiff+0x10c>)
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	f240 2132 	movw	r1, #562	; 0x232
 8007e50:	4839      	ldr	r0, [pc, #228]	; (8007f38 <__mdiff+0x110>)
 8007e52:	f7fd fc2d 	bl	80056b0 <__assert_func>
 8007e56:	2301      	movs	r3, #1
 8007e58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e60:	bfa4      	itt	ge
 8007e62:	4643      	movge	r3, r8
 8007e64:	46a0      	movge	r8, r4
 8007e66:	4630      	mov	r0, r6
 8007e68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007e6c:	bfa6      	itte	ge
 8007e6e:	461c      	movge	r4, r3
 8007e70:	2500      	movge	r5, #0
 8007e72:	2501      	movlt	r5, #1
 8007e74:	f7ff fd3a 	bl	80078ec <_Balloc>
 8007e78:	b920      	cbnz	r0, 8007e84 <__mdiff+0x5c>
 8007e7a:	4b2e      	ldr	r3, [pc, #184]	; (8007f34 <__mdiff+0x10c>)
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007e82:	e7e5      	b.n	8007e50 <__mdiff+0x28>
 8007e84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007e88:	6926      	ldr	r6, [r4, #16]
 8007e8a:	60c5      	str	r5, [r0, #12]
 8007e8c:	f104 0914 	add.w	r9, r4, #20
 8007e90:	f108 0514 	add.w	r5, r8, #20
 8007e94:	f100 0e14 	add.w	lr, r0, #20
 8007e98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007e9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007ea0:	f108 0210 	add.w	r2, r8, #16
 8007ea4:	46f2      	mov	sl, lr
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	f859 3b04 	ldr.w	r3, [r9], #4
 8007eac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007eb0:	fa1f f883 	uxth.w	r8, r3
 8007eb4:	fa11 f18b 	uxtah	r1, r1, fp
 8007eb8:	0c1b      	lsrs	r3, r3, #16
 8007eba:	eba1 0808 	sub.w	r8, r1, r8
 8007ebe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007ec2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007ec6:	fa1f f888 	uxth.w	r8, r8
 8007eca:	1419      	asrs	r1, r3, #16
 8007ecc:	454e      	cmp	r6, r9
 8007ece:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007ed2:	f84a 3b04 	str.w	r3, [sl], #4
 8007ed6:	d8e7      	bhi.n	8007ea8 <__mdiff+0x80>
 8007ed8:	1b33      	subs	r3, r6, r4
 8007eda:	3b15      	subs	r3, #21
 8007edc:	f023 0303 	bic.w	r3, r3, #3
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	3415      	adds	r4, #21
 8007ee4:	42a6      	cmp	r6, r4
 8007ee6:	bf38      	it	cc
 8007ee8:	2304      	movcc	r3, #4
 8007eea:	441d      	add	r5, r3
 8007eec:	4473      	add	r3, lr
 8007eee:	469e      	mov	lr, r3
 8007ef0:	462e      	mov	r6, r5
 8007ef2:	4566      	cmp	r6, ip
 8007ef4:	d30e      	bcc.n	8007f14 <__mdiff+0xec>
 8007ef6:	f10c 0203 	add.w	r2, ip, #3
 8007efa:	1b52      	subs	r2, r2, r5
 8007efc:	f022 0203 	bic.w	r2, r2, #3
 8007f00:	3d03      	subs	r5, #3
 8007f02:	45ac      	cmp	ip, r5
 8007f04:	bf38      	it	cc
 8007f06:	2200      	movcc	r2, #0
 8007f08:	441a      	add	r2, r3
 8007f0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007f0e:	b17b      	cbz	r3, 8007f30 <__mdiff+0x108>
 8007f10:	6107      	str	r7, [r0, #16]
 8007f12:	e7a3      	b.n	8007e5c <__mdiff+0x34>
 8007f14:	f856 8b04 	ldr.w	r8, [r6], #4
 8007f18:	fa11 f288 	uxtah	r2, r1, r8
 8007f1c:	1414      	asrs	r4, r2, #16
 8007f1e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007f22:	b292      	uxth	r2, r2
 8007f24:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007f28:	f84e 2b04 	str.w	r2, [lr], #4
 8007f2c:	1421      	asrs	r1, r4, #16
 8007f2e:	e7e0      	b.n	8007ef2 <__mdiff+0xca>
 8007f30:	3f01      	subs	r7, #1
 8007f32:	e7ea      	b.n	8007f0a <__mdiff+0xe2>
 8007f34:	080088b0 	.word	0x080088b0
 8007f38:	08008924 	.word	0x08008924

08007f3c <__d2b>:
 8007f3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f40:	4689      	mov	r9, r1
 8007f42:	2101      	movs	r1, #1
 8007f44:	ec57 6b10 	vmov	r6, r7, d0
 8007f48:	4690      	mov	r8, r2
 8007f4a:	f7ff fccf 	bl	80078ec <_Balloc>
 8007f4e:	4604      	mov	r4, r0
 8007f50:	b930      	cbnz	r0, 8007f60 <__d2b+0x24>
 8007f52:	4602      	mov	r2, r0
 8007f54:	4b25      	ldr	r3, [pc, #148]	; (8007fec <__d2b+0xb0>)
 8007f56:	4826      	ldr	r0, [pc, #152]	; (8007ff0 <__d2b+0xb4>)
 8007f58:	f240 310a 	movw	r1, #778	; 0x30a
 8007f5c:	f7fd fba8 	bl	80056b0 <__assert_func>
 8007f60:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007f64:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007f68:	bb35      	cbnz	r5, 8007fb8 <__d2b+0x7c>
 8007f6a:	2e00      	cmp	r6, #0
 8007f6c:	9301      	str	r3, [sp, #4]
 8007f6e:	d028      	beq.n	8007fc2 <__d2b+0x86>
 8007f70:	4668      	mov	r0, sp
 8007f72:	9600      	str	r6, [sp, #0]
 8007f74:	f7ff fd82 	bl	8007a7c <__lo0bits>
 8007f78:	9900      	ldr	r1, [sp, #0]
 8007f7a:	b300      	cbz	r0, 8007fbe <__d2b+0x82>
 8007f7c:	9a01      	ldr	r2, [sp, #4]
 8007f7e:	f1c0 0320 	rsb	r3, r0, #32
 8007f82:	fa02 f303 	lsl.w	r3, r2, r3
 8007f86:	430b      	orrs	r3, r1
 8007f88:	40c2      	lsrs	r2, r0
 8007f8a:	6163      	str	r3, [r4, #20]
 8007f8c:	9201      	str	r2, [sp, #4]
 8007f8e:	9b01      	ldr	r3, [sp, #4]
 8007f90:	61a3      	str	r3, [r4, #24]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	bf14      	ite	ne
 8007f96:	2202      	movne	r2, #2
 8007f98:	2201      	moveq	r2, #1
 8007f9a:	6122      	str	r2, [r4, #16]
 8007f9c:	b1d5      	cbz	r5, 8007fd4 <__d2b+0x98>
 8007f9e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007fa2:	4405      	add	r5, r0
 8007fa4:	f8c9 5000 	str.w	r5, [r9]
 8007fa8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007fac:	f8c8 0000 	str.w	r0, [r8]
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	b003      	add	sp, #12
 8007fb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fbc:	e7d5      	b.n	8007f6a <__d2b+0x2e>
 8007fbe:	6161      	str	r1, [r4, #20]
 8007fc0:	e7e5      	b.n	8007f8e <__d2b+0x52>
 8007fc2:	a801      	add	r0, sp, #4
 8007fc4:	f7ff fd5a 	bl	8007a7c <__lo0bits>
 8007fc8:	9b01      	ldr	r3, [sp, #4]
 8007fca:	6163      	str	r3, [r4, #20]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	6122      	str	r2, [r4, #16]
 8007fd0:	3020      	adds	r0, #32
 8007fd2:	e7e3      	b.n	8007f9c <__d2b+0x60>
 8007fd4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007fd8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007fdc:	f8c9 0000 	str.w	r0, [r9]
 8007fe0:	6918      	ldr	r0, [r3, #16]
 8007fe2:	f7ff fd2b 	bl	8007a3c <__hi0bits>
 8007fe6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007fea:	e7df      	b.n	8007fac <__d2b+0x70>
 8007fec:	080088b0 	.word	0x080088b0
 8007ff0:	08008924 	.word	0x08008924

08007ff4 <_calloc_r>:
 8007ff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ff6:	fba1 2402 	umull	r2, r4, r1, r2
 8007ffa:	b94c      	cbnz	r4, 8008010 <_calloc_r+0x1c>
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	9201      	str	r2, [sp, #4]
 8008000:	f7fd fc5c 	bl	80058bc <_malloc_r>
 8008004:	9a01      	ldr	r2, [sp, #4]
 8008006:	4605      	mov	r5, r0
 8008008:	b930      	cbnz	r0, 8008018 <_calloc_r+0x24>
 800800a:	4628      	mov	r0, r5
 800800c:	b003      	add	sp, #12
 800800e:	bd30      	pop	{r4, r5, pc}
 8008010:	220c      	movs	r2, #12
 8008012:	6002      	str	r2, [r0, #0]
 8008014:	2500      	movs	r5, #0
 8008016:	e7f8      	b.n	800800a <_calloc_r+0x16>
 8008018:	4621      	mov	r1, r4
 800801a:	f7fd fbdb 	bl	80057d4 <memset>
 800801e:	e7f4      	b.n	800800a <_calloc_r+0x16>

08008020 <_realloc_r>:
 8008020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008024:	4680      	mov	r8, r0
 8008026:	4614      	mov	r4, r2
 8008028:	460e      	mov	r6, r1
 800802a:	b921      	cbnz	r1, 8008036 <_realloc_r+0x16>
 800802c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008030:	4611      	mov	r1, r2
 8008032:	f7fd bc43 	b.w	80058bc <_malloc_r>
 8008036:	b92a      	cbnz	r2, 8008044 <_realloc_r+0x24>
 8008038:	f7fd fbd4 	bl	80057e4 <_free_r>
 800803c:	4625      	mov	r5, r4
 800803e:	4628      	mov	r0, r5
 8008040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008044:	f000 fa66 	bl	8008514 <_malloc_usable_size_r>
 8008048:	4284      	cmp	r4, r0
 800804a:	4607      	mov	r7, r0
 800804c:	d802      	bhi.n	8008054 <_realloc_r+0x34>
 800804e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008052:	d812      	bhi.n	800807a <_realloc_r+0x5a>
 8008054:	4621      	mov	r1, r4
 8008056:	4640      	mov	r0, r8
 8008058:	f7fd fc30 	bl	80058bc <_malloc_r>
 800805c:	4605      	mov	r5, r0
 800805e:	2800      	cmp	r0, #0
 8008060:	d0ed      	beq.n	800803e <_realloc_r+0x1e>
 8008062:	42bc      	cmp	r4, r7
 8008064:	4622      	mov	r2, r4
 8008066:	4631      	mov	r1, r6
 8008068:	bf28      	it	cs
 800806a:	463a      	movcs	r2, r7
 800806c:	f7fd fb8a 	bl	8005784 <memcpy>
 8008070:	4631      	mov	r1, r6
 8008072:	4640      	mov	r0, r8
 8008074:	f7fd fbb6 	bl	80057e4 <_free_r>
 8008078:	e7e1      	b.n	800803e <_realloc_r+0x1e>
 800807a:	4635      	mov	r5, r6
 800807c:	e7df      	b.n	800803e <_realloc_r+0x1e>

0800807e <__ssputs_r>:
 800807e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008082:	688e      	ldr	r6, [r1, #8]
 8008084:	429e      	cmp	r6, r3
 8008086:	4682      	mov	sl, r0
 8008088:	460c      	mov	r4, r1
 800808a:	4690      	mov	r8, r2
 800808c:	461f      	mov	r7, r3
 800808e:	d838      	bhi.n	8008102 <__ssputs_r+0x84>
 8008090:	898a      	ldrh	r2, [r1, #12]
 8008092:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008096:	d032      	beq.n	80080fe <__ssputs_r+0x80>
 8008098:	6825      	ldr	r5, [r4, #0]
 800809a:	6909      	ldr	r1, [r1, #16]
 800809c:	eba5 0901 	sub.w	r9, r5, r1
 80080a0:	6965      	ldr	r5, [r4, #20]
 80080a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080aa:	3301      	adds	r3, #1
 80080ac:	444b      	add	r3, r9
 80080ae:	106d      	asrs	r5, r5, #1
 80080b0:	429d      	cmp	r5, r3
 80080b2:	bf38      	it	cc
 80080b4:	461d      	movcc	r5, r3
 80080b6:	0553      	lsls	r3, r2, #21
 80080b8:	d531      	bpl.n	800811e <__ssputs_r+0xa0>
 80080ba:	4629      	mov	r1, r5
 80080bc:	f7fd fbfe 	bl	80058bc <_malloc_r>
 80080c0:	4606      	mov	r6, r0
 80080c2:	b950      	cbnz	r0, 80080da <__ssputs_r+0x5c>
 80080c4:	230c      	movs	r3, #12
 80080c6:	f8ca 3000 	str.w	r3, [sl]
 80080ca:	89a3      	ldrh	r3, [r4, #12]
 80080cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080d0:	81a3      	strh	r3, [r4, #12]
 80080d2:	f04f 30ff 	mov.w	r0, #4294967295
 80080d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080da:	6921      	ldr	r1, [r4, #16]
 80080dc:	464a      	mov	r2, r9
 80080de:	f7fd fb51 	bl	8005784 <memcpy>
 80080e2:	89a3      	ldrh	r3, [r4, #12]
 80080e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ec:	81a3      	strh	r3, [r4, #12]
 80080ee:	6126      	str	r6, [r4, #16]
 80080f0:	6165      	str	r5, [r4, #20]
 80080f2:	444e      	add	r6, r9
 80080f4:	eba5 0509 	sub.w	r5, r5, r9
 80080f8:	6026      	str	r6, [r4, #0]
 80080fa:	60a5      	str	r5, [r4, #8]
 80080fc:	463e      	mov	r6, r7
 80080fe:	42be      	cmp	r6, r7
 8008100:	d900      	bls.n	8008104 <__ssputs_r+0x86>
 8008102:	463e      	mov	r6, r7
 8008104:	6820      	ldr	r0, [r4, #0]
 8008106:	4632      	mov	r2, r6
 8008108:	4641      	mov	r1, r8
 800810a:	f7fd fb49 	bl	80057a0 <memmove>
 800810e:	68a3      	ldr	r3, [r4, #8]
 8008110:	1b9b      	subs	r3, r3, r6
 8008112:	60a3      	str	r3, [r4, #8]
 8008114:	6823      	ldr	r3, [r4, #0]
 8008116:	4433      	add	r3, r6
 8008118:	6023      	str	r3, [r4, #0]
 800811a:	2000      	movs	r0, #0
 800811c:	e7db      	b.n	80080d6 <__ssputs_r+0x58>
 800811e:	462a      	mov	r2, r5
 8008120:	f7ff ff7e 	bl	8008020 <_realloc_r>
 8008124:	4606      	mov	r6, r0
 8008126:	2800      	cmp	r0, #0
 8008128:	d1e1      	bne.n	80080ee <__ssputs_r+0x70>
 800812a:	6921      	ldr	r1, [r4, #16]
 800812c:	4650      	mov	r0, sl
 800812e:	f7fd fb59 	bl	80057e4 <_free_r>
 8008132:	e7c7      	b.n	80080c4 <__ssputs_r+0x46>

08008134 <_svfiprintf_r>:
 8008134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008138:	4698      	mov	r8, r3
 800813a:	898b      	ldrh	r3, [r1, #12]
 800813c:	061b      	lsls	r3, r3, #24
 800813e:	b09d      	sub	sp, #116	; 0x74
 8008140:	4607      	mov	r7, r0
 8008142:	460d      	mov	r5, r1
 8008144:	4614      	mov	r4, r2
 8008146:	d50e      	bpl.n	8008166 <_svfiprintf_r+0x32>
 8008148:	690b      	ldr	r3, [r1, #16]
 800814a:	b963      	cbnz	r3, 8008166 <_svfiprintf_r+0x32>
 800814c:	2140      	movs	r1, #64	; 0x40
 800814e:	f7fd fbb5 	bl	80058bc <_malloc_r>
 8008152:	6028      	str	r0, [r5, #0]
 8008154:	6128      	str	r0, [r5, #16]
 8008156:	b920      	cbnz	r0, 8008162 <_svfiprintf_r+0x2e>
 8008158:	230c      	movs	r3, #12
 800815a:	603b      	str	r3, [r7, #0]
 800815c:	f04f 30ff 	mov.w	r0, #4294967295
 8008160:	e0d1      	b.n	8008306 <_svfiprintf_r+0x1d2>
 8008162:	2340      	movs	r3, #64	; 0x40
 8008164:	616b      	str	r3, [r5, #20]
 8008166:	2300      	movs	r3, #0
 8008168:	9309      	str	r3, [sp, #36]	; 0x24
 800816a:	2320      	movs	r3, #32
 800816c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008170:	f8cd 800c 	str.w	r8, [sp, #12]
 8008174:	2330      	movs	r3, #48	; 0x30
 8008176:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008320 <_svfiprintf_r+0x1ec>
 800817a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800817e:	f04f 0901 	mov.w	r9, #1
 8008182:	4623      	mov	r3, r4
 8008184:	469a      	mov	sl, r3
 8008186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800818a:	b10a      	cbz	r2, 8008190 <_svfiprintf_r+0x5c>
 800818c:	2a25      	cmp	r2, #37	; 0x25
 800818e:	d1f9      	bne.n	8008184 <_svfiprintf_r+0x50>
 8008190:	ebba 0b04 	subs.w	fp, sl, r4
 8008194:	d00b      	beq.n	80081ae <_svfiprintf_r+0x7a>
 8008196:	465b      	mov	r3, fp
 8008198:	4622      	mov	r2, r4
 800819a:	4629      	mov	r1, r5
 800819c:	4638      	mov	r0, r7
 800819e:	f7ff ff6e 	bl	800807e <__ssputs_r>
 80081a2:	3001      	adds	r0, #1
 80081a4:	f000 80aa 	beq.w	80082fc <_svfiprintf_r+0x1c8>
 80081a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081aa:	445a      	add	r2, fp
 80081ac:	9209      	str	r2, [sp, #36]	; 0x24
 80081ae:	f89a 3000 	ldrb.w	r3, [sl]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f000 80a2 	beq.w	80082fc <_svfiprintf_r+0x1c8>
 80081b8:	2300      	movs	r3, #0
 80081ba:	f04f 32ff 	mov.w	r2, #4294967295
 80081be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081c2:	f10a 0a01 	add.w	sl, sl, #1
 80081c6:	9304      	str	r3, [sp, #16]
 80081c8:	9307      	str	r3, [sp, #28]
 80081ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081ce:	931a      	str	r3, [sp, #104]	; 0x68
 80081d0:	4654      	mov	r4, sl
 80081d2:	2205      	movs	r2, #5
 80081d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081d8:	4851      	ldr	r0, [pc, #324]	; (8008320 <_svfiprintf_r+0x1ec>)
 80081da:	f7f8 f831 	bl	8000240 <memchr>
 80081de:	9a04      	ldr	r2, [sp, #16]
 80081e0:	b9d8      	cbnz	r0, 800821a <_svfiprintf_r+0xe6>
 80081e2:	06d0      	lsls	r0, r2, #27
 80081e4:	bf44      	itt	mi
 80081e6:	2320      	movmi	r3, #32
 80081e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081ec:	0711      	lsls	r1, r2, #28
 80081ee:	bf44      	itt	mi
 80081f0:	232b      	movmi	r3, #43	; 0x2b
 80081f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081f6:	f89a 3000 	ldrb.w	r3, [sl]
 80081fa:	2b2a      	cmp	r3, #42	; 0x2a
 80081fc:	d015      	beq.n	800822a <_svfiprintf_r+0xf6>
 80081fe:	9a07      	ldr	r2, [sp, #28]
 8008200:	4654      	mov	r4, sl
 8008202:	2000      	movs	r0, #0
 8008204:	f04f 0c0a 	mov.w	ip, #10
 8008208:	4621      	mov	r1, r4
 800820a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800820e:	3b30      	subs	r3, #48	; 0x30
 8008210:	2b09      	cmp	r3, #9
 8008212:	d94e      	bls.n	80082b2 <_svfiprintf_r+0x17e>
 8008214:	b1b0      	cbz	r0, 8008244 <_svfiprintf_r+0x110>
 8008216:	9207      	str	r2, [sp, #28]
 8008218:	e014      	b.n	8008244 <_svfiprintf_r+0x110>
 800821a:	eba0 0308 	sub.w	r3, r0, r8
 800821e:	fa09 f303 	lsl.w	r3, r9, r3
 8008222:	4313      	orrs	r3, r2
 8008224:	9304      	str	r3, [sp, #16]
 8008226:	46a2      	mov	sl, r4
 8008228:	e7d2      	b.n	80081d0 <_svfiprintf_r+0x9c>
 800822a:	9b03      	ldr	r3, [sp, #12]
 800822c:	1d19      	adds	r1, r3, #4
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	9103      	str	r1, [sp, #12]
 8008232:	2b00      	cmp	r3, #0
 8008234:	bfbb      	ittet	lt
 8008236:	425b      	neglt	r3, r3
 8008238:	f042 0202 	orrlt.w	r2, r2, #2
 800823c:	9307      	strge	r3, [sp, #28]
 800823e:	9307      	strlt	r3, [sp, #28]
 8008240:	bfb8      	it	lt
 8008242:	9204      	strlt	r2, [sp, #16]
 8008244:	7823      	ldrb	r3, [r4, #0]
 8008246:	2b2e      	cmp	r3, #46	; 0x2e
 8008248:	d10c      	bne.n	8008264 <_svfiprintf_r+0x130>
 800824a:	7863      	ldrb	r3, [r4, #1]
 800824c:	2b2a      	cmp	r3, #42	; 0x2a
 800824e:	d135      	bne.n	80082bc <_svfiprintf_r+0x188>
 8008250:	9b03      	ldr	r3, [sp, #12]
 8008252:	1d1a      	adds	r2, r3, #4
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	9203      	str	r2, [sp, #12]
 8008258:	2b00      	cmp	r3, #0
 800825a:	bfb8      	it	lt
 800825c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008260:	3402      	adds	r4, #2
 8008262:	9305      	str	r3, [sp, #20]
 8008264:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008330 <_svfiprintf_r+0x1fc>
 8008268:	7821      	ldrb	r1, [r4, #0]
 800826a:	2203      	movs	r2, #3
 800826c:	4650      	mov	r0, sl
 800826e:	f7f7 ffe7 	bl	8000240 <memchr>
 8008272:	b140      	cbz	r0, 8008286 <_svfiprintf_r+0x152>
 8008274:	2340      	movs	r3, #64	; 0x40
 8008276:	eba0 000a 	sub.w	r0, r0, sl
 800827a:	fa03 f000 	lsl.w	r0, r3, r0
 800827e:	9b04      	ldr	r3, [sp, #16]
 8008280:	4303      	orrs	r3, r0
 8008282:	3401      	adds	r4, #1
 8008284:	9304      	str	r3, [sp, #16]
 8008286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800828a:	4826      	ldr	r0, [pc, #152]	; (8008324 <_svfiprintf_r+0x1f0>)
 800828c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008290:	2206      	movs	r2, #6
 8008292:	f7f7 ffd5 	bl	8000240 <memchr>
 8008296:	2800      	cmp	r0, #0
 8008298:	d038      	beq.n	800830c <_svfiprintf_r+0x1d8>
 800829a:	4b23      	ldr	r3, [pc, #140]	; (8008328 <_svfiprintf_r+0x1f4>)
 800829c:	bb1b      	cbnz	r3, 80082e6 <_svfiprintf_r+0x1b2>
 800829e:	9b03      	ldr	r3, [sp, #12]
 80082a0:	3307      	adds	r3, #7
 80082a2:	f023 0307 	bic.w	r3, r3, #7
 80082a6:	3308      	adds	r3, #8
 80082a8:	9303      	str	r3, [sp, #12]
 80082aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ac:	4433      	add	r3, r6
 80082ae:	9309      	str	r3, [sp, #36]	; 0x24
 80082b0:	e767      	b.n	8008182 <_svfiprintf_r+0x4e>
 80082b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80082b6:	460c      	mov	r4, r1
 80082b8:	2001      	movs	r0, #1
 80082ba:	e7a5      	b.n	8008208 <_svfiprintf_r+0xd4>
 80082bc:	2300      	movs	r3, #0
 80082be:	3401      	adds	r4, #1
 80082c0:	9305      	str	r3, [sp, #20]
 80082c2:	4619      	mov	r1, r3
 80082c4:	f04f 0c0a 	mov.w	ip, #10
 80082c8:	4620      	mov	r0, r4
 80082ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082ce:	3a30      	subs	r2, #48	; 0x30
 80082d0:	2a09      	cmp	r2, #9
 80082d2:	d903      	bls.n	80082dc <_svfiprintf_r+0x1a8>
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d0c5      	beq.n	8008264 <_svfiprintf_r+0x130>
 80082d8:	9105      	str	r1, [sp, #20]
 80082da:	e7c3      	b.n	8008264 <_svfiprintf_r+0x130>
 80082dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80082e0:	4604      	mov	r4, r0
 80082e2:	2301      	movs	r3, #1
 80082e4:	e7f0      	b.n	80082c8 <_svfiprintf_r+0x194>
 80082e6:	ab03      	add	r3, sp, #12
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	462a      	mov	r2, r5
 80082ec:	4b0f      	ldr	r3, [pc, #60]	; (800832c <_svfiprintf_r+0x1f8>)
 80082ee:	a904      	add	r1, sp, #16
 80082f0:	4638      	mov	r0, r7
 80082f2:	f7fd fd51 	bl	8005d98 <_printf_float>
 80082f6:	1c42      	adds	r2, r0, #1
 80082f8:	4606      	mov	r6, r0
 80082fa:	d1d6      	bne.n	80082aa <_svfiprintf_r+0x176>
 80082fc:	89ab      	ldrh	r3, [r5, #12]
 80082fe:	065b      	lsls	r3, r3, #25
 8008300:	f53f af2c 	bmi.w	800815c <_svfiprintf_r+0x28>
 8008304:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008306:	b01d      	add	sp, #116	; 0x74
 8008308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800830c:	ab03      	add	r3, sp, #12
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	462a      	mov	r2, r5
 8008312:	4b06      	ldr	r3, [pc, #24]	; (800832c <_svfiprintf_r+0x1f8>)
 8008314:	a904      	add	r1, sp, #16
 8008316:	4638      	mov	r0, r7
 8008318:	f7fd ffe2 	bl	80062e0 <_printf_i>
 800831c:	e7eb      	b.n	80082f6 <_svfiprintf_r+0x1c2>
 800831e:	bf00      	nop
 8008320:	080087ec 	.word	0x080087ec
 8008324:	080087f6 	.word	0x080087f6
 8008328:	08005d99 	.word	0x08005d99
 800832c:	0800807f 	.word	0x0800807f
 8008330:	080087f2 	.word	0x080087f2

08008334 <_raise_r>:
 8008334:	291f      	cmp	r1, #31
 8008336:	b538      	push	{r3, r4, r5, lr}
 8008338:	4604      	mov	r4, r0
 800833a:	460d      	mov	r5, r1
 800833c:	d904      	bls.n	8008348 <_raise_r+0x14>
 800833e:	2316      	movs	r3, #22
 8008340:	6003      	str	r3, [r0, #0]
 8008342:	f04f 30ff 	mov.w	r0, #4294967295
 8008346:	bd38      	pop	{r3, r4, r5, pc}
 8008348:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800834a:	b112      	cbz	r2, 8008352 <_raise_r+0x1e>
 800834c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008350:	b94b      	cbnz	r3, 8008366 <_raise_r+0x32>
 8008352:	4620      	mov	r0, r4
 8008354:	f000 f830 	bl	80083b8 <_getpid_r>
 8008358:	462a      	mov	r2, r5
 800835a:	4601      	mov	r1, r0
 800835c:	4620      	mov	r0, r4
 800835e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008362:	f000 b817 	b.w	8008394 <_kill_r>
 8008366:	2b01      	cmp	r3, #1
 8008368:	d00a      	beq.n	8008380 <_raise_r+0x4c>
 800836a:	1c59      	adds	r1, r3, #1
 800836c:	d103      	bne.n	8008376 <_raise_r+0x42>
 800836e:	2316      	movs	r3, #22
 8008370:	6003      	str	r3, [r0, #0]
 8008372:	2001      	movs	r0, #1
 8008374:	e7e7      	b.n	8008346 <_raise_r+0x12>
 8008376:	2400      	movs	r4, #0
 8008378:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800837c:	4628      	mov	r0, r5
 800837e:	4798      	blx	r3
 8008380:	2000      	movs	r0, #0
 8008382:	e7e0      	b.n	8008346 <_raise_r+0x12>

08008384 <raise>:
 8008384:	4b02      	ldr	r3, [pc, #8]	; (8008390 <raise+0xc>)
 8008386:	4601      	mov	r1, r0
 8008388:	6818      	ldr	r0, [r3, #0]
 800838a:	f7ff bfd3 	b.w	8008334 <_raise_r>
 800838e:	bf00      	nop
 8008390:	20001f74 	.word	0x20001f74

08008394 <_kill_r>:
 8008394:	b538      	push	{r3, r4, r5, lr}
 8008396:	4d07      	ldr	r5, [pc, #28]	; (80083b4 <_kill_r+0x20>)
 8008398:	2300      	movs	r3, #0
 800839a:	4604      	mov	r4, r0
 800839c:	4608      	mov	r0, r1
 800839e:	4611      	mov	r1, r2
 80083a0:	602b      	str	r3, [r5, #0]
 80083a2:	f7f9 f831 	bl	8001408 <_kill>
 80083a6:	1c43      	adds	r3, r0, #1
 80083a8:	d102      	bne.n	80083b0 <_kill_r+0x1c>
 80083aa:	682b      	ldr	r3, [r5, #0]
 80083ac:	b103      	cbz	r3, 80083b0 <_kill_r+0x1c>
 80083ae:	6023      	str	r3, [r4, #0]
 80083b0:	bd38      	pop	{r3, r4, r5, pc}
 80083b2:	bf00      	nop
 80083b4:	200038f0 	.word	0x200038f0

080083b8 <_getpid_r>:
 80083b8:	f7f9 b81e 	b.w	80013f8 <_getpid>

080083bc <__sread>:
 80083bc:	b510      	push	{r4, lr}
 80083be:	460c      	mov	r4, r1
 80083c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c4:	f000 f8ae 	bl	8008524 <_read_r>
 80083c8:	2800      	cmp	r0, #0
 80083ca:	bfab      	itete	ge
 80083cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80083ce:	89a3      	ldrhlt	r3, [r4, #12]
 80083d0:	181b      	addge	r3, r3, r0
 80083d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80083d6:	bfac      	ite	ge
 80083d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80083da:	81a3      	strhlt	r3, [r4, #12]
 80083dc:	bd10      	pop	{r4, pc}

080083de <__swrite>:
 80083de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083e2:	461f      	mov	r7, r3
 80083e4:	898b      	ldrh	r3, [r1, #12]
 80083e6:	05db      	lsls	r3, r3, #23
 80083e8:	4605      	mov	r5, r0
 80083ea:	460c      	mov	r4, r1
 80083ec:	4616      	mov	r6, r2
 80083ee:	d505      	bpl.n	80083fc <__swrite+0x1e>
 80083f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083f4:	2302      	movs	r3, #2
 80083f6:	2200      	movs	r2, #0
 80083f8:	f000 f868 	bl	80084cc <_lseek_r>
 80083fc:	89a3      	ldrh	r3, [r4, #12]
 80083fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008406:	81a3      	strh	r3, [r4, #12]
 8008408:	4632      	mov	r2, r6
 800840a:	463b      	mov	r3, r7
 800840c:	4628      	mov	r0, r5
 800840e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008412:	f000 b817 	b.w	8008444 <_write_r>

08008416 <__sseek>:
 8008416:	b510      	push	{r4, lr}
 8008418:	460c      	mov	r4, r1
 800841a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800841e:	f000 f855 	bl	80084cc <_lseek_r>
 8008422:	1c43      	adds	r3, r0, #1
 8008424:	89a3      	ldrh	r3, [r4, #12]
 8008426:	bf15      	itete	ne
 8008428:	6560      	strne	r0, [r4, #84]	; 0x54
 800842a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800842e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008432:	81a3      	strheq	r3, [r4, #12]
 8008434:	bf18      	it	ne
 8008436:	81a3      	strhne	r3, [r4, #12]
 8008438:	bd10      	pop	{r4, pc}

0800843a <__sclose>:
 800843a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800843e:	f000 b813 	b.w	8008468 <_close_r>
	...

08008444 <_write_r>:
 8008444:	b538      	push	{r3, r4, r5, lr}
 8008446:	4d07      	ldr	r5, [pc, #28]	; (8008464 <_write_r+0x20>)
 8008448:	4604      	mov	r4, r0
 800844a:	4608      	mov	r0, r1
 800844c:	4611      	mov	r1, r2
 800844e:	2200      	movs	r2, #0
 8008450:	602a      	str	r2, [r5, #0]
 8008452:	461a      	mov	r2, r3
 8008454:	f7f9 f80f 	bl	8001476 <_write>
 8008458:	1c43      	adds	r3, r0, #1
 800845a:	d102      	bne.n	8008462 <_write_r+0x1e>
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	b103      	cbz	r3, 8008462 <_write_r+0x1e>
 8008460:	6023      	str	r3, [r4, #0]
 8008462:	bd38      	pop	{r3, r4, r5, pc}
 8008464:	200038f0 	.word	0x200038f0

08008468 <_close_r>:
 8008468:	b538      	push	{r3, r4, r5, lr}
 800846a:	4d06      	ldr	r5, [pc, #24]	; (8008484 <_close_r+0x1c>)
 800846c:	2300      	movs	r3, #0
 800846e:	4604      	mov	r4, r0
 8008470:	4608      	mov	r0, r1
 8008472:	602b      	str	r3, [r5, #0]
 8008474:	f7f9 f81b 	bl	80014ae <_close>
 8008478:	1c43      	adds	r3, r0, #1
 800847a:	d102      	bne.n	8008482 <_close_r+0x1a>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	b103      	cbz	r3, 8008482 <_close_r+0x1a>
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	200038f0 	.word	0x200038f0

08008488 <_fstat_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	4d07      	ldr	r5, [pc, #28]	; (80084a8 <_fstat_r+0x20>)
 800848c:	2300      	movs	r3, #0
 800848e:	4604      	mov	r4, r0
 8008490:	4608      	mov	r0, r1
 8008492:	4611      	mov	r1, r2
 8008494:	602b      	str	r3, [r5, #0]
 8008496:	f7f9 f816 	bl	80014c6 <_fstat>
 800849a:	1c43      	adds	r3, r0, #1
 800849c:	d102      	bne.n	80084a4 <_fstat_r+0x1c>
 800849e:	682b      	ldr	r3, [r5, #0]
 80084a0:	b103      	cbz	r3, 80084a4 <_fstat_r+0x1c>
 80084a2:	6023      	str	r3, [r4, #0]
 80084a4:	bd38      	pop	{r3, r4, r5, pc}
 80084a6:	bf00      	nop
 80084a8:	200038f0 	.word	0x200038f0

080084ac <_isatty_r>:
 80084ac:	b538      	push	{r3, r4, r5, lr}
 80084ae:	4d06      	ldr	r5, [pc, #24]	; (80084c8 <_isatty_r+0x1c>)
 80084b0:	2300      	movs	r3, #0
 80084b2:	4604      	mov	r4, r0
 80084b4:	4608      	mov	r0, r1
 80084b6:	602b      	str	r3, [r5, #0]
 80084b8:	f7f9 f815 	bl	80014e6 <_isatty>
 80084bc:	1c43      	adds	r3, r0, #1
 80084be:	d102      	bne.n	80084c6 <_isatty_r+0x1a>
 80084c0:	682b      	ldr	r3, [r5, #0]
 80084c2:	b103      	cbz	r3, 80084c6 <_isatty_r+0x1a>
 80084c4:	6023      	str	r3, [r4, #0]
 80084c6:	bd38      	pop	{r3, r4, r5, pc}
 80084c8:	200038f0 	.word	0x200038f0

080084cc <_lseek_r>:
 80084cc:	b538      	push	{r3, r4, r5, lr}
 80084ce:	4d07      	ldr	r5, [pc, #28]	; (80084ec <_lseek_r+0x20>)
 80084d0:	4604      	mov	r4, r0
 80084d2:	4608      	mov	r0, r1
 80084d4:	4611      	mov	r1, r2
 80084d6:	2200      	movs	r2, #0
 80084d8:	602a      	str	r2, [r5, #0]
 80084da:	461a      	mov	r2, r3
 80084dc:	f7f9 f80e 	bl	80014fc <_lseek>
 80084e0:	1c43      	adds	r3, r0, #1
 80084e2:	d102      	bne.n	80084ea <_lseek_r+0x1e>
 80084e4:	682b      	ldr	r3, [r5, #0]
 80084e6:	b103      	cbz	r3, 80084ea <_lseek_r+0x1e>
 80084e8:	6023      	str	r3, [r4, #0]
 80084ea:	bd38      	pop	{r3, r4, r5, pc}
 80084ec:	200038f0 	.word	0x200038f0

080084f0 <__ascii_mbtowc>:
 80084f0:	b082      	sub	sp, #8
 80084f2:	b901      	cbnz	r1, 80084f6 <__ascii_mbtowc+0x6>
 80084f4:	a901      	add	r1, sp, #4
 80084f6:	b142      	cbz	r2, 800850a <__ascii_mbtowc+0x1a>
 80084f8:	b14b      	cbz	r3, 800850e <__ascii_mbtowc+0x1e>
 80084fa:	7813      	ldrb	r3, [r2, #0]
 80084fc:	600b      	str	r3, [r1, #0]
 80084fe:	7812      	ldrb	r2, [r2, #0]
 8008500:	1e10      	subs	r0, r2, #0
 8008502:	bf18      	it	ne
 8008504:	2001      	movne	r0, #1
 8008506:	b002      	add	sp, #8
 8008508:	4770      	bx	lr
 800850a:	4610      	mov	r0, r2
 800850c:	e7fb      	b.n	8008506 <__ascii_mbtowc+0x16>
 800850e:	f06f 0001 	mvn.w	r0, #1
 8008512:	e7f8      	b.n	8008506 <__ascii_mbtowc+0x16>

08008514 <_malloc_usable_size_r>:
 8008514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008518:	1f18      	subs	r0, r3, #4
 800851a:	2b00      	cmp	r3, #0
 800851c:	bfbc      	itt	lt
 800851e:	580b      	ldrlt	r3, [r1, r0]
 8008520:	18c0      	addlt	r0, r0, r3
 8008522:	4770      	bx	lr

08008524 <_read_r>:
 8008524:	b538      	push	{r3, r4, r5, lr}
 8008526:	4d07      	ldr	r5, [pc, #28]	; (8008544 <_read_r+0x20>)
 8008528:	4604      	mov	r4, r0
 800852a:	4608      	mov	r0, r1
 800852c:	4611      	mov	r1, r2
 800852e:	2200      	movs	r2, #0
 8008530:	602a      	str	r2, [r5, #0]
 8008532:	461a      	mov	r2, r3
 8008534:	f7f8 ff82 	bl	800143c <_read>
 8008538:	1c43      	adds	r3, r0, #1
 800853a:	d102      	bne.n	8008542 <_read_r+0x1e>
 800853c:	682b      	ldr	r3, [r5, #0]
 800853e:	b103      	cbz	r3, 8008542 <_read_r+0x1e>
 8008540:	6023      	str	r3, [r4, #0]
 8008542:	bd38      	pop	{r3, r4, r5, pc}
 8008544:	200038f0 	.word	0x200038f0

08008548 <__ascii_wctomb>:
 8008548:	b149      	cbz	r1, 800855e <__ascii_wctomb+0x16>
 800854a:	2aff      	cmp	r2, #255	; 0xff
 800854c:	bf85      	ittet	hi
 800854e:	238a      	movhi	r3, #138	; 0x8a
 8008550:	6003      	strhi	r3, [r0, #0]
 8008552:	700a      	strbls	r2, [r1, #0]
 8008554:	f04f 30ff 	movhi.w	r0, #4294967295
 8008558:	bf98      	it	ls
 800855a:	2001      	movls	r0, #1
 800855c:	4770      	bx	lr
 800855e:	4608      	mov	r0, r1
 8008560:	4770      	bx	lr
	...

08008564 <sqrtf>:
 8008564:	b508      	push	{r3, lr}
 8008566:	ed2d 8b02 	vpush	{d8}
 800856a:	eeb0 8a40 	vmov.f32	s16, s0
 800856e:	f000 f817 	bl	80085a0 <__ieee754_sqrtf>
 8008572:	eeb4 8a48 	vcmp.f32	s16, s16
 8008576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800857a:	d60c      	bvs.n	8008596 <sqrtf+0x32>
 800857c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800859c <sqrtf+0x38>
 8008580:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008588:	d505      	bpl.n	8008596 <sqrtf+0x32>
 800858a:	f7fd f8af 	bl	80056ec <__errno>
 800858e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008592:	2321      	movs	r3, #33	; 0x21
 8008594:	6003      	str	r3, [r0, #0]
 8008596:	ecbd 8b02 	vpop	{d8}
 800859a:	bd08      	pop	{r3, pc}
 800859c:	00000000 	.word	0x00000000

080085a0 <__ieee754_sqrtf>:
 80085a0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80085a4:	4770      	bx	lr
	...

080085a8 <_init>:
 80085a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085aa:	bf00      	nop
 80085ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ae:	bc08      	pop	{r3}
 80085b0:	469e      	mov	lr, r3
 80085b2:	4770      	bx	lr

080085b4 <_fini>:
 80085b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b6:	bf00      	nop
 80085b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ba:	bc08      	pop	{r3}
 80085bc:	469e      	mov	lr, r3
 80085be:	4770      	bx	lr
