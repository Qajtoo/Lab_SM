
DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  0800a588  0800a588  0001a588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800add8  0800add8  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800add8  0800add8  0001add8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ade0  0800ade0  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ade0  0800ade0  0001ade0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ade4  0800ade4  0001ade4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800ade8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  200001f0  0800afd8  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  0800afd8  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144d7  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d36  00000000  00000000  000346f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  00037430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00038460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283e1  00000000  00000000  00039338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153ec  00000000  00000000  00061719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3dfd  00000000  00000000  00076b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016a902  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059a4  00000000  00000000  0016a954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a56c 	.word	0x0800a56c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800a56c 	.word	0x0800a56c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b9aa 	b.w	8000fe4 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f83c 	bl	8000d14 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff33 	bl	8000b1c <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fca9 	bl	8000638 <__aeabi_dmul>
 8000ce6:	f7ff ff57 	bl	8000b98 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc2a 	bl	8000544 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fca0 	bl	8000638 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fae2 	bl	80002c8 <__aeabi_dsub>
 8000d04:	f7ff ff48 	bl	8000b98 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <__udivmoddi4>:
 8000d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	9d08      	ldr	r5, [sp, #32]
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	468e      	mov	lr, r1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d14d      	bne.n	8000dbe <__udivmoddi4+0xaa>
 8000d22:	428a      	cmp	r2, r1
 8000d24:	4694      	mov	ip, r2
 8000d26:	d969      	bls.n	8000dfc <__udivmoddi4+0xe8>
 8000d28:	fab2 f282 	clz	r2, r2
 8000d2c:	b152      	cbz	r2, 8000d44 <__udivmoddi4+0x30>
 8000d2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d32:	f1c2 0120 	rsb	r1, r2, #32
 8000d36:	fa20 f101 	lsr.w	r1, r0, r1
 8000d3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d42:	4094      	lsls	r4, r2
 8000d44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d48:	0c21      	lsrs	r1, r4, #16
 8000d4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d4e:	fa1f f78c 	uxth.w	r7, ip
 8000d52:	fb08 e316 	mls	r3, r8, r6, lr
 8000d56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d5a:	fb06 f107 	mul.w	r1, r6, r7
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x64>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d6a:	f080 811f 	bcs.w	8000fac <__udivmoddi4+0x298>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 811c 	bls.w	8000fac <__udivmoddi4+0x298>
 8000d74:	3e02      	subs	r6, #2
 8000d76:	4463      	add	r3, ip
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb00 f707 	mul.w	r7, r0, r7
 8000d8c:	42a7      	cmp	r7, r4
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x92>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d98:	f080 810a 	bcs.w	8000fb0 <__udivmoddi4+0x29c>
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	f240 8107 	bls.w	8000fb0 <__udivmoddi4+0x29c>
 8000da2:	4464      	add	r4, ip
 8000da4:	3802      	subs	r0, #2
 8000da6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000daa:	1be4      	subs	r4, r4, r7
 8000dac:	2600      	movs	r6, #0
 8000dae:	b11d      	cbz	r5, 8000db8 <__udivmoddi4+0xa4>
 8000db0:	40d4      	lsrs	r4, r2
 8000db2:	2300      	movs	r3, #0
 8000db4:	e9c5 4300 	strd	r4, r3, [r5]
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0xc2>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	f000 80ef 	beq.w	8000fa6 <__udivmoddi4+0x292>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e9c5 0100 	strd	r0, r1, [r5]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f683 	clz	r6, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d14a      	bne.n	8000e74 <__udivmoddi4+0x160>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0xd4>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80f9 	bhi.w	8000fda <__udivmoddi4+0x2c6>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0303 	sbc.w	r3, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	469e      	mov	lr, r3
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0e0      	beq.n	8000db8 <__udivmoddi4+0xa4>
 8000df6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dfa:	e7dd      	b.n	8000db8 <__udivmoddi4+0xa4>
 8000dfc:	b902      	cbnz	r2, 8000e00 <__udivmoddi4+0xec>
 8000dfe:	deff      	udf	#255	; 0xff
 8000e00:	fab2 f282 	clz	r2, r2
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	f040 8092 	bne.w	8000f2e <__udivmoddi4+0x21a>
 8000e0a:	eba1 010c 	sub.w	r1, r1, ip
 8000e0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	2601      	movs	r6, #1
 8000e18:	0c20      	lsrs	r0, r4, #16
 8000e1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e26:	fb0e f003 	mul.w	r0, lr, r3
 8000e2a:	4288      	cmp	r0, r1
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x12c>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x12a>
 8000e38:	4288      	cmp	r0, r1
 8000e3a:	f200 80cb 	bhi.w	8000fd4 <__udivmoddi4+0x2c0>
 8000e3e:	4643      	mov	r3, r8
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1110 	mls	r1, r7, r0, r1
 8000e4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e50:	fb0e fe00 	mul.w	lr, lr, r0
 8000e54:	45a6      	cmp	lr, r4
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x156>
 8000e58:	eb1c 0404 	adds.w	r4, ip, r4
 8000e5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e60:	d202      	bcs.n	8000e68 <__udivmoddi4+0x154>
 8000e62:	45a6      	cmp	lr, r4
 8000e64:	f200 80bb 	bhi.w	8000fde <__udivmoddi4+0x2ca>
 8000e68:	4608      	mov	r0, r1
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e72:	e79c      	b.n	8000dae <__udivmoddi4+0x9a>
 8000e74:	f1c6 0720 	rsb	r7, r6, #32
 8000e78:	40b3      	lsls	r3, r6
 8000e7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e82:	fa20 f407 	lsr.w	r4, r0, r7
 8000e86:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8a:	431c      	orrs	r4, r3
 8000e8c:	40f9      	lsrs	r1, r7
 8000e8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e92:	fa00 f306 	lsl.w	r3, r0, r6
 8000e96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e9a:	0c20      	lsrs	r0, r4, #16
 8000e9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ea0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ea4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ea8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eac:	4288      	cmp	r0, r1
 8000eae:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb2:	d90b      	bls.n	8000ecc <__udivmoddi4+0x1b8>
 8000eb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ebc:	f080 8088 	bcs.w	8000fd0 <__udivmoddi4+0x2bc>
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	f240 8085 	bls.w	8000fd0 <__udivmoddi4+0x2bc>
 8000ec6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	1a09      	subs	r1, r1, r0
 8000ece:	b2a4      	uxth	r4, r4
 8000ed0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ed4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ed8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000edc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ee0:	458e      	cmp	lr, r1
 8000ee2:	d908      	bls.n	8000ef6 <__udivmoddi4+0x1e2>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eec:	d26c      	bcs.n	8000fc8 <__udivmoddi4+0x2b4>
 8000eee:	458e      	cmp	lr, r1
 8000ef0:	d96a      	bls.n	8000fc8 <__udivmoddi4+0x2b4>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4461      	add	r1, ip
 8000ef6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000efa:	fba0 9402 	umull	r9, r4, r0, r2
 8000efe:	eba1 010e 	sub.w	r1, r1, lr
 8000f02:	42a1      	cmp	r1, r4
 8000f04:	46c8      	mov	r8, r9
 8000f06:	46a6      	mov	lr, r4
 8000f08:	d356      	bcc.n	8000fb8 <__udivmoddi4+0x2a4>
 8000f0a:	d053      	beq.n	8000fb4 <__udivmoddi4+0x2a0>
 8000f0c:	b15d      	cbz	r5, 8000f26 <__udivmoddi4+0x212>
 8000f0e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f12:	eb61 010e 	sbc.w	r1, r1, lr
 8000f16:	fa01 f707 	lsl.w	r7, r1, r7
 8000f1a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f1e:	40f1      	lsrs	r1, r6
 8000f20:	431f      	orrs	r7, r3
 8000f22:	e9c5 7100 	strd	r7, r1, [r5]
 8000f26:	2600      	movs	r6, #0
 8000f28:	4631      	mov	r1, r6
 8000f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2e:	f1c2 0320 	rsb	r3, r2, #32
 8000f32:	40d8      	lsrs	r0, r3
 8000f34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f38:	fa21 f303 	lsr.w	r3, r1, r3
 8000f3c:	4091      	lsls	r1, r2
 8000f3e:	4301      	orrs	r1, r0
 8000f40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f44:	fa1f fe8c 	uxth.w	lr, ip
 8000f48:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f4c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f50:	0c0b      	lsrs	r3, r1, #16
 8000f52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f56:	fb00 f60e 	mul.w	r6, r0, lr
 8000f5a:	429e      	cmp	r6, r3
 8000f5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x260>
 8000f62:	eb1c 0303 	adds.w	r3, ip, r3
 8000f66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f6a:	d22f      	bcs.n	8000fcc <__udivmoddi4+0x2b8>
 8000f6c:	429e      	cmp	r6, r3
 8000f6e:	d92d      	bls.n	8000fcc <__udivmoddi4+0x2b8>
 8000f70:	3802      	subs	r0, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	1b9b      	subs	r3, r3, r6
 8000f76:	b289      	uxth	r1, r1
 8000f78:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f7c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f84:	fb06 f30e 	mul.w	r3, r6, lr
 8000f88:	428b      	cmp	r3, r1
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x28a>
 8000f8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f90:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f94:	d216      	bcs.n	8000fc4 <__udivmoddi4+0x2b0>
 8000f96:	428b      	cmp	r3, r1
 8000f98:	d914      	bls.n	8000fc4 <__udivmoddi4+0x2b0>
 8000f9a:	3e02      	subs	r6, #2
 8000f9c:	4461      	add	r1, ip
 8000f9e:	1ac9      	subs	r1, r1, r3
 8000fa0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fa4:	e738      	b.n	8000e18 <__udivmoddi4+0x104>
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e705      	b.n	8000db8 <__udivmoddi4+0xa4>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e3      	b.n	8000d78 <__udivmoddi4+0x64>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6f8      	b.n	8000da6 <__udivmoddi4+0x92>
 8000fb4:	454b      	cmp	r3, r9
 8000fb6:	d2a9      	bcs.n	8000f0c <__udivmoddi4+0x1f8>
 8000fb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fbc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7a3      	b.n	8000f0c <__udivmoddi4+0x1f8>
 8000fc4:	4646      	mov	r6, r8
 8000fc6:	e7ea      	b.n	8000f9e <__udivmoddi4+0x28a>
 8000fc8:	4620      	mov	r0, r4
 8000fca:	e794      	b.n	8000ef6 <__udivmoddi4+0x1e2>
 8000fcc:	4640      	mov	r0, r8
 8000fce:	e7d1      	b.n	8000f74 <__udivmoddi4+0x260>
 8000fd0:	46d0      	mov	r8, sl
 8000fd2:	e77b      	b.n	8000ecc <__udivmoddi4+0x1b8>
 8000fd4:	3b02      	subs	r3, #2
 8000fd6:	4461      	add	r1, ip
 8000fd8:	e732      	b.n	8000e40 <__udivmoddi4+0x12c>
 8000fda:	4630      	mov	r0, r6
 8000fdc:	e709      	b.n	8000df2 <__udivmoddi4+0xde>
 8000fde:	4464      	add	r4, ip
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	e742      	b.n	8000e6a <__udivmoddi4+0x156>

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fee:	463b      	mov	r3, r7
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_DAC_Init+0x4c>)
 8000ff8:	4a0f      	ldr	r2, [pc, #60]	; (8001038 <MX_DAC_Init+0x50>)
 8000ffa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000ffc:	480d      	ldr	r0, [pc, #52]	; (8001034 <MX_DAC_Init+0x4c>)
 8000ffe:	f000 fefa 	bl	8001df6 <HAL_DAC_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001008:	f000 fb00 	bl	800160c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800100c:	2324      	movs	r3, #36	; 0x24
 800100e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001014:	463b      	mov	r3, r7
 8001016:	2200      	movs	r2, #0
 8001018:	4619      	mov	r1, r3
 800101a:	4806      	ldr	r0, [pc, #24]	; (8001034 <MX_DAC_Init+0x4c>)
 800101c:	f001 f800 	bl	8002020 <HAL_DAC_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001026:	f000 faf1 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000020c 	.word	0x2000020c
 8001038:	40007400 	.word	0x40007400

0800103c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a31      	ldr	r2, [pc, #196]	; (8001120 <HAL_DAC_MspInit+0xe4>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d15c      	bne.n	8001118 <HAL_DAC_MspInit+0xdc>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800105e:	4b31      	ldr	r3, [pc, #196]	; (8001124 <HAL_DAC_MspInit+0xe8>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	4a30      	ldr	r2, [pc, #192]	; (8001124 <HAL_DAC_MspInit+0xe8>)
 8001064:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001068:	6413      	str	r3, [r2, #64]	; 0x40
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <HAL_DAC_MspInit+0xe8>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <HAL_DAC_MspInit+0xe8>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a2a      	ldr	r2, [pc, #168]	; (8001124 <HAL_DAC_MspInit+0xe8>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b28      	ldr	r3, [pc, #160]	; (8001124 <HAL_DAC_MspInit+0xe8>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800108e:	2310      	movs	r3, #16
 8001090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001092:	2303      	movs	r3, #3
 8001094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	4821      	ldr	r0, [pc, #132]	; (8001128 <HAL_DAC_MspInit+0xec>)
 80010a2:	f001 fb93 	bl	80027cc <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80010a6:	4b21      	ldr	r3, [pc, #132]	; (800112c <HAL_DAC_MspInit+0xf0>)
 80010a8:	4a21      	ldr	r2, [pc, #132]	; (8001130 <HAL_DAC_MspInit+0xf4>)
 80010aa:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <HAL_DAC_MspInit+0xf0>)
 80010ae:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80010b2:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <HAL_DAC_MspInit+0xf0>)
 80010b6:	2240      	movs	r2, #64	; 0x40
 80010b8:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ba:	4b1c      	ldr	r3, [pc, #112]	; (800112c <HAL_DAC_MspInit+0xf0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <HAL_DAC_MspInit+0xf0>)
 80010c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010c6:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010c8:	4b18      	ldr	r3, [pc, #96]	; (800112c <HAL_DAC_MspInit+0xf0>)
 80010ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010ce:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <HAL_DAC_MspInit+0xf0>)
 80010d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010d6:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80010d8:	4b14      	ldr	r3, [pc, #80]	; (800112c <HAL_DAC_MspInit+0xf0>)
 80010da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010de:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_DAC_MspInit+0xf0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_DAC_MspInit+0xf0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80010ec:	480f      	ldr	r0, [pc, #60]	; (800112c <HAL_DAC_MspInit+0xf0>)
 80010ee:	f000 fff1 	bl	80020d4 <HAL_DMA_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <HAL_DAC_MspInit+0xc0>
    {
      Error_Handler();
 80010f8:	f000 fa88 	bl	800160c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a0b      	ldr	r2, [pc, #44]	; (800112c <HAL_DAC_MspInit+0xf0>)
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <HAL_DAC_MspInit+0xf0>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	2036      	movs	r0, #54	; 0x36
 800110e:	f000 fe3c 	bl	8001d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001112:	2036      	movs	r0, #54	; 0x36
 8001114:	f000 fe55 	bl	8001dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001118:	bf00      	nop
 800111a:	3728      	adds	r7, #40	; 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40007400 	.word	0x40007400
 8001124:	40023800 	.word	0x40023800
 8001128:	40020000 	.word	0x40020000
 800112c:	20000220 	.word	0x20000220
 8001130:	40026088 	.word	0x40026088

08001134 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_DMA_Init+0x38>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a0b      	ldr	r2, [pc, #44]	; (800116c <MX_DMA_Init+0x38>)
 8001140:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_DMA_Init+0x38>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	2010      	movs	r0, #16
 8001158:	f000 fe17 	bl	8001d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800115c:	2010      	movs	r0, #16
 800115e:	f000 fe30 	bl	8001dc2 <HAL_NVIC_EnableIRQ>

}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800

08001170 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	; 0x30
 8001174:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001186:	4b77      	ldr	r3, [pc, #476]	; (8001364 <MX_GPIO_Init+0x1f4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a76      	ldr	r2, [pc, #472]	; (8001364 <MX_GPIO_Init+0x1f4>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b74      	ldr	r3, [pc, #464]	; (8001364 <MX_GPIO_Init+0x1f4>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	61bb      	str	r3, [r7, #24]
 800119c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800119e:	4b71      	ldr	r3, [pc, #452]	; (8001364 <MX_GPIO_Init+0x1f4>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a70      	ldr	r2, [pc, #448]	; (8001364 <MX_GPIO_Init+0x1f4>)
 80011a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b6e      	ldr	r3, [pc, #440]	; (8001364 <MX_GPIO_Init+0x1f4>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b6b      	ldr	r3, [pc, #428]	; (8001364 <MX_GPIO_Init+0x1f4>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a6a      	ldr	r2, [pc, #424]	; (8001364 <MX_GPIO_Init+0x1f4>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b68      	ldr	r3, [pc, #416]	; (8001364 <MX_GPIO_Init+0x1f4>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	4b65      	ldr	r3, [pc, #404]	; (8001364 <MX_GPIO_Init+0x1f4>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a64      	ldr	r2, [pc, #400]	; (8001364 <MX_GPIO_Init+0x1f4>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b62      	ldr	r3, [pc, #392]	; (8001364 <MX_GPIO_Init+0x1f4>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e6:	4b5f      	ldr	r3, [pc, #380]	; (8001364 <MX_GPIO_Init+0x1f4>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a5e      	ldr	r2, [pc, #376]	; (8001364 <MX_GPIO_Init+0x1f4>)
 80011ec:	f043 0308 	orr.w	r3, r3, #8
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b5c      	ldr	r3, [pc, #368]	; (8001364 <MX_GPIO_Init+0x1f4>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011fe:	4b59      	ldr	r3, [pc, #356]	; (8001364 <MX_GPIO_Init+0x1f4>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a58      	ldr	r2, [pc, #352]	; (8001364 <MX_GPIO_Init+0x1f4>)
 8001204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b56      	ldr	r3, [pc, #344]	; (8001364 <MX_GPIO_Init+0x1f4>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	f244 0181 	movw	r1, #16513	; 0x4081
 800121c:	4852      	ldr	r0, [pc, #328]	; (8001368 <MX_GPIO_Init+0x1f8>)
 800121e:	f001 fc81 	bl	8002b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2140      	movs	r1, #64	; 0x40
 8001226:	4851      	ldr	r0, [pc, #324]	; (800136c <MX_GPIO_Init+0x1fc>)
 8001228:	f001 fc7c 	bl	8002b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800122c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001232:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001236:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	484b      	ldr	r0, [pc, #300]	; (8001370 <MX_GPIO_Init+0x200>)
 8001244:	f001 fac2 	bl	80027cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001248:	2332      	movs	r3, #50	; 0x32
 800124a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001258:	230b      	movs	r3, #11
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4619      	mov	r1, r3
 8001262:	4843      	ldr	r0, [pc, #268]	; (8001370 <MX_GPIO_Init+0x200>)
 8001264:	f001 fab2 	bl	80027cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001268:	2386      	movs	r3, #134	; 0x86
 800126a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001278:	230b      	movs	r3, #11
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	4619      	mov	r1, r3
 8001282:	483c      	ldr	r0, [pc, #240]	; (8001374 <MX_GPIO_Init+0x204>)
 8001284:	f001 faa2 	bl	80027cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001288:	f244 0381 	movw	r3, #16513	; 0x4081
 800128c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	2301      	movs	r3, #1
 8001290:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	4619      	mov	r1, r3
 80012a0:	4831      	ldr	r0, [pc, #196]	; (8001368 <MX_GPIO_Init+0x1f8>)
 80012a2:	f001 fa93 	bl	80027cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80012a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012b8:	230b      	movs	r3, #11
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	4619      	mov	r1, r3
 80012c2:	4829      	ldr	r0, [pc, #164]	; (8001368 <MX_GPIO_Init+0x1f8>)
 80012c4:	f001 fa82 	bl	80027cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012c8:	2340      	movs	r3, #64	; 0x40
 80012ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	4619      	mov	r1, r3
 80012de:	4823      	ldr	r0, [pc, #140]	; (800136c <MX_GPIO_Init+0x1fc>)
 80012e0:	f001 fa74 	bl	80027cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4619      	mov	r1, r3
 80012f6:	481d      	ldr	r0, [pc, #116]	; (800136c <MX_GPIO_Init+0x1fc>)
 80012f8:	f001 fa68 	bl	80027cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012fc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800130e:	230a      	movs	r3, #10
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	4619      	mov	r1, r3
 8001318:	4816      	ldr	r0, [pc, #88]	; (8001374 <MX_GPIO_Init+0x204>)
 800131a:	f001 fa57 	bl	80027cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800131e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	4810      	ldr	r0, [pc, #64]	; (8001374 <MX_GPIO_Init+0x204>)
 8001334:	f001 fa4a 	bl	80027cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001338:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800133c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800134a:	230b      	movs	r3, #11
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_GPIO_Init+0x1fc>)
 8001356:	f001 fa39 	bl	80027cc <HAL_GPIO_Init>

}
 800135a:	bf00      	nop
 800135c:	3730      	adds	r7, #48	; 0x30
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40020400 	.word	0x40020400
 800136c:	40021800 	.word	0x40021800
 8001370:	40020800 	.word	0x40020800
 8001374:	40020000 	.word	0x40020000

08001378 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Analog output: high priority */
  if(htim->Instance == TIM2)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001388:	d16a      	bne.n	8001460 <HAL_TIM_PeriodElapsedCallback+0xe8>
  {
	if(t == 0)
 800138a:	4b39      	ldr	r3, [pc, #228]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800138c:	edd3 7a00 	vldr	s15, [r3]
 8001390:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001398:	d107      	bne.n	80013aa <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		A = A_buf;
 800139a:	4b36      	ldr	r3, [pc, #216]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a36      	ldr	r2, [pc, #216]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80013a0:	6013      	str	r3, [r2, #0]
		A0 = A_buf;
 80013a2:	4b34      	ldr	r3, [pc, #208]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a35      	ldr	r2, [pc, #212]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80013a8:	6013      	str	r3, [r2, #0]
	}
    y = A*sinf(2*M_PI*f*t) + A0;
 80013aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f8ea 	bl	8000588 <__aeabi_f2d>
 80013b4:	a32c      	add	r3, pc, #176	; (adr r3, 8001468 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80013b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ba:	f7ff f93d 	bl	8000638 <__aeabi_dmul>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4614      	mov	r4, r2
 80013c4:	461d      	mov	r5, r3
 80013c6:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f8dc 	bl	8000588 <__aeabi_f2d>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4620      	mov	r0, r4
 80013d6:	4629      	mov	r1, r5
 80013d8:	f7ff f92e 	bl	8000638 <__aeabi_dmul>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f7ff fbf8 	bl	8000bd8 <__aeabi_d2f>
 80013e8:	4603      	mov	r3, r0
 80013ea:	ee00 3a10 	vmov	s0, r3
 80013ee:	f008 fb61 	bl	8009ab4 <sinf>
 80013f2:	eeb0 7a40 	vmov.f32	s14, s0
 80013f6:	4b20      	ldr	r3, [pc, #128]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80013f8:	edd3 7a00 	vldr	s15, [r3]
 80013fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001400:	4b1e      	ldr	r3, [pc, #120]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001402:	edd3 7a00 	vldr	s15, [r3]
 8001406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800140c:	edc3 7a00 	vstr	s15, [r3]
    t = (t < T) ? (t+ts) : (0);
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001412:	edd3 7a00 	vldr	s15, [r3]
 8001416:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001484 <HAL_TIM_PeriodElapsedCallback+0x10c>
 800141a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001422:	d507      	bpl.n	8001434 <HAL_TIM_PeriodElapsedCallback+0xbc>
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001426:	edd3 7a00 	vldr	s15, [r3]
 800142a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001488 <HAL_TIM_PeriodElapsedCallback+0x110>
 800142e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001432:	e001      	b.n	8001438 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8001434:	eddf 7a15 	vldr	s15, [pc, #84]	; 800148c <HAL_TIM_PeriodElapsedCallback+0x114>
 8001438:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800143a:	edc3 7a00 	vstr	s15, [r3]
    DAC_SetVoltage(&hdac,DAC_CHANNEL_1, y);
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001440:	edd3 7a00 	vldr	s15, [r3]
 8001444:	eeb0 0a67 	vmov.f32	s0, s15
 8001448:	2100      	movs	r1, #0
 800144a:	4811      	ldr	r0, [pc, #68]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800144c:	f004 fb6e 	bl	8005b2c <DAC_SetVoltage>
   	out_svw = HAL_DAC_GetValue(&hdac, DAC_CHANNEL_1);
 8001450:	2100      	movs	r1, #0
 8001452:	480f      	ldr	r0, [pc, #60]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001454:	f000 fdcc 	bl	8001ff0 <HAL_DAC_GetValue>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800145e:	601a      	str	r2, [r3, #0]
  }
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bdb0      	pop	{r4, r5, r7, pc}
 8001468:	54442d18 	.word	0x54442d18
 800146c:	401921fb 	.word	0x401921fb
 8001470:	20000284 	.word	0x20000284
 8001474:	20000004 	.word	0x20000004
 8001478:	20000000 	.word	0x20000000
 800147c:	20000008 	.word	0x20000008
 8001480:	20000280 	.word	0x20000280
 8001484:	3f7fbe77 	.word	0x3f7fbe77
 8001488:	3a83126f 	.word	0x3a83126f
 800148c:	00000000 	.word	0x00000000
 8001490:	2000020c 	.word	0x2000020c
 8001494:	20000288 	.word	0x20000288

08001498 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <HAL_UART_RxCpltCallback+0x3c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d10f      	bne.n	80014ca <HAL_UART_RxCpltCallback+0x32>
	{
		A_buf = parse_control_Amplitiude(msg_str);
 80014aa:	480b      	ldr	r0, [pc, #44]	; (80014d8 <HAL_UART_RxCpltCallback+0x40>)
 80014ac:	f004 fb5c 	bl	8005b68 <parse_control_Amplitiude>
 80014b0:	eef0 7a40 	vmov.f32	s15, s0
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_UART_RxCpltCallback+0x44>)
 80014b6:	edc3 7a00 	vstr	s15, [r3]
		HAL_UART_Receive_IT(&huart3, (uint8_t*)msg_str, str_len);
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_UART_RxCpltCallback+0x48>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	461a      	mov	r2, r3
 80014c2:	4905      	ldr	r1, [pc, #20]	; (80014d8 <HAL_UART_RxCpltCallback+0x40>)
 80014c4:	4807      	ldr	r0, [pc, #28]	; (80014e4 <HAL_UART_RxCpltCallback+0x4c>)
 80014c6:	f003 f927 	bl	8004718 <HAL_UART_Receive_IT>
	}
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40004800 	.word	0x40004800
 80014d8:	2000028c 	.word	0x2000028c
 80014dc:	20000004 	.word	0x20000004
 80014e0:	2000000c 	.word	0x2000000c
 80014e4:	200002fc 	.word	0x200002fc

080014e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ec:	f000 fb15 	bl	8001b1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f0:	f000 f824 	bl	800153c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f4:	f7ff fe3c 	bl	8001170 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80014f8:	f000 fa4e 	bl	8001998 <MX_USART3_UART_Init>
  MX_DMA_Init();
 80014fc:	f7ff fe1a 	bl	8001134 <MX_DMA_Init>
  MX_DAC_Init();
 8001500:	f7ff fd72 	bl	8000fe8 <MX_DAC_Init>
  MX_TIM2_Init();
 8001504:	f000 f9d6 	bl	80018b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001508:	4807      	ldr	r0, [pc, #28]	; (8001528 <main+0x40>)
 800150a:	f002 fc47 	bl	8003d9c <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 800150e:	2100      	movs	r1, #0
 8001510:	4806      	ldr	r0, [pc, #24]	; (800152c <main+0x44>)
 8001512:	f000 fc92 	bl	8001e3a <HAL_DAC_Start>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)msg_str, str_len);
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <main+0x48>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	b29b      	uxth	r3, r3
 800151c:	461a      	mov	r2, r3
 800151e:	4905      	ldr	r1, [pc, #20]	; (8001534 <main+0x4c>)
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <main+0x50>)
 8001522:	f003 f8f9 	bl	8004718 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001526:	e7fe      	b.n	8001526 <main+0x3e>
 8001528:	200002b0 	.word	0x200002b0
 800152c:	2000020c 	.word	0x2000020c
 8001530:	2000000c 	.word	0x2000000c
 8001534:	2000028c 	.word	0x2000028c
 8001538:	200002fc 	.word	0x200002fc

0800153c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b094      	sub	sp, #80	; 0x50
 8001540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001542:	f107 0320 	add.w	r3, r7, #32
 8001546:	2230      	movs	r2, #48	; 0x30
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f004 fb58 	bl	8005c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001560:	f001 fafa 	bl	8002b58 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001564:	4b27      	ldr	r3, [pc, #156]	; (8001604 <SystemClock_Config+0xc8>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	4a26      	ldr	r2, [pc, #152]	; (8001604 <SystemClock_Config+0xc8>)
 800156a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156e:	6413      	str	r3, [r2, #64]	; 0x40
 8001570:	4b24      	ldr	r3, [pc, #144]	; (8001604 <SystemClock_Config+0xc8>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <SystemClock_Config+0xcc>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001584:	4a20      	ldr	r2, [pc, #128]	; (8001608 <SystemClock_Config+0xcc>)
 8001586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <SystemClock_Config+0xcc>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001598:	2301      	movs	r3, #1
 800159a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800159c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a2:	2302      	movs	r3, #2
 80015a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015ac:	2304      	movs	r3, #4
 80015ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80015b0:	2348      	movs	r3, #72	; 0x48
 80015b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015b4:	2302      	movs	r3, #2
 80015b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80015b8:	2303      	movs	r3, #3
 80015ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015bc:	f107 0320 	add.w	r3, r7, #32
 80015c0:	4618      	mov	r0, r3
 80015c2:	f001 fad9 	bl	8002b78 <HAL_RCC_OscConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015cc:	f000 f81e 	bl	800160c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d0:	230f      	movs	r3, #15
 80015d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d4:	2302      	movs	r3, #2
 80015d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015e6:	f107 030c 	add.w	r3, r7, #12
 80015ea:	2102      	movs	r1, #2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f001 fd67 	bl	80030c0 <HAL_RCC_ClockConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015f8:	f000 f808 	bl	800160c <Error_Handler>
  }
}
 80015fc:	bf00      	nop
 80015fe:	3750      	adds	r7, #80	; 0x50
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40023800 	.word	0x40023800
 8001608:	40007000 	.word	0x40007000

0800160c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001610:	b672      	cpsid	i
}
 8001612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001614:	e7fe      	b.n	8001614 <Error_Handler+0x8>
	...

08001618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <HAL_MspInit+0x44>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	4a0e      	ldr	r2, [pc, #56]	; (800165c <HAL_MspInit+0x44>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001628:	6413      	str	r3, [r2, #64]	; 0x40
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_MspInit+0x44>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_MspInit+0x44>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	4a08      	ldr	r2, [pc, #32]	; (800165c <HAL_MspInit+0x44>)
 800163c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001640:	6453      	str	r3, [r2, #68]	; 0x44
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_MspInit+0x44>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800

08001660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <NMI_Handler+0x4>

08001666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166a:	e7fe      	b.n	800166a <HardFault_Handler+0x4>

0800166c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <MemManage_Handler+0x4>

08001672 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <BusFault_Handler+0x4>

08001678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800167c:	e7fe      	b.n	800167c <UsageFault_Handler+0x4>

0800167e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ac:	f000 fa72 	bl	8001b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <DMA1_Stream5_IRQHandler+0x10>)
 80016ba:	f000 fe4b 	bl	8002354 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000220 	.word	0x20000220

080016c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <TIM2_IRQHandler+0x10>)
 80016ce:	f002 fbdd 	bl	8003e8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200002b0 	.word	0x200002b0

080016dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <USART3_IRQHandler+0x10>)
 80016e2:	f003 f85d 	bl	80047a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200002fc 	.word	0x200002fc

080016f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <TIM6_DAC_IRQHandler+0x10>)
 80016f6:	f000 fbf2 	bl	8001ede <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000020c 	.word	0x2000020c

08001704 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
	return 1;
 8001708:	2301      	movs	r3, #1
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <_kill>:

int _kill(int pid, int sig)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800171e:	f004 fa45 	bl	8005bac <__errno>
 8001722:	4603      	mov	r3, r0
 8001724:	2216      	movs	r2, #22
 8001726:	601a      	str	r2, [r3, #0]
	return -1;
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <_exit>:

void _exit (int status)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800173c:	f04f 31ff 	mov.w	r1, #4294967295
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ffe7 	bl	8001714 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001746:	e7fe      	b.n	8001746 <_exit+0x12>

08001748 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	e00a      	b.n	8001770 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800175a:	f3af 8000 	nop.w
 800175e:	4601      	mov	r1, r0
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	1c5a      	adds	r2, r3, #1
 8001764:	60ba      	str	r2, [r7, #8]
 8001766:	b2ca      	uxtb	r2, r1
 8001768:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	3301      	adds	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	dbf0      	blt.n	800175a <_read+0x12>
	}

return len;
 8001778:	687b      	ldr	r3, [r7, #4]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	e009      	b.n	80017a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	60ba      	str	r2, [r7, #8]
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	3301      	adds	r3, #1
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	dbf1      	blt.n	8001794 <_write+0x12>
	}
	return len;
 80017b0:	687b      	ldr	r3, [r7, #4]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <_close>:

int _close(int file)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
	return -1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017e2:	605a      	str	r2, [r3, #4]
	return 0;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <_isatty>:

int _isatty(int file)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
	return 1;
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
	return 0;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800182c:	4a14      	ldr	r2, [pc, #80]	; (8001880 <_sbrk+0x5c>)
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <_sbrk+0x60>)
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d102      	bne.n	8001846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <_sbrk+0x64>)
 8001842:	4a12      	ldr	r2, [pc, #72]	; (800188c <_sbrk+0x68>)
 8001844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <_sbrk+0x64>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	429a      	cmp	r2, r3
 8001852:	d207      	bcs.n	8001864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001854:	f004 f9aa 	bl	8005bac <__errno>
 8001858:	4603      	mov	r3, r0
 800185a:	220c      	movs	r2, #12
 800185c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295
 8001862:	e009      	b.n	8001878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800186a:	4b07      	ldr	r3, [pc, #28]	; (8001888 <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <_sbrk+0x64>)
 8001874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001876:	68fb      	ldr	r3, [r7, #12]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20050000 	.word	0x20050000
 8001884:	00000400 	.word	0x00000400
 8001888:	200002ac 	.word	0x200002ac
 800188c:	20000398 	.word	0x20000398

08001890 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <SystemInit+0x20>)
 8001896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <SystemInit+0x20>)
 800189c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ba:	f107 0310 	add.w	r3, r7, #16
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018d2:	4b1e      	ldr	r3, [pc, #120]	; (800194c <MX_TIM2_Init+0x98>)
 80018d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80018da:	4b1c      	ldr	r3, [pc, #112]	; (800194c <MX_TIM2_Init+0x98>)
 80018dc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80018e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e2:	4b1a      	ldr	r3, [pc, #104]	; (800194c <MX_TIM2_Init+0x98>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80018e8:	4b18      	ldr	r3, [pc, #96]	; (800194c <MX_TIM2_Init+0x98>)
 80018ea:	2209      	movs	r2, #9
 80018ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <MX_TIM2_Init+0x98>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <MX_TIM2_Init+0x98>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018fa:	4814      	ldr	r0, [pc, #80]	; (800194c <MX_TIM2_Init+0x98>)
 80018fc:	f002 f9f6 	bl	8003cec <HAL_TIM_Base_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001906:	f7ff fe81 	bl	800160c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800190a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	4619      	mov	r1, r3
 8001916:	480d      	ldr	r0, [pc, #52]	; (800194c <MX_TIM2_Init+0x98>)
 8001918:	f002 fbd8 	bl	80040cc <HAL_TIM_ConfigClockSource>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001922:	f7ff fe73 	bl	800160c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001926:	2320      	movs	r3, #32
 8001928:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	4619      	mov	r1, r3
 8001932:	4806      	ldr	r0, [pc, #24]	; (800194c <MX_TIM2_Init+0x98>)
 8001934:	f002 fdf6 	bl	8004524 <HAL_TIMEx_MasterConfigSynchronization>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800193e:	f7ff fe65 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	3720      	adds	r7, #32
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200002b0 	.word	0x200002b0

08001950 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001960:	d113      	bne.n	800198a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001962:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <HAL_TIM_Base_MspInit+0x44>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a0b      	ldr	r2, [pc, #44]	; (8001994 <HAL_TIM_Base_MspInit+0x44>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <HAL_TIM_Base_MspInit+0x44>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	201c      	movs	r0, #28
 8001980:	f000 fa03 	bl	8001d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001984:	201c      	movs	r0, #28
 8001986:	f000 fa1c 	bl	8001dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800

08001998 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <MX_USART3_UART_Init+0x58>)
 800199e:	4a15      	ldr	r2, [pc, #84]	; (80019f4 <MX_USART3_UART_Init+0x5c>)
 80019a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019a2:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <MX_USART3_UART_Init+0x58>)
 80019a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <MX_USART3_UART_Init+0x58>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019b0:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <MX_USART3_UART_Init+0x58>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <MX_USART3_UART_Init+0x58>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <MX_USART3_UART_Init+0x58>)
 80019be:	220c      	movs	r2, #12
 80019c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c2:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <MX_USART3_UART_Init+0x58>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c8:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <MX_USART3_UART_Init+0x58>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ce:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <MX_USART3_UART_Init+0x58>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <MX_USART3_UART_Init+0x58>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <MX_USART3_UART_Init+0x58>)
 80019dc:	f002 fe4e 	bl	800467c <HAL_UART_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80019e6:	f7ff fe11 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200002fc 	.word	0x200002fc
 80019f4:	40004800 	.word	0x40004800

080019f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b0aa      	sub	sp, #168	; 0xa8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a10:	f107 0310 	add.w	r3, r7, #16
 8001a14:	2284      	movs	r2, #132	; 0x84
 8001a16:	2100      	movs	r1, #0
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f004 f8f1 	bl	8005c00 <memset>
  if(uartHandle->Instance==USART3)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a26      	ldr	r2, [pc, #152]	; (8001abc <HAL_UART_MspInit+0xc4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d144      	bne.n	8001ab2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a2c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a32:	f107 0310 	add.w	r3, r7, #16
 8001a36:	4618      	mov	r0, r3
 8001a38:	f001 fd68 	bl	800350c <HAL_RCCEx_PeriphCLKConfig>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a42:	f7ff fde3 	bl	800160c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a46:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <HAL_UART_MspInit+0xc8>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	4a1d      	ldr	r2, [pc, #116]	; (8001ac0 <HAL_UART_MspInit+0xc8>)
 8001a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a50:	6413      	str	r3, [r2, #64]	; 0x40
 8001a52:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <HAL_UART_MspInit+0xc8>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a5e:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <HAL_UART_MspInit+0xc8>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a17      	ldr	r2, [pc, #92]	; (8001ac0 <HAL_UART_MspInit+0xc8>)
 8001a64:	f043 0308 	orr.w	r3, r3, #8
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_UART_MspInit+0xc8>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a90:	2307      	movs	r3, #7
 8001a92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a96:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4809      	ldr	r0, [pc, #36]	; (8001ac4 <HAL_UART_MspInit+0xcc>)
 8001a9e:	f000 fe95 	bl	80027cc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	2027      	movs	r0, #39	; 0x27
 8001aa8:	f000 f96f 	bl	8001d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001aac:	2027      	movs	r0, #39	; 0x27
 8001aae:	f000 f988 	bl	8001dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	37a8      	adds	r7, #168	; 0xa8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40004800 	.word	0x40004800
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40020c00 	.word	0x40020c00

08001ac8 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8001ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001acc:	480d      	ldr	r0, [pc, #52]	; (8001b04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ace:	490e      	ldr	r1, [pc, #56]	; (8001b08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ad0:	4a0e      	ldr	r2, [pc, #56]	; (8001b0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad4:	e002      	b.n	8001adc <LoopCopyDataInit>

08001ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ada:	3304      	adds	r3, #4

08001adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae0:	d3f9      	bcc.n	8001ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ae2:	4a0b      	ldr	r2, [pc, #44]	; (8001b10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ae4:	4c0b      	ldr	r4, [pc, #44]	; (8001b14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae8:	e001      	b.n	8001aee <LoopFillZerobss>

08001aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aec:	3204      	adds	r2, #4

08001aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af0:	d3fb      	bcc.n	8001aea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001af2:	f7ff fecd 	bl	8001890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001af6:	f004 f85f 	bl	8005bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001afa:	f7ff fcf5 	bl	80014e8 <main>
  bx  lr    
 8001afe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b00:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b08:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001b0c:	0800ade8 	.word	0x0800ade8
  ldr r2, =_sbss
 8001b10:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001b14:	20000398 	.word	0x20000398

08001b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b18:	e7fe      	b.n	8001b18 <ADC_IRQHandler>

08001b1a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b1e:	2003      	movs	r0, #3
 8001b20:	f000 f928 	bl	8001d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b24:	2000      	movs	r0, #0
 8001b26:	f000 f805 	bl	8001b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b2a:	f7ff fd75 	bl	8001618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_InitTick+0x54>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_InitTick+0x58>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	4619      	mov	r1, r3
 8001b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 f943 	bl	8001dde <HAL_SYSTICK_Config>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e00e      	b.n	8001b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b0f      	cmp	r3, #15
 8001b66:	d80a      	bhi.n	8001b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b70:	f000 f90b 	bl	8001d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b74:	4a06      	ldr	r2, [pc, #24]	; (8001b90 <HAL_InitTick+0x5c>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e000      	b.n	8001b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000010 	.word	0x20000010
 8001b8c:	20000018 	.word	0x20000018
 8001b90:	20000014 	.word	0x20000014

08001b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_IncTick+0x20>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_IncTick+0x24>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <HAL_IncTick+0x24>)
 8001ba6:	6013      	str	r3, [r2, #0]
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000018 	.word	0x20000018
 8001bb8:	20000384 	.word	0x20000384

08001bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <HAL_GetTick+0x14>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000384 	.word	0x20000384

08001bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <__NVIC_SetPriorityGrouping+0x40>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <__NVIC_SetPriorityGrouping+0x44>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c02:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <__NVIC_SetPriorityGrouping+0x40>)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	60d3      	str	r3, [r2, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00
 8001c18:	05fa0000 	.word	0x05fa0000

08001c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c20:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <__NVIC_GetPriorityGrouping+0x18>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	0a1b      	lsrs	r3, r3, #8
 8001c26:	f003 0307 	and.w	r3, r3, #7
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	db0b      	blt.n	8001c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	f003 021f 	and.w	r2, r3, #31
 8001c50:	4907      	ldr	r1, [pc, #28]	; (8001c70 <__NVIC_EnableIRQ+0x38>)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	2001      	movs	r0, #1
 8001c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000e100 	.word	0xe000e100

08001c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6039      	str	r1, [r7, #0]
 8001c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	db0a      	blt.n	8001c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	490c      	ldr	r1, [pc, #48]	; (8001cc0 <__NVIC_SetPriority+0x4c>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	0112      	lsls	r2, r2, #4
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	440b      	add	r3, r1
 8001c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c9c:	e00a      	b.n	8001cb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4908      	ldr	r1, [pc, #32]	; (8001cc4 <__NVIC_SetPriority+0x50>)
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	3b04      	subs	r3, #4
 8001cac:	0112      	lsls	r2, r2, #4
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	761a      	strb	r2, [r3, #24]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000e100 	.word	0xe000e100
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f1c3 0307 	rsb	r3, r3, #7
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	bf28      	it	cs
 8001ce6:	2304      	movcs	r3, #4
 8001ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3304      	adds	r3, #4
 8001cee:	2b06      	cmp	r3, #6
 8001cf0:	d902      	bls.n	8001cf8 <NVIC_EncodePriority+0x30>
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3b03      	subs	r3, #3
 8001cf6:	e000      	b.n	8001cfa <NVIC_EncodePriority+0x32>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43da      	mvns	r2, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d10:	f04f 31ff 	mov.w	r1, #4294967295
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1a:	43d9      	mvns	r1, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	4313      	orrs	r3, r2
         );
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3724      	adds	r7, #36	; 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d40:	d301      	bcc.n	8001d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00f      	b.n	8001d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <SysTick_Config+0x40>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4e:	210f      	movs	r1, #15
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295
 8001d54:	f7ff ff8e 	bl	8001c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <SysTick_Config+0x40>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5e:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <SysTick_Config+0x40>)
 8001d60:	2207      	movs	r2, #7
 8001d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	e000e010 	.word	0xe000e010

08001d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ff29 	bl	8001bd4 <__NVIC_SetPriorityGrouping>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d9c:	f7ff ff3e 	bl	8001c1c <__NVIC_GetPriorityGrouping>
 8001da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	6978      	ldr	r0, [r7, #20]
 8001da8:	f7ff ff8e 	bl	8001cc8 <NVIC_EncodePriority>
 8001dac:	4602      	mov	r2, r0
 8001dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff5d 	bl	8001c74 <__NVIC_SetPriority>
}
 8001dba:	bf00      	nop
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff31 	bl	8001c38 <__NVIC_EnableIRQ>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ffa2 	bl	8001d30 <SysTick_Config>
 8001dec:	4603      	mov	r3, r0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e014      	b.n	8001e32 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	791b      	ldrb	r3, [r3, #4]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d105      	bne.n	8001e1e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff f90f 	bl	800103c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2202      	movs	r2, #2
 8001e22:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	795b      	ldrb	r3, [r3, #5]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_DAC_Start+0x16>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e040      	b.n	8001ed2 <HAL_DAC_Start+0x98>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6819      	ldr	r1, [r3, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	f003 0310 	and.w	r3, r3, #16
 8001e68:	2201      	movs	r2, #1
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10f      	bne.n	8001e9a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001e84:	2b3c      	cmp	r3, #60	; 0x3c
 8001e86:	d11d      	bne.n	8001ec4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	e014      	b.n	8001ec4 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	213c      	movs	r1, #60	; 0x3c
 8001eac:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d107      	bne.n	8001ec4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0202 	orr.w	r2, r2, #2
 8001ec2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ef4:	d120      	bne.n	8001f38 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f04:	d118      	bne.n	8001f38 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2204      	movs	r2, #4
 8001f0a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	f043 0201 	orr.w	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f30:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f852 	bl	8001fdc <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f46:	d120      	bne.n	8001f8a <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f56:	d118      	bne.n	8001f8a <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f043 0202 	orr.w	r2, r3, #2
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001f82:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f89a 	bl	80020be <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b087      	sub	sp, #28
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d105      	bne.n	8001fbc <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3308      	adds	r3, #8
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	e004      	b.n	8001fc6 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3314      	adds	r3, #20
 8001fc4:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	371c      	adds	r7, #28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_DAC_GetValue>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t result;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  if (Channel == DAC_CHANNEL_1)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d104      	bne.n	800200a <HAL_DAC_GetValue+0x1a>
  {
    result = hdac->Instance->DOR1;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	e003      	b.n	8002012 <HAL_DAC_GetValue+0x22>
  }

  else
  {
    result = hdac->Instance->DOR2;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	60fb      	str	r3, [r7, #12]
  }

  /* Returns the DAC channel data output register value */
  return result;
 8002012:	68fb      	ldr	r3, [r7, #12]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002020:	b480      	push	{r7}
 8002022:	b087      	sub	sp, #28
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	795b      	ldrb	r3, [r3, #5]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_DAC_ConfigChannel+0x18>
 8002034:	2302      	movs	r3, #2
 8002036:	e03c      	b.n	80020b2 <HAL_DAC_ConfigChannel+0x92>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2201      	movs	r2, #1
 800203c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2202      	movs	r2, #2
 8002042:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	4013      	ands	r3, r2
 8002060:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4313      	orrs	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4313      	orrs	r3, r2
 800207e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6819      	ldr	r1, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f003 0310 	and.w	r3, r3, #16
 8002094:	22c0      	movs	r2, #192	; 0xc0
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43da      	mvns	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	400a      	ands	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2201      	movs	r2, #1
 80020a8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	371c      	adds	r7, #28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020e0:	f7ff fd6c 	bl	8001bbc <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e099      	b.n	8002224 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0201 	bic.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002110:	e00f      	b.n	8002132 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002112:	f7ff fd53 	bl	8001bbc <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b05      	cmp	r3, #5
 800211e:	d908      	bls.n	8002132 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2220      	movs	r2, #32
 8002124:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2203      	movs	r2, #3
 800212a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e078      	b.n	8002224 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1e8      	bne.n	8002112 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	4b38      	ldr	r3, [pc, #224]	; (800222c <HAL_DMA_Init+0x158>)
 800214c:	4013      	ands	r3, r2
 800214e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800215e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800216a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002176:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	4313      	orrs	r3, r2
 8002182:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	2b04      	cmp	r3, #4
 800218a:	d107      	bne.n	800219c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	4313      	orrs	r3, r2
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4313      	orrs	r3, r2
 800219a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f023 0307 	bic.w	r3, r3, #7
 80021b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d117      	bne.n	80021f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00e      	beq.n	80021f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 fa7b 	bl	80026d4 <DMA_CheckFifoParam>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d008      	beq.n	80021f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2240      	movs	r2, #64	; 0x40
 80021e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021f2:	2301      	movs	r3, #1
 80021f4:	e016      	b.n	8002224 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fa32 	bl	8002668 <DMA_CalcBaseAndBitshift>
 8002204:	4603      	mov	r3, r0
 8002206:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220c:	223f      	movs	r2, #63	; 0x3f
 800220e:	409a      	lsls	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	f010803f 	.word	0xf010803f

08002230 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800223e:	f7ff fcbd 	bl	8001bbc <HAL_GetTick>
 8002242:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d008      	beq.n	8002262 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2280      	movs	r2, #128	; 0x80
 8002254:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e052      	b.n	8002308 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0216 	bic.w	r2, r2, #22
 8002270:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695a      	ldr	r2, [r3, #20]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002280:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	d103      	bne.n	8002292 <HAL_DMA_Abort+0x62>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228e:	2b00      	cmp	r3, #0
 8002290:	d007      	beq.n	80022a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0208 	bic.w	r2, r2, #8
 80022a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0201 	bic.w	r2, r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022b2:	e013      	b.n	80022dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022b4:	f7ff fc82 	bl	8001bbc <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b05      	cmp	r3, #5
 80022c0:	d90c      	bls.n	80022dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2220      	movs	r2, #32
 80022c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2203      	movs	r2, #3
 80022cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e015      	b.n	8002308 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1e4      	bne.n	80022b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ee:	223f      	movs	r2, #63	; 0x3f
 80022f0:	409a      	lsls	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d004      	beq.n	800232e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2280      	movs	r2, #128	; 0x80
 8002328:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e00c      	b.n	8002348 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2205      	movs	r2, #5
 8002332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0201 	bic.w	r2, r2, #1
 8002344:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002360:	4b8e      	ldr	r3, [pc, #568]	; (800259c <HAL_DMA_IRQHandler+0x248>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a8e      	ldr	r2, [pc, #568]	; (80025a0 <HAL_DMA_IRQHandler+0x24c>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	0a9b      	lsrs	r3, r3, #10
 800236c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002372:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237e:	2208      	movs	r2, #8
 8002380:	409a      	lsls	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4013      	ands	r3, r2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d01a      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d013      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0204 	bic.w	r2, r2, #4
 80023a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ac:	2208      	movs	r2, #8
 80023ae:	409a      	lsls	r2, r3
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b8:	f043 0201 	orr.w	r2, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c4:	2201      	movs	r2, #1
 80023c6:	409a      	lsls	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d012      	beq.n	80023f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00b      	beq.n	80023f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e2:	2201      	movs	r2, #1
 80023e4:	409a      	lsls	r2, r3
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ee:	f043 0202 	orr.w	r2, r3, #2
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fa:	2204      	movs	r2, #4
 80023fc:	409a      	lsls	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4013      	ands	r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d012      	beq.n	800242c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00b      	beq.n	800242c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002418:	2204      	movs	r2, #4
 800241a:	409a      	lsls	r2, r3
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002424:	f043 0204 	orr.w	r2, r3, #4
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002430:	2210      	movs	r2, #16
 8002432:	409a      	lsls	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4013      	ands	r3, r2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d043      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d03c      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244e:	2210      	movs	r2, #16
 8002450:	409a      	lsls	r2, r3
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d018      	beq.n	8002496 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d108      	bne.n	8002484 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	2b00      	cmp	r3, #0
 8002478:	d024      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	4798      	blx	r3
 8002482:	e01f      	b.n	80024c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002488:	2b00      	cmp	r3, #0
 800248a:	d01b      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	4798      	blx	r3
 8002494:	e016      	b.n	80024c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d107      	bne.n	80024b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0208 	bic.w	r2, r2, #8
 80024b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c8:	2220      	movs	r2, #32
 80024ca:	409a      	lsls	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 808f 	beq.w	80025f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0310 	and.w	r3, r3, #16
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 8087 	beq.w	80025f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ea:	2220      	movs	r2, #32
 80024ec:	409a      	lsls	r2, r3
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b05      	cmp	r3, #5
 80024fc:	d136      	bne.n	800256c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0216 	bic.w	r2, r2, #22
 800250c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695a      	ldr	r2, [r3, #20]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800251c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	d103      	bne.n	800252e <HAL_DMA_IRQHandler+0x1da>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0208 	bic.w	r2, r2, #8
 800253c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002542:	223f      	movs	r2, #63	; 0x3f
 8002544:	409a      	lsls	r2, r3
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255e:	2b00      	cmp	r3, #0
 8002560:	d07e      	beq.n	8002660 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	4798      	blx	r3
        }
        return;
 800256a:	e079      	b.n	8002660 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d01d      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10d      	bne.n	80025a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	2b00      	cmp	r3, #0
 800258e:	d031      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	4798      	blx	r3
 8002598:	e02c      	b.n	80025f4 <HAL_DMA_IRQHandler+0x2a0>
 800259a:	bf00      	nop
 800259c:	20000010 	.word	0x20000010
 80025a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d023      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	4798      	blx	r3
 80025b4:	e01e      	b.n	80025f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10f      	bne.n	80025e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0210 	bic.w	r2, r2, #16
 80025d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d032      	beq.n	8002662 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d022      	beq.n	800264e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2205      	movs	r2, #5
 800260c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0201 	bic.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	3301      	adds	r3, #1
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	429a      	cmp	r2, r3
 800262a:	d307      	bcc.n	800263c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f2      	bne.n	8002620 <HAL_DMA_IRQHandler+0x2cc>
 800263a:	e000      	b.n	800263e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800263c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	4798      	blx	r3
 800265e:	e000      	b.n	8002662 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002660:	bf00      	nop
    }
  }
}
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	b2db      	uxtb	r3, r3
 8002676:	3b10      	subs	r3, #16
 8002678:	4a13      	ldr	r2, [pc, #76]	; (80026c8 <DMA_CalcBaseAndBitshift+0x60>)
 800267a:	fba2 2303 	umull	r2, r3, r2, r3
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002682:	4a12      	ldr	r2, [pc, #72]	; (80026cc <DMA_CalcBaseAndBitshift+0x64>)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4413      	add	r3, r2
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b03      	cmp	r3, #3
 8002694:	d908      	bls.n	80026a8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <DMA_CalcBaseAndBitshift+0x68>)
 800269e:	4013      	ands	r3, r2
 80026a0:	1d1a      	adds	r2, r3, #4
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	659a      	str	r2, [r3, #88]	; 0x58
 80026a6:	e006      	b.n	80026b6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <DMA_CalcBaseAndBitshift+0x68>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	aaaaaaab 	.word	0xaaaaaaab
 80026cc:	0800a5b0 	.word	0x0800a5b0
 80026d0:	fffffc00 	.word	0xfffffc00

080026d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d11f      	bne.n	800272e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d856      	bhi.n	80027a2 <DMA_CheckFifoParam+0xce>
 80026f4:	a201      	add	r2, pc, #4	; (adr r2, 80026fc <DMA_CheckFifoParam+0x28>)
 80026f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fa:	bf00      	nop
 80026fc:	0800270d 	.word	0x0800270d
 8002700:	0800271f 	.word	0x0800271f
 8002704:	0800270d 	.word	0x0800270d
 8002708:	080027a3 	.word	0x080027a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d046      	beq.n	80027a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800271c:	e043      	b.n	80027a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002722:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002726:	d140      	bne.n	80027aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800272c:	e03d      	b.n	80027aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002736:	d121      	bne.n	800277c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b03      	cmp	r3, #3
 800273c:	d837      	bhi.n	80027ae <DMA_CheckFifoParam+0xda>
 800273e:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <DMA_CheckFifoParam+0x70>)
 8002740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002744:	08002755 	.word	0x08002755
 8002748:	0800275b 	.word	0x0800275b
 800274c:	08002755 	.word	0x08002755
 8002750:	0800276d 	.word	0x0800276d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
      break;
 8002758:	e030      	b.n	80027bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d025      	beq.n	80027b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800276a:	e022      	b.n	80027b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002774:	d11f      	bne.n	80027b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800277a:	e01c      	b.n	80027b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d903      	bls.n	800278a <DMA_CheckFifoParam+0xb6>
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2b03      	cmp	r3, #3
 8002786:	d003      	beq.n	8002790 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002788:	e018      	b.n	80027bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
      break;
 800278e:	e015      	b.n	80027bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00e      	beq.n	80027ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
      break;
 80027a0:	e00b      	b.n	80027ba <DMA_CheckFifoParam+0xe6>
      break;
 80027a2:	bf00      	nop
 80027a4:	e00a      	b.n	80027bc <DMA_CheckFifoParam+0xe8>
      break;
 80027a6:	bf00      	nop
 80027a8:	e008      	b.n	80027bc <DMA_CheckFifoParam+0xe8>
      break;
 80027aa:	bf00      	nop
 80027ac:	e006      	b.n	80027bc <DMA_CheckFifoParam+0xe8>
      break;
 80027ae:	bf00      	nop
 80027b0:	e004      	b.n	80027bc <DMA_CheckFifoParam+0xe8>
      break;
 80027b2:	bf00      	nop
 80027b4:	e002      	b.n	80027bc <DMA_CheckFifoParam+0xe8>
      break;   
 80027b6:	bf00      	nop
 80027b8:	e000      	b.n	80027bc <DMA_CheckFifoParam+0xe8>
      break;
 80027ba:	bf00      	nop
    }
  } 
  
  return status; 
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop

080027cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b089      	sub	sp, #36	; 0x24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
 80027ea:	e175      	b.n	8002ad8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027ec:	2201      	movs	r2, #1
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	4013      	ands	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	429a      	cmp	r2, r3
 8002806:	f040 8164 	bne.w	8002ad2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b01      	cmp	r3, #1
 8002814:	d005      	beq.n	8002822 <HAL_GPIO_Init+0x56>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d130      	bne.n	8002884 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	2203      	movs	r2, #3
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002858:	2201      	movs	r2, #1
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	f003 0201 	and.w	r2, r3, #1
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	2b03      	cmp	r3, #3
 800288e:	d017      	beq.n	80028c0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	2203      	movs	r2, #3
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d123      	bne.n	8002914 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	08da      	lsrs	r2, r3, #3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3208      	adds	r2, #8
 80028d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	220f      	movs	r2, #15
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	08da      	lsrs	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3208      	adds	r2, #8
 800290e:	69b9      	ldr	r1, [r7, #24]
 8002910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	2203      	movs	r2, #3
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 0203 	and.w	r2, r3, #3
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80be 	beq.w	8002ad2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002956:	4b66      	ldr	r3, [pc, #408]	; (8002af0 <HAL_GPIO_Init+0x324>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	4a65      	ldr	r2, [pc, #404]	; (8002af0 <HAL_GPIO_Init+0x324>)
 800295c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002960:	6453      	str	r3, [r2, #68]	; 0x44
 8002962:	4b63      	ldr	r3, [pc, #396]	; (8002af0 <HAL_GPIO_Init+0x324>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800296e:	4a61      	ldr	r2, [pc, #388]	; (8002af4 <HAL_GPIO_Init+0x328>)
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	089b      	lsrs	r3, r3, #2
 8002974:	3302      	adds	r3, #2
 8002976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	220f      	movs	r2, #15
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a58      	ldr	r2, [pc, #352]	; (8002af8 <HAL_GPIO_Init+0x32c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d037      	beq.n	8002a0a <HAL_GPIO_Init+0x23e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a57      	ldr	r2, [pc, #348]	; (8002afc <HAL_GPIO_Init+0x330>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d031      	beq.n	8002a06 <HAL_GPIO_Init+0x23a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a56      	ldr	r2, [pc, #344]	; (8002b00 <HAL_GPIO_Init+0x334>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d02b      	beq.n	8002a02 <HAL_GPIO_Init+0x236>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a55      	ldr	r2, [pc, #340]	; (8002b04 <HAL_GPIO_Init+0x338>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d025      	beq.n	80029fe <HAL_GPIO_Init+0x232>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a54      	ldr	r2, [pc, #336]	; (8002b08 <HAL_GPIO_Init+0x33c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d01f      	beq.n	80029fa <HAL_GPIO_Init+0x22e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a53      	ldr	r2, [pc, #332]	; (8002b0c <HAL_GPIO_Init+0x340>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d019      	beq.n	80029f6 <HAL_GPIO_Init+0x22a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a52      	ldr	r2, [pc, #328]	; (8002b10 <HAL_GPIO_Init+0x344>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d013      	beq.n	80029f2 <HAL_GPIO_Init+0x226>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a51      	ldr	r2, [pc, #324]	; (8002b14 <HAL_GPIO_Init+0x348>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d00d      	beq.n	80029ee <HAL_GPIO_Init+0x222>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a50      	ldr	r2, [pc, #320]	; (8002b18 <HAL_GPIO_Init+0x34c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d007      	beq.n	80029ea <HAL_GPIO_Init+0x21e>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a4f      	ldr	r2, [pc, #316]	; (8002b1c <HAL_GPIO_Init+0x350>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d101      	bne.n	80029e6 <HAL_GPIO_Init+0x21a>
 80029e2:	2309      	movs	r3, #9
 80029e4:	e012      	b.n	8002a0c <HAL_GPIO_Init+0x240>
 80029e6:	230a      	movs	r3, #10
 80029e8:	e010      	b.n	8002a0c <HAL_GPIO_Init+0x240>
 80029ea:	2308      	movs	r3, #8
 80029ec:	e00e      	b.n	8002a0c <HAL_GPIO_Init+0x240>
 80029ee:	2307      	movs	r3, #7
 80029f0:	e00c      	b.n	8002a0c <HAL_GPIO_Init+0x240>
 80029f2:	2306      	movs	r3, #6
 80029f4:	e00a      	b.n	8002a0c <HAL_GPIO_Init+0x240>
 80029f6:	2305      	movs	r3, #5
 80029f8:	e008      	b.n	8002a0c <HAL_GPIO_Init+0x240>
 80029fa:	2304      	movs	r3, #4
 80029fc:	e006      	b.n	8002a0c <HAL_GPIO_Init+0x240>
 80029fe:	2303      	movs	r3, #3
 8002a00:	e004      	b.n	8002a0c <HAL_GPIO_Init+0x240>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e002      	b.n	8002a0c <HAL_GPIO_Init+0x240>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <HAL_GPIO_Init+0x240>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	69fa      	ldr	r2, [r7, #28]
 8002a0e:	f002 0203 	and.w	r2, r2, #3
 8002a12:	0092      	lsls	r2, r2, #2
 8002a14:	4093      	lsls	r3, r2
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a1c:	4935      	ldr	r1, [pc, #212]	; (8002af4 <HAL_GPIO_Init+0x328>)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	089b      	lsrs	r3, r3, #2
 8002a22:	3302      	adds	r3, #2
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a2a:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <HAL_GPIO_Init+0x354>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a4e:	4a34      	ldr	r2, [pc, #208]	; (8002b20 <HAL_GPIO_Init+0x354>)
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a54:	4b32      	ldr	r3, [pc, #200]	; (8002b20 <HAL_GPIO_Init+0x354>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a78:	4a29      	ldr	r2, [pc, #164]	; (8002b20 <HAL_GPIO_Init+0x354>)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a7e:	4b28      	ldr	r3, [pc, #160]	; (8002b20 <HAL_GPIO_Init+0x354>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	43db      	mvns	r3, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aa2:	4a1f      	ldr	r2, [pc, #124]	; (8002b20 <HAL_GPIO_Init+0x354>)
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <HAL_GPIO_Init+0x354>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002acc:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <HAL_GPIO_Init+0x354>)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	61fb      	str	r3, [r7, #28]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	2b0f      	cmp	r3, #15
 8002adc:	f67f ae86 	bls.w	80027ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop
 8002ae4:	3724      	adds	r7, #36	; 0x24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40013800 	.word	0x40013800
 8002af8:	40020000 	.word	0x40020000
 8002afc:	40020400 	.word	0x40020400
 8002b00:	40020800 	.word	0x40020800
 8002b04:	40020c00 	.word	0x40020c00
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40021400 	.word	0x40021400
 8002b10:	40021800 	.word	0x40021800
 8002b14:	40021c00 	.word	0x40021c00
 8002b18:	40022000 	.word	0x40022000
 8002b1c:	40022400 	.word	0x40022400
 8002b20:	40013c00 	.word	0x40013c00

08002b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	807b      	strh	r3, [r7, #2]
 8002b30:	4613      	mov	r3, r2
 8002b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b34:	787b      	ldrb	r3, [r7, #1]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b3a:	887a      	ldrh	r2, [r7, #2]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b40:	e003      	b.n	8002b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b42:	887b      	ldrh	r3, [r7, #2]
 8002b44:	041a      	lsls	r2, r3, #16
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	619a      	str	r2, [r3, #24]
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b66:	6013      	str	r3, [r2, #0]
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40007000 	.word	0x40007000

08002b78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b80:	2300      	movs	r3, #0
 8002b82:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e291      	b.n	80030b2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 8087 	beq.w	8002caa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b9c:	4b96      	ldr	r3, [pc, #600]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 030c 	and.w	r3, r3, #12
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d00c      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ba8:	4b93      	ldr	r3, [pc, #588]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 030c 	and.w	r3, r3, #12
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d112      	bne.n	8002bda <HAL_RCC_OscConfig+0x62>
 8002bb4:	4b90      	ldr	r3, [pc, #576]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc0:	d10b      	bne.n	8002bda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc2:	4b8d      	ldr	r3, [pc, #564]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d06c      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x130>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d168      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e26b      	b.n	80030b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be2:	d106      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x7a>
 8002be4:	4b84      	ldr	r3, [pc, #528]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a83      	ldr	r2, [pc, #524]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bee:	6013      	str	r3, [r2, #0]
 8002bf0:	e02e      	b.n	8002c50 <HAL_RCC_OscConfig+0xd8>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x9c>
 8002bfa:	4b7f      	ldr	r3, [pc, #508]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a7e      	ldr	r2, [pc, #504]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	4b7c      	ldr	r3, [pc, #496]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a7b      	ldr	r2, [pc, #492]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	e01d      	b.n	8002c50 <HAL_RCC_OscConfig+0xd8>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCC_OscConfig+0xc0>
 8002c1e:	4b76      	ldr	r3, [pc, #472]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a75      	ldr	r2, [pc, #468]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b73      	ldr	r3, [pc, #460]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a72      	ldr	r2, [pc, #456]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e00b      	b.n	8002c50 <HAL_RCC_OscConfig+0xd8>
 8002c38:	4b6f      	ldr	r3, [pc, #444]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a6e      	ldr	r2, [pc, #440]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	4b6c      	ldr	r3, [pc, #432]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a6b      	ldr	r2, [pc, #428]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d013      	beq.n	8002c80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7fe ffb0 	bl	8001bbc <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c60:	f7fe ffac 	bl	8001bbc <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	; 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e21f      	b.n	80030b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c72:	4b61      	ldr	r3, [pc, #388]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0xe8>
 8002c7e:	e014      	b.n	8002caa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7fe ff9c 	bl	8001bbc <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c88:	f7fe ff98 	bl	8001bbc <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	; 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e20b      	b.n	80030b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9a:	4b57      	ldr	r3, [pc, #348]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x110>
 8002ca6:	e000      	b.n	8002caa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d069      	beq.n	8002d8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cb6:	4b50      	ldr	r3, [pc, #320]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00b      	beq.n	8002cda <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cc2:	4b4d      	ldr	r3, [pc, #308]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d11c      	bne.n	8002d08 <HAL_RCC_OscConfig+0x190>
 8002cce:	4b4a      	ldr	r3, [pc, #296]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d116      	bne.n	8002d08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cda:	4b47      	ldr	r3, [pc, #284]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x17a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d001      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e1df      	b.n	80030b2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf2:	4b41      	ldr	r3, [pc, #260]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	493d      	ldr	r1, [pc, #244]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d06:	e040      	b.n	8002d8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d023      	beq.n	8002d58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d10:	4b39      	ldr	r3, [pc, #228]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a38      	ldr	r2, [pc, #224]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7fe ff4e 	bl	8001bbc <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d24:	f7fe ff4a 	bl	8001bbc <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e1bd      	b.n	80030b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d36:	4b30      	ldr	r3, [pc, #192]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d42:	4b2d      	ldr	r3, [pc, #180]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4929      	ldr	r1, [pc, #164]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]
 8002d56:	e018      	b.n	8002d8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d58:	4b27      	ldr	r3, [pc, #156]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a26      	ldr	r2, [pc, #152]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002d5e:	f023 0301 	bic.w	r3, r3, #1
 8002d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7fe ff2a 	bl	8001bbc <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d6c:	f7fe ff26 	bl	8001bbc <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e199      	b.n	80030b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7e:	4b1e      	ldr	r3, [pc, #120]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d038      	beq.n	8002e08 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d019      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9e:	4b16      	ldr	r3, [pc, #88]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da2:	4a15      	ldr	r2, [pc, #84]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002daa:	f7fe ff07 	bl	8001bbc <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db2:	f7fe ff03 	bl	8001bbc <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e176      	b.n	80030b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc4:	4b0c      	ldr	r3, [pc, #48]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCC_OscConfig+0x23a>
 8002dd0:	e01a      	b.n	8002e08 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd6:	4a08      	ldr	r2, [pc, #32]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002dd8:	f023 0301 	bic.w	r3, r3, #1
 8002ddc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dde:	f7fe feed 	bl	8001bbc <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de4:	e00a      	b.n	8002dfc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de6:	f7fe fee9 	bl	8001bbc <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d903      	bls.n	8002dfc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e15c      	b.n	80030b2 <HAL_RCC_OscConfig+0x53a>
 8002df8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfc:	4b91      	ldr	r3, [pc, #580]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1ee      	bne.n	8002de6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80a4 	beq.w	8002f5e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e16:	4b8b      	ldr	r3, [pc, #556]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10d      	bne.n	8002e3e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e22:	4b88      	ldr	r3, [pc, #544]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	4a87      	ldr	r2, [pc, #540]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2e:	4b85      	ldr	r3, [pc, #532]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e36:	60bb      	str	r3, [r7, #8]
 8002e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e3e:	4b82      	ldr	r3, [pc, #520]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d118      	bne.n	8002e7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e4a:	4b7f      	ldr	r3, [pc, #508]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a7e      	ldr	r2, [pc, #504]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e56:	f7fe feb1 	bl	8001bbc <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5e:	f7fe fead 	bl	8001bbc <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b64      	cmp	r3, #100	; 0x64
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e120      	b.n	80030b2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e70:	4b75      	ldr	r3, [pc, #468]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0f0      	beq.n	8002e5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d106      	bne.n	8002e92 <HAL_RCC_OscConfig+0x31a>
 8002e84:	4b6f      	ldr	r3, [pc, #444]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e88:	4a6e      	ldr	r2, [pc, #440]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e90:	e02d      	b.n	8002eee <HAL_RCC_OscConfig+0x376>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x33c>
 8002e9a:	4b6a      	ldr	r3, [pc, #424]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9e:	4a69      	ldr	r2, [pc, #420]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002ea0:	f023 0301 	bic.w	r3, r3, #1
 8002ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea6:	4b67      	ldr	r3, [pc, #412]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	4a66      	ldr	r2, [pc, #408]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002eac:	f023 0304 	bic.w	r3, r3, #4
 8002eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb2:	e01c      	b.n	8002eee <HAL_RCC_OscConfig+0x376>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b05      	cmp	r3, #5
 8002eba:	d10c      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x35e>
 8002ebc:	4b61      	ldr	r3, [pc, #388]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	4a60      	ldr	r2, [pc, #384]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002ec2:	f043 0304 	orr.w	r3, r3, #4
 8002ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec8:	4b5e      	ldr	r3, [pc, #376]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ecc:	4a5d      	ldr	r2, [pc, #372]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed4:	e00b      	b.n	8002eee <HAL_RCC_OscConfig+0x376>
 8002ed6:	4b5b      	ldr	r3, [pc, #364]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eda:	4a5a      	ldr	r2, [pc, #360]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002edc:	f023 0301 	bic.w	r3, r3, #1
 8002ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee2:	4b58      	ldr	r3, [pc, #352]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee6:	4a57      	ldr	r2, [pc, #348]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002ee8:	f023 0304 	bic.w	r3, r3, #4
 8002eec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d015      	beq.n	8002f22 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef6:	f7fe fe61 	bl	8001bbc <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efc:	e00a      	b.n	8002f14 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efe:	f7fe fe5d 	bl	8001bbc <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e0ce      	b.n	80030b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f14:	4b4b      	ldr	r3, [pc, #300]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0ee      	beq.n	8002efe <HAL_RCC_OscConfig+0x386>
 8002f20:	e014      	b.n	8002f4c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f22:	f7fe fe4b 	bl	8001bbc <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f28:	e00a      	b.n	8002f40 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2a:	f7fe fe47 	bl	8001bbc <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e0b8      	b.n	80030b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f40:	4b40      	ldr	r3, [pc, #256]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1ee      	bne.n	8002f2a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d105      	bne.n	8002f5e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f52:	4b3c      	ldr	r3, [pc, #240]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	4a3b      	ldr	r2, [pc, #236]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80a4 	beq.w	80030b0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f68:	4b36      	ldr	r3, [pc, #216]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 030c 	and.w	r3, r3, #12
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d06b      	beq.n	800304c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d149      	bne.n	8003010 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7c:	4b31      	ldr	r3, [pc, #196]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a30      	ldr	r2, [pc, #192]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fe fe18 	bl	8001bbc <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f90:	f7fe fe14 	bl	8001bbc <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e087      	b.n	80030b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa2:	4b28      	ldr	r3, [pc, #160]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69da      	ldr	r2, [r3, #28]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	019b      	lsls	r3, r3, #6
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc4:	085b      	lsrs	r3, r3, #1
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	041b      	lsls	r3, r3, #16
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	061b      	lsls	r3, r3, #24
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	4a1b      	ldr	r2, [pc, #108]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002fd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002fda:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fdc:	4b19      	ldr	r3, [pc, #100]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a18      	ldr	r2, [pc, #96]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7fe fde8 	bl	8001bbc <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7fe fde4 	bl	8001bbc <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e057      	b.n	80030b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x478>
 800300e:	e04f      	b.n	80030b0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003010:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a0b      	ldr	r2, [pc, #44]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8003016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800301a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7fe fdce 	bl	8001bbc <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7fe fdca 	bl	8001bbc <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e03d      	b.n	80030b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003036:	4b03      	ldr	r3, [pc, #12]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x4ac>
 8003042:	e035      	b.n	80030b0 <HAL_RCC_OscConfig+0x538>
 8003044:	40023800 	.word	0x40023800
 8003048:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800304c:	4b1b      	ldr	r3, [pc, #108]	; (80030bc <HAL_RCC_OscConfig+0x544>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d028      	beq.n	80030ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003064:	429a      	cmp	r2, r3
 8003066:	d121      	bne.n	80030ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d11a      	bne.n	80030ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800307c:	4013      	ands	r3, r2
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003082:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003084:	4293      	cmp	r3, r2
 8003086:	d111      	bne.n	80030ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	3b01      	subs	r3, #1
 8003096:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003098:	429a      	cmp	r2, r3
 800309a:	d107      	bne.n	80030ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e000      	b.n	80030b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800

080030c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0d0      	b.n	800327a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030d8:	4b6a      	ldr	r3, [pc, #424]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d910      	bls.n	8003108 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e6:	4b67      	ldr	r3, [pc, #412]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 020f 	bic.w	r2, r3, #15
 80030ee:	4965      	ldr	r1, [pc, #404]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f6:	4b63      	ldr	r3, [pc, #396]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d001      	beq.n	8003108 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0b8      	b.n	800327a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d020      	beq.n	8003156 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003120:	4b59      	ldr	r3, [pc, #356]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	4a58      	ldr	r2, [pc, #352]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 8003126:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800312a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b00      	cmp	r3, #0
 8003136:	d005      	beq.n	8003144 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003138:	4b53      	ldr	r3, [pc, #332]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	4a52      	ldr	r2, [pc, #328]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 800313e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003142:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003144:	4b50      	ldr	r3, [pc, #320]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	494d      	ldr	r1, [pc, #308]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 8003152:	4313      	orrs	r3, r2
 8003154:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d040      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d107      	bne.n	800317a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316a:	4b47      	ldr	r3, [pc, #284]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d115      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e07f      	b.n	800327a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d107      	bne.n	8003192 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003182:	4b41      	ldr	r3, [pc, #260]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d109      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e073      	b.n	800327a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003192:	4b3d      	ldr	r3, [pc, #244]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e06b      	b.n	800327a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031a2:	4b39      	ldr	r3, [pc, #228]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f023 0203 	bic.w	r2, r3, #3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	4936      	ldr	r1, [pc, #216]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031b4:	f7fe fd02 	bl	8001bbc <HAL_GetTick>
 80031b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ba:	e00a      	b.n	80031d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031bc:	f7fe fcfe 	bl	8001bbc <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e053      	b.n	800327a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d2:	4b2d      	ldr	r3, [pc, #180]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 020c 	and.w	r2, r3, #12
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d1eb      	bne.n	80031bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031e4:	4b27      	ldr	r3, [pc, #156]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d210      	bcs.n	8003214 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f2:	4b24      	ldr	r3, [pc, #144]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 020f 	bic.w	r2, r3, #15
 80031fa:	4922      	ldr	r1, [pc, #136]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003202:	4b20      	ldr	r3, [pc, #128]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e032      	b.n	800327a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003220:	4b19      	ldr	r3, [pc, #100]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	4916      	ldr	r1, [pc, #88]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 800322e:	4313      	orrs	r3, r2
 8003230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	2b00      	cmp	r3, #0
 800323c:	d009      	beq.n	8003252 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800323e:	4b12      	ldr	r3, [pc, #72]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	490e      	ldr	r1, [pc, #56]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 800324e:	4313      	orrs	r3, r2
 8003250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003252:	f000 f821 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8003256:	4602      	mov	r2, r0
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	490a      	ldr	r1, [pc, #40]	; (800328c <HAL_RCC_ClockConfig+0x1cc>)
 8003264:	5ccb      	ldrb	r3, [r1, r3]
 8003266:	fa22 f303 	lsr.w	r3, r2, r3
 800326a:	4a09      	ldr	r2, [pc, #36]	; (8003290 <HAL_RCC_ClockConfig+0x1d0>)
 800326c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800326e:	4b09      	ldr	r3, [pc, #36]	; (8003294 <HAL_RCC_ClockConfig+0x1d4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f7fe fc5e 	bl	8001b34 <HAL_InitTick>

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40023c00 	.word	0x40023c00
 8003288:	40023800 	.word	0x40023800
 800328c:	0800a598 	.word	0x0800a598
 8003290:	20000010 	.word	0x20000010
 8003294:	20000014 	.word	0x20000014

08003298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800329c:	b094      	sub	sp, #80	; 0x50
 800329e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	647b      	str	r3, [r7, #68]	; 0x44
 80032a4:	2300      	movs	r3, #0
 80032a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032a8:	2300      	movs	r3, #0
 80032aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032b0:	4b79      	ldr	r3, [pc, #484]	; (8003498 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d00d      	beq.n	80032d8 <HAL_RCC_GetSysClockFreq+0x40>
 80032bc:	2b08      	cmp	r3, #8
 80032be:	f200 80e1 	bhi.w	8003484 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x34>
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d003      	beq.n	80032d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ca:	e0db      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032cc:	4b73      	ldr	r3, [pc, #460]	; (800349c <HAL_RCC_GetSysClockFreq+0x204>)
 80032ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032d0:	e0db      	b.n	800348a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032d2:	4b73      	ldr	r3, [pc, #460]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80032d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032d6:	e0d8      	b.n	800348a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032d8:	4b6f      	ldr	r3, [pc, #444]	; (8003498 <HAL_RCC_GetSysClockFreq+0x200>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032e2:	4b6d      	ldr	r3, [pc, #436]	; (8003498 <HAL_RCC_GetSysClockFreq+0x200>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d063      	beq.n	80033b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ee:	4b6a      	ldr	r3, [pc, #424]	; (8003498 <HAL_RCC_GetSysClockFreq+0x200>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	099b      	lsrs	r3, r3, #6
 80032f4:	2200      	movs	r2, #0
 80032f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80032f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003300:	633b      	str	r3, [r7, #48]	; 0x30
 8003302:	2300      	movs	r3, #0
 8003304:	637b      	str	r3, [r7, #52]	; 0x34
 8003306:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800330a:	4622      	mov	r2, r4
 800330c:	462b      	mov	r3, r5
 800330e:	f04f 0000 	mov.w	r0, #0
 8003312:	f04f 0100 	mov.w	r1, #0
 8003316:	0159      	lsls	r1, r3, #5
 8003318:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800331c:	0150      	lsls	r0, r2, #5
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4621      	mov	r1, r4
 8003324:	1a51      	subs	r1, r2, r1
 8003326:	6139      	str	r1, [r7, #16]
 8003328:	4629      	mov	r1, r5
 800332a:	eb63 0301 	sbc.w	r3, r3, r1
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800333c:	4659      	mov	r1, fp
 800333e:	018b      	lsls	r3, r1, #6
 8003340:	4651      	mov	r1, sl
 8003342:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003346:	4651      	mov	r1, sl
 8003348:	018a      	lsls	r2, r1, #6
 800334a:	4651      	mov	r1, sl
 800334c:	ebb2 0801 	subs.w	r8, r2, r1
 8003350:	4659      	mov	r1, fp
 8003352:	eb63 0901 	sbc.w	r9, r3, r1
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003362:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003366:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800336a:	4690      	mov	r8, r2
 800336c:	4699      	mov	r9, r3
 800336e:	4623      	mov	r3, r4
 8003370:	eb18 0303 	adds.w	r3, r8, r3
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	462b      	mov	r3, r5
 8003378:	eb49 0303 	adc.w	r3, r9, r3
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	f04f 0300 	mov.w	r3, #0
 8003386:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800338a:	4629      	mov	r1, r5
 800338c:	024b      	lsls	r3, r1, #9
 800338e:	4621      	mov	r1, r4
 8003390:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003394:	4621      	mov	r1, r4
 8003396:	024a      	lsls	r2, r1, #9
 8003398:	4610      	mov	r0, r2
 800339a:	4619      	mov	r1, r3
 800339c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800339e:	2200      	movs	r2, #0
 80033a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80033a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033a8:	f7fd fc66 	bl	8000c78 <__aeabi_uldivmod>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4613      	mov	r3, r2
 80033b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033b4:	e058      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b6:	4b38      	ldr	r3, [pc, #224]	; (8003498 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	099b      	lsrs	r3, r3, #6
 80033bc:	2200      	movs	r2, #0
 80033be:	4618      	mov	r0, r3
 80033c0:	4611      	mov	r1, r2
 80033c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033c6:	623b      	str	r3, [r7, #32]
 80033c8:	2300      	movs	r3, #0
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
 80033cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033d0:	4642      	mov	r2, r8
 80033d2:	464b      	mov	r3, r9
 80033d4:	f04f 0000 	mov.w	r0, #0
 80033d8:	f04f 0100 	mov.w	r1, #0
 80033dc:	0159      	lsls	r1, r3, #5
 80033de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033e2:	0150      	lsls	r0, r2, #5
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4641      	mov	r1, r8
 80033ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80033ee:	4649      	mov	r1, r9
 80033f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003400:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003404:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003408:	ebb2 040a 	subs.w	r4, r2, sl
 800340c:	eb63 050b 	sbc.w	r5, r3, fp
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	00eb      	lsls	r3, r5, #3
 800341a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800341e:	00e2      	lsls	r2, r4, #3
 8003420:	4614      	mov	r4, r2
 8003422:	461d      	mov	r5, r3
 8003424:	4643      	mov	r3, r8
 8003426:	18e3      	adds	r3, r4, r3
 8003428:	603b      	str	r3, [r7, #0]
 800342a:	464b      	mov	r3, r9
 800342c:	eb45 0303 	adc.w	r3, r5, r3
 8003430:	607b      	str	r3, [r7, #4]
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800343e:	4629      	mov	r1, r5
 8003440:	028b      	lsls	r3, r1, #10
 8003442:	4621      	mov	r1, r4
 8003444:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003448:	4621      	mov	r1, r4
 800344a:	028a      	lsls	r2, r1, #10
 800344c:	4610      	mov	r0, r2
 800344e:	4619      	mov	r1, r3
 8003450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003452:	2200      	movs	r2, #0
 8003454:	61bb      	str	r3, [r7, #24]
 8003456:	61fa      	str	r2, [r7, #28]
 8003458:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800345c:	f7fd fc0c 	bl	8000c78 <__aeabi_uldivmod>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4613      	mov	r3, r2
 8003466:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCC_GetSysClockFreq+0x200>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	0c1b      	lsrs	r3, r3, #16
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	3301      	adds	r3, #1
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003478:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800347a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800347c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003480:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003482:	e002      	b.n	800348a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003484:	4b05      	ldr	r3, [pc, #20]	; (800349c <HAL_RCC_GetSysClockFreq+0x204>)
 8003486:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003488:	bf00      	nop
    }
  }
  return sysclockfreq;
 800348a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800348c:	4618      	mov	r0, r3
 800348e:	3750      	adds	r7, #80	; 0x50
 8003490:	46bd      	mov	sp, r7
 8003492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800
 800349c:	00f42400 	.word	0x00f42400
 80034a0:	007a1200 	.word	0x007a1200

080034a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034a8:	4b03      	ldr	r3, [pc, #12]	; (80034b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034aa:	681b      	ldr	r3, [r3, #0]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	20000010 	.word	0x20000010

080034bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034c0:	f7ff fff0 	bl	80034a4 <HAL_RCC_GetHCLKFreq>
 80034c4:	4602      	mov	r2, r0
 80034c6:	4b05      	ldr	r3, [pc, #20]	; (80034dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	0a9b      	lsrs	r3, r3, #10
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	4903      	ldr	r1, [pc, #12]	; (80034e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034d2:	5ccb      	ldrb	r3, [r1, r3]
 80034d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d8:	4618      	mov	r0, r3
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40023800 	.word	0x40023800
 80034e0:	0800a5a8 	.word	0x0800a5a8

080034e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034e8:	f7ff ffdc 	bl	80034a4 <HAL_RCC_GetHCLKFreq>
 80034ec:	4602      	mov	r2, r0
 80034ee:	4b05      	ldr	r3, [pc, #20]	; (8003504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	0b5b      	lsrs	r3, r3, #13
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	4903      	ldr	r1, [pc, #12]	; (8003508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034fa:	5ccb      	ldrb	r3, [r1, r3]
 80034fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003500:	4618      	mov	r0, r3
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40023800 	.word	0x40023800
 8003508:	0800a5a8 	.word	0x0800a5a8

0800350c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003520:	2300      	movs	r3, #0
 8003522:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d012      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003534:	4b69      	ldr	r3, [pc, #420]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4a68      	ldr	r2, [pc, #416]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800353e:	6093      	str	r3, [r2, #8]
 8003540:	4b66      	ldr	r3, [pc, #408]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003548:	4964      	ldr	r1, [pc, #400]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354a:	4313      	orrs	r3, r2
 800354c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003556:	2301      	movs	r3, #1
 8003558:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d017      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003566:	4b5d      	ldr	r3, [pc, #372]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800356c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003574:	4959      	ldr	r1, [pc, #356]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003584:	d101      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003586:	2301      	movs	r3, #1
 8003588:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003592:	2301      	movs	r3, #1
 8003594:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d017      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035a2:	4b4e      	ldr	r3, [pc, #312]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	494a      	ldr	r1, [pc, #296]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c0:	d101      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035c2:	2301      	movs	r3, #1
 80035c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035ce:	2301      	movs	r3, #1
 80035d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035de:	2301      	movs	r3, #1
 80035e0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 808b 	beq.w	8003706 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035f0:	4b3a      	ldr	r3, [pc, #232]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	4a39      	ldr	r2, [pc, #228]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fa:	6413      	str	r3, [r2, #64]	; 0x40
 80035fc:	4b37      	ldr	r3, [pc, #220]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003608:	4b35      	ldr	r3, [pc, #212]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a34      	ldr	r2, [pc, #208]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800360e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003612:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003614:	f7fe fad2 	bl	8001bbc <HAL_GetTick>
 8003618:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800361a:	e008      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361c:	f7fe face 	bl	8001bbc <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	; 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e357      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800362e:	4b2c      	ldr	r3, [pc, #176]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800363a:	4b28      	ldr	r3, [pc, #160]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003642:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d035      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	429a      	cmp	r2, r3
 8003656:	d02e      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003658:	4b20      	ldr	r3, [pc, #128]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003660:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003662:	4b1e      	ldr	r3, [pc, #120]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	4a1d      	ldr	r2, [pc, #116]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800366e:	4b1b      	ldr	r3, [pc, #108]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	4a1a      	ldr	r2, [pc, #104]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003678:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800367a:	4a18      	ldr	r2, [pc, #96]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003680:	4b16      	ldr	r3, [pc, #88]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b01      	cmp	r3, #1
 800368a:	d114      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368c:	f7fe fa96 	bl	8001bbc <HAL_GetTick>
 8003690:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003692:	e00a      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003694:	f7fe fa92 	bl	8001bbc <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d901      	bls.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e319      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036aa:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0ee      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036c2:	d111      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036c4:	4b05      	ldr	r3, [pc, #20]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036d0:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036d2:	400b      	ands	r3, r1
 80036d4:	4901      	ldr	r1, [pc, #4]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	608b      	str	r3, [r1, #8]
 80036da:	e00b      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036dc:	40023800 	.word	0x40023800
 80036e0:	40007000 	.word	0x40007000
 80036e4:	0ffffcff 	.word	0x0ffffcff
 80036e8:	4baa      	ldr	r3, [pc, #680]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4aa9      	ldr	r2, [pc, #676]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036f2:	6093      	str	r3, [r2, #8]
 80036f4:	4ba7      	ldr	r3, [pc, #668]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003700:	49a4      	ldr	r1, [pc, #656]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003702:	4313      	orrs	r3, r2
 8003704:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0310 	and.w	r3, r3, #16
 800370e:	2b00      	cmp	r3, #0
 8003710:	d010      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003712:	4ba0      	ldr	r3, [pc, #640]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003718:	4a9e      	ldr	r2, [pc, #632]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800371a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800371e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003722:	4b9c      	ldr	r3, [pc, #624]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003724:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	4999      	ldr	r1, [pc, #612]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003740:	4b94      	ldr	r3, [pc, #592]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800374e:	4991      	ldr	r1, [pc, #580]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003762:	4b8c      	ldr	r3, [pc, #560]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003768:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003770:	4988      	ldr	r1, [pc, #544]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003784:	4b83      	ldr	r3, [pc, #524]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003792:	4980      	ldr	r1, [pc, #512]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037a6:	4b7b      	ldr	r3, [pc, #492]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	4977      	ldr	r1, [pc, #476]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037c8:	4b72      	ldr	r3, [pc, #456]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ce:	f023 0203 	bic.w	r2, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	496f      	ldr	r1, [pc, #444]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037ea:	4b6a      	ldr	r3, [pc, #424]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f0:	f023 020c 	bic.w	r2, r3, #12
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f8:	4966      	ldr	r1, [pc, #408]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00a      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800380c:	4b61      	ldr	r3, [pc, #388]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003812:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381a:	495e      	ldr	r1, [pc, #376]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800381c:	4313      	orrs	r3, r2
 800381e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800382e:	4b59      	ldr	r3, [pc, #356]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003834:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383c:	4955      	ldr	r1, [pc, #340]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800383e:	4313      	orrs	r3, r2
 8003840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00a      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003850:	4b50      	ldr	r3, [pc, #320]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003856:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385e:	494d      	ldr	r1, [pc, #308]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003860:	4313      	orrs	r3, r2
 8003862:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003872:	4b48      	ldr	r3, [pc, #288]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003878:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003880:	4944      	ldr	r1, [pc, #272]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003882:	4313      	orrs	r3, r2
 8003884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003894:	4b3f      	ldr	r3, [pc, #252]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a2:	493c      	ldr	r1, [pc, #240]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038b6:	4b37      	ldr	r3, [pc, #220]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c4:	4933      	ldr	r1, [pc, #204]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038d8:	4b2e      	ldr	r3, [pc, #184]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038e6:	492b      	ldr	r1, [pc, #172]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d011      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038fa:	4b26      	ldr	r3, [pc, #152]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003900:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003908:	4922      	ldr	r1, [pc, #136]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003918:	d101      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800391a:	2301      	movs	r3, #1
 800391c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800392a:	2301      	movs	r3, #1
 800392c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800393a:	4b16      	ldr	r3, [pc, #88]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800393c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003940:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003948:	4912      	ldr	r1, [pc, #72]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00b      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800395c:	4b0d      	ldr	r3, [pc, #52]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800395e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003962:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800396c:	4909      	ldr	r1, [pc, #36]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d006      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 80d9 	beq.w	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003988:	4b02      	ldr	r3, [pc, #8]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a01      	ldr	r2, [pc, #4]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800398e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003992:	e001      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003994:	40023800 	.word	0x40023800
 8003998:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800399a:	f7fe f90f 	bl	8001bbc <HAL_GetTick>
 800399e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039a0:	e008      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039a2:	f7fe f90b 	bl	8001bbc <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b64      	cmp	r3, #100	; 0x64
 80039ae:	d901      	bls.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e194      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039b4:	4b6c      	ldr	r3, [pc, #432]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1f0      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d021      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d11d      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039d4:	4b64      	ldr	r3, [pc, #400]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039da:	0c1b      	lsrs	r3, r3, #16
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039e2:	4b61      	ldr	r3, [pc, #388]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e8:	0e1b      	lsrs	r3, r3, #24
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	019a      	lsls	r2, r3, #6
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	041b      	lsls	r3, r3, #16
 80039fa:	431a      	orrs	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	061b      	lsls	r3, r3, #24
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	071b      	lsls	r3, r3, #28
 8003a08:	4957      	ldr	r1, [pc, #348]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d004      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a24:	d00a      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d02e      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a3a:	d129      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a3c:	4b4a      	ldr	r3, [pc, #296]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a42:	0c1b      	lsrs	r3, r3, #16
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a4a:	4b47      	ldr	r3, [pc, #284]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a50:	0f1b      	lsrs	r3, r3, #28
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	019a      	lsls	r2, r3, #6
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	041b      	lsls	r3, r3, #16
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	061b      	lsls	r3, r3, #24
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	071b      	lsls	r3, r3, #28
 8003a70:	493d      	ldr	r1, [pc, #244]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a78:	4b3b      	ldr	r3, [pc, #236]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a7e:	f023 021f 	bic.w	r2, r3, #31
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	3b01      	subs	r3, #1
 8003a88:	4937      	ldr	r1, [pc, #220]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d01d      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a9c:	4b32      	ldr	r3, [pc, #200]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aa2:	0e1b      	lsrs	r3, r3, #24
 8003aa4:	f003 030f 	and.w	r3, r3, #15
 8003aa8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003aaa:	4b2f      	ldr	r3, [pc, #188]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab0:	0f1b      	lsrs	r3, r3, #28
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	019a      	lsls	r2, r3, #6
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	041b      	lsls	r3, r3, #16
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	061b      	lsls	r3, r3, #24
 8003aca:	431a      	orrs	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	071b      	lsls	r3, r3, #28
 8003ad0:	4925      	ldr	r1, [pc, #148]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d011      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	019a      	lsls	r2, r3, #6
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	041b      	lsls	r3, r3, #16
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	061b      	lsls	r3, r3, #24
 8003af8:	431a      	orrs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	071b      	lsls	r3, r3, #28
 8003b00:	4919      	ldr	r1, [pc, #100]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b08:	4b17      	ldr	r3, [pc, #92]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a16      	ldr	r2, [pc, #88]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b14:	f7fe f852 	bl	8001bbc <HAL_GetTick>
 8003b18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b1c:	f7fe f84e 	bl	8001bbc <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b64      	cmp	r3, #100	; 0x64
 8003b28:	d901      	bls.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e0d7      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b2e:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0f0      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	f040 80cd 	bne.w	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b42:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a08      	ldr	r2, [pc, #32]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b4e:	f7fe f835 	bl	8001bbc <HAL_GetTick>
 8003b52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b54:	e00a      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b56:	f7fe f831 	bl	8001bbc <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b64      	cmp	r3, #100	; 0x64
 8003b62:	d903      	bls.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e0ba      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003b68:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b6c:	4b5e      	ldr	r3, [pc, #376]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b78:	d0ed      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d02e      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d12a      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ba2:	4b51      	ldr	r3, [pc, #324]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba8:	0c1b      	lsrs	r3, r3, #16
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bb0:	4b4d      	ldr	r3, [pc, #308]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	0f1b      	lsrs	r3, r3, #28
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	019a      	lsls	r2, r3, #6
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	041b      	lsls	r3, r3, #16
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	061b      	lsls	r3, r3, #24
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	071b      	lsls	r3, r3, #28
 8003bd6:	4944      	ldr	r1, [pc, #272]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003bde:	4b42      	ldr	r3, [pc, #264]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003be4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bec:	3b01      	subs	r3, #1
 8003bee:	021b      	lsls	r3, r3, #8
 8003bf0:	493d      	ldr	r1, [pc, #244]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d022      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c0c:	d11d      	bne.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c0e:	4b36      	ldr	r3, [pc, #216]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c14:	0e1b      	lsrs	r3, r3, #24
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c1c:	4b32      	ldr	r3, [pc, #200]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	0f1b      	lsrs	r3, r3, #28
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	019a      	lsls	r2, r3, #6
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	041b      	lsls	r3, r3, #16
 8003c36:	431a      	orrs	r2, r3
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	061b      	lsls	r3, r3, #24
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	071b      	lsls	r3, r3, #28
 8003c42:	4929      	ldr	r1, [pc, #164]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d028      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c56:	4b24      	ldr	r3, [pc, #144]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5c:	0e1b      	lsrs	r3, r3, #24
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c64:	4b20      	ldr	r3, [pc, #128]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6a:	0c1b      	lsrs	r3, r3, #16
 8003c6c:	f003 0303 	and.w	r3, r3, #3
 8003c70:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	019a      	lsls	r2, r3, #6
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	041b      	lsls	r3, r3, #16
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	061b      	lsls	r3, r3, #24
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	071b      	lsls	r3, r3, #28
 8003c8a:	4917      	ldr	r1, [pc, #92]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c92:	4b15      	ldr	r3, [pc, #84]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	4911      	ldr	r1, [pc, #68]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ca8:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a0e      	ldr	r2, [pc, #56]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb4:	f7fd ff82 	bl	8001bbc <HAL_GetTick>
 8003cb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cbc:	f7fd ff7e 	bl	8001bbc <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b64      	cmp	r3, #100	; 0x64
 8003cc8:	d901      	bls.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e007      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cda:	d1ef      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3720      	adds	r7, #32
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40023800 	.word	0x40023800

08003cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e049      	b.n	8003d92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7fd fe1c 	bl	8001950 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3304      	adds	r3, #4
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	f000 fac0 	bl	80042b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d001      	beq.n	8003db4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e054      	b.n	8003e5e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a26      	ldr	r2, [pc, #152]	; (8003e6c <HAL_TIM_Base_Start_IT+0xd0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d022      	beq.n	8003e1c <HAL_TIM_Base_Start_IT+0x80>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dde:	d01d      	beq.n	8003e1c <HAL_TIM_Base_Start_IT+0x80>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a22      	ldr	r2, [pc, #136]	; (8003e70 <HAL_TIM_Base_Start_IT+0xd4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d018      	beq.n	8003e1c <HAL_TIM_Base_Start_IT+0x80>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a21      	ldr	r2, [pc, #132]	; (8003e74 <HAL_TIM_Base_Start_IT+0xd8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d013      	beq.n	8003e1c <HAL_TIM_Base_Start_IT+0x80>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a1f      	ldr	r2, [pc, #124]	; (8003e78 <HAL_TIM_Base_Start_IT+0xdc>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d00e      	beq.n	8003e1c <HAL_TIM_Base_Start_IT+0x80>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a1e      	ldr	r2, [pc, #120]	; (8003e7c <HAL_TIM_Base_Start_IT+0xe0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d009      	beq.n	8003e1c <HAL_TIM_Base_Start_IT+0x80>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a1c      	ldr	r2, [pc, #112]	; (8003e80 <HAL_TIM_Base_Start_IT+0xe4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d004      	beq.n	8003e1c <HAL_TIM_Base_Start_IT+0x80>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a1b      	ldr	r2, [pc, #108]	; (8003e84 <HAL_TIM_Base_Start_IT+0xe8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d115      	bne.n	8003e48 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	4b19      	ldr	r3, [pc, #100]	; (8003e88 <HAL_TIM_Base_Start_IT+0xec>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b06      	cmp	r3, #6
 8003e2c:	d015      	beq.n	8003e5a <HAL_TIM_Base_Start_IT+0xbe>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e34:	d011      	beq.n	8003e5a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0201 	orr.w	r2, r2, #1
 8003e44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e46:	e008      	b.n	8003e5a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	e000      	b.n	8003e5c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40010000 	.word	0x40010000
 8003e70:	40000400 	.word	0x40000400
 8003e74:	40000800 	.word	0x40000800
 8003e78:	40000c00 	.word	0x40000c00
 8003e7c:	40010400 	.word	0x40010400
 8003e80:	40014000 	.word	0x40014000
 8003e84:	40001800 	.word	0x40001800
 8003e88:	00010007 	.word	0x00010007

08003e8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d122      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d11b      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0202 	mvn.w	r2, #2
 8003eb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f9d0 	bl	8004274 <HAL_TIM_IC_CaptureCallback>
 8003ed4:	e005      	b.n	8003ee2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f9c2 	bl	8004260 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f9d3 	bl	8004288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f003 0304 	and.w	r3, r3, #4
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d122      	bne.n	8003f3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d11b      	bne.n	8003f3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0204 	mvn.w	r2, #4
 8003f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2202      	movs	r2, #2
 8003f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f9a6 	bl	8004274 <HAL_TIM_IC_CaptureCallback>
 8003f28:	e005      	b.n	8003f36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f998 	bl	8004260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f9a9 	bl	8004288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	d122      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d11b      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0208 	mvn.w	r2, #8
 8003f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2204      	movs	r2, #4
 8003f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f97c 	bl	8004274 <HAL_TIM_IC_CaptureCallback>
 8003f7c:	e005      	b.n	8003f8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f96e 	bl	8004260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f97f 	bl	8004288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	f003 0310 	and.w	r3, r3, #16
 8003f9a:	2b10      	cmp	r3, #16
 8003f9c:	d122      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f003 0310 	and.w	r3, r3, #16
 8003fa8:	2b10      	cmp	r3, #16
 8003faa:	d11b      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f06f 0210 	mvn.w	r2, #16
 8003fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2208      	movs	r2, #8
 8003fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f952 	bl	8004274 <HAL_TIM_IC_CaptureCallback>
 8003fd0:	e005      	b.n	8003fde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f944 	bl	8004260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f955 	bl	8004288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d10e      	bne.n	8004010 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d107      	bne.n	8004010 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0201 	mvn.w	r2, #1
 8004008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fd f9b4 	bl	8001378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401a:	2b80      	cmp	r3, #128	; 0x80
 800401c:	d10e      	bne.n	800403c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004028:	2b80      	cmp	r3, #128	; 0x80
 800402a:	d107      	bne.n	800403c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fb0c 	bl	8004654 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800404a:	d10e      	bne.n	800406a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004056:	2b80      	cmp	r3, #128	; 0x80
 8004058:	d107      	bne.n	800406a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 faff 	bl	8004668 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004074:	2b40      	cmp	r3, #64	; 0x40
 8004076:	d10e      	bne.n	8004096 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004082:	2b40      	cmp	r3, #64	; 0x40
 8004084:	d107      	bne.n	8004096 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800408e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f903 	bl	800429c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d10e      	bne.n	80040c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	d107      	bne.n	80040c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f06f 0220 	mvn.w	r2, #32
 80040ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fabf 	bl	8004640 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040c2:	bf00      	nop
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_TIM_ConfigClockSource+0x1c>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e0b4      	b.n	8004252 <HAL_TIM_ConfigClockSource+0x186>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	4b56      	ldr	r3, [pc, #344]	; (800425c <HAL_TIM_ConfigClockSource+0x190>)
 8004104:	4013      	ands	r3, r2
 8004106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800410e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004120:	d03e      	beq.n	80041a0 <HAL_TIM_ConfigClockSource+0xd4>
 8004122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004126:	f200 8087 	bhi.w	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 800412a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412e:	f000 8086 	beq.w	800423e <HAL_TIM_ConfigClockSource+0x172>
 8004132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004136:	d87f      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 8004138:	2b70      	cmp	r3, #112	; 0x70
 800413a:	d01a      	beq.n	8004172 <HAL_TIM_ConfigClockSource+0xa6>
 800413c:	2b70      	cmp	r3, #112	; 0x70
 800413e:	d87b      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 8004140:	2b60      	cmp	r3, #96	; 0x60
 8004142:	d050      	beq.n	80041e6 <HAL_TIM_ConfigClockSource+0x11a>
 8004144:	2b60      	cmp	r3, #96	; 0x60
 8004146:	d877      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 8004148:	2b50      	cmp	r3, #80	; 0x50
 800414a:	d03c      	beq.n	80041c6 <HAL_TIM_ConfigClockSource+0xfa>
 800414c:	2b50      	cmp	r3, #80	; 0x50
 800414e:	d873      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 8004150:	2b40      	cmp	r3, #64	; 0x40
 8004152:	d058      	beq.n	8004206 <HAL_TIM_ConfigClockSource+0x13a>
 8004154:	2b40      	cmp	r3, #64	; 0x40
 8004156:	d86f      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 8004158:	2b30      	cmp	r3, #48	; 0x30
 800415a:	d064      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x15a>
 800415c:	2b30      	cmp	r3, #48	; 0x30
 800415e:	d86b      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 8004160:	2b20      	cmp	r3, #32
 8004162:	d060      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x15a>
 8004164:	2b20      	cmp	r3, #32
 8004166:	d867      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 8004168:	2b00      	cmp	r3, #0
 800416a:	d05c      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x15a>
 800416c:	2b10      	cmp	r3, #16
 800416e:	d05a      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x15a>
 8004170:	e062      	b.n	8004238 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	6899      	ldr	r1, [r3, #8]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f000 f9af 	bl	80044e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004194:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	609a      	str	r2, [r3, #8]
      break;
 800419e:	e04f      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	6899      	ldr	r1, [r3, #8]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f000 f998 	bl	80044e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041c2:	609a      	str	r2, [r3, #8]
      break;
 80041c4:	e03c      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6818      	ldr	r0, [r3, #0]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	6859      	ldr	r1, [r3, #4]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	461a      	mov	r2, r3
 80041d4:	f000 f90c 	bl	80043f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2150      	movs	r1, #80	; 0x50
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 f965 	bl	80044ae <TIM_ITRx_SetConfig>
      break;
 80041e4:	e02c      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	6859      	ldr	r1, [r3, #4]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	461a      	mov	r2, r3
 80041f4:	f000 f92b 	bl	800444e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2160      	movs	r1, #96	; 0x60
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 f955 	bl	80044ae <TIM_ITRx_SetConfig>
      break;
 8004204:	e01c      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	6859      	ldr	r1, [r3, #4]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	461a      	mov	r2, r3
 8004214:	f000 f8ec 	bl	80043f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2140      	movs	r1, #64	; 0x40
 800421e:	4618      	mov	r0, r3
 8004220:	f000 f945 	bl	80044ae <TIM_ITRx_SetConfig>
      break;
 8004224:	e00c      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4619      	mov	r1, r3
 8004230:	4610      	mov	r0, r2
 8004232:	f000 f93c 	bl	80044ae <TIM_ITRx_SetConfig>
      break;
 8004236:	e003      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
      break;
 800423c:	e000      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800423e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004250:	7bfb      	ldrb	r3, [r7, #15]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	fffeff88 	.word	0xfffeff88

08004260 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a40      	ldr	r2, [pc, #256]	; (80043c4 <TIM_Base_SetConfig+0x114>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d013      	beq.n	80042f0 <TIM_Base_SetConfig+0x40>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ce:	d00f      	beq.n	80042f0 <TIM_Base_SetConfig+0x40>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a3d      	ldr	r2, [pc, #244]	; (80043c8 <TIM_Base_SetConfig+0x118>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00b      	beq.n	80042f0 <TIM_Base_SetConfig+0x40>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a3c      	ldr	r2, [pc, #240]	; (80043cc <TIM_Base_SetConfig+0x11c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d007      	beq.n	80042f0 <TIM_Base_SetConfig+0x40>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a3b      	ldr	r2, [pc, #236]	; (80043d0 <TIM_Base_SetConfig+0x120>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d003      	beq.n	80042f0 <TIM_Base_SetConfig+0x40>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a3a      	ldr	r2, [pc, #232]	; (80043d4 <TIM_Base_SetConfig+0x124>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d108      	bne.n	8004302 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a2f      	ldr	r2, [pc, #188]	; (80043c4 <TIM_Base_SetConfig+0x114>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d02b      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004310:	d027      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a2c      	ldr	r2, [pc, #176]	; (80043c8 <TIM_Base_SetConfig+0x118>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d023      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a2b      	ldr	r2, [pc, #172]	; (80043cc <TIM_Base_SetConfig+0x11c>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d01f      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a2a      	ldr	r2, [pc, #168]	; (80043d0 <TIM_Base_SetConfig+0x120>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d01b      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a29      	ldr	r2, [pc, #164]	; (80043d4 <TIM_Base_SetConfig+0x124>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d017      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a28      	ldr	r2, [pc, #160]	; (80043d8 <TIM_Base_SetConfig+0x128>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d013      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a27      	ldr	r2, [pc, #156]	; (80043dc <TIM_Base_SetConfig+0x12c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d00f      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a26      	ldr	r2, [pc, #152]	; (80043e0 <TIM_Base_SetConfig+0x130>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00b      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a25      	ldr	r2, [pc, #148]	; (80043e4 <TIM_Base_SetConfig+0x134>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d007      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a24      	ldr	r2, [pc, #144]	; (80043e8 <TIM_Base_SetConfig+0x138>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d003      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a23      	ldr	r2, [pc, #140]	; (80043ec <TIM_Base_SetConfig+0x13c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d108      	bne.n	8004374 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a0a      	ldr	r2, [pc, #40]	; (80043c4 <TIM_Base_SetConfig+0x114>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d003      	beq.n	80043a8 <TIM_Base_SetConfig+0xf8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a0c      	ldr	r2, [pc, #48]	; (80043d4 <TIM_Base_SetConfig+0x124>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d103      	bne.n	80043b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	615a      	str	r2, [r3, #20]
}
 80043b6:	bf00      	nop
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	40010000 	.word	0x40010000
 80043c8:	40000400 	.word	0x40000400
 80043cc:	40000800 	.word	0x40000800
 80043d0:	40000c00 	.word	0x40000c00
 80043d4:	40010400 	.word	0x40010400
 80043d8:	40014000 	.word	0x40014000
 80043dc:	40014400 	.word	0x40014400
 80043e0:	40014800 	.word	0x40014800
 80043e4:	40001800 	.word	0x40001800
 80043e8:	40001c00 	.word	0x40001c00
 80043ec:	40002000 	.word	0x40002000

080043f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	f023 0201 	bic.w	r2, r3, #1
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800441a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	4313      	orrs	r3, r2
 8004424:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f023 030a 	bic.w	r3, r3, #10
 800442c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	4313      	orrs	r3, r2
 8004434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	621a      	str	r2, [r3, #32]
}
 8004442:	bf00      	nop
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800444e:	b480      	push	{r7}
 8004450:	b087      	sub	sp, #28
 8004452:	af00      	add	r7, sp, #0
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	f023 0210 	bic.w	r2, r3, #16
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004478:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	031b      	lsls	r3, r3, #12
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800448a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	621a      	str	r2, [r3, #32]
}
 80044a2:	bf00      	nop
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b085      	sub	sp, #20
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f043 0307 	orr.w	r3, r3, #7
 80044d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	609a      	str	r2, [r3, #8]
}
 80044d8:	bf00      	nop
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	021a      	lsls	r2, r3, #8
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	431a      	orrs	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4313      	orrs	r3, r2
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	4313      	orrs	r3, r2
 8004510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	609a      	str	r2, [r3, #8]
}
 8004518:	bf00      	nop
 800451a:	371c      	adds	r7, #28
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004538:	2302      	movs	r3, #2
 800453a:	e06d      	b.n	8004618 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a30      	ldr	r2, [pc, #192]	; (8004624 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d004      	beq.n	8004570 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a2f      	ldr	r2, [pc, #188]	; (8004628 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d108      	bne.n	8004582 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004576:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004588:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4313      	orrs	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a20      	ldr	r2, [pc, #128]	; (8004624 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d022      	beq.n	80045ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ae:	d01d      	beq.n	80045ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a1d      	ldr	r2, [pc, #116]	; (800462c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d018      	beq.n	80045ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a1c      	ldr	r2, [pc, #112]	; (8004630 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d013      	beq.n	80045ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a1a      	ldr	r2, [pc, #104]	; (8004634 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00e      	beq.n	80045ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a15      	ldr	r2, [pc, #84]	; (8004628 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d009      	beq.n	80045ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a16      	ldr	r2, [pc, #88]	; (8004638 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d004      	beq.n	80045ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a15      	ldr	r2, [pc, #84]	; (800463c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d10c      	bne.n	8004606 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	40010000 	.word	0x40010000
 8004628:	40010400 	.word	0x40010400
 800462c:	40000400 	.word	0x40000400
 8004630:	40000800 	.word	0x40000800
 8004634:	40000c00 	.word	0x40000c00
 8004638:	40014000 	.word	0x40014000
 800463c:	40001800 	.word	0x40001800

08004640 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e040      	b.n	8004710 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fd f9aa 	bl	80019f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2224      	movs	r2, #36	; 0x24
 80046a8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0201 	bic.w	r2, r2, #1
 80046b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fb62 	bl	8004d84 <UART_SetConfig>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e022      	b.n	8004710 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fdba 	bl	800524c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689a      	ldr	r2, [r3, #8]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fe41 	bl	8005390 <UART_CheckIdleState>
 800470e:	4603      	mov	r3, r0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08a      	sub	sp, #40	; 0x28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	4613      	mov	r3, r2
 8004724:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800472c:	2b20      	cmp	r3, #32
 800472e:	d132      	bne.n	8004796 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <HAL_UART_Receive_IT+0x24>
 8004736:	88fb      	ldrh	r3, [r7, #6]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e02b      	b.n	8004798 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d018      	beq.n	8004786 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	613b      	str	r3, [r7, #16]
   return(result);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	623b      	str	r3, [r7, #32]
 8004774:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	69f9      	ldr	r1, [r7, #28]
 8004778:	6a3a      	ldr	r2, [r7, #32]
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e6      	bne.n	8004754 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004786:	88fb      	ldrh	r3, [r7, #6]
 8004788:	461a      	mov	r2, r3
 800478a:	68b9      	ldr	r1, [r7, #8]
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 fefd 	bl	800558c <UART_Start_Receive_IT>
 8004792:	4603      	mov	r3, r0
 8004794:	e000      	b.n	8004798 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004796:	2302      	movs	r3, #2
  }
}
 8004798:	4618      	mov	r0, r3
 800479a:	3728      	adds	r7, #40	; 0x28
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b0ba      	sub	sp, #232	; 0xe8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80047ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80047ce:	4013      	ands	r3, r2
 80047d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80047d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d115      	bne.n	8004808 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80047dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e0:	f003 0320 	and.w	r3, r3, #32
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00f      	beq.n	8004808 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d009      	beq.n	8004808 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 8297 	beq.w	8004d2c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	4798      	blx	r3
      }
      return;
 8004806:	e291      	b.n	8004d2c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004808:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 8117 	beq.w	8004a40 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800481e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004822:	4b85      	ldr	r3, [pc, #532]	; (8004a38 <HAL_UART_IRQHandler+0x298>)
 8004824:	4013      	ands	r3, r2
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 810a 	beq.w	8004a40 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800482c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d011      	beq.n	800485c <HAL_UART_IRQHandler+0xbc>
 8004838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800483c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00b      	beq.n	800485c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2201      	movs	r2, #1
 800484a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004852:	f043 0201 	orr.w	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800485c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d011      	beq.n	800488c <HAL_UART_IRQHandler+0xec>
 8004868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00b      	beq.n	800488c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2202      	movs	r2, #2
 800487a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004882:	f043 0204 	orr.w	r2, r3, #4
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800488c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d011      	beq.n	80048bc <HAL_UART_IRQHandler+0x11c>
 8004898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00b      	beq.n	80048bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2204      	movs	r2, #4
 80048aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b2:	f043 0202 	orr.w	r2, r3, #2
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d017      	beq.n	80048f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048cc:	f003 0320 	and.w	r3, r3, #32
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d105      	bne.n	80048e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80048d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00b      	beq.n	80048f8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2208      	movs	r2, #8
 80048e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ee:	f043 0208 	orr.w	r2, r3, #8
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80048f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004900:	2b00      	cmp	r3, #0
 8004902:	d012      	beq.n	800492a <HAL_UART_IRQHandler+0x18a>
 8004904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004908:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00c      	beq.n	800492a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004918:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004920:	f043 0220 	orr.w	r2, r3, #32
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 81fd 	beq.w	8004d30 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00d      	beq.n	800495e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b00      	cmp	r3, #0
 800494c:	d007      	beq.n	800495e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004964:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004972:	2b40      	cmp	r3, #64	; 0x40
 8004974:	d005      	beq.n	8004982 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004976:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800497a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800497e:	2b00      	cmp	r3, #0
 8004980:	d04f      	beq.n	8004a22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fec8 	bl	8005718 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004992:	2b40      	cmp	r3, #64	; 0x40
 8004994:	d141      	bne.n	8004a1a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3308      	adds	r3, #8
 800499c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049a4:	e853 3f00 	ldrex	r3, [r3]
 80049a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3308      	adds	r3, #8
 80049be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049d2:	e841 2300 	strex	r3, r2, [r1]
 80049d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80049da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1d9      	bne.n	8004996 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d013      	beq.n	8004a12 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ee:	4a13      	ldr	r2, [pc, #76]	; (8004a3c <HAL_UART_IRQHandler+0x29c>)
 80049f0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fd fc8a 	bl	8002310 <HAL_DMA_Abort_IT>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d017      	beq.n	8004a32 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a10:	e00f      	b.n	8004a32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f9a0 	bl	8004d58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a18:	e00b      	b.n	8004a32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f99c 	bl	8004d58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a20:	e007      	b.n	8004a32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f998 	bl	8004d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004a30:	e17e      	b.n	8004d30 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a32:	bf00      	nop
    return;
 8004a34:	e17c      	b.n	8004d30 <HAL_UART_IRQHandler+0x590>
 8004a36:	bf00      	nop
 8004a38:	04000120 	.word	0x04000120
 8004a3c:	080057e1 	.word	0x080057e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	f040 814c 	bne.w	8004ce2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 8145 	beq.w	8004ce2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a5c:	f003 0310 	and.w	r3, r3, #16
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 813e 	beq.w	8004ce2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2210      	movs	r2, #16
 8004a6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a78:	2b40      	cmp	r3, #64	; 0x40
 8004a7a:	f040 80b6 	bne.w	8004bea <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a8a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 8150 	beq.w	8004d34 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	f080 8148 	bcs.w	8004d34 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004aaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ab8:	f000 8086 	beq.w	8004bc8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ac8:	e853 3f00 	ldrex	r3, [r3]
 8004acc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ad0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ad8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ae6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004aea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004af2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004af6:	e841 2300 	strex	r3, r2, [r1]
 8004afa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1da      	bne.n	8004abc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3308      	adds	r3, #8
 8004b0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b10:	e853 3f00 	ldrex	r3, [r3]
 8004b14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b18:	f023 0301 	bic.w	r3, r3, #1
 8004b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3308      	adds	r3, #8
 8004b26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b36:	e841 2300 	strex	r3, r2, [r1]
 8004b3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1e1      	bne.n	8004b06 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3308      	adds	r3, #8
 8004b48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b4c:	e853 3f00 	ldrex	r3, [r3]
 8004b50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3308      	adds	r3, #8
 8004b62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b6e:	e841 2300 	strex	r3, r2, [r1]
 8004b72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1e3      	bne.n	8004b42 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b90:	e853 3f00 	ldrex	r3, [r3]
 8004b94:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b98:	f023 0310 	bic.w	r3, r3, #16
 8004b9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004baa:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bb2:	e841 2300 	strex	r3, r2, [r1]
 8004bb6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1e4      	bne.n	8004b88 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fd fb34 	bl	8002230 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	4619      	mov	r1, r3
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f8c2 	bl	8004d6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004be8:	e0a4      	b.n	8004d34 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 8096 	beq.w	8004d38 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004c0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 8091 	beq.w	8004d38 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1e:	e853 3f00 	ldrex	r3, [r3]
 8004c22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c38:	647b      	str	r3, [r7, #68]	; 0x44
 8004c3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c40:	e841 2300 	strex	r3, r2, [r1]
 8004c44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e4      	bne.n	8004c16 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3308      	adds	r3, #8
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	e853 3f00 	ldrex	r3, [r3]
 8004c5a:	623b      	str	r3, [r7, #32]
   return(result);
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	f023 0301 	bic.w	r3, r3, #1
 8004c62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3308      	adds	r3, #8
 8004c6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c70:	633a      	str	r2, [r7, #48]	; 0x30
 8004c72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e3      	bne.n	8004c4c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	e853 3f00 	ldrex	r3, [r3]
 8004ca4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f023 0310 	bic.w	r3, r3, #16
 8004cac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004cba:	61fb      	str	r3, [r7, #28]
 8004cbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	69b9      	ldr	r1, [r7, #24]
 8004cc0:	69fa      	ldr	r2, [r7, #28]
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	617b      	str	r3, [r7, #20]
   return(result);
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e4      	bne.n	8004c98 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cd8:	4619      	mov	r1, r3
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f846 	bl	8004d6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ce0:	e02a      	b.n	8004d38 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00e      	beq.n	8004d0c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d008      	beq.n	8004d0c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d01c      	beq.n	8004d3c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	4798      	blx	r3
    }
    return;
 8004d0a:	e017      	b.n	8004d3c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d012      	beq.n	8004d3e <HAL_UART_IRQHandler+0x59e>
 8004d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00c      	beq.n	8004d3e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 fd71 	bl	800580c <UART_EndTransmit_IT>
    return;
 8004d2a:	e008      	b.n	8004d3e <HAL_UART_IRQHandler+0x59e>
      return;
 8004d2c:	bf00      	nop
 8004d2e:	e006      	b.n	8004d3e <HAL_UART_IRQHandler+0x59e>
    return;
 8004d30:	bf00      	nop
 8004d32:	e004      	b.n	8004d3e <HAL_UART_IRQHandler+0x59e>
      return;
 8004d34:	bf00      	nop
 8004d36:	e002      	b.n	8004d3e <HAL_UART_IRQHandler+0x59e>
      return;
 8004d38:	bf00      	nop
 8004d3a:	e000      	b.n	8004d3e <HAL_UART_IRQHandler+0x59e>
    return;
 8004d3c:	bf00      	nop
  }

}
 8004d3e:	37e8      	adds	r7, #232	; 0xe8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b088      	sub	sp, #32
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	4ba6      	ldr	r3, [pc, #664]	; (8005048 <UART_SetConfig+0x2c4>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6812      	ldr	r2, [r2, #0]
 8004db6:	6979      	ldr	r1, [r7, #20]
 8004db8:	430b      	orrs	r3, r1
 8004dba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a94      	ldr	r2, [pc, #592]	; (800504c <UART_SetConfig+0x2c8>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d120      	bne.n	8004e42 <UART_SetConfig+0xbe>
 8004e00:	4b93      	ldr	r3, [pc, #588]	; (8005050 <UART_SetConfig+0x2cc>)
 8004e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	2b03      	cmp	r3, #3
 8004e0c:	d816      	bhi.n	8004e3c <UART_SetConfig+0xb8>
 8004e0e:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <UART_SetConfig+0x90>)
 8004e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e14:	08004e25 	.word	0x08004e25
 8004e18:	08004e31 	.word	0x08004e31
 8004e1c:	08004e2b 	.word	0x08004e2b
 8004e20:	08004e37 	.word	0x08004e37
 8004e24:	2301      	movs	r3, #1
 8004e26:	77fb      	strb	r3, [r7, #31]
 8004e28:	e150      	b.n	80050cc <UART_SetConfig+0x348>
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	77fb      	strb	r3, [r7, #31]
 8004e2e:	e14d      	b.n	80050cc <UART_SetConfig+0x348>
 8004e30:	2304      	movs	r3, #4
 8004e32:	77fb      	strb	r3, [r7, #31]
 8004e34:	e14a      	b.n	80050cc <UART_SetConfig+0x348>
 8004e36:	2308      	movs	r3, #8
 8004e38:	77fb      	strb	r3, [r7, #31]
 8004e3a:	e147      	b.n	80050cc <UART_SetConfig+0x348>
 8004e3c:	2310      	movs	r3, #16
 8004e3e:	77fb      	strb	r3, [r7, #31]
 8004e40:	e144      	b.n	80050cc <UART_SetConfig+0x348>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a83      	ldr	r2, [pc, #524]	; (8005054 <UART_SetConfig+0x2d0>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d132      	bne.n	8004eb2 <UART_SetConfig+0x12e>
 8004e4c:	4b80      	ldr	r3, [pc, #512]	; (8005050 <UART_SetConfig+0x2cc>)
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e52:	f003 030c 	and.w	r3, r3, #12
 8004e56:	2b0c      	cmp	r3, #12
 8004e58:	d828      	bhi.n	8004eac <UART_SetConfig+0x128>
 8004e5a:	a201      	add	r2, pc, #4	; (adr r2, 8004e60 <UART_SetConfig+0xdc>)
 8004e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e60:	08004e95 	.word	0x08004e95
 8004e64:	08004ead 	.word	0x08004ead
 8004e68:	08004ead 	.word	0x08004ead
 8004e6c:	08004ead 	.word	0x08004ead
 8004e70:	08004ea1 	.word	0x08004ea1
 8004e74:	08004ead 	.word	0x08004ead
 8004e78:	08004ead 	.word	0x08004ead
 8004e7c:	08004ead 	.word	0x08004ead
 8004e80:	08004e9b 	.word	0x08004e9b
 8004e84:	08004ead 	.word	0x08004ead
 8004e88:	08004ead 	.word	0x08004ead
 8004e8c:	08004ead 	.word	0x08004ead
 8004e90:	08004ea7 	.word	0x08004ea7
 8004e94:	2300      	movs	r3, #0
 8004e96:	77fb      	strb	r3, [r7, #31]
 8004e98:	e118      	b.n	80050cc <UART_SetConfig+0x348>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	77fb      	strb	r3, [r7, #31]
 8004e9e:	e115      	b.n	80050cc <UART_SetConfig+0x348>
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	77fb      	strb	r3, [r7, #31]
 8004ea4:	e112      	b.n	80050cc <UART_SetConfig+0x348>
 8004ea6:	2308      	movs	r3, #8
 8004ea8:	77fb      	strb	r3, [r7, #31]
 8004eaa:	e10f      	b.n	80050cc <UART_SetConfig+0x348>
 8004eac:	2310      	movs	r3, #16
 8004eae:	77fb      	strb	r3, [r7, #31]
 8004eb0:	e10c      	b.n	80050cc <UART_SetConfig+0x348>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a68      	ldr	r2, [pc, #416]	; (8005058 <UART_SetConfig+0x2d4>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d120      	bne.n	8004efe <UART_SetConfig+0x17a>
 8004ebc:	4b64      	ldr	r3, [pc, #400]	; (8005050 <UART_SetConfig+0x2cc>)
 8004ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ec6:	2b30      	cmp	r3, #48	; 0x30
 8004ec8:	d013      	beq.n	8004ef2 <UART_SetConfig+0x16e>
 8004eca:	2b30      	cmp	r3, #48	; 0x30
 8004ecc:	d814      	bhi.n	8004ef8 <UART_SetConfig+0x174>
 8004ece:	2b20      	cmp	r3, #32
 8004ed0:	d009      	beq.n	8004ee6 <UART_SetConfig+0x162>
 8004ed2:	2b20      	cmp	r3, #32
 8004ed4:	d810      	bhi.n	8004ef8 <UART_SetConfig+0x174>
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <UART_SetConfig+0x15c>
 8004eda:	2b10      	cmp	r3, #16
 8004edc:	d006      	beq.n	8004eec <UART_SetConfig+0x168>
 8004ede:	e00b      	b.n	8004ef8 <UART_SetConfig+0x174>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	77fb      	strb	r3, [r7, #31]
 8004ee4:	e0f2      	b.n	80050cc <UART_SetConfig+0x348>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	77fb      	strb	r3, [r7, #31]
 8004eea:	e0ef      	b.n	80050cc <UART_SetConfig+0x348>
 8004eec:	2304      	movs	r3, #4
 8004eee:	77fb      	strb	r3, [r7, #31]
 8004ef0:	e0ec      	b.n	80050cc <UART_SetConfig+0x348>
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	77fb      	strb	r3, [r7, #31]
 8004ef6:	e0e9      	b.n	80050cc <UART_SetConfig+0x348>
 8004ef8:	2310      	movs	r3, #16
 8004efa:	77fb      	strb	r3, [r7, #31]
 8004efc:	e0e6      	b.n	80050cc <UART_SetConfig+0x348>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a56      	ldr	r2, [pc, #344]	; (800505c <UART_SetConfig+0x2d8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d120      	bne.n	8004f4a <UART_SetConfig+0x1c6>
 8004f08:	4b51      	ldr	r3, [pc, #324]	; (8005050 <UART_SetConfig+0x2cc>)
 8004f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f12:	2bc0      	cmp	r3, #192	; 0xc0
 8004f14:	d013      	beq.n	8004f3e <UART_SetConfig+0x1ba>
 8004f16:	2bc0      	cmp	r3, #192	; 0xc0
 8004f18:	d814      	bhi.n	8004f44 <UART_SetConfig+0x1c0>
 8004f1a:	2b80      	cmp	r3, #128	; 0x80
 8004f1c:	d009      	beq.n	8004f32 <UART_SetConfig+0x1ae>
 8004f1e:	2b80      	cmp	r3, #128	; 0x80
 8004f20:	d810      	bhi.n	8004f44 <UART_SetConfig+0x1c0>
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <UART_SetConfig+0x1a8>
 8004f26:	2b40      	cmp	r3, #64	; 0x40
 8004f28:	d006      	beq.n	8004f38 <UART_SetConfig+0x1b4>
 8004f2a:	e00b      	b.n	8004f44 <UART_SetConfig+0x1c0>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	77fb      	strb	r3, [r7, #31]
 8004f30:	e0cc      	b.n	80050cc <UART_SetConfig+0x348>
 8004f32:	2302      	movs	r3, #2
 8004f34:	77fb      	strb	r3, [r7, #31]
 8004f36:	e0c9      	b.n	80050cc <UART_SetConfig+0x348>
 8004f38:	2304      	movs	r3, #4
 8004f3a:	77fb      	strb	r3, [r7, #31]
 8004f3c:	e0c6      	b.n	80050cc <UART_SetConfig+0x348>
 8004f3e:	2308      	movs	r3, #8
 8004f40:	77fb      	strb	r3, [r7, #31]
 8004f42:	e0c3      	b.n	80050cc <UART_SetConfig+0x348>
 8004f44:	2310      	movs	r3, #16
 8004f46:	77fb      	strb	r3, [r7, #31]
 8004f48:	e0c0      	b.n	80050cc <UART_SetConfig+0x348>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a44      	ldr	r2, [pc, #272]	; (8005060 <UART_SetConfig+0x2dc>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d125      	bne.n	8004fa0 <UART_SetConfig+0x21c>
 8004f54:	4b3e      	ldr	r3, [pc, #248]	; (8005050 <UART_SetConfig+0x2cc>)
 8004f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f62:	d017      	beq.n	8004f94 <UART_SetConfig+0x210>
 8004f64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f68:	d817      	bhi.n	8004f9a <UART_SetConfig+0x216>
 8004f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f6e:	d00b      	beq.n	8004f88 <UART_SetConfig+0x204>
 8004f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f74:	d811      	bhi.n	8004f9a <UART_SetConfig+0x216>
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <UART_SetConfig+0x1fe>
 8004f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f7e:	d006      	beq.n	8004f8e <UART_SetConfig+0x20a>
 8004f80:	e00b      	b.n	8004f9a <UART_SetConfig+0x216>
 8004f82:	2300      	movs	r3, #0
 8004f84:	77fb      	strb	r3, [r7, #31]
 8004f86:	e0a1      	b.n	80050cc <UART_SetConfig+0x348>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	77fb      	strb	r3, [r7, #31]
 8004f8c:	e09e      	b.n	80050cc <UART_SetConfig+0x348>
 8004f8e:	2304      	movs	r3, #4
 8004f90:	77fb      	strb	r3, [r7, #31]
 8004f92:	e09b      	b.n	80050cc <UART_SetConfig+0x348>
 8004f94:	2308      	movs	r3, #8
 8004f96:	77fb      	strb	r3, [r7, #31]
 8004f98:	e098      	b.n	80050cc <UART_SetConfig+0x348>
 8004f9a:	2310      	movs	r3, #16
 8004f9c:	77fb      	strb	r3, [r7, #31]
 8004f9e:	e095      	b.n	80050cc <UART_SetConfig+0x348>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a2f      	ldr	r2, [pc, #188]	; (8005064 <UART_SetConfig+0x2e0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d125      	bne.n	8004ff6 <UART_SetConfig+0x272>
 8004faa:	4b29      	ldr	r3, [pc, #164]	; (8005050 <UART_SetConfig+0x2cc>)
 8004fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fb8:	d017      	beq.n	8004fea <UART_SetConfig+0x266>
 8004fba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fbe:	d817      	bhi.n	8004ff0 <UART_SetConfig+0x26c>
 8004fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fc4:	d00b      	beq.n	8004fde <UART_SetConfig+0x25a>
 8004fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fca:	d811      	bhi.n	8004ff0 <UART_SetConfig+0x26c>
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <UART_SetConfig+0x254>
 8004fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd4:	d006      	beq.n	8004fe4 <UART_SetConfig+0x260>
 8004fd6:	e00b      	b.n	8004ff0 <UART_SetConfig+0x26c>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	77fb      	strb	r3, [r7, #31]
 8004fdc:	e076      	b.n	80050cc <UART_SetConfig+0x348>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	77fb      	strb	r3, [r7, #31]
 8004fe2:	e073      	b.n	80050cc <UART_SetConfig+0x348>
 8004fe4:	2304      	movs	r3, #4
 8004fe6:	77fb      	strb	r3, [r7, #31]
 8004fe8:	e070      	b.n	80050cc <UART_SetConfig+0x348>
 8004fea:	2308      	movs	r3, #8
 8004fec:	77fb      	strb	r3, [r7, #31]
 8004fee:	e06d      	b.n	80050cc <UART_SetConfig+0x348>
 8004ff0:	2310      	movs	r3, #16
 8004ff2:	77fb      	strb	r3, [r7, #31]
 8004ff4:	e06a      	b.n	80050cc <UART_SetConfig+0x348>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a1b      	ldr	r2, [pc, #108]	; (8005068 <UART_SetConfig+0x2e4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d138      	bne.n	8005072 <UART_SetConfig+0x2ee>
 8005000:	4b13      	ldr	r3, [pc, #76]	; (8005050 <UART_SetConfig+0x2cc>)
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005006:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800500a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800500e:	d017      	beq.n	8005040 <UART_SetConfig+0x2bc>
 8005010:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005014:	d82a      	bhi.n	800506c <UART_SetConfig+0x2e8>
 8005016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800501a:	d00b      	beq.n	8005034 <UART_SetConfig+0x2b0>
 800501c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005020:	d824      	bhi.n	800506c <UART_SetConfig+0x2e8>
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <UART_SetConfig+0x2aa>
 8005026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800502a:	d006      	beq.n	800503a <UART_SetConfig+0x2b6>
 800502c:	e01e      	b.n	800506c <UART_SetConfig+0x2e8>
 800502e:	2300      	movs	r3, #0
 8005030:	77fb      	strb	r3, [r7, #31]
 8005032:	e04b      	b.n	80050cc <UART_SetConfig+0x348>
 8005034:	2302      	movs	r3, #2
 8005036:	77fb      	strb	r3, [r7, #31]
 8005038:	e048      	b.n	80050cc <UART_SetConfig+0x348>
 800503a:	2304      	movs	r3, #4
 800503c:	77fb      	strb	r3, [r7, #31]
 800503e:	e045      	b.n	80050cc <UART_SetConfig+0x348>
 8005040:	2308      	movs	r3, #8
 8005042:	77fb      	strb	r3, [r7, #31]
 8005044:	e042      	b.n	80050cc <UART_SetConfig+0x348>
 8005046:	bf00      	nop
 8005048:	efff69f3 	.word	0xefff69f3
 800504c:	40011000 	.word	0x40011000
 8005050:	40023800 	.word	0x40023800
 8005054:	40004400 	.word	0x40004400
 8005058:	40004800 	.word	0x40004800
 800505c:	40004c00 	.word	0x40004c00
 8005060:	40005000 	.word	0x40005000
 8005064:	40011400 	.word	0x40011400
 8005068:	40007800 	.word	0x40007800
 800506c:	2310      	movs	r3, #16
 800506e:	77fb      	strb	r3, [r7, #31]
 8005070:	e02c      	b.n	80050cc <UART_SetConfig+0x348>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a72      	ldr	r2, [pc, #456]	; (8005240 <UART_SetConfig+0x4bc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d125      	bne.n	80050c8 <UART_SetConfig+0x344>
 800507c:	4b71      	ldr	r3, [pc, #452]	; (8005244 <UART_SetConfig+0x4c0>)
 800507e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005082:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005086:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800508a:	d017      	beq.n	80050bc <UART_SetConfig+0x338>
 800508c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005090:	d817      	bhi.n	80050c2 <UART_SetConfig+0x33e>
 8005092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005096:	d00b      	beq.n	80050b0 <UART_SetConfig+0x32c>
 8005098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800509c:	d811      	bhi.n	80050c2 <UART_SetConfig+0x33e>
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <UART_SetConfig+0x326>
 80050a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050a6:	d006      	beq.n	80050b6 <UART_SetConfig+0x332>
 80050a8:	e00b      	b.n	80050c2 <UART_SetConfig+0x33e>
 80050aa:	2300      	movs	r3, #0
 80050ac:	77fb      	strb	r3, [r7, #31]
 80050ae:	e00d      	b.n	80050cc <UART_SetConfig+0x348>
 80050b0:	2302      	movs	r3, #2
 80050b2:	77fb      	strb	r3, [r7, #31]
 80050b4:	e00a      	b.n	80050cc <UART_SetConfig+0x348>
 80050b6:	2304      	movs	r3, #4
 80050b8:	77fb      	strb	r3, [r7, #31]
 80050ba:	e007      	b.n	80050cc <UART_SetConfig+0x348>
 80050bc:	2308      	movs	r3, #8
 80050be:	77fb      	strb	r3, [r7, #31]
 80050c0:	e004      	b.n	80050cc <UART_SetConfig+0x348>
 80050c2:	2310      	movs	r3, #16
 80050c4:	77fb      	strb	r3, [r7, #31]
 80050c6:	e001      	b.n	80050cc <UART_SetConfig+0x348>
 80050c8:	2310      	movs	r3, #16
 80050ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d4:	d15b      	bne.n	800518e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80050d6:	7ffb      	ldrb	r3, [r7, #31]
 80050d8:	2b08      	cmp	r3, #8
 80050da:	d828      	bhi.n	800512e <UART_SetConfig+0x3aa>
 80050dc:	a201      	add	r2, pc, #4	; (adr r2, 80050e4 <UART_SetConfig+0x360>)
 80050de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e2:	bf00      	nop
 80050e4:	08005109 	.word	0x08005109
 80050e8:	08005111 	.word	0x08005111
 80050ec:	08005119 	.word	0x08005119
 80050f0:	0800512f 	.word	0x0800512f
 80050f4:	0800511f 	.word	0x0800511f
 80050f8:	0800512f 	.word	0x0800512f
 80050fc:	0800512f 	.word	0x0800512f
 8005100:	0800512f 	.word	0x0800512f
 8005104:	08005127 	.word	0x08005127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005108:	f7fe f9d8 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 800510c:	61b8      	str	r0, [r7, #24]
        break;
 800510e:	e013      	b.n	8005138 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005110:	f7fe f9e8 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 8005114:	61b8      	str	r0, [r7, #24]
        break;
 8005116:	e00f      	b.n	8005138 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005118:	4b4b      	ldr	r3, [pc, #300]	; (8005248 <UART_SetConfig+0x4c4>)
 800511a:	61bb      	str	r3, [r7, #24]
        break;
 800511c:	e00c      	b.n	8005138 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800511e:	f7fe f8bb 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8005122:	61b8      	str	r0, [r7, #24]
        break;
 8005124:	e008      	b.n	8005138 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800512a:	61bb      	str	r3, [r7, #24]
        break;
 800512c:	e004      	b.n	8005138 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	77bb      	strb	r3, [r7, #30]
        break;
 8005136:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d074      	beq.n	8005228 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	005a      	lsls	r2, r3, #1
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	085b      	lsrs	r3, r3, #1
 8005148:	441a      	add	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005152:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	2b0f      	cmp	r3, #15
 8005158:	d916      	bls.n	8005188 <UART_SetConfig+0x404>
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005160:	d212      	bcs.n	8005188 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	b29b      	uxth	r3, r3
 8005166:	f023 030f 	bic.w	r3, r3, #15
 800516a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	085b      	lsrs	r3, r3, #1
 8005170:	b29b      	uxth	r3, r3
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	b29a      	uxth	r2, r3
 8005178:	89fb      	ldrh	r3, [r7, #14]
 800517a:	4313      	orrs	r3, r2
 800517c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	89fa      	ldrh	r2, [r7, #14]
 8005184:	60da      	str	r2, [r3, #12]
 8005186:	e04f      	b.n	8005228 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	77bb      	strb	r3, [r7, #30]
 800518c:	e04c      	b.n	8005228 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800518e:	7ffb      	ldrb	r3, [r7, #31]
 8005190:	2b08      	cmp	r3, #8
 8005192:	d828      	bhi.n	80051e6 <UART_SetConfig+0x462>
 8005194:	a201      	add	r2, pc, #4	; (adr r2, 800519c <UART_SetConfig+0x418>)
 8005196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519a:	bf00      	nop
 800519c:	080051c1 	.word	0x080051c1
 80051a0:	080051c9 	.word	0x080051c9
 80051a4:	080051d1 	.word	0x080051d1
 80051a8:	080051e7 	.word	0x080051e7
 80051ac:	080051d7 	.word	0x080051d7
 80051b0:	080051e7 	.word	0x080051e7
 80051b4:	080051e7 	.word	0x080051e7
 80051b8:	080051e7 	.word	0x080051e7
 80051bc:	080051df 	.word	0x080051df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051c0:	f7fe f97c 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 80051c4:	61b8      	str	r0, [r7, #24]
        break;
 80051c6:	e013      	b.n	80051f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051c8:	f7fe f98c 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 80051cc:	61b8      	str	r0, [r7, #24]
        break;
 80051ce:	e00f      	b.n	80051f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051d0:	4b1d      	ldr	r3, [pc, #116]	; (8005248 <UART_SetConfig+0x4c4>)
 80051d2:	61bb      	str	r3, [r7, #24]
        break;
 80051d4:	e00c      	b.n	80051f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051d6:	f7fe f85f 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 80051da:	61b8      	str	r0, [r7, #24]
        break;
 80051dc:	e008      	b.n	80051f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051e2:	61bb      	str	r3, [r7, #24]
        break;
 80051e4:	e004      	b.n	80051f0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	77bb      	strb	r3, [r7, #30]
        break;
 80051ee:	bf00      	nop
    }

    if (pclk != 0U)
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d018      	beq.n	8005228 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	085a      	lsrs	r2, r3, #1
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	441a      	add	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	fbb2 f3f3 	udiv	r3, r2, r3
 8005208:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2b0f      	cmp	r3, #15
 800520e:	d909      	bls.n	8005224 <UART_SetConfig+0x4a0>
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005216:	d205      	bcs.n	8005224 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	b29a      	uxth	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	60da      	str	r2, [r3, #12]
 8005222:	e001      	b.n	8005228 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005234:	7fbb      	ldrb	r3, [r7, #30]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3720      	adds	r7, #32
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	40007c00 	.word	0x40007c00
 8005244:	40023800 	.word	0x40023800
 8005248:	00f42400 	.word	0x00f42400

0800524c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00a      	beq.n	8005276 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e0:	f003 0310 	and.w	r3, r3, #16
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00a      	beq.n	80052fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01a      	beq.n	8005362 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800534a:	d10a      	bne.n	8005362 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	605a      	str	r2, [r3, #4]
  }
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af02      	add	r7, sp, #8
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053a0:	f7fc fc0c 	bl	8001bbc <HAL_GetTick>
 80053a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d10e      	bne.n	80053d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f81b 	bl	80053fe <UART_WaitOnFlagUntilTimeout>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e011      	b.n	80053f6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2220      	movs	r2, #32
 80053d6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2220      	movs	r2, #32
 80053dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b09c      	sub	sp, #112	; 0x70
 8005402:	af00      	add	r7, sp, #0
 8005404:	60f8      	str	r0, [r7, #12]
 8005406:	60b9      	str	r1, [r7, #8]
 8005408:	603b      	str	r3, [r7, #0]
 800540a:	4613      	mov	r3, r2
 800540c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800540e:	e0a7      	b.n	8005560 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005416:	f000 80a3 	beq.w	8005560 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800541a:	f7fc fbcf 	bl	8001bbc <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005426:	429a      	cmp	r2, r3
 8005428:	d302      	bcc.n	8005430 <UART_WaitOnFlagUntilTimeout+0x32>
 800542a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800542c:	2b00      	cmp	r3, #0
 800542e:	d13f      	bne.n	80054b0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005438:	e853 3f00 	ldrex	r3, [r3]
 800543c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800543e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005440:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005444:	667b      	str	r3, [r7, #100]	; 0x64
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800544e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005450:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005452:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005454:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005456:	e841 2300 	strex	r3, r2, [r1]
 800545a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800545c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1e6      	bne.n	8005430 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3308      	adds	r3, #8
 8005468:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800546c:	e853 3f00 	ldrex	r3, [r3]
 8005470:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005474:	f023 0301 	bic.w	r3, r3, #1
 8005478:	663b      	str	r3, [r7, #96]	; 0x60
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3308      	adds	r3, #8
 8005480:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005482:	64ba      	str	r2, [r7, #72]	; 0x48
 8005484:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005486:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005488:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800548a:	e841 2300 	strex	r3, r2, [r1]
 800548e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1e5      	bne.n	8005462 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2220      	movs	r2, #32
 800549a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2220      	movs	r2, #32
 80054a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e068      	b.n	8005582 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d050      	beq.n	8005560 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054cc:	d148      	bne.n	8005560 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054d6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e0:	e853 3f00 	ldrex	r3, [r3]
 80054e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f6:	637b      	str	r3, [r7, #52]	; 0x34
 80054f8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054fe:	e841 2300 	strex	r3, r2, [r1]
 8005502:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1e6      	bne.n	80054d8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3308      	adds	r3, #8
 8005510:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	613b      	str	r3, [r7, #16]
   return(result);
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f023 0301 	bic.w	r3, r3, #1
 8005520:	66bb      	str	r3, [r7, #104]	; 0x68
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3308      	adds	r3, #8
 8005528:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800552a:	623a      	str	r2, [r7, #32]
 800552c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552e:	69f9      	ldr	r1, [r7, #28]
 8005530:	6a3a      	ldr	r2, [r7, #32]
 8005532:	e841 2300 	strex	r3, r2, [r1]
 8005536:	61bb      	str	r3, [r7, #24]
   return(result);
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1e5      	bne.n	800550a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2220      	movs	r2, #32
 8005542:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2220      	movs	r2, #32
 8005548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2220      	movs	r2, #32
 8005550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e010      	b.n	8005582 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69da      	ldr	r2, [r3, #28]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	4013      	ands	r3, r2
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	429a      	cmp	r2, r3
 800556e:	bf0c      	ite	eq
 8005570:	2301      	moveq	r3, #1
 8005572:	2300      	movne	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	461a      	mov	r2, r3
 8005578:	79fb      	ldrb	r3, [r7, #7]
 800557a:	429a      	cmp	r2, r3
 800557c:	f43f af48 	beq.w	8005410 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3770      	adds	r7, #112	; 0x70
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800558c:	b480      	push	{r7}
 800558e:	b097      	sub	sp, #92	; 0x5c
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	4613      	mov	r3, r2
 8005598:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	88fa      	ldrh	r2, [r7, #6]
 80055a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	88fa      	ldrh	r2, [r7, #6]
 80055ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055be:	d10e      	bne.n	80055de <UART_Start_Receive_IT+0x52>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d105      	bne.n	80055d4 <UART_Start_Receive_IT+0x48>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80055ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055d2:	e02d      	b.n	8005630 <UART_Start_Receive_IT+0xa4>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	22ff      	movs	r2, #255	; 0xff
 80055d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055dc:	e028      	b.n	8005630 <UART_Start_Receive_IT+0xa4>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10d      	bne.n	8005602 <UART_Start_Receive_IT+0x76>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d104      	bne.n	80055f8 <UART_Start_Receive_IT+0x6c>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	22ff      	movs	r2, #255	; 0xff
 80055f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055f6:	e01b      	b.n	8005630 <UART_Start_Receive_IT+0xa4>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	227f      	movs	r2, #127	; 0x7f
 80055fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005600:	e016      	b.n	8005630 <UART_Start_Receive_IT+0xa4>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800560a:	d10d      	bne.n	8005628 <UART_Start_Receive_IT+0x9c>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d104      	bne.n	800561e <UART_Start_Receive_IT+0x92>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	227f      	movs	r2, #127	; 0x7f
 8005618:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800561c:	e008      	b.n	8005630 <UART_Start_Receive_IT+0xa4>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	223f      	movs	r2, #63	; 0x3f
 8005622:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005626:	e003      	b.n	8005630 <UART_Start_Receive_IT+0xa4>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2222      	movs	r2, #34	; 0x22
 800563c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3308      	adds	r3, #8
 8005646:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800564a:	e853 3f00 	ldrex	r3, [r3]
 800564e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005652:	f043 0301 	orr.w	r3, r3, #1
 8005656:	657b      	str	r3, [r7, #84]	; 0x54
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3308      	adds	r3, #8
 800565e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005660:	64ba      	str	r2, [r7, #72]	; 0x48
 8005662:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005664:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005668:	e841 2300 	strex	r3, r2, [r1]
 800566c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800566e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1e5      	bne.n	8005640 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800567c:	d107      	bne.n	800568e <UART_Start_Receive_IT+0x102>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d103      	bne.n	800568e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4a21      	ldr	r2, [pc, #132]	; (8005710 <UART_Start_Receive_IT+0x184>)
 800568a:	669a      	str	r2, [r3, #104]	; 0x68
 800568c:	e002      	b.n	8005694 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	4a20      	ldr	r2, [pc, #128]	; (8005714 <UART_Start_Receive_IT+0x188>)
 8005692:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d019      	beq.n	80056d0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ac:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80056b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ba:	637b      	str	r3, [r7, #52]	; 0x34
 80056bc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e6      	bne.n	800569c <UART_Start_Receive_IT+0x110>
 80056ce:	e018      	b.n	8005702 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	e853 3f00 	ldrex	r3, [r3]
 80056dc:	613b      	str	r3, [r7, #16]
   return(result);
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f043 0320 	orr.w	r3, r3, #32
 80056e4:	653b      	str	r3, [r7, #80]	; 0x50
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056ee:	623b      	str	r3, [r7, #32]
 80056f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f2:	69f9      	ldr	r1, [r7, #28]
 80056f4:	6a3a      	ldr	r2, [r7, #32]
 80056f6:	e841 2300 	strex	r3, r2, [r1]
 80056fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1e6      	bne.n	80056d0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	375c      	adds	r7, #92	; 0x5c
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	080059c7 	.word	0x080059c7
 8005714:	08005861 	.word	0x08005861

08005718 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005718:	b480      	push	{r7}
 800571a:	b095      	sub	sp, #84	; 0x54
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005728:	e853 3f00 	ldrex	r3, [r3]
 800572c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005734:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800573e:	643b      	str	r3, [r7, #64]	; 0x40
 8005740:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005744:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005746:	e841 2300 	strex	r3, r2, [r1]
 800574a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800574c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1e6      	bne.n	8005720 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3308      	adds	r3, #8
 8005758:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	e853 3f00 	ldrex	r3, [r3]
 8005760:	61fb      	str	r3, [r7, #28]
   return(result);
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	f023 0301 	bic.w	r3, r3, #1
 8005768:	64bb      	str	r3, [r7, #72]	; 0x48
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3308      	adds	r3, #8
 8005770:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005772:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005774:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005776:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e5      	bne.n	8005752 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800578a:	2b01      	cmp	r3, #1
 800578c:	d118      	bne.n	80057c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	e853 3f00 	ldrex	r3, [r3]
 800579a:	60bb      	str	r3, [r7, #8]
   return(result);
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f023 0310 	bic.w	r3, r3, #16
 80057a2:	647b      	str	r3, [r7, #68]	; 0x44
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	461a      	mov	r2, r3
 80057aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b0:	6979      	ldr	r1, [r7, #20]
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	e841 2300 	strex	r3, r2, [r1]
 80057b8:	613b      	str	r3, [r7, #16]
   return(result);
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e6      	bne.n	800578e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2220      	movs	r2, #32
 80057c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80057d4:	bf00      	nop
 80057d6:	3754      	adds	r7, #84	; 0x54
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f7ff faaa 	bl	8004d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005804:	bf00      	nop
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	60bb      	str	r3, [r7, #8]
   return(result);
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005828:	61fb      	str	r3, [r7, #28]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	61bb      	str	r3, [r7, #24]
 8005834:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6979      	ldr	r1, [r7, #20]
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	613b      	str	r3, [r7, #16]
   return(result);
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e6      	bne.n	8005814 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2220      	movs	r2, #32
 800584a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7ff fa76 	bl	8004d44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005858:	bf00      	nop
 800585a:	3720      	adds	r7, #32
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b096      	sub	sp, #88	; 0x58
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800586e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005878:	2b22      	cmp	r3, #34	; 0x22
 800587a:	f040 8098 	bne.w	80059ae <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005888:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800588c:	b2d9      	uxtb	r1, r3
 800588e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005892:	b2da      	uxtb	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005898:	400a      	ands	r2, r1
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d17b      	bne.n	80059be <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058da:	653b      	str	r3, [r7, #80]	; 0x50
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	461a      	mov	r2, r3
 80058e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058e4:	647b      	str	r3, [r7, #68]	; 0x44
 80058e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058ec:	e841 2300 	strex	r3, r2, [r1]
 80058f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e6      	bne.n	80058c6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3308      	adds	r3, #8
 80058fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	e853 3f00 	ldrex	r3, [r3]
 8005906:	623b      	str	r3, [r7, #32]
   return(result);
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	f023 0301 	bic.w	r3, r3, #1
 800590e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3308      	adds	r3, #8
 8005916:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005918:	633a      	str	r2, [r7, #48]	; 0x30
 800591a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800591e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005920:	e841 2300 	strex	r3, r2, [r1]
 8005924:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e5      	bne.n	80058f8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2220      	movs	r2, #32
 8005930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005944:	2b01      	cmp	r3, #1
 8005946:	d12e      	bne.n	80059a6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	e853 3f00 	ldrex	r3, [r3]
 800595a:	60fb      	str	r3, [r7, #12]
   return(result);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f023 0310 	bic.w	r3, r3, #16
 8005962:	64bb      	str	r3, [r7, #72]	; 0x48
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	461a      	mov	r2, r3
 800596a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800596c:	61fb      	str	r3, [r7, #28]
 800596e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005970:	69b9      	ldr	r1, [r7, #24]
 8005972:	69fa      	ldr	r2, [r7, #28]
 8005974:	e841 2300 	strex	r3, r2, [r1]
 8005978:	617b      	str	r3, [r7, #20]
   return(result);
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1e6      	bne.n	800594e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	f003 0310 	and.w	r3, r3, #16
 800598a:	2b10      	cmp	r3, #16
 800598c:	d103      	bne.n	8005996 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2210      	movs	r2, #16
 8005994:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7ff f9e4 	bl	8004d6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059a4:	e00b      	b.n	80059be <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7fb fd76 	bl	8001498 <HAL_UART_RxCpltCallback>
}
 80059ac:	e007      	b.n	80059be <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	699a      	ldr	r2, [r3, #24]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f042 0208 	orr.w	r2, r2, #8
 80059bc:	619a      	str	r2, [r3, #24]
}
 80059be:	bf00      	nop
 80059c0:	3758      	adds	r7, #88	; 0x58
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b096      	sub	sp, #88	; 0x58
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80059d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059de:	2b22      	cmp	r3, #34	; 0x22
 80059e0:	f040 8098 	bne.w	8005b14 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ea:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80059f4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80059f8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80059fc:	4013      	ands	r3, r2
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a02:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a08:	1c9a      	adds	r2, r3, #2
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	3b01      	subs	r3, #1
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d17b      	bne.n	8005b24 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a34:	e853 3f00 	ldrex	r3, [r3]
 8005a38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	461a      	mov	r2, r3
 8005a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a4a:	643b      	str	r3, [r7, #64]	; 0x40
 8005a4c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a52:	e841 2300 	strex	r3, r2, [r1]
 8005a56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1e6      	bne.n	8005a2c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3308      	adds	r3, #8
 8005a64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	e853 3f00 	ldrex	r3, [r3]
 8005a6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	f023 0301 	bic.w	r3, r3, #1
 8005a74:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3308      	adds	r3, #8
 8005a7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a86:	e841 2300 	strex	r3, r2, [r1]
 8005a8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1e5      	bne.n	8005a5e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d12e      	bne.n	8005b0c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f023 0310 	bic.w	r3, r3, #16
 8005ac8:	647b      	str	r3, [r7, #68]	; 0x44
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ad2:	61bb      	str	r3, [r7, #24]
 8005ad4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	6979      	ldr	r1, [r7, #20]
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	e841 2300 	strex	r3, r2, [r1]
 8005ade:	613b      	str	r3, [r7, #16]
   return(result);
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1e6      	bne.n	8005ab4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	f003 0310 	and.w	r3, r3, #16
 8005af0:	2b10      	cmp	r3, #16
 8005af2:	d103      	bne.n	8005afc <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2210      	movs	r2, #16
 8005afa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b02:	4619      	mov	r1, r3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7ff f931 	bl	8004d6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b0a:	e00b      	b.n	8005b24 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7fb fcc3 	bl	8001498 <HAL_UART_RxCpltCallback>
}
 8005b12:	e007      	b.n	8005b24 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0208 	orr.w	r2, r2, #8
 8005b22:	619a      	str	r2, [r3, #24]
}
 8005b24:	bf00      	nop
 8005b26:	3758      	adds	r7, #88	; 0x58
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <DAC_SetVoltage>:
 */

#include "User_dac.h"

void DAC_SetVoltage(DAC_HandleTypeDef *hdac,uint32_t Channel, float Volt)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t value = Volt * (4096/3.3f);
 8005b3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b3e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005b64 <DAC_SetVoltage+0x38>
 8005b42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b4a:	ee17 3a90 	vmov	r3, s15
 8005b4e:	617b      	str	r3, [r7, #20]
	HAL_DAC_SetValue(hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value);
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	2200      	movs	r2, #0
 8005b54:	2100      	movs	r1, #0
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f7fc fa1b 	bl	8001f92 <HAL_DAC_SetValue>
}
 8005b5c:	bf00      	nop
 8005b5e:	3718      	adds	r7, #24
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	449b26ca 	.word	0x449b26ca

08005b68 <parse_control_Amplitiude>:
float parse_control_Amplitiude(char* msg_str)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
	int temp = 0;
 8005b70:	2300      	movs	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]
	sscanf(&msg_str[0], "%d", &temp);
 8005b74:	f107 030c 	add.w	r3, r7, #12
 8005b78:	461a      	mov	r2, r3
 8005b7a:	490a      	ldr	r1, [pc, #40]	; (8005ba4 <parse_control_Amplitiude+0x3c>)
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fa7d 	bl	800607c <siscanf>
	return (float)temp/1000;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	ee07 3a90 	vmov	s15, r3
 8005b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b8c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005ba8 <parse_control_Amplitiude+0x40>
 8005b90:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005b94:	eef0 7a66 	vmov.f32	s15, s13

}
 8005b98:	eeb0 0a67 	vmov.f32	s0, s15
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	0800a588 	.word	0x0800a588
 8005ba8:	447a0000 	.word	0x447a0000

08005bac <__errno>:
 8005bac:	4b01      	ldr	r3, [pc, #4]	; (8005bb4 <__errno+0x8>)
 8005bae:	6818      	ldr	r0, [r3, #0]
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	2000001c 	.word	0x2000001c

08005bb8 <__libc_init_array>:
 8005bb8:	b570      	push	{r4, r5, r6, lr}
 8005bba:	4d0d      	ldr	r5, [pc, #52]	; (8005bf0 <__libc_init_array+0x38>)
 8005bbc:	4c0d      	ldr	r4, [pc, #52]	; (8005bf4 <__libc_init_array+0x3c>)
 8005bbe:	1b64      	subs	r4, r4, r5
 8005bc0:	10a4      	asrs	r4, r4, #2
 8005bc2:	2600      	movs	r6, #0
 8005bc4:	42a6      	cmp	r6, r4
 8005bc6:	d109      	bne.n	8005bdc <__libc_init_array+0x24>
 8005bc8:	4d0b      	ldr	r5, [pc, #44]	; (8005bf8 <__libc_init_array+0x40>)
 8005bca:	4c0c      	ldr	r4, [pc, #48]	; (8005bfc <__libc_init_array+0x44>)
 8005bcc:	f004 fcce 	bl	800a56c <_init>
 8005bd0:	1b64      	subs	r4, r4, r5
 8005bd2:	10a4      	asrs	r4, r4, #2
 8005bd4:	2600      	movs	r6, #0
 8005bd6:	42a6      	cmp	r6, r4
 8005bd8:	d105      	bne.n	8005be6 <__libc_init_array+0x2e>
 8005bda:	bd70      	pop	{r4, r5, r6, pc}
 8005bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005be0:	4798      	blx	r3
 8005be2:	3601      	adds	r6, #1
 8005be4:	e7ee      	b.n	8005bc4 <__libc_init_array+0xc>
 8005be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bea:	4798      	blx	r3
 8005bec:	3601      	adds	r6, #1
 8005bee:	e7f2      	b.n	8005bd6 <__libc_init_array+0x1e>
 8005bf0:	0800ade0 	.word	0x0800ade0
 8005bf4:	0800ade0 	.word	0x0800ade0
 8005bf8:	0800ade0 	.word	0x0800ade0
 8005bfc:	0800ade4 	.word	0x0800ade4

08005c00 <memset>:
 8005c00:	4402      	add	r2, r0
 8005c02:	4603      	mov	r3, r0
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d100      	bne.n	8005c0a <memset+0xa>
 8005c08:	4770      	bx	lr
 8005c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c0e:	e7f9      	b.n	8005c04 <memset+0x4>

08005c10 <_scanf_float>:
 8005c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c14:	b087      	sub	sp, #28
 8005c16:	4617      	mov	r7, r2
 8005c18:	9303      	str	r3, [sp, #12]
 8005c1a:	688b      	ldr	r3, [r1, #8]
 8005c1c:	1e5a      	subs	r2, r3, #1
 8005c1e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005c22:	bf83      	ittte	hi
 8005c24:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005c28:	195b      	addhi	r3, r3, r5
 8005c2a:	9302      	strhi	r3, [sp, #8]
 8005c2c:	2300      	movls	r3, #0
 8005c2e:	bf86      	itte	hi
 8005c30:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005c34:	608b      	strhi	r3, [r1, #8]
 8005c36:	9302      	strls	r3, [sp, #8]
 8005c38:	680b      	ldr	r3, [r1, #0]
 8005c3a:	468b      	mov	fp, r1
 8005c3c:	2500      	movs	r5, #0
 8005c3e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005c42:	f84b 3b1c 	str.w	r3, [fp], #28
 8005c46:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005c4a:	4680      	mov	r8, r0
 8005c4c:	460c      	mov	r4, r1
 8005c4e:	465e      	mov	r6, fp
 8005c50:	46aa      	mov	sl, r5
 8005c52:	46a9      	mov	r9, r5
 8005c54:	9501      	str	r5, [sp, #4]
 8005c56:	68a2      	ldr	r2, [r4, #8]
 8005c58:	b152      	cbz	r2, 8005c70 <_scanf_float+0x60>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b4e      	cmp	r3, #78	; 0x4e
 8005c60:	d864      	bhi.n	8005d2c <_scanf_float+0x11c>
 8005c62:	2b40      	cmp	r3, #64	; 0x40
 8005c64:	d83c      	bhi.n	8005ce0 <_scanf_float+0xd0>
 8005c66:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005c6a:	b2c8      	uxtb	r0, r1
 8005c6c:	280e      	cmp	r0, #14
 8005c6e:	d93a      	bls.n	8005ce6 <_scanf_float+0xd6>
 8005c70:	f1b9 0f00 	cmp.w	r9, #0
 8005c74:	d003      	beq.n	8005c7e <_scanf_float+0x6e>
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c82:	f1ba 0f01 	cmp.w	sl, #1
 8005c86:	f200 8113 	bhi.w	8005eb0 <_scanf_float+0x2a0>
 8005c8a:	455e      	cmp	r6, fp
 8005c8c:	f200 8105 	bhi.w	8005e9a <_scanf_float+0x28a>
 8005c90:	2501      	movs	r5, #1
 8005c92:	4628      	mov	r0, r5
 8005c94:	b007      	add	sp, #28
 8005c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c9a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005c9e:	2a0d      	cmp	r2, #13
 8005ca0:	d8e6      	bhi.n	8005c70 <_scanf_float+0x60>
 8005ca2:	a101      	add	r1, pc, #4	; (adr r1, 8005ca8 <_scanf_float+0x98>)
 8005ca4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005ca8:	08005de7 	.word	0x08005de7
 8005cac:	08005c71 	.word	0x08005c71
 8005cb0:	08005c71 	.word	0x08005c71
 8005cb4:	08005c71 	.word	0x08005c71
 8005cb8:	08005e47 	.word	0x08005e47
 8005cbc:	08005e1f 	.word	0x08005e1f
 8005cc0:	08005c71 	.word	0x08005c71
 8005cc4:	08005c71 	.word	0x08005c71
 8005cc8:	08005df5 	.word	0x08005df5
 8005ccc:	08005c71 	.word	0x08005c71
 8005cd0:	08005c71 	.word	0x08005c71
 8005cd4:	08005c71 	.word	0x08005c71
 8005cd8:	08005c71 	.word	0x08005c71
 8005cdc:	08005dad 	.word	0x08005dad
 8005ce0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005ce4:	e7db      	b.n	8005c9e <_scanf_float+0x8e>
 8005ce6:	290e      	cmp	r1, #14
 8005ce8:	d8c2      	bhi.n	8005c70 <_scanf_float+0x60>
 8005cea:	a001      	add	r0, pc, #4	; (adr r0, 8005cf0 <_scanf_float+0xe0>)
 8005cec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005cf0:	08005d9f 	.word	0x08005d9f
 8005cf4:	08005c71 	.word	0x08005c71
 8005cf8:	08005d9f 	.word	0x08005d9f
 8005cfc:	08005e33 	.word	0x08005e33
 8005d00:	08005c71 	.word	0x08005c71
 8005d04:	08005d4d 	.word	0x08005d4d
 8005d08:	08005d89 	.word	0x08005d89
 8005d0c:	08005d89 	.word	0x08005d89
 8005d10:	08005d89 	.word	0x08005d89
 8005d14:	08005d89 	.word	0x08005d89
 8005d18:	08005d89 	.word	0x08005d89
 8005d1c:	08005d89 	.word	0x08005d89
 8005d20:	08005d89 	.word	0x08005d89
 8005d24:	08005d89 	.word	0x08005d89
 8005d28:	08005d89 	.word	0x08005d89
 8005d2c:	2b6e      	cmp	r3, #110	; 0x6e
 8005d2e:	d809      	bhi.n	8005d44 <_scanf_float+0x134>
 8005d30:	2b60      	cmp	r3, #96	; 0x60
 8005d32:	d8b2      	bhi.n	8005c9a <_scanf_float+0x8a>
 8005d34:	2b54      	cmp	r3, #84	; 0x54
 8005d36:	d077      	beq.n	8005e28 <_scanf_float+0x218>
 8005d38:	2b59      	cmp	r3, #89	; 0x59
 8005d3a:	d199      	bne.n	8005c70 <_scanf_float+0x60>
 8005d3c:	2d07      	cmp	r5, #7
 8005d3e:	d197      	bne.n	8005c70 <_scanf_float+0x60>
 8005d40:	2508      	movs	r5, #8
 8005d42:	e029      	b.n	8005d98 <_scanf_float+0x188>
 8005d44:	2b74      	cmp	r3, #116	; 0x74
 8005d46:	d06f      	beq.n	8005e28 <_scanf_float+0x218>
 8005d48:	2b79      	cmp	r3, #121	; 0x79
 8005d4a:	e7f6      	b.n	8005d3a <_scanf_float+0x12a>
 8005d4c:	6821      	ldr	r1, [r4, #0]
 8005d4e:	05c8      	lsls	r0, r1, #23
 8005d50:	d51a      	bpl.n	8005d88 <_scanf_float+0x178>
 8005d52:	9b02      	ldr	r3, [sp, #8]
 8005d54:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005d58:	6021      	str	r1, [r4, #0]
 8005d5a:	f109 0901 	add.w	r9, r9, #1
 8005d5e:	b11b      	cbz	r3, 8005d68 <_scanf_float+0x158>
 8005d60:	3b01      	subs	r3, #1
 8005d62:	3201      	adds	r2, #1
 8005d64:	9302      	str	r3, [sp, #8]
 8005d66:	60a2      	str	r2, [r4, #8]
 8005d68:	68a3      	ldr	r3, [r4, #8]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	60a3      	str	r3, [r4, #8]
 8005d6e:	6923      	ldr	r3, [r4, #16]
 8005d70:	3301      	adds	r3, #1
 8005d72:	6123      	str	r3, [r4, #16]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3b01      	subs	r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	607b      	str	r3, [r7, #4]
 8005d7c:	f340 8084 	ble.w	8005e88 <_scanf_float+0x278>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	3301      	adds	r3, #1
 8005d84:	603b      	str	r3, [r7, #0]
 8005d86:	e766      	b.n	8005c56 <_scanf_float+0x46>
 8005d88:	eb1a 0f05 	cmn.w	sl, r5
 8005d8c:	f47f af70 	bne.w	8005c70 <_scanf_float+0x60>
 8005d90:	6822      	ldr	r2, [r4, #0]
 8005d92:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005d96:	6022      	str	r2, [r4, #0]
 8005d98:	f806 3b01 	strb.w	r3, [r6], #1
 8005d9c:	e7e4      	b.n	8005d68 <_scanf_float+0x158>
 8005d9e:	6822      	ldr	r2, [r4, #0]
 8005da0:	0610      	lsls	r0, r2, #24
 8005da2:	f57f af65 	bpl.w	8005c70 <_scanf_float+0x60>
 8005da6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005daa:	e7f4      	b.n	8005d96 <_scanf_float+0x186>
 8005dac:	f1ba 0f00 	cmp.w	sl, #0
 8005db0:	d10e      	bne.n	8005dd0 <_scanf_float+0x1c0>
 8005db2:	f1b9 0f00 	cmp.w	r9, #0
 8005db6:	d10e      	bne.n	8005dd6 <_scanf_float+0x1c6>
 8005db8:	6822      	ldr	r2, [r4, #0]
 8005dba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005dbe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005dc2:	d108      	bne.n	8005dd6 <_scanf_float+0x1c6>
 8005dc4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005dc8:	6022      	str	r2, [r4, #0]
 8005dca:	f04f 0a01 	mov.w	sl, #1
 8005dce:	e7e3      	b.n	8005d98 <_scanf_float+0x188>
 8005dd0:	f1ba 0f02 	cmp.w	sl, #2
 8005dd4:	d055      	beq.n	8005e82 <_scanf_float+0x272>
 8005dd6:	2d01      	cmp	r5, #1
 8005dd8:	d002      	beq.n	8005de0 <_scanf_float+0x1d0>
 8005dda:	2d04      	cmp	r5, #4
 8005ddc:	f47f af48 	bne.w	8005c70 <_scanf_float+0x60>
 8005de0:	3501      	adds	r5, #1
 8005de2:	b2ed      	uxtb	r5, r5
 8005de4:	e7d8      	b.n	8005d98 <_scanf_float+0x188>
 8005de6:	f1ba 0f01 	cmp.w	sl, #1
 8005dea:	f47f af41 	bne.w	8005c70 <_scanf_float+0x60>
 8005dee:	f04f 0a02 	mov.w	sl, #2
 8005df2:	e7d1      	b.n	8005d98 <_scanf_float+0x188>
 8005df4:	b97d      	cbnz	r5, 8005e16 <_scanf_float+0x206>
 8005df6:	f1b9 0f00 	cmp.w	r9, #0
 8005dfa:	f47f af3c 	bne.w	8005c76 <_scanf_float+0x66>
 8005dfe:	6822      	ldr	r2, [r4, #0]
 8005e00:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005e04:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005e08:	f47f af39 	bne.w	8005c7e <_scanf_float+0x6e>
 8005e0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005e10:	6022      	str	r2, [r4, #0]
 8005e12:	2501      	movs	r5, #1
 8005e14:	e7c0      	b.n	8005d98 <_scanf_float+0x188>
 8005e16:	2d03      	cmp	r5, #3
 8005e18:	d0e2      	beq.n	8005de0 <_scanf_float+0x1d0>
 8005e1a:	2d05      	cmp	r5, #5
 8005e1c:	e7de      	b.n	8005ddc <_scanf_float+0x1cc>
 8005e1e:	2d02      	cmp	r5, #2
 8005e20:	f47f af26 	bne.w	8005c70 <_scanf_float+0x60>
 8005e24:	2503      	movs	r5, #3
 8005e26:	e7b7      	b.n	8005d98 <_scanf_float+0x188>
 8005e28:	2d06      	cmp	r5, #6
 8005e2a:	f47f af21 	bne.w	8005c70 <_scanf_float+0x60>
 8005e2e:	2507      	movs	r5, #7
 8005e30:	e7b2      	b.n	8005d98 <_scanf_float+0x188>
 8005e32:	6822      	ldr	r2, [r4, #0]
 8005e34:	0591      	lsls	r1, r2, #22
 8005e36:	f57f af1b 	bpl.w	8005c70 <_scanf_float+0x60>
 8005e3a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005e3e:	6022      	str	r2, [r4, #0]
 8005e40:	f8cd 9004 	str.w	r9, [sp, #4]
 8005e44:	e7a8      	b.n	8005d98 <_scanf_float+0x188>
 8005e46:	6822      	ldr	r2, [r4, #0]
 8005e48:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005e4c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005e50:	d006      	beq.n	8005e60 <_scanf_float+0x250>
 8005e52:	0550      	lsls	r0, r2, #21
 8005e54:	f57f af0c 	bpl.w	8005c70 <_scanf_float+0x60>
 8005e58:	f1b9 0f00 	cmp.w	r9, #0
 8005e5c:	f43f af0f 	beq.w	8005c7e <_scanf_float+0x6e>
 8005e60:	0591      	lsls	r1, r2, #22
 8005e62:	bf58      	it	pl
 8005e64:	9901      	ldrpl	r1, [sp, #4]
 8005e66:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005e6a:	bf58      	it	pl
 8005e6c:	eba9 0101 	subpl.w	r1, r9, r1
 8005e70:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005e74:	bf58      	it	pl
 8005e76:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005e7a:	6022      	str	r2, [r4, #0]
 8005e7c:	f04f 0900 	mov.w	r9, #0
 8005e80:	e78a      	b.n	8005d98 <_scanf_float+0x188>
 8005e82:	f04f 0a03 	mov.w	sl, #3
 8005e86:	e787      	b.n	8005d98 <_scanf_float+0x188>
 8005e88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005e8c:	4639      	mov	r1, r7
 8005e8e:	4640      	mov	r0, r8
 8005e90:	4798      	blx	r3
 8005e92:	2800      	cmp	r0, #0
 8005e94:	f43f aedf 	beq.w	8005c56 <_scanf_float+0x46>
 8005e98:	e6ea      	b.n	8005c70 <_scanf_float+0x60>
 8005e9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ea2:	463a      	mov	r2, r7
 8005ea4:	4640      	mov	r0, r8
 8005ea6:	4798      	blx	r3
 8005ea8:	6923      	ldr	r3, [r4, #16]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	6123      	str	r3, [r4, #16]
 8005eae:	e6ec      	b.n	8005c8a <_scanf_float+0x7a>
 8005eb0:	1e6b      	subs	r3, r5, #1
 8005eb2:	2b06      	cmp	r3, #6
 8005eb4:	d825      	bhi.n	8005f02 <_scanf_float+0x2f2>
 8005eb6:	2d02      	cmp	r5, #2
 8005eb8:	d836      	bhi.n	8005f28 <_scanf_float+0x318>
 8005eba:	455e      	cmp	r6, fp
 8005ebc:	f67f aee8 	bls.w	8005c90 <_scanf_float+0x80>
 8005ec0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ec4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ec8:	463a      	mov	r2, r7
 8005eca:	4640      	mov	r0, r8
 8005ecc:	4798      	blx	r3
 8005ece:	6923      	ldr	r3, [r4, #16]
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	6123      	str	r3, [r4, #16]
 8005ed4:	e7f1      	b.n	8005eba <_scanf_float+0x2aa>
 8005ed6:	9802      	ldr	r0, [sp, #8]
 8005ed8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005edc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005ee0:	9002      	str	r0, [sp, #8]
 8005ee2:	463a      	mov	r2, r7
 8005ee4:	4640      	mov	r0, r8
 8005ee6:	4798      	blx	r3
 8005ee8:	6923      	ldr	r3, [r4, #16]
 8005eea:	3b01      	subs	r3, #1
 8005eec:	6123      	str	r3, [r4, #16]
 8005eee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ef2:	fa5f fa8a 	uxtb.w	sl, sl
 8005ef6:	f1ba 0f02 	cmp.w	sl, #2
 8005efa:	d1ec      	bne.n	8005ed6 <_scanf_float+0x2c6>
 8005efc:	3d03      	subs	r5, #3
 8005efe:	b2ed      	uxtb	r5, r5
 8005f00:	1b76      	subs	r6, r6, r5
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	05da      	lsls	r2, r3, #23
 8005f06:	d52f      	bpl.n	8005f68 <_scanf_float+0x358>
 8005f08:	055b      	lsls	r3, r3, #21
 8005f0a:	d510      	bpl.n	8005f2e <_scanf_float+0x31e>
 8005f0c:	455e      	cmp	r6, fp
 8005f0e:	f67f aebf 	bls.w	8005c90 <_scanf_float+0x80>
 8005f12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f1a:	463a      	mov	r2, r7
 8005f1c:	4640      	mov	r0, r8
 8005f1e:	4798      	blx	r3
 8005f20:	6923      	ldr	r3, [r4, #16]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	6123      	str	r3, [r4, #16]
 8005f26:	e7f1      	b.n	8005f0c <_scanf_float+0x2fc>
 8005f28:	46aa      	mov	sl, r5
 8005f2a:	9602      	str	r6, [sp, #8]
 8005f2c:	e7df      	b.n	8005eee <_scanf_float+0x2de>
 8005f2e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005f32:	6923      	ldr	r3, [r4, #16]
 8005f34:	2965      	cmp	r1, #101	; 0x65
 8005f36:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f3a:	f106 35ff 	add.w	r5, r6, #4294967295
 8005f3e:	6123      	str	r3, [r4, #16]
 8005f40:	d00c      	beq.n	8005f5c <_scanf_float+0x34c>
 8005f42:	2945      	cmp	r1, #69	; 0x45
 8005f44:	d00a      	beq.n	8005f5c <_scanf_float+0x34c>
 8005f46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f4a:	463a      	mov	r2, r7
 8005f4c:	4640      	mov	r0, r8
 8005f4e:	4798      	blx	r3
 8005f50:	6923      	ldr	r3, [r4, #16]
 8005f52:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	1eb5      	subs	r5, r6, #2
 8005f5a:	6123      	str	r3, [r4, #16]
 8005f5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f60:	463a      	mov	r2, r7
 8005f62:	4640      	mov	r0, r8
 8005f64:	4798      	blx	r3
 8005f66:	462e      	mov	r6, r5
 8005f68:	6825      	ldr	r5, [r4, #0]
 8005f6a:	f015 0510 	ands.w	r5, r5, #16
 8005f6e:	d159      	bne.n	8006024 <_scanf_float+0x414>
 8005f70:	7035      	strb	r5, [r6, #0]
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f7c:	d11b      	bne.n	8005fb6 <_scanf_float+0x3a6>
 8005f7e:	9b01      	ldr	r3, [sp, #4]
 8005f80:	454b      	cmp	r3, r9
 8005f82:	eba3 0209 	sub.w	r2, r3, r9
 8005f86:	d123      	bne.n	8005fd0 <_scanf_float+0x3c0>
 8005f88:	2200      	movs	r2, #0
 8005f8a:	4659      	mov	r1, fp
 8005f8c:	4640      	mov	r0, r8
 8005f8e:	f000 ff09 	bl	8006da4 <_strtod_r>
 8005f92:	6822      	ldr	r2, [r4, #0]
 8005f94:	9b03      	ldr	r3, [sp, #12]
 8005f96:	f012 0f02 	tst.w	r2, #2
 8005f9a:	ec57 6b10 	vmov	r6, r7, d0
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	d021      	beq.n	8005fe6 <_scanf_float+0x3d6>
 8005fa2:	9903      	ldr	r1, [sp, #12]
 8005fa4:	1d1a      	adds	r2, r3, #4
 8005fa6:	600a      	str	r2, [r1, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	e9c3 6700 	strd	r6, r7, [r3]
 8005fae:	68e3      	ldr	r3, [r4, #12]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	60e3      	str	r3, [r4, #12]
 8005fb4:	e66d      	b.n	8005c92 <_scanf_float+0x82>
 8005fb6:	9b04      	ldr	r3, [sp, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d0e5      	beq.n	8005f88 <_scanf_float+0x378>
 8005fbc:	9905      	ldr	r1, [sp, #20]
 8005fbe:	230a      	movs	r3, #10
 8005fc0:	462a      	mov	r2, r5
 8005fc2:	3101      	adds	r1, #1
 8005fc4:	4640      	mov	r0, r8
 8005fc6:	f000 ff75 	bl	8006eb4 <_strtol_r>
 8005fca:	9b04      	ldr	r3, [sp, #16]
 8005fcc:	9e05      	ldr	r6, [sp, #20]
 8005fce:	1ac2      	subs	r2, r0, r3
 8005fd0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005fd4:	429e      	cmp	r6, r3
 8005fd6:	bf28      	it	cs
 8005fd8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005fdc:	4912      	ldr	r1, [pc, #72]	; (8006028 <_scanf_float+0x418>)
 8005fde:	4630      	mov	r0, r6
 8005fe0:	f000 f82c 	bl	800603c <siprintf>
 8005fe4:	e7d0      	b.n	8005f88 <_scanf_float+0x378>
 8005fe6:	9903      	ldr	r1, [sp, #12]
 8005fe8:	f012 0f04 	tst.w	r2, #4
 8005fec:	f103 0204 	add.w	r2, r3, #4
 8005ff0:	600a      	str	r2, [r1, #0]
 8005ff2:	d1d9      	bne.n	8005fa8 <_scanf_float+0x398>
 8005ff4:	f8d3 8000 	ldr.w	r8, [r3]
 8005ff8:	ee10 2a10 	vmov	r2, s0
 8005ffc:	ee10 0a10 	vmov	r0, s0
 8006000:	463b      	mov	r3, r7
 8006002:	4639      	mov	r1, r7
 8006004:	f7fa fdb2 	bl	8000b6c <__aeabi_dcmpun>
 8006008:	b128      	cbz	r0, 8006016 <_scanf_float+0x406>
 800600a:	4808      	ldr	r0, [pc, #32]	; (800602c <_scanf_float+0x41c>)
 800600c:	f000 f810 	bl	8006030 <nanf>
 8006010:	ed88 0a00 	vstr	s0, [r8]
 8006014:	e7cb      	b.n	8005fae <_scanf_float+0x39e>
 8006016:	4630      	mov	r0, r6
 8006018:	4639      	mov	r1, r7
 800601a:	f7fa fddd 	bl	8000bd8 <__aeabi_d2f>
 800601e:	f8c8 0000 	str.w	r0, [r8]
 8006022:	e7c4      	b.n	8005fae <_scanf_float+0x39e>
 8006024:	2500      	movs	r5, #0
 8006026:	e634      	b.n	8005c92 <_scanf_float+0x82>
 8006028:	0800a5bc 	.word	0x0800a5bc
 800602c:	0800a9a5 	.word	0x0800a9a5

08006030 <nanf>:
 8006030:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006038 <nanf+0x8>
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	7fc00000 	.word	0x7fc00000

0800603c <siprintf>:
 800603c:	b40e      	push	{r1, r2, r3}
 800603e:	b500      	push	{lr}
 8006040:	b09c      	sub	sp, #112	; 0x70
 8006042:	ab1d      	add	r3, sp, #116	; 0x74
 8006044:	9002      	str	r0, [sp, #8]
 8006046:	9006      	str	r0, [sp, #24]
 8006048:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800604c:	4809      	ldr	r0, [pc, #36]	; (8006074 <siprintf+0x38>)
 800604e:	9107      	str	r1, [sp, #28]
 8006050:	9104      	str	r1, [sp, #16]
 8006052:	4909      	ldr	r1, [pc, #36]	; (8006078 <siprintf+0x3c>)
 8006054:	f853 2b04 	ldr.w	r2, [r3], #4
 8006058:	9105      	str	r1, [sp, #20]
 800605a:	6800      	ldr	r0, [r0, #0]
 800605c:	9301      	str	r3, [sp, #4]
 800605e:	a902      	add	r1, sp, #8
 8006060:	f002 f8b6 	bl	80081d0 <_svfiprintf_r>
 8006064:	9b02      	ldr	r3, [sp, #8]
 8006066:	2200      	movs	r2, #0
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	b01c      	add	sp, #112	; 0x70
 800606c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006070:	b003      	add	sp, #12
 8006072:	4770      	bx	lr
 8006074:	2000001c 	.word	0x2000001c
 8006078:	ffff0208 	.word	0xffff0208

0800607c <siscanf>:
 800607c:	b40e      	push	{r1, r2, r3}
 800607e:	b510      	push	{r4, lr}
 8006080:	b09f      	sub	sp, #124	; 0x7c
 8006082:	ac21      	add	r4, sp, #132	; 0x84
 8006084:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006088:	f854 2b04 	ldr.w	r2, [r4], #4
 800608c:	9201      	str	r2, [sp, #4]
 800608e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006092:	9004      	str	r0, [sp, #16]
 8006094:	9008      	str	r0, [sp, #32]
 8006096:	f7fa f8bb 	bl	8000210 <strlen>
 800609a:	4b0c      	ldr	r3, [pc, #48]	; (80060cc <siscanf+0x50>)
 800609c:	9005      	str	r0, [sp, #20]
 800609e:	9009      	str	r0, [sp, #36]	; 0x24
 80060a0:	930d      	str	r3, [sp, #52]	; 0x34
 80060a2:	480b      	ldr	r0, [pc, #44]	; (80060d0 <siscanf+0x54>)
 80060a4:	9a01      	ldr	r2, [sp, #4]
 80060a6:	6800      	ldr	r0, [r0, #0]
 80060a8:	9403      	str	r4, [sp, #12]
 80060aa:	2300      	movs	r3, #0
 80060ac:	9311      	str	r3, [sp, #68]	; 0x44
 80060ae:	9316      	str	r3, [sp, #88]	; 0x58
 80060b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80060b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80060b8:	a904      	add	r1, sp, #16
 80060ba:	4623      	mov	r3, r4
 80060bc:	f002 f9e2 	bl	8008484 <__ssvfiscanf_r>
 80060c0:	b01f      	add	sp, #124	; 0x7c
 80060c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060c6:	b003      	add	sp, #12
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	080060f7 	.word	0x080060f7
 80060d0:	2000001c 	.word	0x2000001c

080060d4 <__sread>:
 80060d4:	b510      	push	{r4, lr}
 80060d6:	460c      	mov	r4, r1
 80060d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060dc:	f002 fe30 	bl	8008d40 <_read_r>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	bfab      	itete	ge
 80060e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060e6:	89a3      	ldrhlt	r3, [r4, #12]
 80060e8:	181b      	addge	r3, r3, r0
 80060ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060ee:	bfac      	ite	ge
 80060f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80060f2:	81a3      	strhlt	r3, [r4, #12]
 80060f4:	bd10      	pop	{r4, pc}

080060f6 <__seofread>:
 80060f6:	2000      	movs	r0, #0
 80060f8:	4770      	bx	lr

080060fa <__swrite>:
 80060fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060fe:	461f      	mov	r7, r3
 8006100:	898b      	ldrh	r3, [r1, #12]
 8006102:	05db      	lsls	r3, r3, #23
 8006104:	4605      	mov	r5, r0
 8006106:	460c      	mov	r4, r1
 8006108:	4616      	mov	r6, r2
 800610a:	d505      	bpl.n	8006118 <__swrite+0x1e>
 800610c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006110:	2302      	movs	r3, #2
 8006112:	2200      	movs	r2, #0
 8006114:	f001 fa62 	bl	80075dc <_lseek_r>
 8006118:	89a3      	ldrh	r3, [r4, #12]
 800611a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800611e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006122:	81a3      	strh	r3, [r4, #12]
 8006124:	4632      	mov	r2, r6
 8006126:	463b      	mov	r3, r7
 8006128:	4628      	mov	r0, r5
 800612a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800612e:	f000 bec3 	b.w	8006eb8 <_write_r>

08006132 <__sseek>:
 8006132:	b510      	push	{r4, lr}
 8006134:	460c      	mov	r4, r1
 8006136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800613a:	f001 fa4f 	bl	80075dc <_lseek_r>
 800613e:	1c43      	adds	r3, r0, #1
 8006140:	89a3      	ldrh	r3, [r4, #12]
 8006142:	bf15      	itete	ne
 8006144:	6560      	strne	r0, [r4, #84]	; 0x54
 8006146:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800614a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800614e:	81a3      	strheq	r3, [r4, #12]
 8006150:	bf18      	it	ne
 8006152:	81a3      	strhne	r3, [r4, #12]
 8006154:	bd10      	pop	{r4, pc}

08006156 <__sclose>:
 8006156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800615a:	f000 bebf 	b.w	8006edc <_close_r>

0800615e <sulp>:
 800615e:	b570      	push	{r4, r5, r6, lr}
 8006160:	4604      	mov	r4, r0
 8006162:	460d      	mov	r5, r1
 8006164:	ec45 4b10 	vmov	d0, r4, r5
 8006168:	4616      	mov	r6, r2
 800616a:	f001 fddb 	bl	8007d24 <__ulp>
 800616e:	ec51 0b10 	vmov	r0, r1, d0
 8006172:	b17e      	cbz	r6, 8006194 <sulp+0x36>
 8006174:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006178:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800617c:	2b00      	cmp	r3, #0
 800617e:	dd09      	ble.n	8006194 <sulp+0x36>
 8006180:	051b      	lsls	r3, r3, #20
 8006182:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006186:	2400      	movs	r4, #0
 8006188:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800618c:	4622      	mov	r2, r4
 800618e:	462b      	mov	r3, r5
 8006190:	f7fa fa52 	bl	8000638 <__aeabi_dmul>
 8006194:	bd70      	pop	{r4, r5, r6, pc}
	...

08006198 <_strtod_l>:
 8006198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800619c:	ed2d 8b02 	vpush	{d8}
 80061a0:	b09d      	sub	sp, #116	; 0x74
 80061a2:	461f      	mov	r7, r3
 80061a4:	2300      	movs	r3, #0
 80061a6:	9318      	str	r3, [sp, #96]	; 0x60
 80061a8:	4ba2      	ldr	r3, [pc, #648]	; (8006434 <_strtod_l+0x29c>)
 80061aa:	9213      	str	r2, [sp, #76]	; 0x4c
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	9305      	str	r3, [sp, #20]
 80061b0:	4604      	mov	r4, r0
 80061b2:	4618      	mov	r0, r3
 80061b4:	4688      	mov	r8, r1
 80061b6:	f7fa f82b 	bl	8000210 <strlen>
 80061ba:	f04f 0a00 	mov.w	sl, #0
 80061be:	4605      	mov	r5, r0
 80061c0:	f04f 0b00 	mov.w	fp, #0
 80061c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80061c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061ca:	781a      	ldrb	r2, [r3, #0]
 80061cc:	2a2b      	cmp	r2, #43	; 0x2b
 80061ce:	d04e      	beq.n	800626e <_strtod_l+0xd6>
 80061d0:	d83b      	bhi.n	800624a <_strtod_l+0xb2>
 80061d2:	2a0d      	cmp	r2, #13
 80061d4:	d834      	bhi.n	8006240 <_strtod_l+0xa8>
 80061d6:	2a08      	cmp	r2, #8
 80061d8:	d834      	bhi.n	8006244 <_strtod_l+0xac>
 80061da:	2a00      	cmp	r2, #0
 80061dc:	d03e      	beq.n	800625c <_strtod_l+0xc4>
 80061de:	2300      	movs	r3, #0
 80061e0:	930a      	str	r3, [sp, #40]	; 0x28
 80061e2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80061e4:	7833      	ldrb	r3, [r6, #0]
 80061e6:	2b30      	cmp	r3, #48	; 0x30
 80061e8:	f040 80b0 	bne.w	800634c <_strtod_l+0x1b4>
 80061ec:	7873      	ldrb	r3, [r6, #1]
 80061ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80061f2:	2b58      	cmp	r3, #88	; 0x58
 80061f4:	d168      	bne.n	80062c8 <_strtod_l+0x130>
 80061f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061f8:	9301      	str	r3, [sp, #4]
 80061fa:	ab18      	add	r3, sp, #96	; 0x60
 80061fc:	9702      	str	r7, [sp, #8]
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	4a8d      	ldr	r2, [pc, #564]	; (8006438 <_strtod_l+0x2a0>)
 8006202:	ab19      	add	r3, sp, #100	; 0x64
 8006204:	a917      	add	r1, sp, #92	; 0x5c
 8006206:	4620      	mov	r0, r4
 8006208:	f000 fee0 	bl	8006fcc <__gethex>
 800620c:	f010 0707 	ands.w	r7, r0, #7
 8006210:	4605      	mov	r5, r0
 8006212:	d005      	beq.n	8006220 <_strtod_l+0x88>
 8006214:	2f06      	cmp	r7, #6
 8006216:	d12c      	bne.n	8006272 <_strtod_l+0xda>
 8006218:	3601      	adds	r6, #1
 800621a:	2300      	movs	r3, #0
 800621c:	9617      	str	r6, [sp, #92]	; 0x5c
 800621e:	930a      	str	r3, [sp, #40]	; 0x28
 8006220:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006222:	2b00      	cmp	r3, #0
 8006224:	f040 8590 	bne.w	8006d48 <_strtod_l+0xbb0>
 8006228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800622a:	b1eb      	cbz	r3, 8006268 <_strtod_l+0xd0>
 800622c:	4652      	mov	r2, sl
 800622e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006232:	ec43 2b10 	vmov	d0, r2, r3
 8006236:	b01d      	add	sp, #116	; 0x74
 8006238:	ecbd 8b02 	vpop	{d8}
 800623c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006240:	2a20      	cmp	r2, #32
 8006242:	d1cc      	bne.n	80061de <_strtod_l+0x46>
 8006244:	3301      	adds	r3, #1
 8006246:	9317      	str	r3, [sp, #92]	; 0x5c
 8006248:	e7be      	b.n	80061c8 <_strtod_l+0x30>
 800624a:	2a2d      	cmp	r2, #45	; 0x2d
 800624c:	d1c7      	bne.n	80061de <_strtod_l+0x46>
 800624e:	2201      	movs	r2, #1
 8006250:	920a      	str	r2, [sp, #40]	; 0x28
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	9217      	str	r2, [sp, #92]	; 0x5c
 8006256:	785b      	ldrb	r3, [r3, #1]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1c2      	bne.n	80061e2 <_strtod_l+0x4a>
 800625c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800625e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006262:	2b00      	cmp	r3, #0
 8006264:	f040 856e 	bne.w	8006d44 <_strtod_l+0xbac>
 8006268:	4652      	mov	r2, sl
 800626a:	465b      	mov	r3, fp
 800626c:	e7e1      	b.n	8006232 <_strtod_l+0x9a>
 800626e:	2200      	movs	r2, #0
 8006270:	e7ee      	b.n	8006250 <_strtod_l+0xb8>
 8006272:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006274:	b13a      	cbz	r2, 8006286 <_strtod_l+0xee>
 8006276:	2135      	movs	r1, #53	; 0x35
 8006278:	a81a      	add	r0, sp, #104	; 0x68
 800627a:	f001 fe5e 	bl	8007f3a <__copybits>
 800627e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006280:	4620      	mov	r0, r4
 8006282:	f001 fa1d 	bl	80076c0 <_Bfree>
 8006286:	3f01      	subs	r7, #1
 8006288:	2f04      	cmp	r7, #4
 800628a:	d806      	bhi.n	800629a <_strtod_l+0x102>
 800628c:	e8df f007 	tbb	[pc, r7]
 8006290:	1714030a 	.word	0x1714030a
 8006294:	0a          	.byte	0x0a
 8006295:	00          	.byte	0x00
 8006296:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800629a:	0728      	lsls	r0, r5, #28
 800629c:	d5c0      	bpl.n	8006220 <_strtod_l+0x88>
 800629e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80062a2:	e7bd      	b.n	8006220 <_strtod_l+0x88>
 80062a4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80062a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80062aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80062ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80062b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80062b6:	e7f0      	b.n	800629a <_strtod_l+0x102>
 80062b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800643c <_strtod_l+0x2a4>
 80062bc:	e7ed      	b.n	800629a <_strtod_l+0x102>
 80062be:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80062c2:	f04f 3aff 	mov.w	sl, #4294967295
 80062c6:	e7e8      	b.n	800629a <_strtod_l+0x102>
 80062c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80062ce:	785b      	ldrb	r3, [r3, #1]
 80062d0:	2b30      	cmp	r3, #48	; 0x30
 80062d2:	d0f9      	beq.n	80062c8 <_strtod_l+0x130>
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0a3      	beq.n	8006220 <_strtod_l+0x88>
 80062d8:	2301      	movs	r3, #1
 80062da:	f04f 0900 	mov.w	r9, #0
 80062de:	9304      	str	r3, [sp, #16]
 80062e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80062e2:	9308      	str	r3, [sp, #32]
 80062e4:	f8cd 901c 	str.w	r9, [sp, #28]
 80062e8:	464f      	mov	r7, r9
 80062ea:	220a      	movs	r2, #10
 80062ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80062ee:	7806      	ldrb	r6, [r0, #0]
 80062f0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80062f4:	b2d9      	uxtb	r1, r3
 80062f6:	2909      	cmp	r1, #9
 80062f8:	d92a      	bls.n	8006350 <_strtod_l+0x1b8>
 80062fa:	9905      	ldr	r1, [sp, #20]
 80062fc:	462a      	mov	r2, r5
 80062fe:	f002 fd83 	bl	8008e08 <strncmp>
 8006302:	b398      	cbz	r0, 800636c <_strtod_l+0x1d4>
 8006304:	2000      	movs	r0, #0
 8006306:	4632      	mov	r2, r6
 8006308:	463d      	mov	r5, r7
 800630a:	9005      	str	r0, [sp, #20]
 800630c:	4603      	mov	r3, r0
 800630e:	2a65      	cmp	r2, #101	; 0x65
 8006310:	d001      	beq.n	8006316 <_strtod_l+0x17e>
 8006312:	2a45      	cmp	r2, #69	; 0x45
 8006314:	d118      	bne.n	8006348 <_strtod_l+0x1b0>
 8006316:	b91d      	cbnz	r5, 8006320 <_strtod_l+0x188>
 8006318:	9a04      	ldr	r2, [sp, #16]
 800631a:	4302      	orrs	r2, r0
 800631c:	d09e      	beq.n	800625c <_strtod_l+0xc4>
 800631e:	2500      	movs	r5, #0
 8006320:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006324:	f108 0201 	add.w	r2, r8, #1
 8006328:	9217      	str	r2, [sp, #92]	; 0x5c
 800632a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800632e:	2a2b      	cmp	r2, #43	; 0x2b
 8006330:	d075      	beq.n	800641e <_strtod_l+0x286>
 8006332:	2a2d      	cmp	r2, #45	; 0x2d
 8006334:	d07b      	beq.n	800642e <_strtod_l+0x296>
 8006336:	f04f 0c00 	mov.w	ip, #0
 800633a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800633e:	2909      	cmp	r1, #9
 8006340:	f240 8082 	bls.w	8006448 <_strtod_l+0x2b0>
 8006344:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006348:	2600      	movs	r6, #0
 800634a:	e09d      	b.n	8006488 <_strtod_l+0x2f0>
 800634c:	2300      	movs	r3, #0
 800634e:	e7c4      	b.n	80062da <_strtod_l+0x142>
 8006350:	2f08      	cmp	r7, #8
 8006352:	bfd8      	it	le
 8006354:	9907      	ldrle	r1, [sp, #28]
 8006356:	f100 0001 	add.w	r0, r0, #1
 800635a:	bfda      	itte	le
 800635c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006360:	9307      	strle	r3, [sp, #28]
 8006362:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006366:	3701      	adds	r7, #1
 8006368:	9017      	str	r0, [sp, #92]	; 0x5c
 800636a:	e7bf      	b.n	80062ec <_strtod_l+0x154>
 800636c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800636e:	195a      	adds	r2, r3, r5
 8006370:	9217      	str	r2, [sp, #92]	; 0x5c
 8006372:	5d5a      	ldrb	r2, [r3, r5]
 8006374:	2f00      	cmp	r7, #0
 8006376:	d037      	beq.n	80063e8 <_strtod_l+0x250>
 8006378:	9005      	str	r0, [sp, #20]
 800637a:	463d      	mov	r5, r7
 800637c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006380:	2b09      	cmp	r3, #9
 8006382:	d912      	bls.n	80063aa <_strtod_l+0x212>
 8006384:	2301      	movs	r3, #1
 8006386:	e7c2      	b.n	800630e <_strtod_l+0x176>
 8006388:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	9217      	str	r2, [sp, #92]	; 0x5c
 800638e:	785a      	ldrb	r2, [r3, #1]
 8006390:	3001      	adds	r0, #1
 8006392:	2a30      	cmp	r2, #48	; 0x30
 8006394:	d0f8      	beq.n	8006388 <_strtod_l+0x1f0>
 8006396:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800639a:	2b08      	cmp	r3, #8
 800639c:	f200 84d9 	bhi.w	8006d52 <_strtod_l+0xbba>
 80063a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063a2:	9005      	str	r0, [sp, #20]
 80063a4:	2000      	movs	r0, #0
 80063a6:	9308      	str	r3, [sp, #32]
 80063a8:	4605      	mov	r5, r0
 80063aa:	3a30      	subs	r2, #48	; 0x30
 80063ac:	f100 0301 	add.w	r3, r0, #1
 80063b0:	d014      	beq.n	80063dc <_strtod_l+0x244>
 80063b2:	9905      	ldr	r1, [sp, #20]
 80063b4:	4419      	add	r1, r3
 80063b6:	9105      	str	r1, [sp, #20]
 80063b8:	462b      	mov	r3, r5
 80063ba:	eb00 0e05 	add.w	lr, r0, r5
 80063be:	210a      	movs	r1, #10
 80063c0:	4573      	cmp	r3, lr
 80063c2:	d113      	bne.n	80063ec <_strtod_l+0x254>
 80063c4:	182b      	adds	r3, r5, r0
 80063c6:	2b08      	cmp	r3, #8
 80063c8:	f105 0501 	add.w	r5, r5, #1
 80063cc:	4405      	add	r5, r0
 80063ce:	dc1c      	bgt.n	800640a <_strtod_l+0x272>
 80063d0:	9907      	ldr	r1, [sp, #28]
 80063d2:	230a      	movs	r3, #10
 80063d4:	fb03 2301 	mla	r3, r3, r1, r2
 80063d8:	9307      	str	r3, [sp, #28]
 80063da:	2300      	movs	r3, #0
 80063dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80063de:	1c51      	adds	r1, r2, #1
 80063e0:	9117      	str	r1, [sp, #92]	; 0x5c
 80063e2:	7852      	ldrb	r2, [r2, #1]
 80063e4:	4618      	mov	r0, r3
 80063e6:	e7c9      	b.n	800637c <_strtod_l+0x1e4>
 80063e8:	4638      	mov	r0, r7
 80063ea:	e7d2      	b.n	8006392 <_strtod_l+0x1fa>
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	dc04      	bgt.n	80063fa <_strtod_l+0x262>
 80063f0:	9e07      	ldr	r6, [sp, #28]
 80063f2:	434e      	muls	r6, r1
 80063f4:	9607      	str	r6, [sp, #28]
 80063f6:	3301      	adds	r3, #1
 80063f8:	e7e2      	b.n	80063c0 <_strtod_l+0x228>
 80063fa:	f103 0c01 	add.w	ip, r3, #1
 80063fe:	f1bc 0f10 	cmp.w	ip, #16
 8006402:	bfd8      	it	le
 8006404:	fb01 f909 	mulle.w	r9, r1, r9
 8006408:	e7f5      	b.n	80063f6 <_strtod_l+0x25e>
 800640a:	2d10      	cmp	r5, #16
 800640c:	bfdc      	itt	le
 800640e:	230a      	movle	r3, #10
 8006410:	fb03 2909 	mlale	r9, r3, r9, r2
 8006414:	e7e1      	b.n	80063da <_strtod_l+0x242>
 8006416:	2300      	movs	r3, #0
 8006418:	9305      	str	r3, [sp, #20]
 800641a:	2301      	movs	r3, #1
 800641c:	e77c      	b.n	8006318 <_strtod_l+0x180>
 800641e:	f04f 0c00 	mov.w	ip, #0
 8006422:	f108 0202 	add.w	r2, r8, #2
 8006426:	9217      	str	r2, [sp, #92]	; 0x5c
 8006428:	f898 2002 	ldrb.w	r2, [r8, #2]
 800642c:	e785      	b.n	800633a <_strtod_l+0x1a2>
 800642e:	f04f 0c01 	mov.w	ip, #1
 8006432:	e7f6      	b.n	8006422 <_strtod_l+0x28a>
 8006434:	0800a798 	.word	0x0800a798
 8006438:	0800a5d0 	.word	0x0800a5d0
 800643c:	7ff00000 	.word	0x7ff00000
 8006440:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006442:	1c51      	adds	r1, r2, #1
 8006444:	9117      	str	r1, [sp, #92]	; 0x5c
 8006446:	7852      	ldrb	r2, [r2, #1]
 8006448:	2a30      	cmp	r2, #48	; 0x30
 800644a:	d0f9      	beq.n	8006440 <_strtod_l+0x2a8>
 800644c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006450:	2908      	cmp	r1, #8
 8006452:	f63f af79 	bhi.w	8006348 <_strtod_l+0x1b0>
 8006456:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800645a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800645c:	9206      	str	r2, [sp, #24]
 800645e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006460:	1c51      	adds	r1, r2, #1
 8006462:	9117      	str	r1, [sp, #92]	; 0x5c
 8006464:	7852      	ldrb	r2, [r2, #1]
 8006466:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800646a:	2e09      	cmp	r6, #9
 800646c:	d937      	bls.n	80064de <_strtod_l+0x346>
 800646e:	9e06      	ldr	r6, [sp, #24]
 8006470:	1b89      	subs	r1, r1, r6
 8006472:	2908      	cmp	r1, #8
 8006474:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006478:	dc02      	bgt.n	8006480 <_strtod_l+0x2e8>
 800647a:	4576      	cmp	r6, lr
 800647c:	bfa8      	it	ge
 800647e:	4676      	movge	r6, lr
 8006480:	f1bc 0f00 	cmp.w	ip, #0
 8006484:	d000      	beq.n	8006488 <_strtod_l+0x2f0>
 8006486:	4276      	negs	r6, r6
 8006488:	2d00      	cmp	r5, #0
 800648a:	d14d      	bne.n	8006528 <_strtod_l+0x390>
 800648c:	9904      	ldr	r1, [sp, #16]
 800648e:	4301      	orrs	r1, r0
 8006490:	f47f aec6 	bne.w	8006220 <_strtod_l+0x88>
 8006494:	2b00      	cmp	r3, #0
 8006496:	f47f aee1 	bne.w	800625c <_strtod_l+0xc4>
 800649a:	2a69      	cmp	r2, #105	; 0x69
 800649c:	d027      	beq.n	80064ee <_strtod_l+0x356>
 800649e:	dc24      	bgt.n	80064ea <_strtod_l+0x352>
 80064a0:	2a49      	cmp	r2, #73	; 0x49
 80064a2:	d024      	beq.n	80064ee <_strtod_l+0x356>
 80064a4:	2a4e      	cmp	r2, #78	; 0x4e
 80064a6:	f47f aed9 	bne.w	800625c <_strtod_l+0xc4>
 80064aa:	499f      	ldr	r1, [pc, #636]	; (8006728 <_strtod_l+0x590>)
 80064ac:	a817      	add	r0, sp, #92	; 0x5c
 80064ae:	f000 ffe5 	bl	800747c <__match>
 80064b2:	2800      	cmp	r0, #0
 80064b4:	f43f aed2 	beq.w	800625c <_strtod_l+0xc4>
 80064b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	2b28      	cmp	r3, #40	; 0x28
 80064be:	d12d      	bne.n	800651c <_strtod_l+0x384>
 80064c0:	499a      	ldr	r1, [pc, #616]	; (800672c <_strtod_l+0x594>)
 80064c2:	aa1a      	add	r2, sp, #104	; 0x68
 80064c4:	a817      	add	r0, sp, #92	; 0x5c
 80064c6:	f000 ffed 	bl	80074a4 <__hexnan>
 80064ca:	2805      	cmp	r0, #5
 80064cc:	d126      	bne.n	800651c <_strtod_l+0x384>
 80064ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80064d0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80064d4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80064d8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80064dc:	e6a0      	b.n	8006220 <_strtod_l+0x88>
 80064de:	210a      	movs	r1, #10
 80064e0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80064e4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80064e8:	e7b9      	b.n	800645e <_strtod_l+0x2c6>
 80064ea:	2a6e      	cmp	r2, #110	; 0x6e
 80064ec:	e7db      	b.n	80064a6 <_strtod_l+0x30e>
 80064ee:	4990      	ldr	r1, [pc, #576]	; (8006730 <_strtod_l+0x598>)
 80064f0:	a817      	add	r0, sp, #92	; 0x5c
 80064f2:	f000 ffc3 	bl	800747c <__match>
 80064f6:	2800      	cmp	r0, #0
 80064f8:	f43f aeb0 	beq.w	800625c <_strtod_l+0xc4>
 80064fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80064fe:	498d      	ldr	r1, [pc, #564]	; (8006734 <_strtod_l+0x59c>)
 8006500:	3b01      	subs	r3, #1
 8006502:	a817      	add	r0, sp, #92	; 0x5c
 8006504:	9317      	str	r3, [sp, #92]	; 0x5c
 8006506:	f000 ffb9 	bl	800747c <__match>
 800650a:	b910      	cbnz	r0, 8006512 <_strtod_l+0x37a>
 800650c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800650e:	3301      	adds	r3, #1
 8006510:	9317      	str	r3, [sp, #92]	; 0x5c
 8006512:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006744 <_strtod_l+0x5ac>
 8006516:	f04f 0a00 	mov.w	sl, #0
 800651a:	e681      	b.n	8006220 <_strtod_l+0x88>
 800651c:	4886      	ldr	r0, [pc, #536]	; (8006738 <_strtod_l+0x5a0>)
 800651e:	f002 fc23 	bl	8008d68 <nan>
 8006522:	ec5b ab10 	vmov	sl, fp, d0
 8006526:	e67b      	b.n	8006220 <_strtod_l+0x88>
 8006528:	9b05      	ldr	r3, [sp, #20]
 800652a:	9807      	ldr	r0, [sp, #28]
 800652c:	1af3      	subs	r3, r6, r3
 800652e:	2f00      	cmp	r7, #0
 8006530:	bf08      	it	eq
 8006532:	462f      	moveq	r7, r5
 8006534:	2d10      	cmp	r5, #16
 8006536:	9306      	str	r3, [sp, #24]
 8006538:	46a8      	mov	r8, r5
 800653a:	bfa8      	it	ge
 800653c:	f04f 0810 	movge.w	r8, #16
 8006540:	f7fa f800 	bl	8000544 <__aeabi_ui2d>
 8006544:	2d09      	cmp	r5, #9
 8006546:	4682      	mov	sl, r0
 8006548:	468b      	mov	fp, r1
 800654a:	dd13      	ble.n	8006574 <_strtod_l+0x3dc>
 800654c:	4b7b      	ldr	r3, [pc, #492]	; (800673c <_strtod_l+0x5a4>)
 800654e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006552:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006556:	f7fa f86f 	bl	8000638 <__aeabi_dmul>
 800655a:	4682      	mov	sl, r0
 800655c:	4648      	mov	r0, r9
 800655e:	468b      	mov	fp, r1
 8006560:	f7f9 fff0 	bl	8000544 <__aeabi_ui2d>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	4650      	mov	r0, sl
 800656a:	4659      	mov	r1, fp
 800656c:	f7f9 feae 	bl	80002cc <__adddf3>
 8006570:	4682      	mov	sl, r0
 8006572:	468b      	mov	fp, r1
 8006574:	2d0f      	cmp	r5, #15
 8006576:	dc38      	bgt.n	80065ea <_strtod_l+0x452>
 8006578:	9b06      	ldr	r3, [sp, #24]
 800657a:	2b00      	cmp	r3, #0
 800657c:	f43f ae50 	beq.w	8006220 <_strtod_l+0x88>
 8006580:	dd24      	ble.n	80065cc <_strtod_l+0x434>
 8006582:	2b16      	cmp	r3, #22
 8006584:	dc0b      	bgt.n	800659e <_strtod_l+0x406>
 8006586:	496d      	ldr	r1, [pc, #436]	; (800673c <_strtod_l+0x5a4>)
 8006588:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800658c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006590:	4652      	mov	r2, sl
 8006592:	465b      	mov	r3, fp
 8006594:	f7fa f850 	bl	8000638 <__aeabi_dmul>
 8006598:	4682      	mov	sl, r0
 800659a:	468b      	mov	fp, r1
 800659c:	e640      	b.n	8006220 <_strtod_l+0x88>
 800659e:	9a06      	ldr	r2, [sp, #24]
 80065a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80065a4:	4293      	cmp	r3, r2
 80065a6:	db20      	blt.n	80065ea <_strtod_l+0x452>
 80065a8:	4c64      	ldr	r4, [pc, #400]	; (800673c <_strtod_l+0x5a4>)
 80065aa:	f1c5 050f 	rsb	r5, r5, #15
 80065ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80065b2:	4652      	mov	r2, sl
 80065b4:	465b      	mov	r3, fp
 80065b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065ba:	f7fa f83d 	bl	8000638 <__aeabi_dmul>
 80065be:	9b06      	ldr	r3, [sp, #24]
 80065c0:	1b5d      	subs	r5, r3, r5
 80065c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80065c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80065ca:	e7e3      	b.n	8006594 <_strtod_l+0x3fc>
 80065cc:	9b06      	ldr	r3, [sp, #24]
 80065ce:	3316      	adds	r3, #22
 80065d0:	db0b      	blt.n	80065ea <_strtod_l+0x452>
 80065d2:	9b05      	ldr	r3, [sp, #20]
 80065d4:	1b9e      	subs	r6, r3, r6
 80065d6:	4b59      	ldr	r3, [pc, #356]	; (800673c <_strtod_l+0x5a4>)
 80065d8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80065dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065e0:	4650      	mov	r0, sl
 80065e2:	4659      	mov	r1, fp
 80065e4:	f7fa f952 	bl	800088c <__aeabi_ddiv>
 80065e8:	e7d6      	b.n	8006598 <_strtod_l+0x400>
 80065ea:	9b06      	ldr	r3, [sp, #24]
 80065ec:	eba5 0808 	sub.w	r8, r5, r8
 80065f0:	4498      	add	r8, r3
 80065f2:	f1b8 0f00 	cmp.w	r8, #0
 80065f6:	dd74      	ble.n	80066e2 <_strtod_l+0x54a>
 80065f8:	f018 030f 	ands.w	r3, r8, #15
 80065fc:	d00a      	beq.n	8006614 <_strtod_l+0x47c>
 80065fe:	494f      	ldr	r1, [pc, #316]	; (800673c <_strtod_l+0x5a4>)
 8006600:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006604:	4652      	mov	r2, sl
 8006606:	465b      	mov	r3, fp
 8006608:	e9d1 0100 	ldrd	r0, r1, [r1]
 800660c:	f7fa f814 	bl	8000638 <__aeabi_dmul>
 8006610:	4682      	mov	sl, r0
 8006612:	468b      	mov	fp, r1
 8006614:	f038 080f 	bics.w	r8, r8, #15
 8006618:	d04f      	beq.n	80066ba <_strtod_l+0x522>
 800661a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800661e:	dd22      	ble.n	8006666 <_strtod_l+0x4ce>
 8006620:	2500      	movs	r5, #0
 8006622:	462e      	mov	r6, r5
 8006624:	9507      	str	r5, [sp, #28]
 8006626:	9505      	str	r5, [sp, #20]
 8006628:	2322      	movs	r3, #34	; 0x22
 800662a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006744 <_strtod_l+0x5ac>
 800662e:	6023      	str	r3, [r4, #0]
 8006630:	f04f 0a00 	mov.w	sl, #0
 8006634:	9b07      	ldr	r3, [sp, #28]
 8006636:	2b00      	cmp	r3, #0
 8006638:	f43f adf2 	beq.w	8006220 <_strtod_l+0x88>
 800663c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800663e:	4620      	mov	r0, r4
 8006640:	f001 f83e 	bl	80076c0 <_Bfree>
 8006644:	9905      	ldr	r1, [sp, #20]
 8006646:	4620      	mov	r0, r4
 8006648:	f001 f83a 	bl	80076c0 <_Bfree>
 800664c:	4631      	mov	r1, r6
 800664e:	4620      	mov	r0, r4
 8006650:	f001 f836 	bl	80076c0 <_Bfree>
 8006654:	9907      	ldr	r1, [sp, #28]
 8006656:	4620      	mov	r0, r4
 8006658:	f001 f832 	bl	80076c0 <_Bfree>
 800665c:	4629      	mov	r1, r5
 800665e:	4620      	mov	r0, r4
 8006660:	f001 f82e 	bl	80076c0 <_Bfree>
 8006664:	e5dc      	b.n	8006220 <_strtod_l+0x88>
 8006666:	4b36      	ldr	r3, [pc, #216]	; (8006740 <_strtod_l+0x5a8>)
 8006668:	9304      	str	r3, [sp, #16]
 800666a:	2300      	movs	r3, #0
 800666c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006670:	4650      	mov	r0, sl
 8006672:	4659      	mov	r1, fp
 8006674:	4699      	mov	r9, r3
 8006676:	f1b8 0f01 	cmp.w	r8, #1
 800667a:	dc21      	bgt.n	80066c0 <_strtod_l+0x528>
 800667c:	b10b      	cbz	r3, 8006682 <_strtod_l+0x4ea>
 800667e:	4682      	mov	sl, r0
 8006680:	468b      	mov	fp, r1
 8006682:	4b2f      	ldr	r3, [pc, #188]	; (8006740 <_strtod_l+0x5a8>)
 8006684:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006688:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800668c:	4652      	mov	r2, sl
 800668e:	465b      	mov	r3, fp
 8006690:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006694:	f7f9 ffd0 	bl	8000638 <__aeabi_dmul>
 8006698:	4b2a      	ldr	r3, [pc, #168]	; (8006744 <_strtod_l+0x5ac>)
 800669a:	460a      	mov	r2, r1
 800669c:	400b      	ands	r3, r1
 800669e:	492a      	ldr	r1, [pc, #168]	; (8006748 <_strtod_l+0x5b0>)
 80066a0:	428b      	cmp	r3, r1
 80066a2:	4682      	mov	sl, r0
 80066a4:	d8bc      	bhi.n	8006620 <_strtod_l+0x488>
 80066a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80066aa:	428b      	cmp	r3, r1
 80066ac:	bf86      	itte	hi
 80066ae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800674c <_strtod_l+0x5b4>
 80066b2:	f04f 3aff 	movhi.w	sl, #4294967295
 80066b6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80066ba:	2300      	movs	r3, #0
 80066bc:	9304      	str	r3, [sp, #16]
 80066be:	e084      	b.n	80067ca <_strtod_l+0x632>
 80066c0:	f018 0f01 	tst.w	r8, #1
 80066c4:	d005      	beq.n	80066d2 <_strtod_l+0x53a>
 80066c6:	9b04      	ldr	r3, [sp, #16]
 80066c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066cc:	f7f9 ffb4 	bl	8000638 <__aeabi_dmul>
 80066d0:	2301      	movs	r3, #1
 80066d2:	9a04      	ldr	r2, [sp, #16]
 80066d4:	3208      	adds	r2, #8
 80066d6:	f109 0901 	add.w	r9, r9, #1
 80066da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80066de:	9204      	str	r2, [sp, #16]
 80066e0:	e7c9      	b.n	8006676 <_strtod_l+0x4de>
 80066e2:	d0ea      	beq.n	80066ba <_strtod_l+0x522>
 80066e4:	f1c8 0800 	rsb	r8, r8, #0
 80066e8:	f018 020f 	ands.w	r2, r8, #15
 80066ec:	d00a      	beq.n	8006704 <_strtod_l+0x56c>
 80066ee:	4b13      	ldr	r3, [pc, #76]	; (800673c <_strtod_l+0x5a4>)
 80066f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066f4:	4650      	mov	r0, sl
 80066f6:	4659      	mov	r1, fp
 80066f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fc:	f7fa f8c6 	bl	800088c <__aeabi_ddiv>
 8006700:	4682      	mov	sl, r0
 8006702:	468b      	mov	fp, r1
 8006704:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006708:	d0d7      	beq.n	80066ba <_strtod_l+0x522>
 800670a:	f1b8 0f1f 	cmp.w	r8, #31
 800670e:	dd1f      	ble.n	8006750 <_strtod_l+0x5b8>
 8006710:	2500      	movs	r5, #0
 8006712:	462e      	mov	r6, r5
 8006714:	9507      	str	r5, [sp, #28]
 8006716:	9505      	str	r5, [sp, #20]
 8006718:	2322      	movs	r3, #34	; 0x22
 800671a:	f04f 0a00 	mov.w	sl, #0
 800671e:	f04f 0b00 	mov.w	fp, #0
 8006722:	6023      	str	r3, [r4, #0]
 8006724:	e786      	b.n	8006634 <_strtod_l+0x49c>
 8006726:	bf00      	nop
 8006728:	0800a5ca 	.word	0x0800a5ca
 800672c:	0800a5e4 	.word	0x0800a5e4
 8006730:	0800a5c1 	.word	0x0800a5c1
 8006734:	0800a5c4 	.word	0x0800a5c4
 8006738:	0800a9a5 	.word	0x0800a9a5
 800673c:	0800a848 	.word	0x0800a848
 8006740:	0800a820 	.word	0x0800a820
 8006744:	7ff00000 	.word	0x7ff00000
 8006748:	7ca00000 	.word	0x7ca00000
 800674c:	7fefffff 	.word	0x7fefffff
 8006750:	f018 0310 	ands.w	r3, r8, #16
 8006754:	bf18      	it	ne
 8006756:	236a      	movne	r3, #106	; 0x6a
 8006758:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006b08 <_strtod_l+0x970>
 800675c:	9304      	str	r3, [sp, #16]
 800675e:	4650      	mov	r0, sl
 8006760:	4659      	mov	r1, fp
 8006762:	2300      	movs	r3, #0
 8006764:	f018 0f01 	tst.w	r8, #1
 8006768:	d004      	beq.n	8006774 <_strtod_l+0x5dc>
 800676a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800676e:	f7f9 ff63 	bl	8000638 <__aeabi_dmul>
 8006772:	2301      	movs	r3, #1
 8006774:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006778:	f109 0908 	add.w	r9, r9, #8
 800677c:	d1f2      	bne.n	8006764 <_strtod_l+0x5cc>
 800677e:	b10b      	cbz	r3, 8006784 <_strtod_l+0x5ec>
 8006780:	4682      	mov	sl, r0
 8006782:	468b      	mov	fp, r1
 8006784:	9b04      	ldr	r3, [sp, #16]
 8006786:	b1c3      	cbz	r3, 80067ba <_strtod_l+0x622>
 8006788:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800678c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006790:	2b00      	cmp	r3, #0
 8006792:	4659      	mov	r1, fp
 8006794:	dd11      	ble.n	80067ba <_strtod_l+0x622>
 8006796:	2b1f      	cmp	r3, #31
 8006798:	f340 8124 	ble.w	80069e4 <_strtod_l+0x84c>
 800679c:	2b34      	cmp	r3, #52	; 0x34
 800679e:	bfde      	ittt	le
 80067a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80067a4:	f04f 33ff 	movle.w	r3, #4294967295
 80067a8:	fa03 f202 	lslle.w	r2, r3, r2
 80067ac:	f04f 0a00 	mov.w	sl, #0
 80067b0:	bfcc      	ite	gt
 80067b2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80067b6:	ea02 0b01 	andle.w	fp, r2, r1
 80067ba:	2200      	movs	r2, #0
 80067bc:	2300      	movs	r3, #0
 80067be:	4650      	mov	r0, sl
 80067c0:	4659      	mov	r1, fp
 80067c2:	f7fa f9a1 	bl	8000b08 <__aeabi_dcmpeq>
 80067c6:	2800      	cmp	r0, #0
 80067c8:	d1a2      	bne.n	8006710 <_strtod_l+0x578>
 80067ca:	9b07      	ldr	r3, [sp, #28]
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	9908      	ldr	r1, [sp, #32]
 80067d0:	462b      	mov	r3, r5
 80067d2:	463a      	mov	r2, r7
 80067d4:	4620      	mov	r0, r4
 80067d6:	f000 ffdb 	bl	8007790 <__s2b>
 80067da:	9007      	str	r0, [sp, #28]
 80067dc:	2800      	cmp	r0, #0
 80067de:	f43f af1f 	beq.w	8006620 <_strtod_l+0x488>
 80067e2:	9b05      	ldr	r3, [sp, #20]
 80067e4:	1b9e      	subs	r6, r3, r6
 80067e6:	9b06      	ldr	r3, [sp, #24]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	bfb4      	ite	lt
 80067ec:	4633      	movlt	r3, r6
 80067ee:	2300      	movge	r3, #0
 80067f0:	930c      	str	r3, [sp, #48]	; 0x30
 80067f2:	9b06      	ldr	r3, [sp, #24]
 80067f4:	2500      	movs	r5, #0
 80067f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80067fa:	9312      	str	r3, [sp, #72]	; 0x48
 80067fc:	462e      	mov	r6, r5
 80067fe:	9b07      	ldr	r3, [sp, #28]
 8006800:	4620      	mov	r0, r4
 8006802:	6859      	ldr	r1, [r3, #4]
 8006804:	f000 ff1c 	bl	8007640 <_Balloc>
 8006808:	9005      	str	r0, [sp, #20]
 800680a:	2800      	cmp	r0, #0
 800680c:	f43f af0c 	beq.w	8006628 <_strtod_l+0x490>
 8006810:	9b07      	ldr	r3, [sp, #28]
 8006812:	691a      	ldr	r2, [r3, #16]
 8006814:	3202      	adds	r2, #2
 8006816:	f103 010c 	add.w	r1, r3, #12
 800681a:	0092      	lsls	r2, r2, #2
 800681c:	300c      	adds	r0, #12
 800681e:	f000 ff01 	bl	8007624 <memcpy>
 8006822:	ec4b ab10 	vmov	d0, sl, fp
 8006826:	aa1a      	add	r2, sp, #104	; 0x68
 8006828:	a919      	add	r1, sp, #100	; 0x64
 800682a:	4620      	mov	r0, r4
 800682c:	f001 faf6 	bl	8007e1c <__d2b>
 8006830:	ec4b ab18 	vmov	d8, sl, fp
 8006834:	9018      	str	r0, [sp, #96]	; 0x60
 8006836:	2800      	cmp	r0, #0
 8006838:	f43f aef6 	beq.w	8006628 <_strtod_l+0x490>
 800683c:	2101      	movs	r1, #1
 800683e:	4620      	mov	r0, r4
 8006840:	f001 f840 	bl	80078c4 <__i2b>
 8006844:	4606      	mov	r6, r0
 8006846:	2800      	cmp	r0, #0
 8006848:	f43f aeee 	beq.w	8006628 <_strtod_l+0x490>
 800684c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800684e:	9904      	ldr	r1, [sp, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	bfab      	itete	ge
 8006854:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006856:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006858:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800685a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800685e:	bfac      	ite	ge
 8006860:	eb03 0902 	addge.w	r9, r3, r2
 8006864:	1ad7      	sublt	r7, r2, r3
 8006866:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006868:	eba3 0801 	sub.w	r8, r3, r1
 800686c:	4490      	add	r8, r2
 800686e:	4ba1      	ldr	r3, [pc, #644]	; (8006af4 <_strtod_l+0x95c>)
 8006870:	f108 38ff 	add.w	r8, r8, #4294967295
 8006874:	4598      	cmp	r8, r3
 8006876:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800687a:	f280 80c7 	bge.w	8006a0c <_strtod_l+0x874>
 800687e:	eba3 0308 	sub.w	r3, r3, r8
 8006882:	2b1f      	cmp	r3, #31
 8006884:	eba2 0203 	sub.w	r2, r2, r3
 8006888:	f04f 0101 	mov.w	r1, #1
 800688c:	f300 80b1 	bgt.w	80069f2 <_strtod_l+0x85a>
 8006890:	fa01 f303 	lsl.w	r3, r1, r3
 8006894:	930d      	str	r3, [sp, #52]	; 0x34
 8006896:	2300      	movs	r3, #0
 8006898:	9308      	str	r3, [sp, #32]
 800689a:	eb09 0802 	add.w	r8, r9, r2
 800689e:	9b04      	ldr	r3, [sp, #16]
 80068a0:	45c1      	cmp	r9, r8
 80068a2:	4417      	add	r7, r2
 80068a4:	441f      	add	r7, r3
 80068a6:	464b      	mov	r3, r9
 80068a8:	bfa8      	it	ge
 80068aa:	4643      	movge	r3, r8
 80068ac:	42bb      	cmp	r3, r7
 80068ae:	bfa8      	it	ge
 80068b0:	463b      	movge	r3, r7
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	bfc2      	ittt	gt
 80068b6:	eba8 0803 	subgt.w	r8, r8, r3
 80068ba:	1aff      	subgt	r7, r7, r3
 80068bc:	eba9 0903 	subgt.w	r9, r9, r3
 80068c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	dd17      	ble.n	80068f6 <_strtod_l+0x75e>
 80068c6:	4631      	mov	r1, r6
 80068c8:	461a      	mov	r2, r3
 80068ca:	4620      	mov	r0, r4
 80068cc:	f001 f8ba 	bl	8007a44 <__pow5mult>
 80068d0:	4606      	mov	r6, r0
 80068d2:	2800      	cmp	r0, #0
 80068d4:	f43f aea8 	beq.w	8006628 <_strtod_l+0x490>
 80068d8:	4601      	mov	r1, r0
 80068da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80068dc:	4620      	mov	r0, r4
 80068de:	f001 f807 	bl	80078f0 <__multiply>
 80068e2:	900b      	str	r0, [sp, #44]	; 0x2c
 80068e4:	2800      	cmp	r0, #0
 80068e6:	f43f ae9f 	beq.w	8006628 <_strtod_l+0x490>
 80068ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 80068ec:	4620      	mov	r0, r4
 80068ee:	f000 fee7 	bl	80076c0 <_Bfree>
 80068f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068f4:	9318      	str	r3, [sp, #96]	; 0x60
 80068f6:	f1b8 0f00 	cmp.w	r8, #0
 80068fa:	f300 808c 	bgt.w	8006a16 <_strtod_l+0x87e>
 80068fe:	9b06      	ldr	r3, [sp, #24]
 8006900:	2b00      	cmp	r3, #0
 8006902:	dd08      	ble.n	8006916 <_strtod_l+0x77e>
 8006904:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006906:	9905      	ldr	r1, [sp, #20]
 8006908:	4620      	mov	r0, r4
 800690a:	f001 f89b 	bl	8007a44 <__pow5mult>
 800690e:	9005      	str	r0, [sp, #20]
 8006910:	2800      	cmp	r0, #0
 8006912:	f43f ae89 	beq.w	8006628 <_strtod_l+0x490>
 8006916:	2f00      	cmp	r7, #0
 8006918:	dd08      	ble.n	800692c <_strtod_l+0x794>
 800691a:	9905      	ldr	r1, [sp, #20]
 800691c:	463a      	mov	r2, r7
 800691e:	4620      	mov	r0, r4
 8006920:	f001 f8ea 	bl	8007af8 <__lshift>
 8006924:	9005      	str	r0, [sp, #20]
 8006926:	2800      	cmp	r0, #0
 8006928:	f43f ae7e 	beq.w	8006628 <_strtod_l+0x490>
 800692c:	f1b9 0f00 	cmp.w	r9, #0
 8006930:	dd08      	ble.n	8006944 <_strtod_l+0x7ac>
 8006932:	4631      	mov	r1, r6
 8006934:	464a      	mov	r2, r9
 8006936:	4620      	mov	r0, r4
 8006938:	f001 f8de 	bl	8007af8 <__lshift>
 800693c:	4606      	mov	r6, r0
 800693e:	2800      	cmp	r0, #0
 8006940:	f43f ae72 	beq.w	8006628 <_strtod_l+0x490>
 8006944:	9a05      	ldr	r2, [sp, #20]
 8006946:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006948:	4620      	mov	r0, r4
 800694a:	f001 f961 	bl	8007c10 <__mdiff>
 800694e:	4605      	mov	r5, r0
 8006950:	2800      	cmp	r0, #0
 8006952:	f43f ae69 	beq.w	8006628 <_strtod_l+0x490>
 8006956:	68c3      	ldr	r3, [r0, #12]
 8006958:	930b      	str	r3, [sp, #44]	; 0x2c
 800695a:	2300      	movs	r3, #0
 800695c:	60c3      	str	r3, [r0, #12]
 800695e:	4631      	mov	r1, r6
 8006960:	f001 f93a 	bl	8007bd8 <__mcmp>
 8006964:	2800      	cmp	r0, #0
 8006966:	da60      	bge.n	8006a2a <_strtod_l+0x892>
 8006968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800696a:	ea53 030a 	orrs.w	r3, r3, sl
 800696e:	f040 8082 	bne.w	8006a76 <_strtod_l+0x8de>
 8006972:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006976:	2b00      	cmp	r3, #0
 8006978:	d17d      	bne.n	8006a76 <_strtod_l+0x8de>
 800697a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800697e:	0d1b      	lsrs	r3, r3, #20
 8006980:	051b      	lsls	r3, r3, #20
 8006982:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006986:	d976      	bls.n	8006a76 <_strtod_l+0x8de>
 8006988:	696b      	ldr	r3, [r5, #20]
 800698a:	b913      	cbnz	r3, 8006992 <_strtod_l+0x7fa>
 800698c:	692b      	ldr	r3, [r5, #16]
 800698e:	2b01      	cmp	r3, #1
 8006990:	dd71      	ble.n	8006a76 <_strtod_l+0x8de>
 8006992:	4629      	mov	r1, r5
 8006994:	2201      	movs	r2, #1
 8006996:	4620      	mov	r0, r4
 8006998:	f001 f8ae 	bl	8007af8 <__lshift>
 800699c:	4631      	mov	r1, r6
 800699e:	4605      	mov	r5, r0
 80069a0:	f001 f91a 	bl	8007bd8 <__mcmp>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	dd66      	ble.n	8006a76 <_strtod_l+0x8de>
 80069a8:	9904      	ldr	r1, [sp, #16]
 80069aa:	4a53      	ldr	r2, [pc, #332]	; (8006af8 <_strtod_l+0x960>)
 80069ac:	465b      	mov	r3, fp
 80069ae:	2900      	cmp	r1, #0
 80069b0:	f000 8081 	beq.w	8006ab6 <_strtod_l+0x91e>
 80069b4:	ea02 010b 	and.w	r1, r2, fp
 80069b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80069bc:	dc7b      	bgt.n	8006ab6 <_strtod_l+0x91e>
 80069be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80069c2:	f77f aea9 	ble.w	8006718 <_strtod_l+0x580>
 80069c6:	4b4d      	ldr	r3, [pc, #308]	; (8006afc <_strtod_l+0x964>)
 80069c8:	4650      	mov	r0, sl
 80069ca:	4659      	mov	r1, fp
 80069cc:	2200      	movs	r2, #0
 80069ce:	f7f9 fe33 	bl	8000638 <__aeabi_dmul>
 80069d2:	460b      	mov	r3, r1
 80069d4:	4303      	orrs	r3, r0
 80069d6:	bf08      	it	eq
 80069d8:	2322      	moveq	r3, #34	; 0x22
 80069da:	4682      	mov	sl, r0
 80069dc:	468b      	mov	fp, r1
 80069de:	bf08      	it	eq
 80069e0:	6023      	streq	r3, [r4, #0]
 80069e2:	e62b      	b.n	800663c <_strtod_l+0x4a4>
 80069e4:	f04f 32ff 	mov.w	r2, #4294967295
 80069e8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ec:	ea03 0a0a 	and.w	sl, r3, sl
 80069f0:	e6e3      	b.n	80067ba <_strtod_l+0x622>
 80069f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80069f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80069fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80069fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006a02:	fa01 f308 	lsl.w	r3, r1, r8
 8006a06:	9308      	str	r3, [sp, #32]
 8006a08:	910d      	str	r1, [sp, #52]	; 0x34
 8006a0a:	e746      	b.n	800689a <_strtod_l+0x702>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	9308      	str	r3, [sp, #32]
 8006a10:	2301      	movs	r3, #1
 8006a12:	930d      	str	r3, [sp, #52]	; 0x34
 8006a14:	e741      	b.n	800689a <_strtod_l+0x702>
 8006a16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006a18:	4642      	mov	r2, r8
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	f001 f86c 	bl	8007af8 <__lshift>
 8006a20:	9018      	str	r0, [sp, #96]	; 0x60
 8006a22:	2800      	cmp	r0, #0
 8006a24:	f47f af6b 	bne.w	80068fe <_strtod_l+0x766>
 8006a28:	e5fe      	b.n	8006628 <_strtod_l+0x490>
 8006a2a:	465f      	mov	r7, fp
 8006a2c:	d16e      	bne.n	8006b0c <_strtod_l+0x974>
 8006a2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a34:	b342      	cbz	r2, 8006a88 <_strtod_l+0x8f0>
 8006a36:	4a32      	ldr	r2, [pc, #200]	; (8006b00 <_strtod_l+0x968>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d128      	bne.n	8006a8e <_strtod_l+0x8f6>
 8006a3c:	9b04      	ldr	r3, [sp, #16]
 8006a3e:	4651      	mov	r1, sl
 8006a40:	b1eb      	cbz	r3, 8006a7e <_strtod_l+0x8e6>
 8006a42:	4b2d      	ldr	r3, [pc, #180]	; (8006af8 <_strtod_l+0x960>)
 8006a44:	403b      	ands	r3, r7
 8006a46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a4e:	d819      	bhi.n	8006a84 <_strtod_l+0x8ec>
 8006a50:	0d1b      	lsrs	r3, r3, #20
 8006a52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006a56:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5a:	4299      	cmp	r1, r3
 8006a5c:	d117      	bne.n	8006a8e <_strtod_l+0x8f6>
 8006a5e:	4b29      	ldr	r3, [pc, #164]	; (8006b04 <_strtod_l+0x96c>)
 8006a60:	429f      	cmp	r7, r3
 8006a62:	d102      	bne.n	8006a6a <_strtod_l+0x8d2>
 8006a64:	3101      	adds	r1, #1
 8006a66:	f43f addf 	beq.w	8006628 <_strtod_l+0x490>
 8006a6a:	4b23      	ldr	r3, [pc, #140]	; (8006af8 <_strtod_l+0x960>)
 8006a6c:	403b      	ands	r3, r7
 8006a6e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006a72:	f04f 0a00 	mov.w	sl, #0
 8006a76:	9b04      	ldr	r3, [sp, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1a4      	bne.n	80069c6 <_strtod_l+0x82e>
 8006a7c:	e5de      	b.n	800663c <_strtod_l+0x4a4>
 8006a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a82:	e7ea      	b.n	8006a5a <_strtod_l+0x8c2>
 8006a84:	4613      	mov	r3, r2
 8006a86:	e7e8      	b.n	8006a5a <_strtod_l+0x8c2>
 8006a88:	ea53 030a 	orrs.w	r3, r3, sl
 8006a8c:	d08c      	beq.n	80069a8 <_strtod_l+0x810>
 8006a8e:	9b08      	ldr	r3, [sp, #32]
 8006a90:	b1db      	cbz	r3, 8006aca <_strtod_l+0x932>
 8006a92:	423b      	tst	r3, r7
 8006a94:	d0ef      	beq.n	8006a76 <_strtod_l+0x8de>
 8006a96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a98:	9a04      	ldr	r2, [sp, #16]
 8006a9a:	4650      	mov	r0, sl
 8006a9c:	4659      	mov	r1, fp
 8006a9e:	b1c3      	cbz	r3, 8006ad2 <_strtod_l+0x93a>
 8006aa0:	f7ff fb5d 	bl	800615e <sulp>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	ec51 0b18 	vmov	r0, r1, d8
 8006aac:	f7f9 fc0e 	bl	80002cc <__adddf3>
 8006ab0:	4682      	mov	sl, r0
 8006ab2:	468b      	mov	fp, r1
 8006ab4:	e7df      	b.n	8006a76 <_strtod_l+0x8de>
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006abc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006ac0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006ac4:	f04f 3aff 	mov.w	sl, #4294967295
 8006ac8:	e7d5      	b.n	8006a76 <_strtod_l+0x8de>
 8006aca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006acc:	ea13 0f0a 	tst.w	r3, sl
 8006ad0:	e7e0      	b.n	8006a94 <_strtod_l+0x8fc>
 8006ad2:	f7ff fb44 	bl	800615e <sulp>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	460b      	mov	r3, r1
 8006ada:	ec51 0b18 	vmov	r0, r1, d8
 8006ade:	f7f9 fbf3 	bl	80002c8 <__aeabi_dsub>
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	4682      	mov	sl, r0
 8006ae8:	468b      	mov	fp, r1
 8006aea:	f7fa f80d 	bl	8000b08 <__aeabi_dcmpeq>
 8006aee:	2800      	cmp	r0, #0
 8006af0:	d0c1      	beq.n	8006a76 <_strtod_l+0x8de>
 8006af2:	e611      	b.n	8006718 <_strtod_l+0x580>
 8006af4:	fffffc02 	.word	0xfffffc02
 8006af8:	7ff00000 	.word	0x7ff00000
 8006afc:	39500000 	.word	0x39500000
 8006b00:	000fffff 	.word	0x000fffff
 8006b04:	7fefffff 	.word	0x7fefffff
 8006b08:	0800a5f8 	.word	0x0800a5f8
 8006b0c:	4631      	mov	r1, r6
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f001 f9e0 	bl	8007ed4 <__ratio>
 8006b14:	ec59 8b10 	vmov	r8, r9, d0
 8006b18:	ee10 0a10 	vmov	r0, s0
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b22:	4649      	mov	r1, r9
 8006b24:	f7fa f804 	bl	8000b30 <__aeabi_dcmple>
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	d07a      	beq.n	8006c22 <_strtod_l+0xa8a>
 8006b2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d04a      	beq.n	8006bc8 <_strtod_l+0xa30>
 8006b32:	4b95      	ldr	r3, [pc, #596]	; (8006d88 <_strtod_l+0xbf0>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006b3a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006d88 <_strtod_l+0xbf0>
 8006b3e:	f04f 0800 	mov.w	r8, #0
 8006b42:	4b92      	ldr	r3, [pc, #584]	; (8006d8c <_strtod_l+0xbf4>)
 8006b44:	403b      	ands	r3, r7
 8006b46:	930d      	str	r3, [sp, #52]	; 0x34
 8006b48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b4a:	4b91      	ldr	r3, [pc, #580]	; (8006d90 <_strtod_l+0xbf8>)
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	f040 80b0 	bne.w	8006cb2 <_strtod_l+0xb1a>
 8006b52:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006b56:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006b5a:	ec4b ab10 	vmov	d0, sl, fp
 8006b5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006b62:	f001 f8df 	bl	8007d24 <__ulp>
 8006b66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006b6a:	ec53 2b10 	vmov	r2, r3, d0
 8006b6e:	f7f9 fd63 	bl	8000638 <__aeabi_dmul>
 8006b72:	4652      	mov	r2, sl
 8006b74:	465b      	mov	r3, fp
 8006b76:	f7f9 fba9 	bl	80002cc <__adddf3>
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4983      	ldr	r1, [pc, #524]	; (8006d8c <_strtod_l+0xbf4>)
 8006b7e:	4a85      	ldr	r2, [pc, #532]	; (8006d94 <_strtod_l+0xbfc>)
 8006b80:	4019      	ands	r1, r3
 8006b82:	4291      	cmp	r1, r2
 8006b84:	4682      	mov	sl, r0
 8006b86:	d960      	bls.n	8006c4a <_strtod_l+0xab2>
 8006b88:	ee18 3a90 	vmov	r3, s17
 8006b8c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d104      	bne.n	8006b9e <_strtod_l+0xa06>
 8006b94:	ee18 3a10 	vmov	r3, s16
 8006b98:	3301      	adds	r3, #1
 8006b9a:	f43f ad45 	beq.w	8006628 <_strtod_l+0x490>
 8006b9e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006da0 <_strtod_l+0xc08>
 8006ba2:	f04f 3aff 	mov.w	sl, #4294967295
 8006ba6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f000 fd89 	bl	80076c0 <_Bfree>
 8006bae:	9905      	ldr	r1, [sp, #20]
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f000 fd85 	bl	80076c0 <_Bfree>
 8006bb6:	4631      	mov	r1, r6
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f000 fd81 	bl	80076c0 <_Bfree>
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f000 fd7d 	bl	80076c0 <_Bfree>
 8006bc6:	e61a      	b.n	80067fe <_strtod_l+0x666>
 8006bc8:	f1ba 0f00 	cmp.w	sl, #0
 8006bcc:	d11b      	bne.n	8006c06 <_strtod_l+0xa6e>
 8006bce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006bd2:	b9f3      	cbnz	r3, 8006c12 <_strtod_l+0xa7a>
 8006bd4:	4b6c      	ldr	r3, [pc, #432]	; (8006d88 <_strtod_l+0xbf0>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	4640      	mov	r0, r8
 8006bda:	4649      	mov	r1, r9
 8006bdc:	f7f9 ff9e 	bl	8000b1c <__aeabi_dcmplt>
 8006be0:	b9d0      	cbnz	r0, 8006c18 <_strtod_l+0xa80>
 8006be2:	4640      	mov	r0, r8
 8006be4:	4649      	mov	r1, r9
 8006be6:	4b6c      	ldr	r3, [pc, #432]	; (8006d98 <_strtod_l+0xc00>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	f7f9 fd25 	bl	8000638 <__aeabi_dmul>
 8006bee:	4680      	mov	r8, r0
 8006bf0:	4689      	mov	r9, r1
 8006bf2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006bf6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006bfa:	9315      	str	r3, [sp, #84]	; 0x54
 8006bfc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006c00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006c04:	e79d      	b.n	8006b42 <_strtod_l+0x9aa>
 8006c06:	f1ba 0f01 	cmp.w	sl, #1
 8006c0a:	d102      	bne.n	8006c12 <_strtod_l+0xa7a>
 8006c0c:	2f00      	cmp	r7, #0
 8006c0e:	f43f ad83 	beq.w	8006718 <_strtod_l+0x580>
 8006c12:	4b62      	ldr	r3, [pc, #392]	; (8006d9c <_strtod_l+0xc04>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	e78e      	b.n	8006b36 <_strtod_l+0x99e>
 8006c18:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006d98 <_strtod_l+0xc00>
 8006c1c:	f04f 0800 	mov.w	r8, #0
 8006c20:	e7e7      	b.n	8006bf2 <_strtod_l+0xa5a>
 8006c22:	4b5d      	ldr	r3, [pc, #372]	; (8006d98 <_strtod_l+0xc00>)
 8006c24:	4640      	mov	r0, r8
 8006c26:	4649      	mov	r1, r9
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f7f9 fd05 	bl	8000638 <__aeabi_dmul>
 8006c2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c30:	4680      	mov	r8, r0
 8006c32:	4689      	mov	r9, r1
 8006c34:	b933      	cbnz	r3, 8006c44 <_strtod_l+0xaac>
 8006c36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c3a:	900e      	str	r0, [sp, #56]	; 0x38
 8006c3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006c42:	e7dd      	b.n	8006c00 <_strtod_l+0xa68>
 8006c44:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006c48:	e7f9      	b.n	8006c3e <_strtod_l+0xaa6>
 8006c4a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006c4e:	9b04      	ldr	r3, [sp, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1a8      	bne.n	8006ba6 <_strtod_l+0xa0e>
 8006c54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c5a:	0d1b      	lsrs	r3, r3, #20
 8006c5c:	051b      	lsls	r3, r3, #20
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d1a1      	bne.n	8006ba6 <_strtod_l+0xa0e>
 8006c62:	4640      	mov	r0, r8
 8006c64:	4649      	mov	r1, r9
 8006c66:	f7fa f81f 	bl	8000ca8 <__aeabi_d2lz>
 8006c6a:	f7f9 fcb7 	bl	80005dc <__aeabi_l2d>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4640      	mov	r0, r8
 8006c74:	4649      	mov	r1, r9
 8006c76:	f7f9 fb27 	bl	80002c8 <__aeabi_dsub>
 8006c7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c80:	ea43 030a 	orr.w	r3, r3, sl
 8006c84:	4313      	orrs	r3, r2
 8006c86:	4680      	mov	r8, r0
 8006c88:	4689      	mov	r9, r1
 8006c8a:	d055      	beq.n	8006d38 <_strtod_l+0xba0>
 8006c8c:	a336      	add	r3, pc, #216	; (adr r3, 8006d68 <_strtod_l+0xbd0>)
 8006c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c92:	f7f9 ff43 	bl	8000b1c <__aeabi_dcmplt>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	f47f acd0 	bne.w	800663c <_strtod_l+0x4a4>
 8006c9c:	a334      	add	r3, pc, #208	; (adr r3, 8006d70 <_strtod_l+0xbd8>)
 8006c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca2:	4640      	mov	r0, r8
 8006ca4:	4649      	mov	r1, r9
 8006ca6:	f7f9 ff57 	bl	8000b58 <__aeabi_dcmpgt>
 8006caa:	2800      	cmp	r0, #0
 8006cac:	f43f af7b 	beq.w	8006ba6 <_strtod_l+0xa0e>
 8006cb0:	e4c4      	b.n	800663c <_strtod_l+0x4a4>
 8006cb2:	9b04      	ldr	r3, [sp, #16]
 8006cb4:	b333      	cbz	r3, 8006d04 <_strtod_l+0xb6c>
 8006cb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cb8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006cbc:	d822      	bhi.n	8006d04 <_strtod_l+0xb6c>
 8006cbe:	a32e      	add	r3, pc, #184	; (adr r3, 8006d78 <_strtod_l+0xbe0>)
 8006cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc4:	4640      	mov	r0, r8
 8006cc6:	4649      	mov	r1, r9
 8006cc8:	f7f9 ff32 	bl	8000b30 <__aeabi_dcmple>
 8006ccc:	b1a0      	cbz	r0, 8006cf8 <_strtod_l+0xb60>
 8006cce:	4649      	mov	r1, r9
 8006cd0:	4640      	mov	r0, r8
 8006cd2:	f7f9 ff61 	bl	8000b98 <__aeabi_d2uiz>
 8006cd6:	2801      	cmp	r0, #1
 8006cd8:	bf38      	it	cc
 8006cda:	2001      	movcc	r0, #1
 8006cdc:	f7f9 fc32 	bl	8000544 <__aeabi_ui2d>
 8006ce0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ce2:	4680      	mov	r8, r0
 8006ce4:	4689      	mov	r9, r1
 8006ce6:	bb23      	cbnz	r3, 8006d32 <_strtod_l+0xb9a>
 8006ce8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006cec:	9010      	str	r0, [sp, #64]	; 0x40
 8006cee:	9311      	str	r3, [sp, #68]	; 0x44
 8006cf0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006cf4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cfa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006cfc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006d00:	1a9b      	subs	r3, r3, r2
 8006d02:	9309      	str	r3, [sp, #36]	; 0x24
 8006d04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006d08:	eeb0 0a48 	vmov.f32	s0, s16
 8006d0c:	eef0 0a68 	vmov.f32	s1, s17
 8006d10:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006d14:	f001 f806 	bl	8007d24 <__ulp>
 8006d18:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006d1c:	ec53 2b10 	vmov	r2, r3, d0
 8006d20:	f7f9 fc8a 	bl	8000638 <__aeabi_dmul>
 8006d24:	ec53 2b18 	vmov	r2, r3, d8
 8006d28:	f7f9 fad0 	bl	80002cc <__adddf3>
 8006d2c:	4682      	mov	sl, r0
 8006d2e:	468b      	mov	fp, r1
 8006d30:	e78d      	b.n	8006c4e <_strtod_l+0xab6>
 8006d32:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006d36:	e7db      	b.n	8006cf0 <_strtod_l+0xb58>
 8006d38:	a311      	add	r3, pc, #68	; (adr r3, 8006d80 <_strtod_l+0xbe8>)
 8006d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3e:	f7f9 feed 	bl	8000b1c <__aeabi_dcmplt>
 8006d42:	e7b2      	b.n	8006caa <_strtod_l+0xb12>
 8006d44:	2300      	movs	r3, #0
 8006d46:	930a      	str	r3, [sp, #40]	; 0x28
 8006d48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	f7ff ba6b 	b.w	8006228 <_strtod_l+0x90>
 8006d52:	2a65      	cmp	r2, #101	; 0x65
 8006d54:	f43f ab5f 	beq.w	8006416 <_strtod_l+0x27e>
 8006d58:	2a45      	cmp	r2, #69	; 0x45
 8006d5a:	f43f ab5c 	beq.w	8006416 <_strtod_l+0x27e>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	f7ff bb94 	b.w	800648c <_strtod_l+0x2f4>
 8006d64:	f3af 8000 	nop.w
 8006d68:	94a03595 	.word	0x94a03595
 8006d6c:	3fdfffff 	.word	0x3fdfffff
 8006d70:	35afe535 	.word	0x35afe535
 8006d74:	3fe00000 	.word	0x3fe00000
 8006d78:	ffc00000 	.word	0xffc00000
 8006d7c:	41dfffff 	.word	0x41dfffff
 8006d80:	94a03595 	.word	0x94a03595
 8006d84:	3fcfffff 	.word	0x3fcfffff
 8006d88:	3ff00000 	.word	0x3ff00000
 8006d8c:	7ff00000 	.word	0x7ff00000
 8006d90:	7fe00000 	.word	0x7fe00000
 8006d94:	7c9fffff 	.word	0x7c9fffff
 8006d98:	3fe00000 	.word	0x3fe00000
 8006d9c:	bff00000 	.word	0xbff00000
 8006da0:	7fefffff 	.word	0x7fefffff

08006da4 <_strtod_r>:
 8006da4:	4b01      	ldr	r3, [pc, #4]	; (8006dac <_strtod_r+0x8>)
 8006da6:	f7ff b9f7 	b.w	8006198 <_strtod_l>
 8006daa:	bf00      	nop
 8006dac:	20000084 	.word	0x20000084

08006db0 <_strtol_l.constprop.0>:
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006db6:	d001      	beq.n	8006dbc <_strtol_l.constprop.0+0xc>
 8006db8:	2b24      	cmp	r3, #36	; 0x24
 8006dba:	d906      	bls.n	8006dca <_strtol_l.constprop.0+0x1a>
 8006dbc:	f7fe fef6 	bl	8005bac <__errno>
 8006dc0:	2316      	movs	r3, #22
 8006dc2:	6003      	str	r3, [r0, #0]
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006eb0 <_strtol_l.constprop.0+0x100>
 8006dce:	460d      	mov	r5, r1
 8006dd0:	462e      	mov	r6, r5
 8006dd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006dd6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006dda:	f017 0708 	ands.w	r7, r7, #8
 8006dde:	d1f7      	bne.n	8006dd0 <_strtol_l.constprop.0+0x20>
 8006de0:	2c2d      	cmp	r4, #45	; 0x2d
 8006de2:	d132      	bne.n	8006e4a <_strtol_l.constprop.0+0x9a>
 8006de4:	782c      	ldrb	r4, [r5, #0]
 8006de6:	2701      	movs	r7, #1
 8006de8:	1cb5      	adds	r5, r6, #2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d05b      	beq.n	8006ea6 <_strtol_l.constprop.0+0xf6>
 8006dee:	2b10      	cmp	r3, #16
 8006df0:	d109      	bne.n	8006e06 <_strtol_l.constprop.0+0x56>
 8006df2:	2c30      	cmp	r4, #48	; 0x30
 8006df4:	d107      	bne.n	8006e06 <_strtol_l.constprop.0+0x56>
 8006df6:	782c      	ldrb	r4, [r5, #0]
 8006df8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006dfc:	2c58      	cmp	r4, #88	; 0x58
 8006dfe:	d14d      	bne.n	8006e9c <_strtol_l.constprop.0+0xec>
 8006e00:	786c      	ldrb	r4, [r5, #1]
 8006e02:	2310      	movs	r3, #16
 8006e04:	3502      	adds	r5, #2
 8006e06:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006e0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e0e:	f04f 0c00 	mov.w	ip, #0
 8006e12:	fbb8 f9f3 	udiv	r9, r8, r3
 8006e16:	4666      	mov	r6, ip
 8006e18:	fb03 8a19 	mls	sl, r3, r9, r8
 8006e1c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006e20:	f1be 0f09 	cmp.w	lr, #9
 8006e24:	d816      	bhi.n	8006e54 <_strtol_l.constprop.0+0xa4>
 8006e26:	4674      	mov	r4, lr
 8006e28:	42a3      	cmp	r3, r4
 8006e2a:	dd24      	ble.n	8006e76 <_strtol_l.constprop.0+0xc6>
 8006e2c:	f1bc 0f00 	cmp.w	ip, #0
 8006e30:	db1e      	blt.n	8006e70 <_strtol_l.constprop.0+0xc0>
 8006e32:	45b1      	cmp	r9, r6
 8006e34:	d31c      	bcc.n	8006e70 <_strtol_l.constprop.0+0xc0>
 8006e36:	d101      	bne.n	8006e3c <_strtol_l.constprop.0+0x8c>
 8006e38:	45a2      	cmp	sl, r4
 8006e3a:	db19      	blt.n	8006e70 <_strtol_l.constprop.0+0xc0>
 8006e3c:	fb06 4603 	mla	r6, r6, r3, r4
 8006e40:	f04f 0c01 	mov.w	ip, #1
 8006e44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e48:	e7e8      	b.n	8006e1c <_strtol_l.constprop.0+0x6c>
 8006e4a:	2c2b      	cmp	r4, #43	; 0x2b
 8006e4c:	bf04      	itt	eq
 8006e4e:	782c      	ldrbeq	r4, [r5, #0]
 8006e50:	1cb5      	addeq	r5, r6, #2
 8006e52:	e7ca      	b.n	8006dea <_strtol_l.constprop.0+0x3a>
 8006e54:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006e58:	f1be 0f19 	cmp.w	lr, #25
 8006e5c:	d801      	bhi.n	8006e62 <_strtol_l.constprop.0+0xb2>
 8006e5e:	3c37      	subs	r4, #55	; 0x37
 8006e60:	e7e2      	b.n	8006e28 <_strtol_l.constprop.0+0x78>
 8006e62:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006e66:	f1be 0f19 	cmp.w	lr, #25
 8006e6a:	d804      	bhi.n	8006e76 <_strtol_l.constprop.0+0xc6>
 8006e6c:	3c57      	subs	r4, #87	; 0x57
 8006e6e:	e7db      	b.n	8006e28 <_strtol_l.constprop.0+0x78>
 8006e70:	f04f 3cff 	mov.w	ip, #4294967295
 8006e74:	e7e6      	b.n	8006e44 <_strtol_l.constprop.0+0x94>
 8006e76:	f1bc 0f00 	cmp.w	ip, #0
 8006e7a:	da05      	bge.n	8006e88 <_strtol_l.constprop.0+0xd8>
 8006e7c:	2322      	movs	r3, #34	; 0x22
 8006e7e:	6003      	str	r3, [r0, #0]
 8006e80:	4646      	mov	r6, r8
 8006e82:	b942      	cbnz	r2, 8006e96 <_strtol_l.constprop.0+0xe6>
 8006e84:	4630      	mov	r0, r6
 8006e86:	e79e      	b.n	8006dc6 <_strtol_l.constprop.0+0x16>
 8006e88:	b107      	cbz	r7, 8006e8c <_strtol_l.constprop.0+0xdc>
 8006e8a:	4276      	negs	r6, r6
 8006e8c:	2a00      	cmp	r2, #0
 8006e8e:	d0f9      	beq.n	8006e84 <_strtol_l.constprop.0+0xd4>
 8006e90:	f1bc 0f00 	cmp.w	ip, #0
 8006e94:	d000      	beq.n	8006e98 <_strtol_l.constprop.0+0xe8>
 8006e96:	1e69      	subs	r1, r5, #1
 8006e98:	6011      	str	r1, [r2, #0]
 8006e9a:	e7f3      	b.n	8006e84 <_strtol_l.constprop.0+0xd4>
 8006e9c:	2430      	movs	r4, #48	; 0x30
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1b1      	bne.n	8006e06 <_strtol_l.constprop.0+0x56>
 8006ea2:	2308      	movs	r3, #8
 8006ea4:	e7af      	b.n	8006e06 <_strtol_l.constprop.0+0x56>
 8006ea6:	2c30      	cmp	r4, #48	; 0x30
 8006ea8:	d0a5      	beq.n	8006df6 <_strtol_l.constprop.0+0x46>
 8006eaa:	230a      	movs	r3, #10
 8006eac:	e7ab      	b.n	8006e06 <_strtol_l.constprop.0+0x56>
 8006eae:	bf00      	nop
 8006eb0:	0800a621 	.word	0x0800a621

08006eb4 <_strtol_r>:
 8006eb4:	f7ff bf7c 	b.w	8006db0 <_strtol_l.constprop.0>

08006eb8 <_write_r>:
 8006eb8:	b538      	push	{r3, r4, r5, lr}
 8006eba:	4d07      	ldr	r5, [pc, #28]	; (8006ed8 <_write_r+0x20>)
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	4608      	mov	r0, r1
 8006ec0:	4611      	mov	r1, r2
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	602a      	str	r2, [r5, #0]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	f7fa fc5b 	bl	8001782 <_write>
 8006ecc:	1c43      	adds	r3, r0, #1
 8006ece:	d102      	bne.n	8006ed6 <_write_r+0x1e>
 8006ed0:	682b      	ldr	r3, [r5, #0]
 8006ed2:	b103      	cbz	r3, 8006ed6 <_write_r+0x1e>
 8006ed4:	6023      	str	r3, [r4, #0]
 8006ed6:	bd38      	pop	{r3, r4, r5, pc}
 8006ed8:	20000390 	.word	0x20000390

08006edc <_close_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	4d06      	ldr	r5, [pc, #24]	; (8006ef8 <_close_r+0x1c>)
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	602b      	str	r3, [r5, #0]
 8006ee8:	f7fa fc67 	bl	80017ba <_close>
 8006eec:	1c43      	adds	r3, r0, #1
 8006eee:	d102      	bne.n	8006ef6 <_close_r+0x1a>
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	b103      	cbz	r3, 8006ef6 <_close_r+0x1a>
 8006ef4:	6023      	str	r3, [r4, #0]
 8006ef6:	bd38      	pop	{r3, r4, r5, pc}
 8006ef8:	20000390 	.word	0x20000390

08006efc <rshift>:
 8006efc:	6903      	ldr	r3, [r0, #16]
 8006efe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006f02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f06:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006f0a:	f100 0414 	add.w	r4, r0, #20
 8006f0e:	dd45      	ble.n	8006f9c <rshift+0xa0>
 8006f10:	f011 011f 	ands.w	r1, r1, #31
 8006f14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006f18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006f1c:	d10c      	bne.n	8006f38 <rshift+0x3c>
 8006f1e:	f100 0710 	add.w	r7, r0, #16
 8006f22:	4629      	mov	r1, r5
 8006f24:	42b1      	cmp	r1, r6
 8006f26:	d334      	bcc.n	8006f92 <rshift+0x96>
 8006f28:	1a9b      	subs	r3, r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	1eea      	subs	r2, r5, #3
 8006f2e:	4296      	cmp	r6, r2
 8006f30:	bf38      	it	cc
 8006f32:	2300      	movcc	r3, #0
 8006f34:	4423      	add	r3, r4
 8006f36:	e015      	b.n	8006f64 <rshift+0x68>
 8006f38:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006f3c:	f1c1 0820 	rsb	r8, r1, #32
 8006f40:	40cf      	lsrs	r7, r1
 8006f42:	f105 0e04 	add.w	lr, r5, #4
 8006f46:	46a1      	mov	r9, r4
 8006f48:	4576      	cmp	r6, lr
 8006f4a:	46f4      	mov	ip, lr
 8006f4c:	d815      	bhi.n	8006f7a <rshift+0x7e>
 8006f4e:	1a9a      	subs	r2, r3, r2
 8006f50:	0092      	lsls	r2, r2, #2
 8006f52:	3a04      	subs	r2, #4
 8006f54:	3501      	adds	r5, #1
 8006f56:	42ae      	cmp	r6, r5
 8006f58:	bf38      	it	cc
 8006f5a:	2200      	movcc	r2, #0
 8006f5c:	18a3      	adds	r3, r4, r2
 8006f5e:	50a7      	str	r7, [r4, r2]
 8006f60:	b107      	cbz	r7, 8006f64 <rshift+0x68>
 8006f62:	3304      	adds	r3, #4
 8006f64:	1b1a      	subs	r2, r3, r4
 8006f66:	42a3      	cmp	r3, r4
 8006f68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006f6c:	bf08      	it	eq
 8006f6e:	2300      	moveq	r3, #0
 8006f70:	6102      	str	r2, [r0, #16]
 8006f72:	bf08      	it	eq
 8006f74:	6143      	streq	r3, [r0, #20]
 8006f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f7a:	f8dc c000 	ldr.w	ip, [ip]
 8006f7e:	fa0c fc08 	lsl.w	ip, ip, r8
 8006f82:	ea4c 0707 	orr.w	r7, ip, r7
 8006f86:	f849 7b04 	str.w	r7, [r9], #4
 8006f8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006f8e:	40cf      	lsrs	r7, r1
 8006f90:	e7da      	b.n	8006f48 <rshift+0x4c>
 8006f92:	f851 cb04 	ldr.w	ip, [r1], #4
 8006f96:	f847 cf04 	str.w	ip, [r7, #4]!
 8006f9a:	e7c3      	b.n	8006f24 <rshift+0x28>
 8006f9c:	4623      	mov	r3, r4
 8006f9e:	e7e1      	b.n	8006f64 <rshift+0x68>

08006fa0 <__hexdig_fun>:
 8006fa0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006fa4:	2b09      	cmp	r3, #9
 8006fa6:	d802      	bhi.n	8006fae <__hexdig_fun+0xe>
 8006fa8:	3820      	subs	r0, #32
 8006faa:	b2c0      	uxtb	r0, r0
 8006fac:	4770      	bx	lr
 8006fae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006fb2:	2b05      	cmp	r3, #5
 8006fb4:	d801      	bhi.n	8006fba <__hexdig_fun+0x1a>
 8006fb6:	3847      	subs	r0, #71	; 0x47
 8006fb8:	e7f7      	b.n	8006faa <__hexdig_fun+0xa>
 8006fba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006fbe:	2b05      	cmp	r3, #5
 8006fc0:	d801      	bhi.n	8006fc6 <__hexdig_fun+0x26>
 8006fc2:	3827      	subs	r0, #39	; 0x27
 8006fc4:	e7f1      	b.n	8006faa <__hexdig_fun+0xa>
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	4770      	bx	lr
	...

08006fcc <__gethex>:
 8006fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd0:	ed2d 8b02 	vpush	{d8}
 8006fd4:	b089      	sub	sp, #36	; 0x24
 8006fd6:	ee08 0a10 	vmov	s16, r0
 8006fda:	9304      	str	r3, [sp, #16]
 8006fdc:	4bb4      	ldr	r3, [pc, #720]	; (80072b0 <__gethex+0x2e4>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	9301      	str	r3, [sp, #4]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	468b      	mov	fp, r1
 8006fe6:	4690      	mov	r8, r2
 8006fe8:	f7f9 f912 	bl	8000210 <strlen>
 8006fec:	9b01      	ldr	r3, [sp, #4]
 8006fee:	f8db 2000 	ldr.w	r2, [fp]
 8006ff2:	4403      	add	r3, r0
 8006ff4:	4682      	mov	sl, r0
 8006ff6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006ffa:	9305      	str	r3, [sp, #20]
 8006ffc:	1c93      	adds	r3, r2, #2
 8006ffe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007002:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007006:	32fe      	adds	r2, #254	; 0xfe
 8007008:	18d1      	adds	r1, r2, r3
 800700a:	461f      	mov	r7, r3
 800700c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007010:	9100      	str	r1, [sp, #0]
 8007012:	2830      	cmp	r0, #48	; 0x30
 8007014:	d0f8      	beq.n	8007008 <__gethex+0x3c>
 8007016:	f7ff ffc3 	bl	8006fa0 <__hexdig_fun>
 800701a:	4604      	mov	r4, r0
 800701c:	2800      	cmp	r0, #0
 800701e:	d13a      	bne.n	8007096 <__gethex+0xca>
 8007020:	9901      	ldr	r1, [sp, #4]
 8007022:	4652      	mov	r2, sl
 8007024:	4638      	mov	r0, r7
 8007026:	f001 feef 	bl	8008e08 <strncmp>
 800702a:	4605      	mov	r5, r0
 800702c:	2800      	cmp	r0, #0
 800702e:	d168      	bne.n	8007102 <__gethex+0x136>
 8007030:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007034:	eb07 060a 	add.w	r6, r7, sl
 8007038:	f7ff ffb2 	bl	8006fa0 <__hexdig_fun>
 800703c:	2800      	cmp	r0, #0
 800703e:	d062      	beq.n	8007106 <__gethex+0x13a>
 8007040:	4633      	mov	r3, r6
 8007042:	7818      	ldrb	r0, [r3, #0]
 8007044:	2830      	cmp	r0, #48	; 0x30
 8007046:	461f      	mov	r7, r3
 8007048:	f103 0301 	add.w	r3, r3, #1
 800704c:	d0f9      	beq.n	8007042 <__gethex+0x76>
 800704e:	f7ff ffa7 	bl	8006fa0 <__hexdig_fun>
 8007052:	2301      	movs	r3, #1
 8007054:	fab0 f480 	clz	r4, r0
 8007058:	0964      	lsrs	r4, r4, #5
 800705a:	4635      	mov	r5, r6
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	463a      	mov	r2, r7
 8007060:	4616      	mov	r6, r2
 8007062:	3201      	adds	r2, #1
 8007064:	7830      	ldrb	r0, [r6, #0]
 8007066:	f7ff ff9b 	bl	8006fa0 <__hexdig_fun>
 800706a:	2800      	cmp	r0, #0
 800706c:	d1f8      	bne.n	8007060 <__gethex+0x94>
 800706e:	9901      	ldr	r1, [sp, #4]
 8007070:	4652      	mov	r2, sl
 8007072:	4630      	mov	r0, r6
 8007074:	f001 fec8 	bl	8008e08 <strncmp>
 8007078:	b980      	cbnz	r0, 800709c <__gethex+0xd0>
 800707a:	b94d      	cbnz	r5, 8007090 <__gethex+0xc4>
 800707c:	eb06 050a 	add.w	r5, r6, sl
 8007080:	462a      	mov	r2, r5
 8007082:	4616      	mov	r6, r2
 8007084:	3201      	adds	r2, #1
 8007086:	7830      	ldrb	r0, [r6, #0]
 8007088:	f7ff ff8a 	bl	8006fa0 <__hexdig_fun>
 800708c:	2800      	cmp	r0, #0
 800708e:	d1f8      	bne.n	8007082 <__gethex+0xb6>
 8007090:	1bad      	subs	r5, r5, r6
 8007092:	00ad      	lsls	r5, r5, #2
 8007094:	e004      	b.n	80070a0 <__gethex+0xd4>
 8007096:	2400      	movs	r4, #0
 8007098:	4625      	mov	r5, r4
 800709a:	e7e0      	b.n	800705e <__gethex+0x92>
 800709c:	2d00      	cmp	r5, #0
 800709e:	d1f7      	bne.n	8007090 <__gethex+0xc4>
 80070a0:	7833      	ldrb	r3, [r6, #0]
 80070a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80070a6:	2b50      	cmp	r3, #80	; 0x50
 80070a8:	d13b      	bne.n	8007122 <__gethex+0x156>
 80070aa:	7873      	ldrb	r3, [r6, #1]
 80070ac:	2b2b      	cmp	r3, #43	; 0x2b
 80070ae:	d02c      	beq.n	800710a <__gethex+0x13e>
 80070b0:	2b2d      	cmp	r3, #45	; 0x2d
 80070b2:	d02e      	beq.n	8007112 <__gethex+0x146>
 80070b4:	1c71      	adds	r1, r6, #1
 80070b6:	f04f 0900 	mov.w	r9, #0
 80070ba:	7808      	ldrb	r0, [r1, #0]
 80070bc:	f7ff ff70 	bl	8006fa0 <__hexdig_fun>
 80070c0:	1e43      	subs	r3, r0, #1
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b18      	cmp	r3, #24
 80070c6:	d82c      	bhi.n	8007122 <__gethex+0x156>
 80070c8:	f1a0 0210 	sub.w	r2, r0, #16
 80070cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80070d0:	f7ff ff66 	bl	8006fa0 <__hexdig_fun>
 80070d4:	1e43      	subs	r3, r0, #1
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b18      	cmp	r3, #24
 80070da:	d91d      	bls.n	8007118 <__gethex+0x14c>
 80070dc:	f1b9 0f00 	cmp.w	r9, #0
 80070e0:	d000      	beq.n	80070e4 <__gethex+0x118>
 80070e2:	4252      	negs	r2, r2
 80070e4:	4415      	add	r5, r2
 80070e6:	f8cb 1000 	str.w	r1, [fp]
 80070ea:	b1e4      	cbz	r4, 8007126 <__gethex+0x15a>
 80070ec:	9b00      	ldr	r3, [sp, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	bf14      	ite	ne
 80070f2:	2700      	movne	r7, #0
 80070f4:	2706      	moveq	r7, #6
 80070f6:	4638      	mov	r0, r7
 80070f8:	b009      	add	sp, #36	; 0x24
 80070fa:	ecbd 8b02 	vpop	{d8}
 80070fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007102:	463e      	mov	r6, r7
 8007104:	4625      	mov	r5, r4
 8007106:	2401      	movs	r4, #1
 8007108:	e7ca      	b.n	80070a0 <__gethex+0xd4>
 800710a:	f04f 0900 	mov.w	r9, #0
 800710e:	1cb1      	adds	r1, r6, #2
 8007110:	e7d3      	b.n	80070ba <__gethex+0xee>
 8007112:	f04f 0901 	mov.w	r9, #1
 8007116:	e7fa      	b.n	800710e <__gethex+0x142>
 8007118:	230a      	movs	r3, #10
 800711a:	fb03 0202 	mla	r2, r3, r2, r0
 800711e:	3a10      	subs	r2, #16
 8007120:	e7d4      	b.n	80070cc <__gethex+0x100>
 8007122:	4631      	mov	r1, r6
 8007124:	e7df      	b.n	80070e6 <__gethex+0x11a>
 8007126:	1bf3      	subs	r3, r6, r7
 8007128:	3b01      	subs	r3, #1
 800712a:	4621      	mov	r1, r4
 800712c:	2b07      	cmp	r3, #7
 800712e:	dc0b      	bgt.n	8007148 <__gethex+0x17c>
 8007130:	ee18 0a10 	vmov	r0, s16
 8007134:	f000 fa84 	bl	8007640 <_Balloc>
 8007138:	4604      	mov	r4, r0
 800713a:	b940      	cbnz	r0, 800714e <__gethex+0x182>
 800713c:	4b5d      	ldr	r3, [pc, #372]	; (80072b4 <__gethex+0x2e8>)
 800713e:	4602      	mov	r2, r0
 8007140:	21de      	movs	r1, #222	; 0xde
 8007142:	485d      	ldr	r0, [pc, #372]	; (80072b8 <__gethex+0x2ec>)
 8007144:	f001 ff30 	bl	8008fa8 <__assert_func>
 8007148:	3101      	adds	r1, #1
 800714a:	105b      	asrs	r3, r3, #1
 800714c:	e7ee      	b.n	800712c <__gethex+0x160>
 800714e:	f100 0914 	add.w	r9, r0, #20
 8007152:	f04f 0b00 	mov.w	fp, #0
 8007156:	f1ca 0301 	rsb	r3, sl, #1
 800715a:	f8cd 9008 	str.w	r9, [sp, #8]
 800715e:	f8cd b000 	str.w	fp, [sp]
 8007162:	9306      	str	r3, [sp, #24]
 8007164:	42b7      	cmp	r7, r6
 8007166:	d340      	bcc.n	80071ea <__gethex+0x21e>
 8007168:	9802      	ldr	r0, [sp, #8]
 800716a:	9b00      	ldr	r3, [sp, #0]
 800716c:	f840 3b04 	str.w	r3, [r0], #4
 8007170:	eba0 0009 	sub.w	r0, r0, r9
 8007174:	1080      	asrs	r0, r0, #2
 8007176:	0146      	lsls	r6, r0, #5
 8007178:	6120      	str	r0, [r4, #16]
 800717a:	4618      	mov	r0, r3
 800717c:	f000 fb52 	bl	8007824 <__hi0bits>
 8007180:	1a30      	subs	r0, r6, r0
 8007182:	f8d8 6000 	ldr.w	r6, [r8]
 8007186:	42b0      	cmp	r0, r6
 8007188:	dd63      	ble.n	8007252 <__gethex+0x286>
 800718a:	1b87      	subs	r7, r0, r6
 800718c:	4639      	mov	r1, r7
 800718e:	4620      	mov	r0, r4
 8007190:	f000 fef6 	bl	8007f80 <__any_on>
 8007194:	4682      	mov	sl, r0
 8007196:	b1a8      	cbz	r0, 80071c4 <__gethex+0x1f8>
 8007198:	1e7b      	subs	r3, r7, #1
 800719a:	1159      	asrs	r1, r3, #5
 800719c:	f003 021f 	and.w	r2, r3, #31
 80071a0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80071a4:	f04f 0a01 	mov.w	sl, #1
 80071a8:	fa0a f202 	lsl.w	r2, sl, r2
 80071ac:	420a      	tst	r2, r1
 80071ae:	d009      	beq.n	80071c4 <__gethex+0x1f8>
 80071b0:	4553      	cmp	r3, sl
 80071b2:	dd05      	ble.n	80071c0 <__gethex+0x1f4>
 80071b4:	1eb9      	subs	r1, r7, #2
 80071b6:	4620      	mov	r0, r4
 80071b8:	f000 fee2 	bl	8007f80 <__any_on>
 80071bc:	2800      	cmp	r0, #0
 80071be:	d145      	bne.n	800724c <__gethex+0x280>
 80071c0:	f04f 0a02 	mov.w	sl, #2
 80071c4:	4639      	mov	r1, r7
 80071c6:	4620      	mov	r0, r4
 80071c8:	f7ff fe98 	bl	8006efc <rshift>
 80071cc:	443d      	add	r5, r7
 80071ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80071d2:	42ab      	cmp	r3, r5
 80071d4:	da4c      	bge.n	8007270 <__gethex+0x2a4>
 80071d6:	ee18 0a10 	vmov	r0, s16
 80071da:	4621      	mov	r1, r4
 80071dc:	f000 fa70 	bl	80076c0 <_Bfree>
 80071e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80071e2:	2300      	movs	r3, #0
 80071e4:	6013      	str	r3, [r2, #0]
 80071e6:	27a3      	movs	r7, #163	; 0xa3
 80071e8:	e785      	b.n	80070f6 <__gethex+0x12a>
 80071ea:	1e73      	subs	r3, r6, #1
 80071ec:	9a05      	ldr	r2, [sp, #20]
 80071ee:	9303      	str	r3, [sp, #12]
 80071f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d019      	beq.n	800722c <__gethex+0x260>
 80071f8:	f1bb 0f20 	cmp.w	fp, #32
 80071fc:	d107      	bne.n	800720e <__gethex+0x242>
 80071fe:	9b02      	ldr	r3, [sp, #8]
 8007200:	9a00      	ldr	r2, [sp, #0]
 8007202:	f843 2b04 	str.w	r2, [r3], #4
 8007206:	9302      	str	r3, [sp, #8]
 8007208:	2300      	movs	r3, #0
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	469b      	mov	fp, r3
 800720e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007212:	f7ff fec5 	bl	8006fa0 <__hexdig_fun>
 8007216:	9b00      	ldr	r3, [sp, #0]
 8007218:	f000 000f 	and.w	r0, r0, #15
 800721c:	fa00 f00b 	lsl.w	r0, r0, fp
 8007220:	4303      	orrs	r3, r0
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	f10b 0b04 	add.w	fp, fp, #4
 8007228:	9b03      	ldr	r3, [sp, #12]
 800722a:	e00d      	b.n	8007248 <__gethex+0x27c>
 800722c:	9b03      	ldr	r3, [sp, #12]
 800722e:	9a06      	ldr	r2, [sp, #24]
 8007230:	4413      	add	r3, r2
 8007232:	42bb      	cmp	r3, r7
 8007234:	d3e0      	bcc.n	80071f8 <__gethex+0x22c>
 8007236:	4618      	mov	r0, r3
 8007238:	9901      	ldr	r1, [sp, #4]
 800723a:	9307      	str	r3, [sp, #28]
 800723c:	4652      	mov	r2, sl
 800723e:	f001 fde3 	bl	8008e08 <strncmp>
 8007242:	9b07      	ldr	r3, [sp, #28]
 8007244:	2800      	cmp	r0, #0
 8007246:	d1d7      	bne.n	80071f8 <__gethex+0x22c>
 8007248:	461e      	mov	r6, r3
 800724a:	e78b      	b.n	8007164 <__gethex+0x198>
 800724c:	f04f 0a03 	mov.w	sl, #3
 8007250:	e7b8      	b.n	80071c4 <__gethex+0x1f8>
 8007252:	da0a      	bge.n	800726a <__gethex+0x29e>
 8007254:	1a37      	subs	r7, r6, r0
 8007256:	4621      	mov	r1, r4
 8007258:	ee18 0a10 	vmov	r0, s16
 800725c:	463a      	mov	r2, r7
 800725e:	f000 fc4b 	bl	8007af8 <__lshift>
 8007262:	1bed      	subs	r5, r5, r7
 8007264:	4604      	mov	r4, r0
 8007266:	f100 0914 	add.w	r9, r0, #20
 800726a:	f04f 0a00 	mov.w	sl, #0
 800726e:	e7ae      	b.n	80071ce <__gethex+0x202>
 8007270:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007274:	42a8      	cmp	r0, r5
 8007276:	dd72      	ble.n	800735e <__gethex+0x392>
 8007278:	1b45      	subs	r5, r0, r5
 800727a:	42ae      	cmp	r6, r5
 800727c:	dc36      	bgt.n	80072ec <__gethex+0x320>
 800727e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007282:	2b02      	cmp	r3, #2
 8007284:	d02a      	beq.n	80072dc <__gethex+0x310>
 8007286:	2b03      	cmp	r3, #3
 8007288:	d02c      	beq.n	80072e4 <__gethex+0x318>
 800728a:	2b01      	cmp	r3, #1
 800728c:	d11c      	bne.n	80072c8 <__gethex+0x2fc>
 800728e:	42ae      	cmp	r6, r5
 8007290:	d11a      	bne.n	80072c8 <__gethex+0x2fc>
 8007292:	2e01      	cmp	r6, #1
 8007294:	d112      	bne.n	80072bc <__gethex+0x2f0>
 8007296:	9a04      	ldr	r2, [sp, #16]
 8007298:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	2301      	movs	r3, #1
 80072a0:	6123      	str	r3, [r4, #16]
 80072a2:	f8c9 3000 	str.w	r3, [r9]
 80072a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80072a8:	2762      	movs	r7, #98	; 0x62
 80072aa:	601c      	str	r4, [r3, #0]
 80072ac:	e723      	b.n	80070f6 <__gethex+0x12a>
 80072ae:	bf00      	nop
 80072b0:	0800a798 	.word	0x0800a798
 80072b4:	0800a721 	.word	0x0800a721
 80072b8:	0800a732 	.word	0x0800a732
 80072bc:	1e71      	subs	r1, r6, #1
 80072be:	4620      	mov	r0, r4
 80072c0:	f000 fe5e 	bl	8007f80 <__any_on>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	d1e6      	bne.n	8007296 <__gethex+0x2ca>
 80072c8:	ee18 0a10 	vmov	r0, s16
 80072cc:	4621      	mov	r1, r4
 80072ce:	f000 f9f7 	bl	80076c0 <_Bfree>
 80072d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80072d4:	2300      	movs	r3, #0
 80072d6:	6013      	str	r3, [r2, #0]
 80072d8:	2750      	movs	r7, #80	; 0x50
 80072da:	e70c      	b.n	80070f6 <__gethex+0x12a>
 80072dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1f2      	bne.n	80072c8 <__gethex+0x2fc>
 80072e2:	e7d8      	b.n	8007296 <__gethex+0x2ca>
 80072e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1d5      	bne.n	8007296 <__gethex+0x2ca>
 80072ea:	e7ed      	b.n	80072c8 <__gethex+0x2fc>
 80072ec:	1e6f      	subs	r7, r5, #1
 80072ee:	f1ba 0f00 	cmp.w	sl, #0
 80072f2:	d131      	bne.n	8007358 <__gethex+0x38c>
 80072f4:	b127      	cbz	r7, 8007300 <__gethex+0x334>
 80072f6:	4639      	mov	r1, r7
 80072f8:	4620      	mov	r0, r4
 80072fa:	f000 fe41 	bl	8007f80 <__any_on>
 80072fe:	4682      	mov	sl, r0
 8007300:	117b      	asrs	r3, r7, #5
 8007302:	2101      	movs	r1, #1
 8007304:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007308:	f007 071f 	and.w	r7, r7, #31
 800730c:	fa01 f707 	lsl.w	r7, r1, r7
 8007310:	421f      	tst	r7, r3
 8007312:	4629      	mov	r1, r5
 8007314:	4620      	mov	r0, r4
 8007316:	bf18      	it	ne
 8007318:	f04a 0a02 	orrne.w	sl, sl, #2
 800731c:	1b76      	subs	r6, r6, r5
 800731e:	f7ff fded 	bl	8006efc <rshift>
 8007322:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007326:	2702      	movs	r7, #2
 8007328:	f1ba 0f00 	cmp.w	sl, #0
 800732c:	d048      	beq.n	80073c0 <__gethex+0x3f4>
 800732e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007332:	2b02      	cmp	r3, #2
 8007334:	d015      	beq.n	8007362 <__gethex+0x396>
 8007336:	2b03      	cmp	r3, #3
 8007338:	d017      	beq.n	800736a <__gethex+0x39e>
 800733a:	2b01      	cmp	r3, #1
 800733c:	d109      	bne.n	8007352 <__gethex+0x386>
 800733e:	f01a 0f02 	tst.w	sl, #2
 8007342:	d006      	beq.n	8007352 <__gethex+0x386>
 8007344:	f8d9 0000 	ldr.w	r0, [r9]
 8007348:	ea4a 0a00 	orr.w	sl, sl, r0
 800734c:	f01a 0f01 	tst.w	sl, #1
 8007350:	d10e      	bne.n	8007370 <__gethex+0x3a4>
 8007352:	f047 0710 	orr.w	r7, r7, #16
 8007356:	e033      	b.n	80073c0 <__gethex+0x3f4>
 8007358:	f04f 0a01 	mov.w	sl, #1
 800735c:	e7d0      	b.n	8007300 <__gethex+0x334>
 800735e:	2701      	movs	r7, #1
 8007360:	e7e2      	b.n	8007328 <__gethex+0x35c>
 8007362:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007364:	f1c3 0301 	rsb	r3, r3, #1
 8007368:	9315      	str	r3, [sp, #84]	; 0x54
 800736a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800736c:	2b00      	cmp	r3, #0
 800736e:	d0f0      	beq.n	8007352 <__gethex+0x386>
 8007370:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007374:	f104 0314 	add.w	r3, r4, #20
 8007378:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800737c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007380:	f04f 0c00 	mov.w	ip, #0
 8007384:	4618      	mov	r0, r3
 8007386:	f853 2b04 	ldr.w	r2, [r3], #4
 800738a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800738e:	d01c      	beq.n	80073ca <__gethex+0x3fe>
 8007390:	3201      	adds	r2, #1
 8007392:	6002      	str	r2, [r0, #0]
 8007394:	2f02      	cmp	r7, #2
 8007396:	f104 0314 	add.w	r3, r4, #20
 800739a:	d13f      	bne.n	800741c <__gethex+0x450>
 800739c:	f8d8 2000 	ldr.w	r2, [r8]
 80073a0:	3a01      	subs	r2, #1
 80073a2:	42b2      	cmp	r2, r6
 80073a4:	d10a      	bne.n	80073bc <__gethex+0x3f0>
 80073a6:	1171      	asrs	r1, r6, #5
 80073a8:	2201      	movs	r2, #1
 80073aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073ae:	f006 061f 	and.w	r6, r6, #31
 80073b2:	fa02 f606 	lsl.w	r6, r2, r6
 80073b6:	421e      	tst	r6, r3
 80073b8:	bf18      	it	ne
 80073ba:	4617      	movne	r7, r2
 80073bc:	f047 0720 	orr.w	r7, r7, #32
 80073c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073c2:	601c      	str	r4, [r3, #0]
 80073c4:	9b04      	ldr	r3, [sp, #16]
 80073c6:	601d      	str	r5, [r3, #0]
 80073c8:	e695      	b.n	80070f6 <__gethex+0x12a>
 80073ca:	4299      	cmp	r1, r3
 80073cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80073d0:	d8d8      	bhi.n	8007384 <__gethex+0x3b8>
 80073d2:	68a3      	ldr	r3, [r4, #8]
 80073d4:	459b      	cmp	fp, r3
 80073d6:	db19      	blt.n	800740c <__gethex+0x440>
 80073d8:	6861      	ldr	r1, [r4, #4]
 80073da:	ee18 0a10 	vmov	r0, s16
 80073de:	3101      	adds	r1, #1
 80073e0:	f000 f92e 	bl	8007640 <_Balloc>
 80073e4:	4681      	mov	r9, r0
 80073e6:	b918      	cbnz	r0, 80073f0 <__gethex+0x424>
 80073e8:	4b1a      	ldr	r3, [pc, #104]	; (8007454 <__gethex+0x488>)
 80073ea:	4602      	mov	r2, r0
 80073ec:	2184      	movs	r1, #132	; 0x84
 80073ee:	e6a8      	b.n	8007142 <__gethex+0x176>
 80073f0:	6922      	ldr	r2, [r4, #16]
 80073f2:	3202      	adds	r2, #2
 80073f4:	f104 010c 	add.w	r1, r4, #12
 80073f8:	0092      	lsls	r2, r2, #2
 80073fa:	300c      	adds	r0, #12
 80073fc:	f000 f912 	bl	8007624 <memcpy>
 8007400:	4621      	mov	r1, r4
 8007402:	ee18 0a10 	vmov	r0, s16
 8007406:	f000 f95b 	bl	80076c0 <_Bfree>
 800740a:	464c      	mov	r4, r9
 800740c:	6923      	ldr	r3, [r4, #16]
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007414:	6122      	str	r2, [r4, #16]
 8007416:	2201      	movs	r2, #1
 8007418:	615a      	str	r2, [r3, #20]
 800741a:	e7bb      	b.n	8007394 <__gethex+0x3c8>
 800741c:	6922      	ldr	r2, [r4, #16]
 800741e:	455a      	cmp	r2, fp
 8007420:	dd0b      	ble.n	800743a <__gethex+0x46e>
 8007422:	2101      	movs	r1, #1
 8007424:	4620      	mov	r0, r4
 8007426:	f7ff fd69 	bl	8006efc <rshift>
 800742a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800742e:	3501      	adds	r5, #1
 8007430:	42ab      	cmp	r3, r5
 8007432:	f6ff aed0 	blt.w	80071d6 <__gethex+0x20a>
 8007436:	2701      	movs	r7, #1
 8007438:	e7c0      	b.n	80073bc <__gethex+0x3f0>
 800743a:	f016 061f 	ands.w	r6, r6, #31
 800743e:	d0fa      	beq.n	8007436 <__gethex+0x46a>
 8007440:	4453      	add	r3, sl
 8007442:	f1c6 0620 	rsb	r6, r6, #32
 8007446:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800744a:	f000 f9eb 	bl	8007824 <__hi0bits>
 800744e:	42b0      	cmp	r0, r6
 8007450:	dbe7      	blt.n	8007422 <__gethex+0x456>
 8007452:	e7f0      	b.n	8007436 <__gethex+0x46a>
 8007454:	0800a721 	.word	0x0800a721

08007458 <L_shift>:
 8007458:	f1c2 0208 	rsb	r2, r2, #8
 800745c:	0092      	lsls	r2, r2, #2
 800745e:	b570      	push	{r4, r5, r6, lr}
 8007460:	f1c2 0620 	rsb	r6, r2, #32
 8007464:	6843      	ldr	r3, [r0, #4]
 8007466:	6804      	ldr	r4, [r0, #0]
 8007468:	fa03 f506 	lsl.w	r5, r3, r6
 800746c:	432c      	orrs	r4, r5
 800746e:	40d3      	lsrs	r3, r2
 8007470:	6004      	str	r4, [r0, #0]
 8007472:	f840 3f04 	str.w	r3, [r0, #4]!
 8007476:	4288      	cmp	r0, r1
 8007478:	d3f4      	bcc.n	8007464 <L_shift+0xc>
 800747a:	bd70      	pop	{r4, r5, r6, pc}

0800747c <__match>:
 800747c:	b530      	push	{r4, r5, lr}
 800747e:	6803      	ldr	r3, [r0, #0]
 8007480:	3301      	adds	r3, #1
 8007482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007486:	b914      	cbnz	r4, 800748e <__match+0x12>
 8007488:	6003      	str	r3, [r0, #0]
 800748a:	2001      	movs	r0, #1
 800748c:	bd30      	pop	{r4, r5, pc}
 800748e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007492:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007496:	2d19      	cmp	r5, #25
 8007498:	bf98      	it	ls
 800749a:	3220      	addls	r2, #32
 800749c:	42a2      	cmp	r2, r4
 800749e:	d0f0      	beq.n	8007482 <__match+0x6>
 80074a0:	2000      	movs	r0, #0
 80074a2:	e7f3      	b.n	800748c <__match+0x10>

080074a4 <__hexnan>:
 80074a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a8:	680b      	ldr	r3, [r1, #0]
 80074aa:	115e      	asrs	r6, r3, #5
 80074ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80074b0:	f013 031f 	ands.w	r3, r3, #31
 80074b4:	b087      	sub	sp, #28
 80074b6:	bf18      	it	ne
 80074b8:	3604      	addne	r6, #4
 80074ba:	2500      	movs	r5, #0
 80074bc:	1f37      	subs	r7, r6, #4
 80074be:	4690      	mov	r8, r2
 80074c0:	6802      	ldr	r2, [r0, #0]
 80074c2:	9301      	str	r3, [sp, #4]
 80074c4:	4682      	mov	sl, r0
 80074c6:	f846 5c04 	str.w	r5, [r6, #-4]
 80074ca:	46b9      	mov	r9, r7
 80074cc:	463c      	mov	r4, r7
 80074ce:	9502      	str	r5, [sp, #8]
 80074d0:	46ab      	mov	fp, r5
 80074d2:	7851      	ldrb	r1, [r2, #1]
 80074d4:	1c53      	adds	r3, r2, #1
 80074d6:	9303      	str	r3, [sp, #12]
 80074d8:	b341      	cbz	r1, 800752c <__hexnan+0x88>
 80074da:	4608      	mov	r0, r1
 80074dc:	9205      	str	r2, [sp, #20]
 80074de:	9104      	str	r1, [sp, #16]
 80074e0:	f7ff fd5e 	bl	8006fa0 <__hexdig_fun>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	d14f      	bne.n	8007588 <__hexnan+0xe4>
 80074e8:	9904      	ldr	r1, [sp, #16]
 80074ea:	9a05      	ldr	r2, [sp, #20]
 80074ec:	2920      	cmp	r1, #32
 80074ee:	d818      	bhi.n	8007522 <__hexnan+0x7e>
 80074f0:	9b02      	ldr	r3, [sp, #8]
 80074f2:	459b      	cmp	fp, r3
 80074f4:	dd13      	ble.n	800751e <__hexnan+0x7a>
 80074f6:	454c      	cmp	r4, r9
 80074f8:	d206      	bcs.n	8007508 <__hexnan+0x64>
 80074fa:	2d07      	cmp	r5, #7
 80074fc:	dc04      	bgt.n	8007508 <__hexnan+0x64>
 80074fe:	462a      	mov	r2, r5
 8007500:	4649      	mov	r1, r9
 8007502:	4620      	mov	r0, r4
 8007504:	f7ff ffa8 	bl	8007458 <L_shift>
 8007508:	4544      	cmp	r4, r8
 800750a:	d950      	bls.n	80075ae <__hexnan+0x10a>
 800750c:	2300      	movs	r3, #0
 800750e:	f1a4 0904 	sub.w	r9, r4, #4
 8007512:	f844 3c04 	str.w	r3, [r4, #-4]
 8007516:	f8cd b008 	str.w	fp, [sp, #8]
 800751a:	464c      	mov	r4, r9
 800751c:	461d      	mov	r5, r3
 800751e:	9a03      	ldr	r2, [sp, #12]
 8007520:	e7d7      	b.n	80074d2 <__hexnan+0x2e>
 8007522:	2929      	cmp	r1, #41	; 0x29
 8007524:	d156      	bne.n	80075d4 <__hexnan+0x130>
 8007526:	3202      	adds	r2, #2
 8007528:	f8ca 2000 	str.w	r2, [sl]
 800752c:	f1bb 0f00 	cmp.w	fp, #0
 8007530:	d050      	beq.n	80075d4 <__hexnan+0x130>
 8007532:	454c      	cmp	r4, r9
 8007534:	d206      	bcs.n	8007544 <__hexnan+0xa0>
 8007536:	2d07      	cmp	r5, #7
 8007538:	dc04      	bgt.n	8007544 <__hexnan+0xa0>
 800753a:	462a      	mov	r2, r5
 800753c:	4649      	mov	r1, r9
 800753e:	4620      	mov	r0, r4
 8007540:	f7ff ff8a 	bl	8007458 <L_shift>
 8007544:	4544      	cmp	r4, r8
 8007546:	d934      	bls.n	80075b2 <__hexnan+0x10e>
 8007548:	f1a8 0204 	sub.w	r2, r8, #4
 800754c:	4623      	mov	r3, r4
 800754e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007552:	f842 1f04 	str.w	r1, [r2, #4]!
 8007556:	429f      	cmp	r7, r3
 8007558:	d2f9      	bcs.n	800754e <__hexnan+0xaa>
 800755a:	1b3b      	subs	r3, r7, r4
 800755c:	f023 0303 	bic.w	r3, r3, #3
 8007560:	3304      	adds	r3, #4
 8007562:	3401      	adds	r4, #1
 8007564:	3e03      	subs	r6, #3
 8007566:	42b4      	cmp	r4, r6
 8007568:	bf88      	it	hi
 800756a:	2304      	movhi	r3, #4
 800756c:	4443      	add	r3, r8
 800756e:	2200      	movs	r2, #0
 8007570:	f843 2b04 	str.w	r2, [r3], #4
 8007574:	429f      	cmp	r7, r3
 8007576:	d2fb      	bcs.n	8007570 <__hexnan+0xcc>
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	b91b      	cbnz	r3, 8007584 <__hexnan+0xe0>
 800757c:	4547      	cmp	r7, r8
 800757e:	d127      	bne.n	80075d0 <__hexnan+0x12c>
 8007580:	2301      	movs	r3, #1
 8007582:	603b      	str	r3, [r7, #0]
 8007584:	2005      	movs	r0, #5
 8007586:	e026      	b.n	80075d6 <__hexnan+0x132>
 8007588:	3501      	adds	r5, #1
 800758a:	2d08      	cmp	r5, #8
 800758c:	f10b 0b01 	add.w	fp, fp, #1
 8007590:	dd06      	ble.n	80075a0 <__hexnan+0xfc>
 8007592:	4544      	cmp	r4, r8
 8007594:	d9c3      	bls.n	800751e <__hexnan+0x7a>
 8007596:	2300      	movs	r3, #0
 8007598:	f844 3c04 	str.w	r3, [r4, #-4]
 800759c:	2501      	movs	r5, #1
 800759e:	3c04      	subs	r4, #4
 80075a0:	6822      	ldr	r2, [r4, #0]
 80075a2:	f000 000f 	and.w	r0, r0, #15
 80075a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80075aa:	6022      	str	r2, [r4, #0]
 80075ac:	e7b7      	b.n	800751e <__hexnan+0x7a>
 80075ae:	2508      	movs	r5, #8
 80075b0:	e7b5      	b.n	800751e <__hexnan+0x7a>
 80075b2:	9b01      	ldr	r3, [sp, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d0df      	beq.n	8007578 <__hexnan+0xd4>
 80075b8:	f04f 32ff 	mov.w	r2, #4294967295
 80075bc:	f1c3 0320 	rsb	r3, r3, #32
 80075c0:	fa22 f303 	lsr.w	r3, r2, r3
 80075c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80075c8:	401a      	ands	r2, r3
 80075ca:	f846 2c04 	str.w	r2, [r6, #-4]
 80075ce:	e7d3      	b.n	8007578 <__hexnan+0xd4>
 80075d0:	3f04      	subs	r7, #4
 80075d2:	e7d1      	b.n	8007578 <__hexnan+0xd4>
 80075d4:	2004      	movs	r0, #4
 80075d6:	b007      	add	sp, #28
 80075d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080075dc <_lseek_r>:
 80075dc:	b538      	push	{r3, r4, r5, lr}
 80075de:	4d07      	ldr	r5, [pc, #28]	; (80075fc <_lseek_r+0x20>)
 80075e0:	4604      	mov	r4, r0
 80075e2:	4608      	mov	r0, r1
 80075e4:	4611      	mov	r1, r2
 80075e6:	2200      	movs	r2, #0
 80075e8:	602a      	str	r2, [r5, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	f7fa f90c 	bl	8001808 <_lseek>
 80075f0:	1c43      	adds	r3, r0, #1
 80075f2:	d102      	bne.n	80075fa <_lseek_r+0x1e>
 80075f4:	682b      	ldr	r3, [r5, #0]
 80075f6:	b103      	cbz	r3, 80075fa <_lseek_r+0x1e>
 80075f8:	6023      	str	r3, [r4, #0]
 80075fa:	bd38      	pop	{r3, r4, r5, pc}
 80075fc:	20000390 	.word	0x20000390

08007600 <__ascii_mbtowc>:
 8007600:	b082      	sub	sp, #8
 8007602:	b901      	cbnz	r1, 8007606 <__ascii_mbtowc+0x6>
 8007604:	a901      	add	r1, sp, #4
 8007606:	b142      	cbz	r2, 800761a <__ascii_mbtowc+0x1a>
 8007608:	b14b      	cbz	r3, 800761e <__ascii_mbtowc+0x1e>
 800760a:	7813      	ldrb	r3, [r2, #0]
 800760c:	600b      	str	r3, [r1, #0]
 800760e:	7812      	ldrb	r2, [r2, #0]
 8007610:	1e10      	subs	r0, r2, #0
 8007612:	bf18      	it	ne
 8007614:	2001      	movne	r0, #1
 8007616:	b002      	add	sp, #8
 8007618:	4770      	bx	lr
 800761a:	4610      	mov	r0, r2
 800761c:	e7fb      	b.n	8007616 <__ascii_mbtowc+0x16>
 800761e:	f06f 0001 	mvn.w	r0, #1
 8007622:	e7f8      	b.n	8007616 <__ascii_mbtowc+0x16>

08007624 <memcpy>:
 8007624:	440a      	add	r2, r1
 8007626:	4291      	cmp	r1, r2
 8007628:	f100 33ff 	add.w	r3, r0, #4294967295
 800762c:	d100      	bne.n	8007630 <memcpy+0xc>
 800762e:	4770      	bx	lr
 8007630:	b510      	push	{r4, lr}
 8007632:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007636:	f803 4f01 	strb.w	r4, [r3, #1]!
 800763a:	4291      	cmp	r1, r2
 800763c:	d1f9      	bne.n	8007632 <memcpy+0xe>
 800763e:	bd10      	pop	{r4, pc}

08007640 <_Balloc>:
 8007640:	b570      	push	{r4, r5, r6, lr}
 8007642:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007644:	4604      	mov	r4, r0
 8007646:	460d      	mov	r5, r1
 8007648:	b976      	cbnz	r6, 8007668 <_Balloc+0x28>
 800764a:	2010      	movs	r0, #16
 800764c:	f001 fe96 	bl	800937c <malloc>
 8007650:	4602      	mov	r2, r0
 8007652:	6260      	str	r0, [r4, #36]	; 0x24
 8007654:	b920      	cbnz	r0, 8007660 <_Balloc+0x20>
 8007656:	4b18      	ldr	r3, [pc, #96]	; (80076b8 <_Balloc+0x78>)
 8007658:	4818      	ldr	r0, [pc, #96]	; (80076bc <_Balloc+0x7c>)
 800765a:	2166      	movs	r1, #102	; 0x66
 800765c:	f001 fca4 	bl	8008fa8 <__assert_func>
 8007660:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007664:	6006      	str	r6, [r0, #0]
 8007666:	60c6      	str	r6, [r0, #12]
 8007668:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800766a:	68f3      	ldr	r3, [r6, #12]
 800766c:	b183      	cbz	r3, 8007690 <_Balloc+0x50>
 800766e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007676:	b9b8      	cbnz	r0, 80076a8 <_Balloc+0x68>
 8007678:	2101      	movs	r1, #1
 800767a:	fa01 f605 	lsl.w	r6, r1, r5
 800767e:	1d72      	adds	r2, r6, #5
 8007680:	0092      	lsls	r2, r2, #2
 8007682:	4620      	mov	r0, r4
 8007684:	f000 fc9d 	bl	8007fc2 <_calloc_r>
 8007688:	b160      	cbz	r0, 80076a4 <_Balloc+0x64>
 800768a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800768e:	e00e      	b.n	80076ae <_Balloc+0x6e>
 8007690:	2221      	movs	r2, #33	; 0x21
 8007692:	2104      	movs	r1, #4
 8007694:	4620      	mov	r0, r4
 8007696:	f000 fc94 	bl	8007fc2 <_calloc_r>
 800769a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800769c:	60f0      	str	r0, [r6, #12]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1e4      	bne.n	800766e <_Balloc+0x2e>
 80076a4:	2000      	movs	r0, #0
 80076a6:	bd70      	pop	{r4, r5, r6, pc}
 80076a8:	6802      	ldr	r2, [r0, #0]
 80076aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80076ae:	2300      	movs	r3, #0
 80076b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80076b4:	e7f7      	b.n	80076a6 <_Balloc+0x66>
 80076b6:	bf00      	nop
 80076b8:	0800a7ac 	.word	0x0800a7ac
 80076bc:	0800a7c3 	.word	0x0800a7c3

080076c0 <_Bfree>:
 80076c0:	b570      	push	{r4, r5, r6, lr}
 80076c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80076c4:	4605      	mov	r5, r0
 80076c6:	460c      	mov	r4, r1
 80076c8:	b976      	cbnz	r6, 80076e8 <_Bfree+0x28>
 80076ca:	2010      	movs	r0, #16
 80076cc:	f001 fe56 	bl	800937c <malloc>
 80076d0:	4602      	mov	r2, r0
 80076d2:	6268      	str	r0, [r5, #36]	; 0x24
 80076d4:	b920      	cbnz	r0, 80076e0 <_Bfree+0x20>
 80076d6:	4b09      	ldr	r3, [pc, #36]	; (80076fc <_Bfree+0x3c>)
 80076d8:	4809      	ldr	r0, [pc, #36]	; (8007700 <_Bfree+0x40>)
 80076da:	218a      	movs	r1, #138	; 0x8a
 80076dc:	f001 fc64 	bl	8008fa8 <__assert_func>
 80076e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076e4:	6006      	str	r6, [r0, #0]
 80076e6:	60c6      	str	r6, [r0, #12]
 80076e8:	b13c      	cbz	r4, 80076fa <_Bfree+0x3a>
 80076ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80076ec:	6862      	ldr	r2, [r4, #4]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80076f4:	6021      	str	r1, [r4, #0]
 80076f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80076fa:	bd70      	pop	{r4, r5, r6, pc}
 80076fc:	0800a7ac 	.word	0x0800a7ac
 8007700:	0800a7c3 	.word	0x0800a7c3

08007704 <__multadd>:
 8007704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007708:	690d      	ldr	r5, [r1, #16]
 800770a:	4607      	mov	r7, r0
 800770c:	460c      	mov	r4, r1
 800770e:	461e      	mov	r6, r3
 8007710:	f101 0c14 	add.w	ip, r1, #20
 8007714:	2000      	movs	r0, #0
 8007716:	f8dc 3000 	ldr.w	r3, [ip]
 800771a:	b299      	uxth	r1, r3
 800771c:	fb02 6101 	mla	r1, r2, r1, r6
 8007720:	0c1e      	lsrs	r6, r3, #16
 8007722:	0c0b      	lsrs	r3, r1, #16
 8007724:	fb02 3306 	mla	r3, r2, r6, r3
 8007728:	b289      	uxth	r1, r1
 800772a:	3001      	adds	r0, #1
 800772c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007730:	4285      	cmp	r5, r0
 8007732:	f84c 1b04 	str.w	r1, [ip], #4
 8007736:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800773a:	dcec      	bgt.n	8007716 <__multadd+0x12>
 800773c:	b30e      	cbz	r6, 8007782 <__multadd+0x7e>
 800773e:	68a3      	ldr	r3, [r4, #8]
 8007740:	42ab      	cmp	r3, r5
 8007742:	dc19      	bgt.n	8007778 <__multadd+0x74>
 8007744:	6861      	ldr	r1, [r4, #4]
 8007746:	4638      	mov	r0, r7
 8007748:	3101      	adds	r1, #1
 800774a:	f7ff ff79 	bl	8007640 <_Balloc>
 800774e:	4680      	mov	r8, r0
 8007750:	b928      	cbnz	r0, 800775e <__multadd+0x5a>
 8007752:	4602      	mov	r2, r0
 8007754:	4b0c      	ldr	r3, [pc, #48]	; (8007788 <__multadd+0x84>)
 8007756:	480d      	ldr	r0, [pc, #52]	; (800778c <__multadd+0x88>)
 8007758:	21b5      	movs	r1, #181	; 0xb5
 800775a:	f001 fc25 	bl	8008fa8 <__assert_func>
 800775e:	6922      	ldr	r2, [r4, #16]
 8007760:	3202      	adds	r2, #2
 8007762:	f104 010c 	add.w	r1, r4, #12
 8007766:	0092      	lsls	r2, r2, #2
 8007768:	300c      	adds	r0, #12
 800776a:	f7ff ff5b 	bl	8007624 <memcpy>
 800776e:	4621      	mov	r1, r4
 8007770:	4638      	mov	r0, r7
 8007772:	f7ff ffa5 	bl	80076c0 <_Bfree>
 8007776:	4644      	mov	r4, r8
 8007778:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800777c:	3501      	adds	r5, #1
 800777e:	615e      	str	r6, [r3, #20]
 8007780:	6125      	str	r5, [r4, #16]
 8007782:	4620      	mov	r0, r4
 8007784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007788:	0800a721 	.word	0x0800a721
 800778c:	0800a7c3 	.word	0x0800a7c3

08007790 <__s2b>:
 8007790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007794:	460c      	mov	r4, r1
 8007796:	4615      	mov	r5, r2
 8007798:	461f      	mov	r7, r3
 800779a:	2209      	movs	r2, #9
 800779c:	3308      	adds	r3, #8
 800779e:	4606      	mov	r6, r0
 80077a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80077a4:	2100      	movs	r1, #0
 80077a6:	2201      	movs	r2, #1
 80077a8:	429a      	cmp	r2, r3
 80077aa:	db09      	blt.n	80077c0 <__s2b+0x30>
 80077ac:	4630      	mov	r0, r6
 80077ae:	f7ff ff47 	bl	8007640 <_Balloc>
 80077b2:	b940      	cbnz	r0, 80077c6 <__s2b+0x36>
 80077b4:	4602      	mov	r2, r0
 80077b6:	4b19      	ldr	r3, [pc, #100]	; (800781c <__s2b+0x8c>)
 80077b8:	4819      	ldr	r0, [pc, #100]	; (8007820 <__s2b+0x90>)
 80077ba:	21ce      	movs	r1, #206	; 0xce
 80077bc:	f001 fbf4 	bl	8008fa8 <__assert_func>
 80077c0:	0052      	lsls	r2, r2, #1
 80077c2:	3101      	adds	r1, #1
 80077c4:	e7f0      	b.n	80077a8 <__s2b+0x18>
 80077c6:	9b08      	ldr	r3, [sp, #32]
 80077c8:	6143      	str	r3, [r0, #20]
 80077ca:	2d09      	cmp	r5, #9
 80077cc:	f04f 0301 	mov.w	r3, #1
 80077d0:	6103      	str	r3, [r0, #16]
 80077d2:	dd16      	ble.n	8007802 <__s2b+0x72>
 80077d4:	f104 0909 	add.w	r9, r4, #9
 80077d8:	46c8      	mov	r8, r9
 80077da:	442c      	add	r4, r5
 80077dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80077e0:	4601      	mov	r1, r0
 80077e2:	3b30      	subs	r3, #48	; 0x30
 80077e4:	220a      	movs	r2, #10
 80077e6:	4630      	mov	r0, r6
 80077e8:	f7ff ff8c 	bl	8007704 <__multadd>
 80077ec:	45a0      	cmp	r8, r4
 80077ee:	d1f5      	bne.n	80077dc <__s2b+0x4c>
 80077f0:	f1a5 0408 	sub.w	r4, r5, #8
 80077f4:	444c      	add	r4, r9
 80077f6:	1b2d      	subs	r5, r5, r4
 80077f8:	1963      	adds	r3, r4, r5
 80077fa:	42bb      	cmp	r3, r7
 80077fc:	db04      	blt.n	8007808 <__s2b+0x78>
 80077fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007802:	340a      	adds	r4, #10
 8007804:	2509      	movs	r5, #9
 8007806:	e7f6      	b.n	80077f6 <__s2b+0x66>
 8007808:	f814 3b01 	ldrb.w	r3, [r4], #1
 800780c:	4601      	mov	r1, r0
 800780e:	3b30      	subs	r3, #48	; 0x30
 8007810:	220a      	movs	r2, #10
 8007812:	4630      	mov	r0, r6
 8007814:	f7ff ff76 	bl	8007704 <__multadd>
 8007818:	e7ee      	b.n	80077f8 <__s2b+0x68>
 800781a:	bf00      	nop
 800781c:	0800a721 	.word	0x0800a721
 8007820:	0800a7c3 	.word	0x0800a7c3

08007824 <__hi0bits>:
 8007824:	0c03      	lsrs	r3, r0, #16
 8007826:	041b      	lsls	r3, r3, #16
 8007828:	b9d3      	cbnz	r3, 8007860 <__hi0bits+0x3c>
 800782a:	0400      	lsls	r0, r0, #16
 800782c:	2310      	movs	r3, #16
 800782e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007832:	bf04      	itt	eq
 8007834:	0200      	lsleq	r0, r0, #8
 8007836:	3308      	addeq	r3, #8
 8007838:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800783c:	bf04      	itt	eq
 800783e:	0100      	lsleq	r0, r0, #4
 8007840:	3304      	addeq	r3, #4
 8007842:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007846:	bf04      	itt	eq
 8007848:	0080      	lsleq	r0, r0, #2
 800784a:	3302      	addeq	r3, #2
 800784c:	2800      	cmp	r0, #0
 800784e:	db05      	blt.n	800785c <__hi0bits+0x38>
 8007850:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007854:	f103 0301 	add.w	r3, r3, #1
 8007858:	bf08      	it	eq
 800785a:	2320      	moveq	r3, #32
 800785c:	4618      	mov	r0, r3
 800785e:	4770      	bx	lr
 8007860:	2300      	movs	r3, #0
 8007862:	e7e4      	b.n	800782e <__hi0bits+0xa>

08007864 <__lo0bits>:
 8007864:	6803      	ldr	r3, [r0, #0]
 8007866:	f013 0207 	ands.w	r2, r3, #7
 800786a:	4601      	mov	r1, r0
 800786c:	d00b      	beq.n	8007886 <__lo0bits+0x22>
 800786e:	07da      	lsls	r2, r3, #31
 8007870:	d423      	bmi.n	80078ba <__lo0bits+0x56>
 8007872:	0798      	lsls	r0, r3, #30
 8007874:	bf49      	itett	mi
 8007876:	085b      	lsrmi	r3, r3, #1
 8007878:	089b      	lsrpl	r3, r3, #2
 800787a:	2001      	movmi	r0, #1
 800787c:	600b      	strmi	r3, [r1, #0]
 800787e:	bf5c      	itt	pl
 8007880:	600b      	strpl	r3, [r1, #0]
 8007882:	2002      	movpl	r0, #2
 8007884:	4770      	bx	lr
 8007886:	b298      	uxth	r0, r3
 8007888:	b9a8      	cbnz	r0, 80078b6 <__lo0bits+0x52>
 800788a:	0c1b      	lsrs	r3, r3, #16
 800788c:	2010      	movs	r0, #16
 800788e:	b2da      	uxtb	r2, r3
 8007890:	b90a      	cbnz	r2, 8007896 <__lo0bits+0x32>
 8007892:	3008      	adds	r0, #8
 8007894:	0a1b      	lsrs	r3, r3, #8
 8007896:	071a      	lsls	r2, r3, #28
 8007898:	bf04      	itt	eq
 800789a:	091b      	lsreq	r3, r3, #4
 800789c:	3004      	addeq	r0, #4
 800789e:	079a      	lsls	r2, r3, #30
 80078a0:	bf04      	itt	eq
 80078a2:	089b      	lsreq	r3, r3, #2
 80078a4:	3002      	addeq	r0, #2
 80078a6:	07da      	lsls	r2, r3, #31
 80078a8:	d403      	bmi.n	80078b2 <__lo0bits+0x4e>
 80078aa:	085b      	lsrs	r3, r3, #1
 80078ac:	f100 0001 	add.w	r0, r0, #1
 80078b0:	d005      	beq.n	80078be <__lo0bits+0x5a>
 80078b2:	600b      	str	r3, [r1, #0]
 80078b4:	4770      	bx	lr
 80078b6:	4610      	mov	r0, r2
 80078b8:	e7e9      	b.n	800788e <__lo0bits+0x2a>
 80078ba:	2000      	movs	r0, #0
 80078bc:	4770      	bx	lr
 80078be:	2020      	movs	r0, #32
 80078c0:	4770      	bx	lr
	...

080078c4 <__i2b>:
 80078c4:	b510      	push	{r4, lr}
 80078c6:	460c      	mov	r4, r1
 80078c8:	2101      	movs	r1, #1
 80078ca:	f7ff feb9 	bl	8007640 <_Balloc>
 80078ce:	4602      	mov	r2, r0
 80078d0:	b928      	cbnz	r0, 80078de <__i2b+0x1a>
 80078d2:	4b05      	ldr	r3, [pc, #20]	; (80078e8 <__i2b+0x24>)
 80078d4:	4805      	ldr	r0, [pc, #20]	; (80078ec <__i2b+0x28>)
 80078d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80078da:	f001 fb65 	bl	8008fa8 <__assert_func>
 80078de:	2301      	movs	r3, #1
 80078e0:	6144      	str	r4, [r0, #20]
 80078e2:	6103      	str	r3, [r0, #16]
 80078e4:	bd10      	pop	{r4, pc}
 80078e6:	bf00      	nop
 80078e8:	0800a721 	.word	0x0800a721
 80078ec:	0800a7c3 	.word	0x0800a7c3

080078f0 <__multiply>:
 80078f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f4:	4691      	mov	r9, r2
 80078f6:	690a      	ldr	r2, [r1, #16]
 80078f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	bfb8      	it	lt
 8007900:	460b      	movlt	r3, r1
 8007902:	460c      	mov	r4, r1
 8007904:	bfbc      	itt	lt
 8007906:	464c      	movlt	r4, r9
 8007908:	4699      	movlt	r9, r3
 800790a:	6927      	ldr	r7, [r4, #16]
 800790c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007910:	68a3      	ldr	r3, [r4, #8]
 8007912:	6861      	ldr	r1, [r4, #4]
 8007914:	eb07 060a 	add.w	r6, r7, sl
 8007918:	42b3      	cmp	r3, r6
 800791a:	b085      	sub	sp, #20
 800791c:	bfb8      	it	lt
 800791e:	3101      	addlt	r1, #1
 8007920:	f7ff fe8e 	bl	8007640 <_Balloc>
 8007924:	b930      	cbnz	r0, 8007934 <__multiply+0x44>
 8007926:	4602      	mov	r2, r0
 8007928:	4b44      	ldr	r3, [pc, #272]	; (8007a3c <__multiply+0x14c>)
 800792a:	4845      	ldr	r0, [pc, #276]	; (8007a40 <__multiply+0x150>)
 800792c:	f240 115d 	movw	r1, #349	; 0x15d
 8007930:	f001 fb3a 	bl	8008fa8 <__assert_func>
 8007934:	f100 0514 	add.w	r5, r0, #20
 8007938:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800793c:	462b      	mov	r3, r5
 800793e:	2200      	movs	r2, #0
 8007940:	4543      	cmp	r3, r8
 8007942:	d321      	bcc.n	8007988 <__multiply+0x98>
 8007944:	f104 0314 	add.w	r3, r4, #20
 8007948:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800794c:	f109 0314 	add.w	r3, r9, #20
 8007950:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007954:	9202      	str	r2, [sp, #8]
 8007956:	1b3a      	subs	r2, r7, r4
 8007958:	3a15      	subs	r2, #21
 800795a:	f022 0203 	bic.w	r2, r2, #3
 800795e:	3204      	adds	r2, #4
 8007960:	f104 0115 	add.w	r1, r4, #21
 8007964:	428f      	cmp	r7, r1
 8007966:	bf38      	it	cc
 8007968:	2204      	movcc	r2, #4
 800796a:	9201      	str	r2, [sp, #4]
 800796c:	9a02      	ldr	r2, [sp, #8]
 800796e:	9303      	str	r3, [sp, #12]
 8007970:	429a      	cmp	r2, r3
 8007972:	d80c      	bhi.n	800798e <__multiply+0x9e>
 8007974:	2e00      	cmp	r6, #0
 8007976:	dd03      	ble.n	8007980 <__multiply+0x90>
 8007978:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800797c:	2b00      	cmp	r3, #0
 800797e:	d05a      	beq.n	8007a36 <__multiply+0x146>
 8007980:	6106      	str	r6, [r0, #16]
 8007982:	b005      	add	sp, #20
 8007984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007988:	f843 2b04 	str.w	r2, [r3], #4
 800798c:	e7d8      	b.n	8007940 <__multiply+0x50>
 800798e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007992:	f1ba 0f00 	cmp.w	sl, #0
 8007996:	d024      	beq.n	80079e2 <__multiply+0xf2>
 8007998:	f104 0e14 	add.w	lr, r4, #20
 800799c:	46a9      	mov	r9, r5
 800799e:	f04f 0c00 	mov.w	ip, #0
 80079a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80079a6:	f8d9 1000 	ldr.w	r1, [r9]
 80079aa:	fa1f fb82 	uxth.w	fp, r2
 80079ae:	b289      	uxth	r1, r1
 80079b0:	fb0a 110b 	mla	r1, sl, fp, r1
 80079b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80079b8:	f8d9 2000 	ldr.w	r2, [r9]
 80079bc:	4461      	add	r1, ip
 80079be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80079c2:	fb0a c20b 	mla	r2, sl, fp, ip
 80079c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80079ca:	b289      	uxth	r1, r1
 80079cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80079d0:	4577      	cmp	r7, lr
 80079d2:	f849 1b04 	str.w	r1, [r9], #4
 80079d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80079da:	d8e2      	bhi.n	80079a2 <__multiply+0xb2>
 80079dc:	9a01      	ldr	r2, [sp, #4]
 80079de:	f845 c002 	str.w	ip, [r5, r2]
 80079e2:	9a03      	ldr	r2, [sp, #12]
 80079e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80079e8:	3304      	adds	r3, #4
 80079ea:	f1b9 0f00 	cmp.w	r9, #0
 80079ee:	d020      	beq.n	8007a32 <__multiply+0x142>
 80079f0:	6829      	ldr	r1, [r5, #0]
 80079f2:	f104 0c14 	add.w	ip, r4, #20
 80079f6:	46ae      	mov	lr, r5
 80079f8:	f04f 0a00 	mov.w	sl, #0
 80079fc:	f8bc b000 	ldrh.w	fp, [ip]
 8007a00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007a04:	fb09 220b 	mla	r2, r9, fp, r2
 8007a08:	4492      	add	sl, r2
 8007a0a:	b289      	uxth	r1, r1
 8007a0c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007a10:	f84e 1b04 	str.w	r1, [lr], #4
 8007a14:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007a18:	f8be 1000 	ldrh.w	r1, [lr]
 8007a1c:	0c12      	lsrs	r2, r2, #16
 8007a1e:	fb09 1102 	mla	r1, r9, r2, r1
 8007a22:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007a26:	4567      	cmp	r7, ip
 8007a28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a2c:	d8e6      	bhi.n	80079fc <__multiply+0x10c>
 8007a2e:	9a01      	ldr	r2, [sp, #4]
 8007a30:	50a9      	str	r1, [r5, r2]
 8007a32:	3504      	adds	r5, #4
 8007a34:	e79a      	b.n	800796c <__multiply+0x7c>
 8007a36:	3e01      	subs	r6, #1
 8007a38:	e79c      	b.n	8007974 <__multiply+0x84>
 8007a3a:	bf00      	nop
 8007a3c:	0800a721 	.word	0x0800a721
 8007a40:	0800a7c3 	.word	0x0800a7c3

08007a44 <__pow5mult>:
 8007a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a48:	4615      	mov	r5, r2
 8007a4a:	f012 0203 	ands.w	r2, r2, #3
 8007a4e:	4606      	mov	r6, r0
 8007a50:	460f      	mov	r7, r1
 8007a52:	d007      	beq.n	8007a64 <__pow5mult+0x20>
 8007a54:	4c25      	ldr	r4, [pc, #148]	; (8007aec <__pow5mult+0xa8>)
 8007a56:	3a01      	subs	r2, #1
 8007a58:	2300      	movs	r3, #0
 8007a5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a5e:	f7ff fe51 	bl	8007704 <__multadd>
 8007a62:	4607      	mov	r7, r0
 8007a64:	10ad      	asrs	r5, r5, #2
 8007a66:	d03d      	beq.n	8007ae4 <__pow5mult+0xa0>
 8007a68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007a6a:	b97c      	cbnz	r4, 8007a8c <__pow5mult+0x48>
 8007a6c:	2010      	movs	r0, #16
 8007a6e:	f001 fc85 	bl	800937c <malloc>
 8007a72:	4602      	mov	r2, r0
 8007a74:	6270      	str	r0, [r6, #36]	; 0x24
 8007a76:	b928      	cbnz	r0, 8007a84 <__pow5mult+0x40>
 8007a78:	4b1d      	ldr	r3, [pc, #116]	; (8007af0 <__pow5mult+0xac>)
 8007a7a:	481e      	ldr	r0, [pc, #120]	; (8007af4 <__pow5mult+0xb0>)
 8007a7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007a80:	f001 fa92 	bl	8008fa8 <__assert_func>
 8007a84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a88:	6004      	str	r4, [r0, #0]
 8007a8a:	60c4      	str	r4, [r0, #12]
 8007a8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007a90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a94:	b94c      	cbnz	r4, 8007aaa <__pow5mult+0x66>
 8007a96:	f240 2171 	movw	r1, #625	; 0x271
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	f7ff ff12 	bl	80078c4 <__i2b>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	6003      	str	r3, [r0, #0]
 8007aaa:	f04f 0900 	mov.w	r9, #0
 8007aae:	07eb      	lsls	r3, r5, #31
 8007ab0:	d50a      	bpl.n	8007ac8 <__pow5mult+0x84>
 8007ab2:	4639      	mov	r1, r7
 8007ab4:	4622      	mov	r2, r4
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	f7ff ff1a 	bl	80078f0 <__multiply>
 8007abc:	4639      	mov	r1, r7
 8007abe:	4680      	mov	r8, r0
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	f7ff fdfd 	bl	80076c0 <_Bfree>
 8007ac6:	4647      	mov	r7, r8
 8007ac8:	106d      	asrs	r5, r5, #1
 8007aca:	d00b      	beq.n	8007ae4 <__pow5mult+0xa0>
 8007acc:	6820      	ldr	r0, [r4, #0]
 8007ace:	b938      	cbnz	r0, 8007ae0 <__pow5mult+0x9c>
 8007ad0:	4622      	mov	r2, r4
 8007ad2:	4621      	mov	r1, r4
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	f7ff ff0b 	bl	80078f0 <__multiply>
 8007ada:	6020      	str	r0, [r4, #0]
 8007adc:	f8c0 9000 	str.w	r9, [r0]
 8007ae0:	4604      	mov	r4, r0
 8007ae2:	e7e4      	b.n	8007aae <__pow5mult+0x6a>
 8007ae4:	4638      	mov	r0, r7
 8007ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aea:	bf00      	nop
 8007aec:	0800a910 	.word	0x0800a910
 8007af0:	0800a7ac 	.word	0x0800a7ac
 8007af4:	0800a7c3 	.word	0x0800a7c3

08007af8 <__lshift>:
 8007af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007afc:	460c      	mov	r4, r1
 8007afe:	6849      	ldr	r1, [r1, #4]
 8007b00:	6923      	ldr	r3, [r4, #16]
 8007b02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b06:	68a3      	ldr	r3, [r4, #8]
 8007b08:	4607      	mov	r7, r0
 8007b0a:	4691      	mov	r9, r2
 8007b0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b10:	f108 0601 	add.w	r6, r8, #1
 8007b14:	42b3      	cmp	r3, r6
 8007b16:	db0b      	blt.n	8007b30 <__lshift+0x38>
 8007b18:	4638      	mov	r0, r7
 8007b1a:	f7ff fd91 	bl	8007640 <_Balloc>
 8007b1e:	4605      	mov	r5, r0
 8007b20:	b948      	cbnz	r0, 8007b36 <__lshift+0x3e>
 8007b22:	4602      	mov	r2, r0
 8007b24:	4b2a      	ldr	r3, [pc, #168]	; (8007bd0 <__lshift+0xd8>)
 8007b26:	482b      	ldr	r0, [pc, #172]	; (8007bd4 <__lshift+0xdc>)
 8007b28:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007b2c:	f001 fa3c 	bl	8008fa8 <__assert_func>
 8007b30:	3101      	adds	r1, #1
 8007b32:	005b      	lsls	r3, r3, #1
 8007b34:	e7ee      	b.n	8007b14 <__lshift+0x1c>
 8007b36:	2300      	movs	r3, #0
 8007b38:	f100 0114 	add.w	r1, r0, #20
 8007b3c:	f100 0210 	add.w	r2, r0, #16
 8007b40:	4618      	mov	r0, r3
 8007b42:	4553      	cmp	r3, sl
 8007b44:	db37      	blt.n	8007bb6 <__lshift+0xbe>
 8007b46:	6920      	ldr	r0, [r4, #16]
 8007b48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b4c:	f104 0314 	add.w	r3, r4, #20
 8007b50:	f019 091f 	ands.w	r9, r9, #31
 8007b54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007b5c:	d02f      	beq.n	8007bbe <__lshift+0xc6>
 8007b5e:	f1c9 0e20 	rsb	lr, r9, #32
 8007b62:	468a      	mov	sl, r1
 8007b64:	f04f 0c00 	mov.w	ip, #0
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	fa02 f209 	lsl.w	r2, r2, r9
 8007b6e:	ea42 020c 	orr.w	r2, r2, ip
 8007b72:	f84a 2b04 	str.w	r2, [sl], #4
 8007b76:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b7a:	4298      	cmp	r0, r3
 8007b7c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007b80:	d8f2      	bhi.n	8007b68 <__lshift+0x70>
 8007b82:	1b03      	subs	r3, r0, r4
 8007b84:	3b15      	subs	r3, #21
 8007b86:	f023 0303 	bic.w	r3, r3, #3
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	f104 0215 	add.w	r2, r4, #21
 8007b90:	4290      	cmp	r0, r2
 8007b92:	bf38      	it	cc
 8007b94:	2304      	movcc	r3, #4
 8007b96:	f841 c003 	str.w	ip, [r1, r3]
 8007b9a:	f1bc 0f00 	cmp.w	ip, #0
 8007b9e:	d001      	beq.n	8007ba4 <__lshift+0xac>
 8007ba0:	f108 0602 	add.w	r6, r8, #2
 8007ba4:	3e01      	subs	r6, #1
 8007ba6:	4638      	mov	r0, r7
 8007ba8:	612e      	str	r6, [r5, #16]
 8007baa:	4621      	mov	r1, r4
 8007bac:	f7ff fd88 	bl	80076c0 <_Bfree>
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007bba:	3301      	adds	r3, #1
 8007bbc:	e7c1      	b.n	8007b42 <__lshift+0x4a>
 8007bbe:	3904      	subs	r1, #4
 8007bc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007bc8:	4298      	cmp	r0, r3
 8007bca:	d8f9      	bhi.n	8007bc0 <__lshift+0xc8>
 8007bcc:	e7ea      	b.n	8007ba4 <__lshift+0xac>
 8007bce:	bf00      	nop
 8007bd0:	0800a721 	.word	0x0800a721
 8007bd4:	0800a7c3 	.word	0x0800a7c3

08007bd8 <__mcmp>:
 8007bd8:	b530      	push	{r4, r5, lr}
 8007bda:	6902      	ldr	r2, [r0, #16]
 8007bdc:	690c      	ldr	r4, [r1, #16]
 8007bde:	1b12      	subs	r2, r2, r4
 8007be0:	d10e      	bne.n	8007c00 <__mcmp+0x28>
 8007be2:	f100 0314 	add.w	r3, r0, #20
 8007be6:	3114      	adds	r1, #20
 8007be8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007bec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007bf0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007bf4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007bf8:	42a5      	cmp	r5, r4
 8007bfa:	d003      	beq.n	8007c04 <__mcmp+0x2c>
 8007bfc:	d305      	bcc.n	8007c0a <__mcmp+0x32>
 8007bfe:	2201      	movs	r2, #1
 8007c00:	4610      	mov	r0, r2
 8007c02:	bd30      	pop	{r4, r5, pc}
 8007c04:	4283      	cmp	r3, r0
 8007c06:	d3f3      	bcc.n	8007bf0 <__mcmp+0x18>
 8007c08:	e7fa      	b.n	8007c00 <__mcmp+0x28>
 8007c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c0e:	e7f7      	b.n	8007c00 <__mcmp+0x28>

08007c10 <__mdiff>:
 8007c10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c14:	460c      	mov	r4, r1
 8007c16:	4606      	mov	r6, r0
 8007c18:	4611      	mov	r1, r2
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	4690      	mov	r8, r2
 8007c1e:	f7ff ffdb 	bl	8007bd8 <__mcmp>
 8007c22:	1e05      	subs	r5, r0, #0
 8007c24:	d110      	bne.n	8007c48 <__mdiff+0x38>
 8007c26:	4629      	mov	r1, r5
 8007c28:	4630      	mov	r0, r6
 8007c2a:	f7ff fd09 	bl	8007640 <_Balloc>
 8007c2e:	b930      	cbnz	r0, 8007c3e <__mdiff+0x2e>
 8007c30:	4b3a      	ldr	r3, [pc, #232]	; (8007d1c <__mdiff+0x10c>)
 8007c32:	4602      	mov	r2, r0
 8007c34:	f240 2132 	movw	r1, #562	; 0x232
 8007c38:	4839      	ldr	r0, [pc, #228]	; (8007d20 <__mdiff+0x110>)
 8007c3a:	f001 f9b5 	bl	8008fa8 <__assert_func>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c48:	bfa4      	itt	ge
 8007c4a:	4643      	movge	r3, r8
 8007c4c:	46a0      	movge	r8, r4
 8007c4e:	4630      	mov	r0, r6
 8007c50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007c54:	bfa6      	itte	ge
 8007c56:	461c      	movge	r4, r3
 8007c58:	2500      	movge	r5, #0
 8007c5a:	2501      	movlt	r5, #1
 8007c5c:	f7ff fcf0 	bl	8007640 <_Balloc>
 8007c60:	b920      	cbnz	r0, 8007c6c <__mdiff+0x5c>
 8007c62:	4b2e      	ldr	r3, [pc, #184]	; (8007d1c <__mdiff+0x10c>)
 8007c64:	4602      	mov	r2, r0
 8007c66:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007c6a:	e7e5      	b.n	8007c38 <__mdiff+0x28>
 8007c6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007c70:	6926      	ldr	r6, [r4, #16]
 8007c72:	60c5      	str	r5, [r0, #12]
 8007c74:	f104 0914 	add.w	r9, r4, #20
 8007c78:	f108 0514 	add.w	r5, r8, #20
 8007c7c:	f100 0e14 	add.w	lr, r0, #20
 8007c80:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007c84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007c88:	f108 0210 	add.w	r2, r8, #16
 8007c8c:	46f2      	mov	sl, lr
 8007c8e:	2100      	movs	r1, #0
 8007c90:	f859 3b04 	ldr.w	r3, [r9], #4
 8007c94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007c98:	fa1f f883 	uxth.w	r8, r3
 8007c9c:	fa11 f18b 	uxtah	r1, r1, fp
 8007ca0:	0c1b      	lsrs	r3, r3, #16
 8007ca2:	eba1 0808 	sub.w	r8, r1, r8
 8007ca6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007caa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007cae:	fa1f f888 	uxth.w	r8, r8
 8007cb2:	1419      	asrs	r1, r3, #16
 8007cb4:	454e      	cmp	r6, r9
 8007cb6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007cba:	f84a 3b04 	str.w	r3, [sl], #4
 8007cbe:	d8e7      	bhi.n	8007c90 <__mdiff+0x80>
 8007cc0:	1b33      	subs	r3, r6, r4
 8007cc2:	3b15      	subs	r3, #21
 8007cc4:	f023 0303 	bic.w	r3, r3, #3
 8007cc8:	3304      	adds	r3, #4
 8007cca:	3415      	adds	r4, #21
 8007ccc:	42a6      	cmp	r6, r4
 8007cce:	bf38      	it	cc
 8007cd0:	2304      	movcc	r3, #4
 8007cd2:	441d      	add	r5, r3
 8007cd4:	4473      	add	r3, lr
 8007cd6:	469e      	mov	lr, r3
 8007cd8:	462e      	mov	r6, r5
 8007cda:	4566      	cmp	r6, ip
 8007cdc:	d30e      	bcc.n	8007cfc <__mdiff+0xec>
 8007cde:	f10c 0203 	add.w	r2, ip, #3
 8007ce2:	1b52      	subs	r2, r2, r5
 8007ce4:	f022 0203 	bic.w	r2, r2, #3
 8007ce8:	3d03      	subs	r5, #3
 8007cea:	45ac      	cmp	ip, r5
 8007cec:	bf38      	it	cc
 8007cee:	2200      	movcc	r2, #0
 8007cf0:	441a      	add	r2, r3
 8007cf2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007cf6:	b17b      	cbz	r3, 8007d18 <__mdiff+0x108>
 8007cf8:	6107      	str	r7, [r0, #16]
 8007cfa:	e7a3      	b.n	8007c44 <__mdiff+0x34>
 8007cfc:	f856 8b04 	ldr.w	r8, [r6], #4
 8007d00:	fa11 f288 	uxtah	r2, r1, r8
 8007d04:	1414      	asrs	r4, r2, #16
 8007d06:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d0a:	b292      	uxth	r2, r2
 8007d0c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007d10:	f84e 2b04 	str.w	r2, [lr], #4
 8007d14:	1421      	asrs	r1, r4, #16
 8007d16:	e7e0      	b.n	8007cda <__mdiff+0xca>
 8007d18:	3f01      	subs	r7, #1
 8007d1a:	e7ea      	b.n	8007cf2 <__mdiff+0xe2>
 8007d1c:	0800a721 	.word	0x0800a721
 8007d20:	0800a7c3 	.word	0x0800a7c3

08007d24 <__ulp>:
 8007d24:	b082      	sub	sp, #8
 8007d26:	ed8d 0b00 	vstr	d0, [sp]
 8007d2a:	9b01      	ldr	r3, [sp, #4]
 8007d2c:	4912      	ldr	r1, [pc, #72]	; (8007d78 <__ulp+0x54>)
 8007d2e:	4019      	ands	r1, r3
 8007d30:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007d34:	2900      	cmp	r1, #0
 8007d36:	dd05      	ble.n	8007d44 <__ulp+0x20>
 8007d38:	2200      	movs	r2, #0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	ec43 2b10 	vmov	d0, r2, r3
 8007d40:	b002      	add	sp, #8
 8007d42:	4770      	bx	lr
 8007d44:	4249      	negs	r1, r1
 8007d46:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007d4a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007d4e:	f04f 0200 	mov.w	r2, #0
 8007d52:	f04f 0300 	mov.w	r3, #0
 8007d56:	da04      	bge.n	8007d62 <__ulp+0x3e>
 8007d58:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007d5c:	fa41 f300 	asr.w	r3, r1, r0
 8007d60:	e7ec      	b.n	8007d3c <__ulp+0x18>
 8007d62:	f1a0 0114 	sub.w	r1, r0, #20
 8007d66:	291e      	cmp	r1, #30
 8007d68:	bfda      	itte	le
 8007d6a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007d6e:	fa20 f101 	lsrle.w	r1, r0, r1
 8007d72:	2101      	movgt	r1, #1
 8007d74:	460a      	mov	r2, r1
 8007d76:	e7e1      	b.n	8007d3c <__ulp+0x18>
 8007d78:	7ff00000 	.word	0x7ff00000

08007d7c <__b2d>:
 8007d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7e:	6905      	ldr	r5, [r0, #16]
 8007d80:	f100 0714 	add.w	r7, r0, #20
 8007d84:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007d88:	1f2e      	subs	r6, r5, #4
 8007d8a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f7ff fd48 	bl	8007824 <__hi0bits>
 8007d94:	f1c0 0320 	rsb	r3, r0, #32
 8007d98:	280a      	cmp	r0, #10
 8007d9a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007e18 <__b2d+0x9c>
 8007d9e:	600b      	str	r3, [r1, #0]
 8007da0:	dc14      	bgt.n	8007dcc <__b2d+0x50>
 8007da2:	f1c0 0e0b 	rsb	lr, r0, #11
 8007da6:	fa24 f10e 	lsr.w	r1, r4, lr
 8007daa:	42b7      	cmp	r7, r6
 8007dac:	ea41 030c 	orr.w	r3, r1, ip
 8007db0:	bf34      	ite	cc
 8007db2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007db6:	2100      	movcs	r1, #0
 8007db8:	3015      	adds	r0, #21
 8007dba:	fa04 f000 	lsl.w	r0, r4, r0
 8007dbe:	fa21 f10e 	lsr.w	r1, r1, lr
 8007dc2:	ea40 0201 	orr.w	r2, r0, r1
 8007dc6:	ec43 2b10 	vmov	d0, r2, r3
 8007dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dcc:	42b7      	cmp	r7, r6
 8007dce:	bf3a      	itte	cc
 8007dd0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007dd4:	f1a5 0608 	subcc.w	r6, r5, #8
 8007dd8:	2100      	movcs	r1, #0
 8007dda:	380b      	subs	r0, #11
 8007ddc:	d017      	beq.n	8007e0e <__b2d+0x92>
 8007dde:	f1c0 0c20 	rsb	ip, r0, #32
 8007de2:	fa04 f500 	lsl.w	r5, r4, r0
 8007de6:	42be      	cmp	r6, r7
 8007de8:	fa21 f40c 	lsr.w	r4, r1, ip
 8007dec:	ea45 0504 	orr.w	r5, r5, r4
 8007df0:	bf8c      	ite	hi
 8007df2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007df6:	2400      	movls	r4, #0
 8007df8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007dfc:	fa01 f000 	lsl.w	r0, r1, r0
 8007e00:	fa24 f40c 	lsr.w	r4, r4, ip
 8007e04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007e08:	ea40 0204 	orr.w	r2, r0, r4
 8007e0c:	e7db      	b.n	8007dc6 <__b2d+0x4a>
 8007e0e:	ea44 030c 	orr.w	r3, r4, ip
 8007e12:	460a      	mov	r2, r1
 8007e14:	e7d7      	b.n	8007dc6 <__b2d+0x4a>
 8007e16:	bf00      	nop
 8007e18:	3ff00000 	.word	0x3ff00000

08007e1c <__d2b>:
 8007e1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e20:	4689      	mov	r9, r1
 8007e22:	2101      	movs	r1, #1
 8007e24:	ec57 6b10 	vmov	r6, r7, d0
 8007e28:	4690      	mov	r8, r2
 8007e2a:	f7ff fc09 	bl	8007640 <_Balloc>
 8007e2e:	4604      	mov	r4, r0
 8007e30:	b930      	cbnz	r0, 8007e40 <__d2b+0x24>
 8007e32:	4602      	mov	r2, r0
 8007e34:	4b25      	ldr	r3, [pc, #148]	; (8007ecc <__d2b+0xb0>)
 8007e36:	4826      	ldr	r0, [pc, #152]	; (8007ed0 <__d2b+0xb4>)
 8007e38:	f240 310a 	movw	r1, #778	; 0x30a
 8007e3c:	f001 f8b4 	bl	8008fa8 <__assert_func>
 8007e40:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007e44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007e48:	bb35      	cbnz	r5, 8007e98 <__d2b+0x7c>
 8007e4a:	2e00      	cmp	r6, #0
 8007e4c:	9301      	str	r3, [sp, #4]
 8007e4e:	d028      	beq.n	8007ea2 <__d2b+0x86>
 8007e50:	4668      	mov	r0, sp
 8007e52:	9600      	str	r6, [sp, #0]
 8007e54:	f7ff fd06 	bl	8007864 <__lo0bits>
 8007e58:	9900      	ldr	r1, [sp, #0]
 8007e5a:	b300      	cbz	r0, 8007e9e <__d2b+0x82>
 8007e5c:	9a01      	ldr	r2, [sp, #4]
 8007e5e:	f1c0 0320 	rsb	r3, r0, #32
 8007e62:	fa02 f303 	lsl.w	r3, r2, r3
 8007e66:	430b      	orrs	r3, r1
 8007e68:	40c2      	lsrs	r2, r0
 8007e6a:	6163      	str	r3, [r4, #20]
 8007e6c:	9201      	str	r2, [sp, #4]
 8007e6e:	9b01      	ldr	r3, [sp, #4]
 8007e70:	61a3      	str	r3, [r4, #24]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	bf14      	ite	ne
 8007e76:	2202      	movne	r2, #2
 8007e78:	2201      	moveq	r2, #1
 8007e7a:	6122      	str	r2, [r4, #16]
 8007e7c:	b1d5      	cbz	r5, 8007eb4 <__d2b+0x98>
 8007e7e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007e82:	4405      	add	r5, r0
 8007e84:	f8c9 5000 	str.w	r5, [r9]
 8007e88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e8c:	f8c8 0000 	str.w	r0, [r8]
 8007e90:	4620      	mov	r0, r4
 8007e92:	b003      	add	sp, #12
 8007e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e9c:	e7d5      	b.n	8007e4a <__d2b+0x2e>
 8007e9e:	6161      	str	r1, [r4, #20]
 8007ea0:	e7e5      	b.n	8007e6e <__d2b+0x52>
 8007ea2:	a801      	add	r0, sp, #4
 8007ea4:	f7ff fcde 	bl	8007864 <__lo0bits>
 8007ea8:	9b01      	ldr	r3, [sp, #4]
 8007eaa:	6163      	str	r3, [r4, #20]
 8007eac:	2201      	movs	r2, #1
 8007eae:	6122      	str	r2, [r4, #16]
 8007eb0:	3020      	adds	r0, #32
 8007eb2:	e7e3      	b.n	8007e7c <__d2b+0x60>
 8007eb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007eb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ebc:	f8c9 0000 	str.w	r0, [r9]
 8007ec0:	6918      	ldr	r0, [r3, #16]
 8007ec2:	f7ff fcaf 	bl	8007824 <__hi0bits>
 8007ec6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007eca:	e7df      	b.n	8007e8c <__d2b+0x70>
 8007ecc:	0800a721 	.word	0x0800a721
 8007ed0:	0800a7c3 	.word	0x0800a7c3

08007ed4 <__ratio>:
 8007ed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed8:	4688      	mov	r8, r1
 8007eda:	4669      	mov	r1, sp
 8007edc:	4681      	mov	r9, r0
 8007ede:	f7ff ff4d 	bl	8007d7c <__b2d>
 8007ee2:	a901      	add	r1, sp, #4
 8007ee4:	4640      	mov	r0, r8
 8007ee6:	ec55 4b10 	vmov	r4, r5, d0
 8007eea:	f7ff ff47 	bl	8007d7c <__b2d>
 8007eee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ef2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007ef6:	eba3 0c02 	sub.w	ip, r3, r2
 8007efa:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007efe:	1a9b      	subs	r3, r3, r2
 8007f00:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007f04:	ec51 0b10 	vmov	r0, r1, d0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	bfd6      	itet	le
 8007f0c:	460a      	movle	r2, r1
 8007f0e:	462a      	movgt	r2, r5
 8007f10:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007f14:	468b      	mov	fp, r1
 8007f16:	462f      	mov	r7, r5
 8007f18:	bfd4      	ite	le
 8007f1a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007f1e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007f22:	4620      	mov	r0, r4
 8007f24:	ee10 2a10 	vmov	r2, s0
 8007f28:	465b      	mov	r3, fp
 8007f2a:	4639      	mov	r1, r7
 8007f2c:	f7f8 fcae 	bl	800088c <__aeabi_ddiv>
 8007f30:	ec41 0b10 	vmov	d0, r0, r1
 8007f34:	b003      	add	sp, #12
 8007f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007f3a <__copybits>:
 8007f3a:	3901      	subs	r1, #1
 8007f3c:	b570      	push	{r4, r5, r6, lr}
 8007f3e:	1149      	asrs	r1, r1, #5
 8007f40:	6914      	ldr	r4, [r2, #16]
 8007f42:	3101      	adds	r1, #1
 8007f44:	f102 0314 	add.w	r3, r2, #20
 8007f48:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007f4c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007f50:	1f05      	subs	r5, r0, #4
 8007f52:	42a3      	cmp	r3, r4
 8007f54:	d30c      	bcc.n	8007f70 <__copybits+0x36>
 8007f56:	1aa3      	subs	r3, r4, r2
 8007f58:	3b11      	subs	r3, #17
 8007f5a:	f023 0303 	bic.w	r3, r3, #3
 8007f5e:	3211      	adds	r2, #17
 8007f60:	42a2      	cmp	r2, r4
 8007f62:	bf88      	it	hi
 8007f64:	2300      	movhi	r3, #0
 8007f66:	4418      	add	r0, r3
 8007f68:	2300      	movs	r3, #0
 8007f6a:	4288      	cmp	r0, r1
 8007f6c:	d305      	bcc.n	8007f7a <__copybits+0x40>
 8007f6e:	bd70      	pop	{r4, r5, r6, pc}
 8007f70:	f853 6b04 	ldr.w	r6, [r3], #4
 8007f74:	f845 6f04 	str.w	r6, [r5, #4]!
 8007f78:	e7eb      	b.n	8007f52 <__copybits+0x18>
 8007f7a:	f840 3b04 	str.w	r3, [r0], #4
 8007f7e:	e7f4      	b.n	8007f6a <__copybits+0x30>

08007f80 <__any_on>:
 8007f80:	f100 0214 	add.w	r2, r0, #20
 8007f84:	6900      	ldr	r0, [r0, #16]
 8007f86:	114b      	asrs	r3, r1, #5
 8007f88:	4298      	cmp	r0, r3
 8007f8a:	b510      	push	{r4, lr}
 8007f8c:	db11      	blt.n	8007fb2 <__any_on+0x32>
 8007f8e:	dd0a      	ble.n	8007fa6 <__any_on+0x26>
 8007f90:	f011 011f 	ands.w	r1, r1, #31
 8007f94:	d007      	beq.n	8007fa6 <__any_on+0x26>
 8007f96:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007f9a:	fa24 f001 	lsr.w	r0, r4, r1
 8007f9e:	fa00 f101 	lsl.w	r1, r0, r1
 8007fa2:	428c      	cmp	r4, r1
 8007fa4:	d10b      	bne.n	8007fbe <__any_on+0x3e>
 8007fa6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d803      	bhi.n	8007fb6 <__any_on+0x36>
 8007fae:	2000      	movs	r0, #0
 8007fb0:	bd10      	pop	{r4, pc}
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	e7f7      	b.n	8007fa6 <__any_on+0x26>
 8007fb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007fba:	2900      	cmp	r1, #0
 8007fbc:	d0f5      	beq.n	8007faa <__any_on+0x2a>
 8007fbe:	2001      	movs	r0, #1
 8007fc0:	e7f6      	b.n	8007fb0 <__any_on+0x30>

08007fc2 <_calloc_r>:
 8007fc2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fc4:	fba1 2402 	umull	r2, r4, r1, r2
 8007fc8:	b94c      	cbnz	r4, 8007fde <_calloc_r+0x1c>
 8007fca:	4611      	mov	r1, r2
 8007fcc:	9201      	str	r2, [sp, #4]
 8007fce:	f000 f82f 	bl	8008030 <_malloc_r>
 8007fd2:	9a01      	ldr	r2, [sp, #4]
 8007fd4:	4605      	mov	r5, r0
 8007fd6:	b930      	cbnz	r0, 8007fe6 <_calloc_r+0x24>
 8007fd8:	4628      	mov	r0, r5
 8007fda:	b003      	add	sp, #12
 8007fdc:	bd30      	pop	{r4, r5, pc}
 8007fde:	220c      	movs	r2, #12
 8007fe0:	6002      	str	r2, [r0, #0]
 8007fe2:	2500      	movs	r5, #0
 8007fe4:	e7f8      	b.n	8007fd8 <_calloc_r+0x16>
 8007fe6:	4621      	mov	r1, r4
 8007fe8:	f7fd fe0a 	bl	8005c00 <memset>
 8007fec:	e7f4      	b.n	8007fd8 <_calloc_r+0x16>
	...

08007ff0 <sbrk_aligned>:
 8007ff0:	b570      	push	{r4, r5, r6, lr}
 8007ff2:	4e0e      	ldr	r6, [pc, #56]	; (800802c <sbrk_aligned+0x3c>)
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	6831      	ldr	r1, [r6, #0]
 8007ff8:	4605      	mov	r5, r0
 8007ffa:	b911      	cbnz	r1, 8008002 <sbrk_aligned+0x12>
 8007ffc:	f000 febc 	bl	8008d78 <_sbrk_r>
 8008000:	6030      	str	r0, [r6, #0]
 8008002:	4621      	mov	r1, r4
 8008004:	4628      	mov	r0, r5
 8008006:	f000 feb7 	bl	8008d78 <_sbrk_r>
 800800a:	1c43      	adds	r3, r0, #1
 800800c:	d00a      	beq.n	8008024 <sbrk_aligned+0x34>
 800800e:	1cc4      	adds	r4, r0, #3
 8008010:	f024 0403 	bic.w	r4, r4, #3
 8008014:	42a0      	cmp	r0, r4
 8008016:	d007      	beq.n	8008028 <sbrk_aligned+0x38>
 8008018:	1a21      	subs	r1, r4, r0
 800801a:	4628      	mov	r0, r5
 800801c:	f000 feac 	bl	8008d78 <_sbrk_r>
 8008020:	3001      	adds	r0, #1
 8008022:	d101      	bne.n	8008028 <sbrk_aligned+0x38>
 8008024:	f04f 34ff 	mov.w	r4, #4294967295
 8008028:	4620      	mov	r0, r4
 800802a:	bd70      	pop	{r4, r5, r6, pc}
 800802c:	2000038c 	.word	0x2000038c

08008030 <_malloc_r>:
 8008030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008034:	1ccd      	adds	r5, r1, #3
 8008036:	f025 0503 	bic.w	r5, r5, #3
 800803a:	3508      	adds	r5, #8
 800803c:	2d0c      	cmp	r5, #12
 800803e:	bf38      	it	cc
 8008040:	250c      	movcc	r5, #12
 8008042:	2d00      	cmp	r5, #0
 8008044:	4607      	mov	r7, r0
 8008046:	db01      	blt.n	800804c <_malloc_r+0x1c>
 8008048:	42a9      	cmp	r1, r5
 800804a:	d905      	bls.n	8008058 <_malloc_r+0x28>
 800804c:	230c      	movs	r3, #12
 800804e:	603b      	str	r3, [r7, #0]
 8008050:	2600      	movs	r6, #0
 8008052:	4630      	mov	r0, r6
 8008054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008058:	4e2e      	ldr	r6, [pc, #184]	; (8008114 <_malloc_r+0xe4>)
 800805a:	f001 f9b1 	bl	80093c0 <__malloc_lock>
 800805e:	6833      	ldr	r3, [r6, #0]
 8008060:	461c      	mov	r4, r3
 8008062:	bb34      	cbnz	r4, 80080b2 <_malloc_r+0x82>
 8008064:	4629      	mov	r1, r5
 8008066:	4638      	mov	r0, r7
 8008068:	f7ff ffc2 	bl	8007ff0 <sbrk_aligned>
 800806c:	1c43      	adds	r3, r0, #1
 800806e:	4604      	mov	r4, r0
 8008070:	d14d      	bne.n	800810e <_malloc_r+0xde>
 8008072:	6834      	ldr	r4, [r6, #0]
 8008074:	4626      	mov	r6, r4
 8008076:	2e00      	cmp	r6, #0
 8008078:	d140      	bne.n	80080fc <_malloc_r+0xcc>
 800807a:	6823      	ldr	r3, [r4, #0]
 800807c:	4631      	mov	r1, r6
 800807e:	4638      	mov	r0, r7
 8008080:	eb04 0803 	add.w	r8, r4, r3
 8008084:	f000 fe78 	bl	8008d78 <_sbrk_r>
 8008088:	4580      	cmp	r8, r0
 800808a:	d13a      	bne.n	8008102 <_malloc_r+0xd2>
 800808c:	6821      	ldr	r1, [r4, #0]
 800808e:	3503      	adds	r5, #3
 8008090:	1a6d      	subs	r5, r5, r1
 8008092:	f025 0503 	bic.w	r5, r5, #3
 8008096:	3508      	adds	r5, #8
 8008098:	2d0c      	cmp	r5, #12
 800809a:	bf38      	it	cc
 800809c:	250c      	movcc	r5, #12
 800809e:	4629      	mov	r1, r5
 80080a0:	4638      	mov	r0, r7
 80080a2:	f7ff ffa5 	bl	8007ff0 <sbrk_aligned>
 80080a6:	3001      	adds	r0, #1
 80080a8:	d02b      	beq.n	8008102 <_malloc_r+0xd2>
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	442b      	add	r3, r5
 80080ae:	6023      	str	r3, [r4, #0]
 80080b0:	e00e      	b.n	80080d0 <_malloc_r+0xa0>
 80080b2:	6822      	ldr	r2, [r4, #0]
 80080b4:	1b52      	subs	r2, r2, r5
 80080b6:	d41e      	bmi.n	80080f6 <_malloc_r+0xc6>
 80080b8:	2a0b      	cmp	r2, #11
 80080ba:	d916      	bls.n	80080ea <_malloc_r+0xba>
 80080bc:	1961      	adds	r1, r4, r5
 80080be:	42a3      	cmp	r3, r4
 80080c0:	6025      	str	r5, [r4, #0]
 80080c2:	bf18      	it	ne
 80080c4:	6059      	strne	r1, [r3, #4]
 80080c6:	6863      	ldr	r3, [r4, #4]
 80080c8:	bf08      	it	eq
 80080ca:	6031      	streq	r1, [r6, #0]
 80080cc:	5162      	str	r2, [r4, r5]
 80080ce:	604b      	str	r3, [r1, #4]
 80080d0:	4638      	mov	r0, r7
 80080d2:	f104 060b 	add.w	r6, r4, #11
 80080d6:	f001 f979 	bl	80093cc <__malloc_unlock>
 80080da:	f026 0607 	bic.w	r6, r6, #7
 80080de:	1d23      	adds	r3, r4, #4
 80080e0:	1af2      	subs	r2, r6, r3
 80080e2:	d0b6      	beq.n	8008052 <_malloc_r+0x22>
 80080e4:	1b9b      	subs	r3, r3, r6
 80080e6:	50a3      	str	r3, [r4, r2]
 80080e8:	e7b3      	b.n	8008052 <_malloc_r+0x22>
 80080ea:	6862      	ldr	r2, [r4, #4]
 80080ec:	42a3      	cmp	r3, r4
 80080ee:	bf0c      	ite	eq
 80080f0:	6032      	streq	r2, [r6, #0]
 80080f2:	605a      	strne	r2, [r3, #4]
 80080f4:	e7ec      	b.n	80080d0 <_malloc_r+0xa0>
 80080f6:	4623      	mov	r3, r4
 80080f8:	6864      	ldr	r4, [r4, #4]
 80080fa:	e7b2      	b.n	8008062 <_malloc_r+0x32>
 80080fc:	4634      	mov	r4, r6
 80080fe:	6876      	ldr	r6, [r6, #4]
 8008100:	e7b9      	b.n	8008076 <_malloc_r+0x46>
 8008102:	230c      	movs	r3, #12
 8008104:	603b      	str	r3, [r7, #0]
 8008106:	4638      	mov	r0, r7
 8008108:	f001 f960 	bl	80093cc <__malloc_unlock>
 800810c:	e7a1      	b.n	8008052 <_malloc_r+0x22>
 800810e:	6025      	str	r5, [r4, #0]
 8008110:	e7de      	b.n	80080d0 <_malloc_r+0xa0>
 8008112:	bf00      	nop
 8008114:	20000388 	.word	0x20000388

08008118 <__ssputs_r>:
 8008118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800811c:	688e      	ldr	r6, [r1, #8]
 800811e:	429e      	cmp	r6, r3
 8008120:	4682      	mov	sl, r0
 8008122:	460c      	mov	r4, r1
 8008124:	4690      	mov	r8, r2
 8008126:	461f      	mov	r7, r3
 8008128:	d838      	bhi.n	800819c <__ssputs_r+0x84>
 800812a:	898a      	ldrh	r2, [r1, #12]
 800812c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008130:	d032      	beq.n	8008198 <__ssputs_r+0x80>
 8008132:	6825      	ldr	r5, [r4, #0]
 8008134:	6909      	ldr	r1, [r1, #16]
 8008136:	eba5 0901 	sub.w	r9, r5, r1
 800813a:	6965      	ldr	r5, [r4, #20]
 800813c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008140:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008144:	3301      	adds	r3, #1
 8008146:	444b      	add	r3, r9
 8008148:	106d      	asrs	r5, r5, #1
 800814a:	429d      	cmp	r5, r3
 800814c:	bf38      	it	cc
 800814e:	461d      	movcc	r5, r3
 8008150:	0553      	lsls	r3, r2, #21
 8008152:	d531      	bpl.n	80081b8 <__ssputs_r+0xa0>
 8008154:	4629      	mov	r1, r5
 8008156:	f7ff ff6b 	bl	8008030 <_malloc_r>
 800815a:	4606      	mov	r6, r0
 800815c:	b950      	cbnz	r0, 8008174 <__ssputs_r+0x5c>
 800815e:	230c      	movs	r3, #12
 8008160:	f8ca 3000 	str.w	r3, [sl]
 8008164:	89a3      	ldrh	r3, [r4, #12]
 8008166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800816a:	81a3      	strh	r3, [r4, #12]
 800816c:	f04f 30ff 	mov.w	r0, #4294967295
 8008170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008174:	6921      	ldr	r1, [r4, #16]
 8008176:	464a      	mov	r2, r9
 8008178:	f7ff fa54 	bl	8007624 <memcpy>
 800817c:	89a3      	ldrh	r3, [r4, #12]
 800817e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008186:	81a3      	strh	r3, [r4, #12]
 8008188:	6126      	str	r6, [r4, #16]
 800818a:	6165      	str	r5, [r4, #20]
 800818c:	444e      	add	r6, r9
 800818e:	eba5 0509 	sub.w	r5, r5, r9
 8008192:	6026      	str	r6, [r4, #0]
 8008194:	60a5      	str	r5, [r4, #8]
 8008196:	463e      	mov	r6, r7
 8008198:	42be      	cmp	r6, r7
 800819a:	d900      	bls.n	800819e <__ssputs_r+0x86>
 800819c:	463e      	mov	r6, r7
 800819e:	6820      	ldr	r0, [r4, #0]
 80081a0:	4632      	mov	r2, r6
 80081a2:	4641      	mov	r1, r8
 80081a4:	f001 f8f2 	bl	800938c <memmove>
 80081a8:	68a3      	ldr	r3, [r4, #8]
 80081aa:	1b9b      	subs	r3, r3, r6
 80081ac:	60a3      	str	r3, [r4, #8]
 80081ae:	6823      	ldr	r3, [r4, #0]
 80081b0:	4433      	add	r3, r6
 80081b2:	6023      	str	r3, [r4, #0]
 80081b4:	2000      	movs	r0, #0
 80081b6:	e7db      	b.n	8008170 <__ssputs_r+0x58>
 80081b8:	462a      	mov	r2, r5
 80081ba:	f001 f959 	bl	8009470 <_realloc_r>
 80081be:	4606      	mov	r6, r0
 80081c0:	2800      	cmp	r0, #0
 80081c2:	d1e1      	bne.n	8008188 <__ssputs_r+0x70>
 80081c4:	6921      	ldr	r1, [r4, #16]
 80081c6:	4650      	mov	r0, sl
 80081c8:	f001 f906 	bl	80093d8 <_free_r>
 80081cc:	e7c7      	b.n	800815e <__ssputs_r+0x46>
	...

080081d0 <_svfiprintf_r>:
 80081d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d4:	4698      	mov	r8, r3
 80081d6:	898b      	ldrh	r3, [r1, #12]
 80081d8:	061b      	lsls	r3, r3, #24
 80081da:	b09d      	sub	sp, #116	; 0x74
 80081dc:	4607      	mov	r7, r0
 80081de:	460d      	mov	r5, r1
 80081e0:	4614      	mov	r4, r2
 80081e2:	d50e      	bpl.n	8008202 <_svfiprintf_r+0x32>
 80081e4:	690b      	ldr	r3, [r1, #16]
 80081e6:	b963      	cbnz	r3, 8008202 <_svfiprintf_r+0x32>
 80081e8:	2140      	movs	r1, #64	; 0x40
 80081ea:	f7ff ff21 	bl	8008030 <_malloc_r>
 80081ee:	6028      	str	r0, [r5, #0]
 80081f0:	6128      	str	r0, [r5, #16]
 80081f2:	b920      	cbnz	r0, 80081fe <_svfiprintf_r+0x2e>
 80081f4:	230c      	movs	r3, #12
 80081f6:	603b      	str	r3, [r7, #0]
 80081f8:	f04f 30ff 	mov.w	r0, #4294967295
 80081fc:	e0d1      	b.n	80083a2 <_svfiprintf_r+0x1d2>
 80081fe:	2340      	movs	r3, #64	; 0x40
 8008200:	616b      	str	r3, [r5, #20]
 8008202:	2300      	movs	r3, #0
 8008204:	9309      	str	r3, [sp, #36]	; 0x24
 8008206:	2320      	movs	r3, #32
 8008208:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800820c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008210:	2330      	movs	r3, #48	; 0x30
 8008212:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80083bc <_svfiprintf_r+0x1ec>
 8008216:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800821a:	f04f 0901 	mov.w	r9, #1
 800821e:	4623      	mov	r3, r4
 8008220:	469a      	mov	sl, r3
 8008222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008226:	b10a      	cbz	r2, 800822c <_svfiprintf_r+0x5c>
 8008228:	2a25      	cmp	r2, #37	; 0x25
 800822a:	d1f9      	bne.n	8008220 <_svfiprintf_r+0x50>
 800822c:	ebba 0b04 	subs.w	fp, sl, r4
 8008230:	d00b      	beq.n	800824a <_svfiprintf_r+0x7a>
 8008232:	465b      	mov	r3, fp
 8008234:	4622      	mov	r2, r4
 8008236:	4629      	mov	r1, r5
 8008238:	4638      	mov	r0, r7
 800823a:	f7ff ff6d 	bl	8008118 <__ssputs_r>
 800823e:	3001      	adds	r0, #1
 8008240:	f000 80aa 	beq.w	8008398 <_svfiprintf_r+0x1c8>
 8008244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008246:	445a      	add	r2, fp
 8008248:	9209      	str	r2, [sp, #36]	; 0x24
 800824a:	f89a 3000 	ldrb.w	r3, [sl]
 800824e:	2b00      	cmp	r3, #0
 8008250:	f000 80a2 	beq.w	8008398 <_svfiprintf_r+0x1c8>
 8008254:	2300      	movs	r3, #0
 8008256:	f04f 32ff 	mov.w	r2, #4294967295
 800825a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800825e:	f10a 0a01 	add.w	sl, sl, #1
 8008262:	9304      	str	r3, [sp, #16]
 8008264:	9307      	str	r3, [sp, #28]
 8008266:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800826a:	931a      	str	r3, [sp, #104]	; 0x68
 800826c:	4654      	mov	r4, sl
 800826e:	2205      	movs	r2, #5
 8008270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008274:	4851      	ldr	r0, [pc, #324]	; (80083bc <_svfiprintf_r+0x1ec>)
 8008276:	f7f7 ffd3 	bl	8000220 <memchr>
 800827a:	9a04      	ldr	r2, [sp, #16]
 800827c:	b9d8      	cbnz	r0, 80082b6 <_svfiprintf_r+0xe6>
 800827e:	06d0      	lsls	r0, r2, #27
 8008280:	bf44      	itt	mi
 8008282:	2320      	movmi	r3, #32
 8008284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008288:	0711      	lsls	r1, r2, #28
 800828a:	bf44      	itt	mi
 800828c:	232b      	movmi	r3, #43	; 0x2b
 800828e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008292:	f89a 3000 	ldrb.w	r3, [sl]
 8008296:	2b2a      	cmp	r3, #42	; 0x2a
 8008298:	d015      	beq.n	80082c6 <_svfiprintf_r+0xf6>
 800829a:	9a07      	ldr	r2, [sp, #28]
 800829c:	4654      	mov	r4, sl
 800829e:	2000      	movs	r0, #0
 80082a0:	f04f 0c0a 	mov.w	ip, #10
 80082a4:	4621      	mov	r1, r4
 80082a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082aa:	3b30      	subs	r3, #48	; 0x30
 80082ac:	2b09      	cmp	r3, #9
 80082ae:	d94e      	bls.n	800834e <_svfiprintf_r+0x17e>
 80082b0:	b1b0      	cbz	r0, 80082e0 <_svfiprintf_r+0x110>
 80082b2:	9207      	str	r2, [sp, #28]
 80082b4:	e014      	b.n	80082e0 <_svfiprintf_r+0x110>
 80082b6:	eba0 0308 	sub.w	r3, r0, r8
 80082ba:	fa09 f303 	lsl.w	r3, r9, r3
 80082be:	4313      	orrs	r3, r2
 80082c0:	9304      	str	r3, [sp, #16]
 80082c2:	46a2      	mov	sl, r4
 80082c4:	e7d2      	b.n	800826c <_svfiprintf_r+0x9c>
 80082c6:	9b03      	ldr	r3, [sp, #12]
 80082c8:	1d19      	adds	r1, r3, #4
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	9103      	str	r1, [sp, #12]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	bfbb      	ittet	lt
 80082d2:	425b      	neglt	r3, r3
 80082d4:	f042 0202 	orrlt.w	r2, r2, #2
 80082d8:	9307      	strge	r3, [sp, #28]
 80082da:	9307      	strlt	r3, [sp, #28]
 80082dc:	bfb8      	it	lt
 80082de:	9204      	strlt	r2, [sp, #16]
 80082e0:	7823      	ldrb	r3, [r4, #0]
 80082e2:	2b2e      	cmp	r3, #46	; 0x2e
 80082e4:	d10c      	bne.n	8008300 <_svfiprintf_r+0x130>
 80082e6:	7863      	ldrb	r3, [r4, #1]
 80082e8:	2b2a      	cmp	r3, #42	; 0x2a
 80082ea:	d135      	bne.n	8008358 <_svfiprintf_r+0x188>
 80082ec:	9b03      	ldr	r3, [sp, #12]
 80082ee:	1d1a      	adds	r2, r3, #4
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	9203      	str	r2, [sp, #12]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	bfb8      	it	lt
 80082f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80082fc:	3402      	adds	r4, #2
 80082fe:	9305      	str	r3, [sp, #20]
 8008300:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80083cc <_svfiprintf_r+0x1fc>
 8008304:	7821      	ldrb	r1, [r4, #0]
 8008306:	2203      	movs	r2, #3
 8008308:	4650      	mov	r0, sl
 800830a:	f7f7 ff89 	bl	8000220 <memchr>
 800830e:	b140      	cbz	r0, 8008322 <_svfiprintf_r+0x152>
 8008310:	2340      	movs	r3, #64	; 0x40
 8008312:	eba0 000a 	sub.w	r0, r0, sl
 8008316:	fa03 f000 	lsl.w	r0, r3, r0
 800831a:	9b04      	ldr	r3, [sp, #16]
 800831c:	4303      	orrs	r3, r0
 800831e:	3401      	adds	r4, #1
 8008320:	9304      	str	r3, [sp, #16]
 8008322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008326:	4826      	ldr	r0, [pc, #152]	; (80083c0 <_svfiprintf_r+0x1f0>)
 8008328:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800832c:	2206      	movs	r2, #6
 800832e:	f7f7 ff77 	bl	8000220 <memchr>
 8008332:	2800      	cmp	r0, #0
 8008334:	d038      	beq.n	80083a8 <_svfiprintf_r+0x1d8>
 8008336:	4b23      	ldr	r3, [pc, #140]	; (80083c4 <_svfiprintf_r+0x1f4>)
 8008338:	bb1b      	cbnz	r3, 8008382 <_svfiprintf_r+0x1b2>
 800833a:	9b03      	ldr	r3, [sp, #12]
 800833c:	3307      	adds	r3, #7
 800833e:	f023 0307 	bic.w	r3, r3, #7
 8008342:	3308      	adds	r3, #8
 8008344:	9303      	str	r3, [sp, #12]
 8008346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008348:	4433      	add	r3, r6
 800834a:	9309      	str	r3, [sp, #36]	; 0x24
 800834c:	e767      	b.n	800821e <_svfiprintf_r+0x4e>
 800834e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008352:	460c      	mov	r4, r1
 8008354:	2001      	movs	r0, #1
 8008356:	e7a5      	b.n	80082a4 <_svfiprintf_r+0xd4>
 8008358:	2300      	movs	r3, #0
 800835a:	3401      	adds	r4, #1
 800835c:	9305      	str	r3, [sp, #20]
 800835e:	4619      	mov	r1, r3
 8008360:	f04f 0c0a 	mov.w	ip, #10
 8008364:	4620      	mov	r0, r4
 8008366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800836a:	3a30      	subs	r2, #48	; 0x30
 800836c:	2a09      	cmp	r2, #9
 800836e:	d903      	bls.n	8008378 <_svfiprintf_r+0x1a8>
 8008370:	2b00      	cmp	r3, #0
 8008372:	d0c5      	beq.n	8008300 <_svfiprintf_r+0x130>
 8008374:	9105      	str	r1, [sp, #20]
 8008376:	e7c3      	b.n	8008300 <_svfiprintf_r+0x130>
 8008378:	fb0c 2101 	mla	r1, ip, r1, r2
 800837c:	4604      	mov	r4, r0
 800837e:	2301      	movs	r3, #1
 8008380:	e7f0      	b.n	8008364 <_svfiprintf_r+0x194>
 8008382:	ab03      	add	r3, sp, #12
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	462a      	mov	r2, r5
 8008388:	4b0f      	ldr	r3, [pc, #60]	; (80083c8 <_svfiprintf_r+0x1f8>)
 800838a:	a904      	add	r1, sp, #16
 800838c:	4638      	mov	r0, r7
 800838e:	f3af 8000 	nop.w
 8008392:	1c42      	adds	r2, r0, #1
 8008394:	4606      	mov	r6, r0
 8008396:	d1d6      	bne.n	8008346 <_svfiprintf_r+0x176>
 8008398:	89ab      	ldrh	r3, [r5, #12]
 800839a:	065b      	lsls	r3, r3, #25
 800839c:	f53f af2c 	bmi.w	80081f8 <_svfiprintf_r+0x28>
 80083a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083a2:	b01d      	add	sp, #116	; 0x74
 80083a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a8:	ab03      	add	r3, sp, #12
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	462a      	mov	r2, r5
 80083ae:	4b06      	ldr	r3, [pc, #24]	; (80083c8 <_svfiprintf_r+0x1f8>)
 80083b0:	a904      	add	r1, sp, #16
 80083b2:	4638      	mov	r0, r7
 80083b4:	f000 fa4c 	bl	8008850 <_printf_i>
 80083b8:	e7eb      	b.n	8008392 <_svfiprintf_r+0x1c2>
 80083ba:	bf00      	nop
 80083bc:	0800a91c 	.word	0x0800a91c
 80083c0:	0800a926 	.word	0x0800a926
 80083c4:	00000000 	.word	0x00000000
 80083c8:	08008119 	.word	0x08008119
 80083cc:	0800a922 	.word	0x0800a922

080083d0 <_sungetc_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	1c4b      	adds	r3, r1, #1
 80083d4:	4614      	mov	r4, r2
 80083d6:	d103      	bne.n	80083e0 <_sungetc_r+0x10>
 80083d8:	f04f 35ff 	mov.w	r5, #4294967295
 80083dc:	4628      	mov	r0, r5
 80083de:	bd38      	pop	{r3, r4, r5, pc}
 80083e0:	8993      	ldrh	r3, [r2, #12]
 80083e2:	f023 0320 	bic.w	r3, r3, #32
 80083e6:	8193      	strh	r3, [r2, #12]
 80083e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80083ea:	6852      	ldr	r2, [r2, #4]
 80083ec:	b2cd      	uxtb	r5, r1
 80083ee:	b18b      	cbz	r3, 8008414 <_sungetc_r+0x44>
 80083f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80083f2:	4293      	cmp	r3, r2
 80083f4:	dd08      	ble.n	8008408 <_sungetc_r+0x38>
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	1e5a      	subs	r2, r3, #1
 80083fa:	6022      	str	r2, [r4, #0]
 80083fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008400:	6863      	ldr	r3, [r4, #4]
 8008402:	3301      	adds	r3, #1
 8008404:	6063      	str	r3, [r4, #4]
 8008406:	e7e9      	b.n	80083dc <_sungetc_r+0xc>
 8008408:	4621      	mov	r1, r4
 800840a:	f000 fd85 	bl	8008f18 <__submore>
 800840e:	2800      	cmp	r0, #0
 8008410:	d0f1      	beq.n	80083f6 <_sungetc_r+0x26>
 8008412:	e7e1      	b.n	80083d8 <_sungetc_r+0x8>
 8008414:	6921      	ldr	r1, [r4, #16]
 8008416:	6823      	ldr	r3, [r4, #0]
 8008418:	b151      	cbz	r1, 8008430 <_sungetc_r+0x60>
 800841a:	4299      	cmp	r1, r3
 800841c:	d208      	bcs.n	8008430 <_sungetc_r+0x60>
 800841e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008422:	42a9      	cmp	r1, r5
 8008424:	d104      	bne.n	8008430 <_sungetc_r+0x60>
 8008426:	3b01      	subs	r3, #1
 8008428:	3201      	adds	r2, #1
 800842a:	6023      	str	r3, [r4, #0]
 800842c:	6062      	str	r2, [r4, #4]
 800842e:	e7d5      	b.n	80083dc <_sungetc_r+0xc>
 8008430:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008438:	6363      	str	r3, [r4, #52]	; 0x34
 800843a:	2303      	movs	r3, #3
 800843c:	63a3      	str	r3, [r4, #56]	; 0x38
 800843e:	4623      	mov	r3, r4
 8008440:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008444:	6023      	str	r3, [r4, #0]
 8008446:	2301      	movs	r3, #1
 8008448:	e7dc      	b.n	8008404 <_sungetc_r+0x34>

0800844a <__ssrefill_r>:
 800844a:	b510      	push	{r4, lr}
 800844c:	460c      	mov	r4, r1
 800844e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008450:	b169      	cbz	r1, 800846e <__ssrefill_r+0x24>
 8008452:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008456:	4299      	cmp	r1, r3
 8008458:	d001      	beq.n	800845e <__ssrefill_r+0x14>
 800845a:	f000 ffbd 	bl	80093d8 <_free_r>
 800845e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008460:	6063      	str	r3, [r4, #4]
 8008462:	2000      	movs	r0, #0
 8008464:	6360      	str	r0, [r4, #52]	; 0x34
 8008466:	b113      	cbz	r3, 800846e <__ssrefill_r+0x24>
 8008468:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800846a:	6023      	str	r3, [r4, #0]
 800846c:	bd10      	pop	{r4, pc}
 800846e:	6923      	ldr	r3, [r4, #16]
 8008470:	6023      	str	r3, [r4, #0]
 8008472:	2300      	movs	r3, #0
 8008474:	6063      	str	r3, [r4, #4]
 8008476:	89a3      	ldrh	r3, [r4, #12]
 8008478:	f043 0320 	orr.w	r3, r3, #32
 800847c:	81a3      	strh	r3, [r4, #12]
 800847e:	f04f 30ff 	mov.w	r0, #4294967295
 8008482:	e7f3      	b.n	800846c <__ssrefill_r+0x22>

08008484 <__ssvfiscanf_r>:
 8008484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008488:	460c      	mov	r4, r1
 800848a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800848e:	2100      	movs	r1, #0
 8008490:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008494:	49a6      	ldr	r1, [pc, #664]	; (8008730 <__ssvfiscanf_r+0x2ac>)
 8008496:	91a0      	str	r1, [sp, #640]	; 0x280
 8008498:	f10d 0804 	add.w	r8, sp, #4
 800849c:	49a5      	ldr	r1, [pc, #660]	; (8008734 <__ssvfiscanf_r+0x2b0>)
 800849e:	4fa6      	ldr	r7, [pc, #664]	; (8008738 <__ssvfiscanf_r+0x2b4>)
 80084a0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800873c <__ssvfiscanf_r+0x2b8>
 80084a4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80084a8:	4606      	mov	r6, r0
 80084aa:	91a1      	str	r1, [sp, #644]	; 0x284
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	7813      	ldrb	r3, [r2, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 815a 	beq.w	800876a <__ssvfiscanf_r+0x2e6>
 80084b6:	5dd9      	ldrb	r1, [r3, r7]
 80084b8:	f011 0108 	ands.w	r1, r1, #8
 80084bc:	f102 0501 	add.w	r5, r2, #1
 80084c0:	d019      	beq.n	80084f6 <__ssvfiscanf_r+0x72>
 80084c2:	6863      	ldr	r3, [r4, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	dd0f      	ble.n	80084e8 <__ssvfiscanf_r+0x64>
 80084c8:	6823      	ldr	r3, [r4, #0]
 80084ca:	781a      	ldrb	r2, [r3, #0]
 80084cc:	5cba      	ldrb	r2, [r7, r2]
 80084ce:	0712      	lsls	r2, r2, #28
 80084d0:	d401      	bmi.n	80084d6 <__ssvfiscanf_r+0x52>
 80084d2:	462a      	mov	r2, r5
 80084d4:	e7eb      	b.n	80084ae <__ssvfiscanf_r+0x2a>
 80084d6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80084d8:	3201      	adds	r2, #1
 80084da:	9245      	str	r2, [sp, #276]	; 0x114
 80084dc:	6862      	ldr	r2, [r4, #4]
 80084de:	3301      	adds	r3, #1
 80084e0:	3a01      	subs	r2, #1
 80084e2:	6062      	str	r2, [r4, #4]
 80084e4:	6023      	str	r3, [r4, #0]
 80084e6:	e7ec      	b.n	80084c2 <__ssvfiscanf_r+0x3e>
 80084e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80084ea:	4621      	mov	r1, r4
 80084ec:	4630      	mov	r0, r6
 80084ee:	4798      	blx	r3
 80084f0:	2800      	cmp	r0, #0
 80084f2:	d0e9      	beq.n	80084c8 <__ssvfiscanf_r+0x44>
 80084f4:	e7ed      	b.n	80084d2 <__ssvfiscanf_r+0x4e>
 80084f6:	2b25      	cmp	r3, #37	; 0x25
 80084f8:	d012      	beq.n	8008520 <__ssvfiscanf_r+0x9c>
 80084fa:	469a      	mov	sl, r3
 80084fc:	6863      	ldr	r3, [r4, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f340 8091 	ble.w	8008626 <__ssvfiscanf_r+0x1a2>
 8008504:	6822      	ldr	r2, [r4, #0]
 8008506:	7813      	ldrb	r3, [r2, #0]
 8008508:	4553      	cmp	r3, sl
 800850a:	f040 812e 	bne.w	800876a <__ssvfiscanf_r+0x2e6>
 800850e:	6863      	ldr	r3, [r4, #4]
 8008510:	3b01      	subs	r3, #1
 8008512:	6063      	str	r3, [r4, #4]
 8008514:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008516:	3201      	adds	r2, #1
 8008518:	3301      	adds	r3, #1
 800851a:	6022      	str	r2, [r4, #0]
 800851c:	9345      	str	r3, [sp, #276]	; 0x114
 800851e:	e7d8      	b.n	80084d2 <__ssvfiscanf_r+0x4e>
 8008520:	9141      	str	r1, [sp, #260]	; 0x104
 8008522:	9143      	str	r1, [sp, #268]	; 0x10c
 8008524:	7853      	ldrb	r3, [r2, #1]
 8008526:	2b2a      	cmp	r3, #42	; 0x2a
 8008528:	bf02      	ittt	eq
 800852a:	2310      	moveq	r3, #16
 800852c:	1c95      	addeq	r5, r2, #2
 800852e:	9341      	streq	r3, [sp, #260]	; 0x104
 8008530:	220a      	movs	r2, #10
 8008532:	46aa      	mov	sl, r5
 8008534:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008538:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800853c:	2b09      	cmp	r3, #9
 800853e:	d91d      	bls.n	800857c <__ssvfiscanf_r+0xf8>
 8008540:	487e      	ldr	r0, [pc, #504]	; (800873c <__ssvfiscanf_r+0x2b8>)
 8008542:	2203      	movs	r2, #3
 8008544:	f7f7 fe6c 	bl	8000220 <memchr>
 8008548:	b140      	cbz	r0, 800855c <__ssvfiscanf_r+0xd8>
 800854a:	2301      	movs	r3, #1
 800854c:	eba0 0009 	sub.w	r0, r0, r9
 8008550:	fa03 f000 	lsl.w	r0, r3, r0
 8008554:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008556:	4318      	orrs	r0, r3
 8008558:	9041      	str	r0, [sp, #260]	; 0x104
 800855a:	4655      	mov	r5, sl
 800855c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008560:	2b78      	cmp	r3, #120	; 0x78
 8008562:	d806      	bhi.n	8008572 <__ssvfiscanf_r+0xee>
 8008564:	2b57      	cmp	r3, #87	; 0x57
 8008566:	d810      	bhi.n	800858a <__ssvfiscanf_r+0x106>
 8008568:	2b25      	cmp	r3, #37	; 0x25
 800856a:	d0c6      	beq.n	80084fa <__ssvfiscanf_r+0x76>
 800856c:	d856      	bhi.n	800861c <__ssvfiscanf_r+0x198>
 800856e:	2b00      	cmp	r3, #0
 8008570:	d064      	beq.n	800863c <__ssvfiscanf_r+0x1b8>
 8008572:	2303      	movs	r3, #3
 8008574:	9347      	str	r3, [sp, #284]	; 0x11c
 8008576:	230a      	movs	r3, #10
 8008578:	9342      	str	r3, [sp, #264]	; 0x108
 800857a:	e071      	b.n	8008660 <__ssvfiscanf_r+0x1dc>
 800857c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800857e:	fb02 1103 	mla	r1, r2, r3, r1
 8008582:	3930      	subs	r1, #48	; 0x30
 8008584:	9143      	str	r1, [sp, #268]	; 0x10c
 8008586:	4655      	mov	r5, sl
 8008588:	e7d3      	b.n	8008532 <__ssvfiscanf_r+0xae>
 800858a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800858e:	2a20      	cmp	r2, #32
 8008590:	d8ef      	bhi.n	8008572 <__ssvfiscanf_r+0xee>
 8008592:	a101      	add	r1, pc, #4	; (adr r1, 8008598 <__ssvfiscanf_r+0x114>)
 8008594:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008598:	0800864b 	.word	0x0800864b
 800859c:	08008573 	.word	0x08008573
 80085a0:	08008573 	.word	0x08008573
 80085a4:	080086a9 	.word	0x080086a9
 80085a8:	08008573 	.word	0x08008573
 80085ac:	08008573 	.word	0x08008573
 80085b0:	08008573 	.word	0x08008573
 80085b4:	08008573 	.word	0x08008573
 80085b8:	08008573 	.word	0x08008573
 80085bc:	08008573 	.word	0x08008573
 80085c0:	08008573 	.word	0x08008573
 80085c4:	080086bf 	.word	0x080086bf
 80085c8:	08008695 	.word	0x08008695
 80085cc:	08008623 	.word	0x08008623
 80085d0:	08008623 	.word	0x08008623
 80085d4:	08008623 	.word	0x08008623
 80085d8:	08008573 	.word	0x08008573
 80085dc:	08008699 	.word	0x08008699
 80085e0:	08008573 	.word	0x08008573
 80085e4:	08008573 	.word	0x08008573
 80085e8:	08008573 	.word	0x08008573
 80085ec:	08008573 	.word	0x08008573
 80085f0:	080086cf 	.word	0x080086cf
 80085f4:	080086a1 	.word	0x080086a1
 80085f8:	08008643 	.word	0x08008643
 80085fc:	08008573 	.word	0x08008573
 8008600:	08008573 	.word	0x08008573
 8008604:	080086cb 	.word	0x080086cb
 8008608:	08008573 	.word	0x08008573
 800860c:	08008695 	.word	0x08008695
 8008610:	08008573 	.word	0x08008573
 8008614:	08008573 	.word	0x08008573
 8008618:	0800864b 	.word	0x0800864b
 800861c:	3b45      	subs	r3, #69	; 0x45
 800861e:	2b02      	cmp	r3, #2
 8008620:	d8a7      	bhi.n	8008572 <__ssvfiscanf_r+0xee>
 8008622:	2305      	movs	r3, #5
 8008624:	e01b      	b.n	800865e <__ssvfiscanf_r+0x1da>
 8008626:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008628:	4621      	mov	r1, r4
 800862a:	4630      	mov	r0, r6
 800862c:	4798      	blx	r3
 800862e:	2800      	cmp	r0, #0
 8008630:	f43f af68 	beq.w	8008504 <__ssvfiscanf_r+0x80>
 8008634:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008636:	2800      	cmp	r0, #0
 8008638:	f040 808d 	bne.w	8008756 <__ssvfiscanf_r+0x2d2>
 800863c:	f04f 30ff 	mov.w	r0, #4294967295
 8008640:	e08f      	b.n	8008762 <__ssvfiscanf_r+0x2de>
 8008642:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008644:	f042 0220 	orr.w	r2, r2, #32
 8008648:	9241      	str	r2, [sp, #260]	; 0x104
 800864a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800864c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008650:	9241      	str	r2, [sp, #260]	; 0x104
 8008652:	2210      	movs	r2, #16
 8008654:	2b6f      	cmp	r3, #111	; 0x6f
 8008656:	9242      	str	r2, [sp, #264]	; 0x108
 8008658:	bf34      	ite	cc
 800865a:	2303      	movcc	r3, #3
 800865c:	2304      	movcs	r3, #4
 800865e:	9347      	str	r3, [sp, #284]	; 0x11c
 8008660:	6863      	ldr	r3, [r4, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	dd42      	ble.n	80086ec <__ssvfiscanf_r+0x268>
 8008666:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008668:	0659      	lsls	r1, r3, #25
 800866a:	d404      	bmi.n	8008676 <__ssvfiscanf_r+0x1f2>
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	781a      	ldrb	r2, [r3, #0]
 8008670:	5cba      	ldrb	r2, [r7, r2]
 8008672:	0712      	lsls	r2, r2, #28
 8008674:	d441      	bmi.n	80086fa <__ssvfiscanf_r+0x276>
 8008676:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008678:	2b02      	cmp	r3, #2
 800867a:	dc50      	bgt.n	800871e <__ssvfiscanf_r+0x29a>
 800867c:	466b      	mov	r3, sp
 800867e:	4622      	mov	r2, r4
 8008680:	a941      	add	r1, sp, #260	; 0x104
 8008682:	4630      	mov	r0, r6
 8008684:	f000 fa0a 	bl	8008a9c <_scanf_chars>
 8008688:	2801      	cmp	r0, #1
 800868a:	d06e      	beq.n	800876a <__ssvfiscanf_r+0x2e6>
 800868c:	2802      	cmp	r0, #2
 800868e:	f47f af20 	bne.w	80084d2 <__ssvfiscanf_r+0x4e>
 8008692:	e7cf      	b.n	8008634 <__ssvfiscanf_r+0x1b0>
 8008694:	220a      	movs	r2, #10
 8008696:	e7dd      	b.n	8008654 <__ssvfiscanf_r+0x1d0>
 8008698:	2300      	movs	r3, #0
 800869a:	9342      	str	r3, [sp, #264]	; 0x108
 800869c:	2303      	movs	r3, #3
 800869e:	e7de      	b.n	800865e <__ssvfiscanf_r+0x1da>
 80086a0:	2308      	movs	r3, #8
 80086a2:	9342      	str	r3, [sp, #264]	; 0x108
 80086a4:	2304      	movs	r3, #4
 80086a6:	e7da      	b.n	800865e <__ssvfiscanf_r+0x1da>
 80086a8:	4629      	mov	r1, r5
 80086aa:	4640      	mov	r0, r8
 80086ac:	f000 fb74 	bl	8008d98 <__sccl>
 80086b0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80086b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086b6:	9341      	str	r3, [sp, #260]	; 0x104
 80086b8:	4605      	mov	r5, r0
 80086ba:	2301      	movs	r3, #1
 80086bc:	e7cf      	b.n	800865e <__ssvfiscanf_r+0x1da>
 80086be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80086c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086c4:	9341      	str	r3, [sp, #260]	; 0x104
 80086c6:	2300      	movs	r3, #0
 80086c8:	e7c9      	b.n	800865e <__ssvfiscanf_r+0x1da>
 80086ca:	2302      	movs	r3, #2
 80086cc:	e7c7      	b.n	800865e <__ssvfiscanf_r+0x1da>
 80086ce:	9841      	ldr	r0, [sp, #260]	; 0x104
 80086d0:	06c3      	lsls	r3, r0, #27
 80086d2:	f53f aefe 	bmi.w	80084d2 <__ssvfiscanf_r+0x4e>
 80086d6:	9b00      	ldr	r3, [sp, #0]
 80086d8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80086da:	1d19      	adds	r1, r3, #4
 80086dc:	9100      	str	r1, [sp, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f010 0f01 	tst.w	r0, #1
 80086e4:	bf14      	ite	ne
 80086e6:	801a      	strhne	r2, [r3, #0]
 80086e8:	601a      	streq	r2, [r3, #0]
 80086ea:	e6f2      	b.n	80084d2 <__ssvfiscanf_r+0x4e>
 80086ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80086ee:	4621      	mov	r1, r4
 80086f0:	4630      	mov	r0, r6
 80086f2:	4798      	blx	r3
 80086f4:	2800      	cmp	r0, #0
 80086f6:	d0b6      	beq.n	8008666 <__ssvfiscanf_r+0x1e2>
 80086f8:	e79c      	b.n	8008634 <__ssvfiscanf_r+0x1b0>
 80086fa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80086fc:	3201      	adds	r2, #1
 80086fe:	9245      	str	r2, [sp, #276]	; 0x114
 8008700:	6862      	ldr	r2, [r4, #4]
 8008702:	3a01      	subs	r2, #1
 8008704:	2a00      	cmp	r2, #0
 8008706:	6062      	str	r2, [r4, #4]
 8008708:	dd02      	ble.n	8008710 <__ssvfiscanf_r+0x28c>
 800870a:	3301      	adds	r3, #1
 800870c:	6023      	str	r3, [r4, #0]
 800870e:	e7ad      	b.n	800866c <__ssvfiscanf_r+0x1e8>
 8008710:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008712:	4621      	mov	r1, r4
 8008714:	4630      	mov	r0, r6
 8008716:	4798      	blx	r3
 8008718:	2800      	cmp	r0, #0
 800871a:	d0a7      	beq.n	800866c <__ssvfiscanf_r+0x1e8>
 800871c:	e78a      	b.n	8008634 <__ssvfiscanf_r+0x1b0>
 800871e:	2b04      	cmp	r3, #4
 8008720:	dc0e      	bgt.n	8008740 <__ssvfiscanf_r+0x2bc>
 8008722:	466b      	mov	r3, sp
 8008724:	4622      	mov	r2, r4
 8008726:	a941      	add	r1, sp, #260	; 0x104
 8008728:	4630      	mov	r0, r6
 800872a:	f000 fa11 	bl	8008b50 <_scanf_i>
 800872e:	e7ab      	b.n	8008688 <__ssvfiscanf_r+0x204>
 8008730:	080083d1 	.word	0x080083d1
 8008734:	0800844b 	.word	0x0800844b
 8008738:	0800a621 	.word	0x0800a621
 800873c:	0800a922 	.word	0x0800a922
 8008740:	4b0b      	ldr	r3, [pc, #44]	; (8008770 <__ssvfiscanf_r+0x2ec>)
 8008742:	2b00      	cmp	r3, #0
 8008744:	f43f aec5 	beq.w	80084d2 <__ssvfiscanf_r+0x4e>
 8008748:	466b      	mov	r3, sp
 800874a:	4622      	mov	r2, r4
 800874c:	a941      	add	r1, sp, #260	; 0x104
 800874e:	4630      	mov	r0, r6
 8008750:	f7fd fa5e 	bl	8005c10 <_scanf_float>
 8008754:	e798      	b.n	8008688 <__ssvfiscanf_r+0x204>
 8008756:	89a3      	ldrh	r3, [r4, #12]
 8008758:	f013 0f40 	tst.w	r3, #64	; 0x40
 800875c:	bf18      	it	ne
 800875e:	f04f 30ff 	movne.w	r0, #4294967295
 8008762:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800876a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800876c:	e7f9      	b.n	8008762 <__ssvfiscanf_r+0x2de>
 800876e:	bf00      	nop
 8008770:	08005c11 	.word	0x08005c11

08008774 <_printf_common>:
 8008774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008778:	4616      	mov	r6, r2
 800877a:	4699      	mov	r9, r3
 800877c:	688a      	ldr	r2, [r1, #8]
 800877e:	690b      	ldr	r3, [r1, #16]
 8008780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008784:	4293      	cmp	r3, r2
 8008786:	bfb8      	it	lt
 8008788:	4613      	movlt	r3, r2
 800878a:	6033      	str	r3, [r6, #0]
 800878c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008790:	4607      	mov	r7, r0
 8008792:	460c      	mov	r4, r1
 8008794:	b10a      	cbz	r2, 800879a <_printf_common+0x26>
 8008796:	3301      	adds	r3, #1
 8008798:	6033      	str	r3, [r6, #0]
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	0699      	lsls	r1, r3, #26
 800879e:	bf42      	ittt	mi
 80087a0:	6833      	ldrmi	r3, [r6, #0]
 80087a2:	3302      	addmi	r3, #2
 80087a4:	6033      	strmi	r3, [r6, #0]
 80087a6:	6825      	ldr	r5, [r4, #0]
 80087a8:	f015 0506 	ands.w	r5, r5, #6
 80087ac:	d106      	bne.n	80087bc <_printf_common+0x48>
 80087ae:	f104 0a19 	add.w	sl, r4, #25
 80087b2:	68e3      	ldr	r3, [r4, #12]
 80087b4:	6832      	ldr	r2, [r6, #0]
 80087b6:	1a9b      	subs	r3, r3, r2
 80087b8:	42ab      	cmp	r3, r5
 80087ba:	dc26      	bgt.n	800880a <_printf_common+0x96>
 80087bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087c0:	1e13      	subs	r3, r2, #0
 80087c2:	6822      	ldr	r2, [r4, #0]
 80087c4:	bf18      	it	ne
 80087c6:	2301      	movne	r3, #1
 80087c8:	0692      	lsls	r2, r2, #26
 80087ca:	d42b      	bmi.n	8008824 <_printf_common+0xb0>
 80087cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087d0:	4649      	mov	r1, r9
 80087d2:	4638      	mov	r0, r7
 80087d4:	47c0      	blx	r8
 80087d6:	3001      	adds	r0, #1
 80087d8:	d01e      	beq.n	8008818 <_printf_common+0xa4>
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	68e5      	ldr	r5, [r4, #12]
 80087de:	6832      	ldr	r2, [r6, #0]
 80087e0:	f003 0306 	and.w	r3, r3, #6
 80087e4:	2b04      	cmp	r3, #4
 80087e6:	bf08      	it	eq
 80087e8:	1aad      	subeq	r5, r5, r2
 80087ea:	68a3      	ldr	r3, [r4, #8]
 80087ec:	6922      	ldr	r2, [r4, #16]
 80087ee:	bf0c      	ite	eq
 80087f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087f4:	2500      	movne	r5, #0
 80087f6:	4293      	cmp	r3, r2
 80087f8:	bfc4      	itt	gt
 80087fa:	1a9b      	subgt	r3, r3, r2
 80087fc:	18ed      	addgt	r5, r5, r3
 80087fe:	2600      	movs	r6, #0
 8008800:	341a      	adds	r4, #26
 8008802:	42b5      	cmp	r5, r6
 8008804:	d11a      	bne.n	800883c <_printf_common+0xc8>
 8008806:	2000      	movs	r0, #0
 8008808:	e008      	b.n	800881c <_printf_common+0xa8>
 800880a:	2301      	movs	r3, #1
 800880c:	4652      	mov	r2, sl
 800880e:	4649      	mov	r1, r9
 8008810:	4638      	mov	r0, r7
 8008812:	47c0      	blx	r8
 8008814:	3001      	adds	r0, #1
 8008816:	d103      	bne.n	8008820 <_printf_common+0xac>
 8008818:	f04f 30ff 	mov.w	r0, #4294967295
 800881c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008820:	3501      	adds	r5, #1
 8008822:	e7c6      	b.n	80087b2 <_printf_common+0x3e>
 8008824:	18e1      	adds	r1, r4, r3
 8008826:	1c5a      	adds	r2, r3, #1
 8008828:	2030      	movs	r0, #48	; 0x30
 800882a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800882e:	4422      	add	r2, r4
 8008830:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008834:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008838:	3302      	adds	r3, #2
 800883a:	e7c7      	b.n	80087cc <_printf_common+0x58>
 800883c:	2301      	movs	r3, #1
 800883e:	4622      	mov	r2, r4
 8008840:	4649      	mov	r1, r9
 8008842:	4638      	mov	r0, r7
 8008844:	47c0      	blx	r8
 8008846:	3001      	adds	r0, #1
 8008848:	d0e6      	beq.n	8008818 <_printf_common+0xa4>
 800884a:	3601      	adds	r6, #1
 800884c:	e7d9      	b.n	8008802 <_printf_common+0x8e>
	...

08008850 <_printf_i>:
 8008850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008854:	7e0f      	ldrb	r7, [r1, #24]
 8008856:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008858:	2f78      	cmp	r7, #120	; 0x78
 800885a:	4691      	mov	r9, r2
 800885c:	4680      	mov	r8, r0
 800885e:	460c      	mov	r4, r1
 8008860:	469a      	mov	sl, r3
 8008862:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008866:	d807      	bhi.n	8008878 <_printf_i+0x28>
 8008868:	2f62      	cmp	r7, #98	; 0x62
 800886a:	d80a      	bhi.n	8008882 <_printf_i+0x32>
 800886c:	2f00      	cmp	r7, #0
 800886e:	f000 80d8 	beq.w	8008a22 <_printf_i+0x1d2>
 8008872:	2f58      	cmp	r7, #88	; 0x58
 8008874:	f000 80a3 	beq.w	80089be <_printf_i+0x16e>
 8008878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800887c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008880:	e03a      	b.n	80088f8 <_printf_i+0xa8>
 8008882:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008886:	2b15      	cmp	r3, #21
 8008888:	d8f6      	bhi.n	8008878 <_printf_i+0x28>
 800888a:	a101      	add	r1, pc, #4	; (adr r1, 8008890 <_printf_i+0x40>)
 800888c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008890:	080088e9 	.word	0x080088e9
 8008894:	080088fd 	.word	0x080088fd
 8008898:	08008879 	.word	0x08008879
 800889c:	08008879 	.word	0x08008879
 80088a0:	08008879 	.word	0x08008879
 80088a4:	08008879 	.word	0x08008879
 80088a8:	080088fd 	.word	0x080088fd
 80088ac:	08008879 	.word	0x08008879
 80088b0:	08008879 	.word	0x08008879
 80088b4:	08008879 	.word	0x08008879
 80088b8:	08008879 	.word	0x08008879
 80088bc:	08008a09 	.word	0x08008a09
 80088c0:	0800892d 	.word	0x0800892d
 80088c4:	080089eb 	.word	0x080089eb
 80088c8:	08008879 	.word	0x08008879
 80088cc:	08008879 	.word	0x08008879
 80088d0:	08008a2b 	.word	0x08008a2b
 80088d4:	08008879 	.word	0x08008879
 80088d8:	0800892d 	.word	0x0800892d
 80088dc:	08008879 	.word	0x08008879
 80088e0:	08008879 	.word	0x08008879
 80088e4:	080089f3 	.word	0x080089f3
 80088e8:	682b      	ldr	r3, [r5, #0]
 80088ea:	1d1a      	adds	r2, r3, #4
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	602a      	str	r2, [r5, #0]
 80088f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088f8:	2301      	movs	r3, #1
 80088fa:	e0a3      	b.n	8008a44 <_printf_i+0x1f4>
 80088fc:	6820      	ldr	r0, [r4, #0]
 80088fe:	6829      	ldr	r1, [r5, #0]
 8008900:	0606      	lsls	r6, r0, #24
 8008902:	f101 0304 	add.w	r3, r1, #4
 8008906:	d50a      	bpl.n	800891e <_printf_i+0xce>
 8008908:	680e      	ldr	r6, [r1, #0]
 800890a:	602b      	str	r3, [r5, #0]
 800890c:	2e00      	cmp	r6, #0
 800890e:	da03      	bge.n	8008918 <_printf_i+0xc8>
 8008910:	232d      	movs	r3, #45	; 0x2d
 8008912:	4276      	negs	r6, r6
 8008914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008918:	485e      	ldr	r0, [pc, #376]	; (8008a94 <_printf_i+0x244>)
 800891a:	230a      	movs	r3, #10
 800891c:	e019      	b.n	8008952 <_printf_i+0x102>
 800891e:	680e      	ldr	r6, [r1, #0]
 8008920:	602b      	str	r3, [r5, #0]
 8008922:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008926:	bf18      	it	ne
 8008928:	b236      	sxthne	r6, r6
 800892a:	e7ef      	b.n	800890c <_printf_i+0xbc>
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	6820      	ldr	r0, [r4, #0]
 8008930:	1d19      	adds	r1, r3, #4
 8008932:	6029      	str	r1, [r5, #0]
 8008934:	0601      	lsls	r1, r0, #24
 8008936:	d501      	bpl.n	800893c <_printf_i+0xec>
 8008938:	681e      	ldr	r6, [r3, #0]
 800893a:	e002      	b.n	8008942 <_printf_i+0xf2>
 800893c:	0646      	lsls	r6, r0, #25
 800893e:	d5fb      	bpl.n	8008938 <_printf_i+0xe8>
 8008940:	881e      	ldrh	r6, [r3, #0]
 8008942:	4854      	ldr	r0, [pc, #336]	; (8008a94 <_printf_i+0x244>)
 8008944:	2f6f      	cmp	r7, #111	; 0x6f
 8008946:	bf0c      	ite	eq
 8008948:	2308      	moveq	r3, #8
 800894a:	230a      	movne	r3, #10
 800894c:	2100      	movs	r1, #0
 800894e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008952:	6865      	ldr	r5, [r4, #4]
 8008954:	60a5      	str	r5, [r4, #8]
 8008956:	2d00      	cmp	r5, #0
 8008958:	bfa2      	ittt	ge
 800895a:	6821      	ldrge	r1, [r4, #0]
 800895c:	f021 0104 	bicge.w	r1, r1, #4
 8008960:	6021      	strge	r1, [r4, #0]
 8008962:	b90e      	cbnz	r6, 8008968 <_printf_i+0x118>
 8008964:	2d00      	cmp	r5, #0
 8008966:	d04d      	beq.n	8008a04 <_printf_i+0x1b4>
 8008968:	4615      	mov	r5, r2
 800896a:	fbb6 f1f3 	udiv	r1, r6, r3
 800896e:	fb03 6711 	mls	r7, r3, r1, r6
 8008972:	5dc7      	ldrb	r7, [r0, r7]
 8008974:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008978:	4637      	mov	r7, r6
 800897a:	42bb      	cmp	r3, r7
 800897c:	460e      	mov	r6, r1
 800897e:	d9f4      	bls.n	800896a <_printf_i+0x11a>
 8008980:	2b08      	cmp	r3, #8
 8008982:	d10b      	bne.n	800899c <_printf_i+0x14c>
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	07de      	lsls	r6, r3, #31
 8008988:	d508      	bpl.n	800899c <_printf_i+0x14c>
 800898a:	6923      	ldr	r3, [r4, #16]
 800898c:	6861      	ldr	r1, [r4, #4]
 800898e:	4299      	cmp	r1, r3
 8008990:	bfde      	ittt	le
 8008992:	2330      	movle	r3, #48	; 0x30
 8008994:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008998:	f105 35ff 	addle.w	r5, r5, #4294967295
 800899c:	1b52      	subs	r2, r2, r5
 800899e:	6122      	str	r2, [r4, #16]
 80089a0:	f8cd a000 	str.w	sl, [sp]
 80089a4:	464b      	mov	r3, r9
 80089a6:	aa03      	add	r2, sp, #12
 80089a8:	4621      	mov	r1, r4
 80089aa:	4640      	mov	r0, r8
 80089ac:	f7ff fee2 	bl	8008774 <_printf_common>
 80089b0:	3001      	adds	r0, #1
 80089b2:	d14c      	bne.n	8008a4e <_printf_i+0x1fe>
 80089b4:	f04f 30ff 	mov.w	r0, #4294967295
 80089b8:	b004      	add	sp, #16
 80089ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089be:	4835      	ldr	r0, [pc, #212]	; (8008a94 <_printf_i+0x244>)
 80089c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80089c4:	6829      	ldr	r1, [r5, #0]
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80089cc:	6029      	str	r1, [r5, #0]
 80089ce:	061d      	lsls	r5, r3, #24
 80089d0:	d514      	bpl.n	80089fc <_printf_i+0x1ac>
 80089d2:	07df      	lsls	r7, r3, #31
 80089d4:	bf44      	itt	mi
 80089d6:	f043 0320 	orrmi.w	r3, r3, #32
 80089da:	6023      	strmi	r3, [r4, #0]
 80089dc:	b91e      	cbnz	r6, 80089e6 <_printf_i+0x196>
 80089de:	6823      	ldr	r3, [r4, #0]
 80089e0:	f023 0320 	bic.w	r3, r3, #32
 80089e4:	6023      	str	r3, [r4, #0]
 80089e6:	2310      	movs	r3, #16
 80089e8:	e7b0      	b.n	800894c <_printf_i+0xfc>
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	f043 0320 	orr.w	r3, r3, #32
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	2378      	movs	r3, #120	; 0x78
 80089f4:	4828      	ldr	r0, [pc, #160]	; (8008a98 <_printf_i+0x248>)
 80089f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089fa:	e7e3      	b.n	80089c4 <_printf_i+0x174>
 80089fc:	0659      	lsls	r1, r3, #25
 80089fe:	bf48      	it	mi
 8008a00:	b2b6      	uxthmi	r6, r6
 8008a02:	e7e6      	b.n	80089d2 <_printf_i+0x182>
 8008a04:	4615      	mov	r5, r2
 8008a06:	e7bb      	b.n	8008980 <_printf_i+0x130>
 8008a08:	682b      	ldr	r3, [r5, #0]
 8008a0a:	6826      	ldr	r6, [r4, #0]
 8008a0c:	6961      	ldr	r1, [r4, #20]
 8008a0e:	1d18      	adds	r0, r3, #4
 8008a10:	6028      	str	r0, [r5, #0]
 8008a12:	0635      	lsls	r5, r6, #24
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	d501      	bpl.n	8008a1c <_printf_i+0x1cc>
 8008a18:	6019      	str	r1, [r3, #0]
 8008a1a:	e002      	b.n	8008a22 <_printf_i+0x1d2>
 8008a1c:	0670      	lsls	r0, r6, #25
 8008a1e:	d5fb      	bpl.n	8008a18 <_printf_i+0x1c8>
 8008a20:	8019      	strh	r1, [r3, #0]
 8008a22:	2300      	movs	r3, #0
 8008a24:	6123      	str	r3, [r4, #16]
 8008a26:	4615      	mov	r5, r2
 8008a28:	e7ba      	b.n	80089a0 <_printf_i+0x150>
 8008a2a:	682b      	ldr	r3, [r5, #0]
 8008a2c:	1d1a      	adds	r2, r3, #4
 8008a2e:	602a      	str	r2, [r5, #0]
 8008a30:	681d      	ldr	r5, [r3, #0]
 8008a32:	6862      	ldr	r2, [r4, #4]
 8008a34:	2100      	movs	r1, #0
 8008a36:	4628      	mov	r0, r5
 8008a38:	f7f7 fbf2 	bl	8000220 <memchr>
 8008a3c:	b108      	cbz	r0, 8008a42 <_printf_i+0x1f2>
 8008a3e:	1b40      	subs	r0, r0, r5
 8008a40:	6060      	str	r0, [r4, #4]
 8008a42:	6863      	ldr	r3, [r4, #4]
 8008a44:	6123      	str	r3, [r4, #16]
 8008a46:	2300      	movs	r3, #0
 8008a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a4c:	e7a8      	b.n	80089a0 <_printf_i+0x150>
 8008a4e:	6923      	ldr	r3, [r4, #16]
 8008a50:	462a      	mov	r2, r5
 8008a52:	4649      	mov	r1, r9
 8008a54:	4640      	mov	r0, r8
 8008a56:	47d0      	blx	sl
 8008a58:	3001      	adds	r0, #1
 8008a5a:	d0ab      	beq.n	80089b4 <_printf_i+0x164>
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	079b      	lsls	r3, r3, #30
 8008a60:	d413      	bmi.n	8008a8a <_printf_i+0x23a>
 8008a62:	68e0      	ldr	r0, [r4, #12]
 8008a64:	9b03      	ldr	r3, [sp, #12]
 8008a66:	4298      	cmp	r0, r3
 8008a68:	bfb8      	it	lt
 8008a6a:	4618      	movlt	r0, r3
 8008a6c:	e7a4      	b.n	80089b8 <_printf_i+0x168>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	4632      	mov	r2, r6
 8008a72:	4649      	mov	r1, r9
 8008a74:	4640      	mov	r0, r8
 8008a76:	47d0      	blx	sl
 8008a78:	3001      	adds	r0, #1
 8008a7a:	d09b      	beq.n	80089b4 <_printf_i+0x164>
 8008a7c:	3501      	adds	r5, #1
 8008a7e:	68e3      	ldr	r3, [r4, #12]
 8008a80:	9903      	ldr	r1, [sp, #12]
 8008a82:	1a5b      	subs	r3, r3, r1
 8008a84:	42ab      	cmp	r3, r5
 8008a86:	dcf2      	bgt.n	8008a6e <_printf_i+0x21e>
 8008a88:	e7eb      	b.n	8008a62 <_printf_i+0x212>
 8008a8a:	2500      	movs	r5, #0
 8008a8c:	f104 0619 	add.w	r6, r4, #25
 8008a90:	e7f5      	b.n	8008a7e <_printf_i+0x22e>
 8008a92:	bf00      	nop
 8008a94:	0800a92d 	.word	0x0800a92d
 8008a98:	0800a93e 	.word	0x0800a93e

08008a9c <_scanf_chars>:
 8008a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008aa0:	4615      	mov	r5, r2
 8008aa2:	688a      	ldr	r2, [r1, #8]
 8008aa4:	4680      	mov	r8, r0
 8008aa6:	460c      	mov	r4, r1
 8008aa8:	b932      	cbnz	r2, 8008ab8 <_scanf_chars+0x1c>
 8008aaa:	698a      	ldr	r2, [r1, #24]
 8008aac:	2a00      	cmp	r2, #0
 8008aae:	bf0c      	ite	eq
 8008ab0:	2201      	moveq	r2, #1
 8008ab2:	f04f 32ff 	movne.w	r2, #4294967295
 8008ab6:	608a      	str	r2, [r1, #8]
 8008ab8:	6822      	ldr	r2, [r4, #0]
 8008aba:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008b4c <_scanf_chars+0xb0>
 8008abe:	06d1      	lsls	r1, r2, #27
 8008ac0:	bf5f      	itttt	pl
 8008ac2:	681a      	ldrpl	r2, [r3, #0]
 8008ac4:	1d11      	addpl	r1, r2, #4
 8008ac6:	6019      	strpl	r1, [r3, #0]
 8008ac8:	6816      	ldrpl	r6, [r2, #0]
 8008aca:	2700      	movs	r7, #0
 8008acc:	69a0      	ldr	r0, [r4, #24]
 8008ace:	b188      	cbz	r0, 8008af4 <_scanf_chars+0x58>
 8008ad0:	2801      	cmp	r0, #1
 8008ad2:	d107      	bne.n	8008ae4 <_scanf_chars+0x48>
 8008ad4:	682a      	ldr	r2, [r5, #0]
 8008ad6:	7811      	ldrb	r1, [r2, #0]
 8008ad8:	6962      	ldr	r2, [r4, #20]
 8008ada:	5c52      	ldrb	r2, [r2, r1]
 8008adc:	b952      	cbnz	r2, 8008af4 <_scanf_chars+0x58>
 8008ade:	2f00      	cmp	r7, #0
 8008ae0:	d031      	beq.n	8008b46 <_scanf_chars+0xaa>
 8008ae2:	e022      	b.n	8008b2a <_scanf_chars+0x8e>
 8008ae4:	2802      	cmp	r0, #2
 8008ae6:	d120      	bne.n	8008b2a <_scanf_chars+0x8e>
 8008ae8:	682b      	ldr	r3, [r5, #0]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008af0:	071b      	lsls	r3, r3, #28
 8008af2:	d41a      	bmi.n	8008b2a <_scanf_chars+0x8e>
 8008af4:	6823      	ldr	r3, [r4, #0]
 8008af6:	06da      	lsls	r2, r3, #27
 8008af8:	bf5e      	ittt	pl
 8008afa:	682b      	ldrpl	r3, [r5, #0]
 8008afc:	781b      	ldrbpl	r3, [r3, #0]
 8008afe:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008b02:	682a      	ldr	r2, [r5, #0]
 8008b04:	686b      	ldr	r3, [r5, #4]
 8008b06:	3201      	adds	r2, #1
 8008b08:	602a      	str	r2, [r5, #0]
 8008b0a:	68a2      	ldr	r2, [r4, #8]
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	3a01      	subs	r2, #1
 8008b10:	606b      	str	r3, [r5, #4]
 8008b12:	3701      	adds	r7, #1
 8008b14:	60a2      	str	r2, [r4, #8]
 8008b16:	b142      	cbz	r2, 8008b2a <_scanf_chars+0x8e>
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	dcd7      	bgt.n	8008acc <_scanf_chars+0x30>
 8008b1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008b20:	4629      	mov	r1, r5
 8008b22:	4640      	mov	r0, r8
 8008b24:	4798      	blx	r3
 8008b26:	2800      	cmp	r0, #0
 8008b28:	d0d0      	beq.n	8008acc <_scanf_chars+0x30>
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	f013 0310 	ands.w	r3, r3, #16
 8008b30:	d105      	bne.n	8008b3e <_scanf_chars+0xa2>
 8008b32:	68e2      	ldr	r2, [r4, #12]
 8008b34:	3201      	adds	r2, #1
 8008b36:	60e2      	str	r2, [r4, #12]
 8008b38:	69a2      	ldr	r2, [r4, #24]
 8008b3a:	b102      	cbz	r2, 8008b3e <_scanf_chars+0xa2>
 8008b3c:	7033      	strb	r3, [r6, #0]
 8008b3e:	6923      	ldr	r3, [r4, #16]
 8008b40:	443b      	add	r3, r7
 8008b42:	6123      	str	r3, [r4, #16]
 8008b44:	2000      	movs	r0, #0
 8008b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b4a:	bf00      	nop
 8008b4c:	0800a621 	.word	0x0800a621

08008b50 <_scanf_i>:
 8008b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b54:	4698      	mov	r8, r3
 8008b56:	4b76      	ldr	r3, [pc, #472]	; (8008d30 <_scanf_i+0x1e0>)
 8008b58:	460c      	mov	r4, r1
 8008b5a:	4682      	mov	sl, r0
 8008b5c:	4616      	mov	r6, r2
 8008b5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b62:	b087      	sub	sp, #28
 8008b64:	ab03      	add	r3, sp, #12
 8008b66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008b6a:	4b72      	ldr	r3, [pc, #456]	; (8008d34 <_scanf_i+0x1e4>)
 8008b6c:	69a1      	ldr	r1, [r4, #24]
 8008b6e:	4a72      	ldr	r2, [pc, #456]	; (8008d38 <_scanf_i+0x1e8>)
 8008b70:	2903      	cmp	r1, #3
 8008b72:	bf18      	it	ne
 8008b74:	461a      	movne	r2, r3
 8008b76:	68a3      	ldr	r3, [r4, #8]
 8008b78:	9201      	str	r2, [sp, #4]
 8008b7a:	1e5a      	subs	r2, r3, #1
 8008b7c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008b80:	bf88      	it	hi
 8008b82:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008b86:	4627      	mov	r7, r4
 8008b88:	bf82      	ittt	hi
 8008b8a:	eb03 0905 	addhi.w	r9, r3, r5
 8008b8e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008b92:	60a3      	strhi	r3, [r4, #8]
 8008b94:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008b98:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008b9c:	bf98      	it	ls
 8008b9e:	f04f 0900 	movls.w	r9, #0
 8008ba2:	6023      	str	r3, [r4, #0]
 8008ba4:	463d      	mov	r5, r7
 8008ba6:	f04f 0b00 	mov.w	fp, #0
 8008baa:	6831      	ldr	r1, [r6, #0]
 8008bac:	ab03      	add	r3, sp, #12
 8008bae:	7809      	ldrb	r1, [r1, #0]
 8008bb0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008bb4:	2202      	movs	r2, #2
 8008bb6:	f7f7 fb33 	bl	8000220 <memchr>
 8008bba:	b328      	cbz	r0, 8008c08 <_scanf_i+0xb8>
 8008bbc:	f1bb 0f01 	cmp.w	fp, #1
 8008bc0:	d159      	bne.n	8008c76 <_scanf_i+0x126>
 8008bc2:	6862      	ldr	r2, [r4, #4]
 8008bc4:	b92a      	cbnz	r2, 8008bd2 <_scanf_i+0x82>
 8008bc6:	6822      	ldr	r2, [r4, #0]
 8008bc8:	2308      	movs	r3, #8
 8008bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bce:	6063      	str	r3, [r4, #4]
 8008bd0:	6022      	str	r2, [r4, #0]
 8008bd2:	6822      	ldr	r2, [r4, #0]
 8008bd4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008bd8:	6022      	str	r2, [r4, #0]
 8008bda:	68a2      	ldr	r2, [r4, #8]
 8008bdc:	1e51      	subs	r1, r2, #1
 8008bde:	60a1      	str	r1, [r4, #8]
 8008be0:	b192      	cbz	r2, 8008c08 <_scanf_i+0xb8>
 8008be2:	6832      	ldr	r2, [r6, #0]
 8008be4:	1c51      	adds	r1, r2, #1
 8008be6:	6031      	str	r1, [r6, #0]
 8008be8:	7812      	ldrb	r2, [r2, #0]
 8008bea:	f805 2b01 	strb.w	r2, [r5], #1
 8008bee:	6872      	ldr	r2, [r6, #4]
 8008bf0:	3a01      	subs	r2, #1
 8008bf2:	2a00      	cmp	r2, #0
 8008bf4:	6072      	str	r2, [r6, #4]
 8008bf6:	dc07      	bgt.n	8008c08 <_scanf_i+0xb8>
 8008bf8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008bfc:	4631      	mov	r1, r6
 8008bfe:	4650      	mov	r0, sl
 8008c00:	4790      	blx	r2
 8008c02:	2800      	cmp	r0, #0
 8008c04:	f040 8085 	bne.w	8008d12 <_scanf_i+0x1c2>
 8008c08:	f10b 0b01 	add.w	fp, fp, #1
 8008c0c:	f1bb 0f03 	cmp.w	fp, #3
 8008c10:	d1cb      	bne.n	8008baa <_scanf_i+0x5a>
 8008c12:	6863      	ldr	r3, [r4, #4]
 8008c14:	b90b      	cbnz	r3, 8008c1a <_scanf_i+0xca>
 8008c16:	230a      	movs	r3, #10
 8008c18:	6063      	str	r3, [r4, #4]
 8008c1a:	6863      	ldr	r3, [r4, #4]
 8008c1c:	4947      	ldr	r1, [pc, #284]	; (8008d3c <_scanf_i+0x1ec>)
 8008c1e:	6960      	ldr	r0, [r4, #20]
 8008c20:	1ac9      	subs	r1, r1, r3
 8008c22:	f000 f8b9 	bl	8008d98 <__sccl>
 8008c26:	f04f 0b00 	mov.w	fp, #0
 8008c2a:	68a3      	ldr	r3, [r4, #8]
 8008c2c:	6822      	ldr	r2, [r4, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d03d      	beq.n	8008cae <_scanf_i+0x15e>
 8008c32:	6831      	ldr	r1, [r6, #0]
 8008c34:	6960      	ldr	r0, [r4, #20]
 8008c36:	f891 c000 	ldrb.w	ip, [r1]
 8008c3a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	d035      	beq.n	8008cae <_scanf_i+0x15e>
 8008c42:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008c46:	d124      	bne.n	8008c92 <_scanf_i+0x142>
 8008c48:	0510      	lsls	r0, r2, #20
 8008c4a:	d522      	bpl.n	8008c92 <_scanf_i+0x142>
 8008c4c:	f10b 0b01 	add.w	fp, fp, #1
 8008c50:	f1b9 0f00 	cmp.w	r9, #0
 8008c54:	d003      	beq.n	8008c5e <_scanf_i+0x10e>
 8008c56:	3301      	adds	r3, #1
 8008c58:	f109 39ff 	add.w	r9, r9, #4294967295
 8008c5c:	60a3      	str	r3, [r4, #8]
 8008c5e:	6873      	ldr	r3, [r6, #4]
 8008c60:	3b01      	subs	r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	6073      	str	r3, [r6, #4]
 8008c66:	dd1b      	ble.n	8008ca0 <_scanf_i+0x150>
 8008c68:	6833      	ldr	r3, [r6, #0]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	6033      	str	r3, [r6, #0]
 8008c6e:	68a3      	ldr	r3, [r4, #8]
 8008c70:	3b01      	subs	r3, #1
 8008c72:	60a3      	str	r3, [r4, #8]
 8008c74:	e7d9      	b.n	8008c2a <_scanf_i+0xda>
 8008c76:	f1bb 0f02 	cmp.w	fp, #2
 8008c7a:	d1ae      	bne.n	8008bda <_scanf_i+0x8a>
 8008c7c:	6822      	ldr	r2, [r4, #0]
 8008c7e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008c82:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008c86:	d1bf      	bne.n	8008c08 <_scanf_i+0xb8>
 8008c88:	2310      	movs	r3, #16
 8008c8a:	6063      	str	r3, [r4, #4]
 8008c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c90:	e7a2      	b.n	8008bd8 <_scanf_i+0x88>
 8008c92:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008c96:	6022      	str	r2, [r4, #0]
 8008c98:	780b      	ldrb	r3, [r1, #0]
 8008c9a:	f805 3b01 	strb.w	r3, [r5], #1
 8008c9e:	e7de      	b.n	8008c5e <_scanf_i+0x10e>
 8008ca0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008ca4:	4631      	mov	r1, r6
 8008ca6:	4650      	mov	r0, sl
 8008ca8:	4798      	blx	r3
 8008caa:	2800      	cmp	r0, #0
 8008cac:	d0df      	beq.n	8008c6e <_scanf_i+0x11e>
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	05db      	lsls	r3, r3, #23
 8008cb2:	d50d      	bpl.n	8008cd0 <_scanf_i+0x180>
 8008cb4:	42bd      	cmp	r5, r7
 8008cb6:	d909      	bls.n	8008ccc <_scanf_i+0x17c>
 8008cb8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008cbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cc0:	4632      	mov	r2, r6
 8008cc2:	4650      	mov	r0, sl
 8008cc4:	4798      	blx	r3
 8008cc6:	f105 39ff 	add.w	r9, r5, #4294967295
 8008cca:	464d      	mov	r5, r9
 8008ccc:	42bd      	cmp	r5, r7
 8008cce:	d02d      	beq.n	8008d2c <_scanf_i+0x1dc>
 8008cd0:	6822      	ldr	r2, [r4, #0]
 8008cd2:	f012 0210 	ands.w	r2, r2, #16
 8008cd6:	d113      	bne.n	8008d00 <_scanf_i+0x1b0>
 8008cd8:	702a      	strb	r2, [r5, #0]
 8008cda:	6863      	ldr	r3, [r4, #4]
 8008cdc:	9e01      	ldr	r6, [sp, #4]
 8008cde:	4639      	mov	r1, r7
 8008ce0:	4650      	mov	r0, sl
 8008ce2:	47b0      	blx	r6
 8008ce4:	6821      	ldr	r1, [r4, #0]
 8008ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8008cea:	f011 0f20 	tst.w	r1, #32
 8008cee:	d013      	beq.n	8008d18 <_scanf_i+0x1c8>
 8008cf0:	1d1a      	adds	r2, r3, #4
 8008cf2:	f8c8 2000 	str.w	r2, [r8]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	6018      	str	r0, [r3, #0]
 8008cfa:	68e3      	ldr	r3, [r4, #12]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	60e3      	str	r3, [r4, #12]
 8008d00:	1bed      	subs	r5, r5, r7
 8008d02:	44ab      	add	fp, r5
 8008d04:	6925      	ldr	r5, [r4, #16]
 8008d06:	445d      	add	r5, fp
 8008d08:	6125      	str	r5, [r4, #16]
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	b007      	add	sp, #28
 8008d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d12:	f04f 0b00 	mov.w	fp, #0
 8008d16:	e7ca      	b.n	8008cae <_scanf_i+0x15e>
 8008d18:	1d1a      	adds	r2, r3, #4
 8008d1a:	f8c8 2000 	str.w	r2, [r8]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f011 0f01 	tst.w	r1, #1
 8008d24:	bf14      	ite	ne
 8008d26:	8018      	strhne	r0, [r3, #0]
 8008d28:	6018      	streq	r0, [r3, #0]
 8008d2a:	e7e6      	b.n	8008cfa <_scanf_i+0x1aa>
 8008d2c:	2001      	movs	r0, #1
 8008d2e:	e7ed      	b.n	8008d0c <_scanf_i+0x1bc>
 8008d30:	0800a58c 	.word	0x0800a58c
 8008d34:	08008f15 	.word	0x08008f15
 8008d38:	08006eb5 	.word	0x08006eb5
 8008d3c:	0800a968 	.word	0x0800a968

08008d40 <_read_r>:
 8008d40:	b538      	push	{r3, r4, r5, lr}
 8008d42:	4d07      	ldr	r5, [pc, #28]	; (8008d60 <_read_r+0x20>)
 8008d44:	4604      	mov	r4, r0
 8008d46:	4608      	mov	r0, r1
 8008d48:	4611      	mov	r1, r2
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	602a      	str	r2, [r5, #0]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	f7f8 fcfa 	bl	8001748 <_read>
 8008d54:	1c43      	adds	r3, r0, #1
 8008d56:	d102      	bne.n	8008d5e <_read_r+0x1e>
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	b103      	cbz	r3, 8008d5e <_read_r+0x1e>
 8008d5c:	6023      	str	r3, [r4, #0]
 8008d5e:	bd38      	pop	{r3, r4, r5, pc}
 8008d60:	20000390 	.word	0x20000390
 8008d64:	00000000 	.word	0x00000000

08008d68 <nan>:
 8008d68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008d70 <nan+0x8>
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	00000000 	.word	0x00000000
 8008d74:	7ff80000 	.word	0x7ff80000

08008d78 <_sbrk_r>:
 8008d78:	b538      	push	{r3, r4, r5, lr}
 8008d7a:	4d06      	ldr	r5, [pc, #24]	; (8008d94 <_sbrk_r+0x1c>)
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	4604      	mov	r4, r0
 8008d80:	4608      	mov	r0, r1
 8008d82:	602b      	str	r3, [r5, #0]
 8008d84:	f7f8 fd4e 	bl	8001824 <_sbrk>
 8008d88:	1c43      	adds	r3, r0, #1
 8008d8a:	d102      	bne.n	8008d92 <_sbrk_r+0x1a>
 8008d8c:	682b      	ldr	r3, [r5, #0]
 8008d8e:	b103      	cbz	r3, 8008d92 <_sbrk_r+0x1a>
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	bd38      	pop	{r3, r4, r5, pc}
 8008d94:	20000390 	.word	0x20000390

08008d98 <__sccl>:
 8008d98:	b570      	push	{r4, r5, r6, lr}
 8008d9a:	780b      	ldrb	r3, [r1, #0]
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	2b5e      	cmp	r3, #94	; 0x5e
 8008da0:	bf0b      	itete	eq
 8008da2:	784b      	ldrbeq	r3, [r1, #1]
 8008da4:	1c48      	addne	r0, r1, #1
 8008da6:	1c88      	addeq	r0, r1, #2
 8008da8:	2200      	movne	r2, #0
 8008daa:	bf08      	it	eq
 8008dac:	2201      	moveq	r2, #1
 8008dae:	1e61      	subs	r1, r4, #1
 8008db0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008db4:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008db8:	42a9      	cmp	r1, r5
 8008dba:	d1fb      	bne.n	8008db4 <__sccl+0x1c>
 8008dbc:	b90b      	cbnz	r3, 8008dc2 <__sccl+0x2a>
 8008dbe:	3801      	subs	r0, #1
 8008dc0:	bd70      	pop	{r4, r5, r6, pc}
 8008dc2:	f082 0201 	eor.w	r2, r2, #1
 8008dc6:	54e2      	strb	r2, [r4, r3]
 8008dc8:	4605      	mov	r5, r0
 8008dca:	4628      	mov	r0, r5
 8008dcc:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008dd0:	292d      	cmp	r1, #45	; 0x2d
 8008dd2:	d006      	beq.n	8008de2 <__sccl+0x4a>
 8008dd4:	295d      	cmp	r1, #93	; 0x5d
 8008dd6:	d0f3      	beq.n	8008dc0 <__sccl+0x28>
 8008dd8:	b909      	cbnz	r1, 8008dde <__sccl+0x46>
 8008dda:	4628      	mov	r0, r5
 8008ddc:	e7f0      	b.n	8008dc0 <__sccl+0x28>
 8008dde:	460b      	mov	r3, r1
 8008de0:	e7f1      	b.n	8008dc6 <__sccl+0x2e>
 8008de2:	786e      	ldrb	r6, [r5, #1]
 8008de4:	2e5d      	cmp	r6, #93	; 0x5d
 8008de6:	d0fa      	beq.n	8008dde <__sccl+0x46>
 8008de8:	42b3      	cmp	r3, r6
 8008dea:	dcf8      	bgt.n	8008dde <__sccl+0x46>
 8008dec:	3502      	adds	r5, #2
 8008dee:	4619      	mov	r1, r3
 8008df0:	3101      	adds	r1, #1
 8008df2:	428e      	cmp	r6, r1
 8008df4:	5462      	strb	r2, [r4, r1]
 8008df6:	dcfb      	bgt.n	8008df0 <__sccl+0x58>
 8008df8:	1af1      	subs	r1, r6, r3
 8008dfa:	3901      	subs	r1, #1
 8008dfc:	1c58      	adds	r0, r3, #1
 8008dfe:	42b3      	cmp	r3, r6
 8008e00:	bfa8      	it	ge
 8008e02:	2100      	movge	r1, #0
 8008e04:	1843      	adds	r3, r0, r1
 8008e06:	e7e0      	b.n	8008dca <__sccl+0x32>

08008e08 <strncmp>:
 8008e08:	b510      	push	{r4, lr}
 8008e0a:	b17a      	cbz	r2, 8008e2c <strncmp+0x24>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	3901      	subs	r1, #1
 8008e10:	1884      	adds	r4, r0, r2
 8008e12:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008e16:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008e1a:	4290      	cmp	r0, r2
 8008e1c:	d101      	bne.n	8008e22 <strncmp+0x1a>
 8008e1e:	42a3      	cmp	r3, r4
 8008e20:	d101      	bne.n	8008e26 <strncmp+0x1e>
 8008e22:	1a80      	subs	r0, r0, r2
 8008e24:	bd10      	pop	{r4, pc}
 8008e26:	2800      	cmp	r0, #0
 8008e28:	d1f3      	bne.n	8008e12 <strncmp+0xa>
 8008e2a:	e7fa      	b.n	8008e22 <strncmp+0x1a>
 8008e2c:	4610      	mov	r0, r2
 8008e2e:	e7f9      	b.n	8008e24 <strncmp+0x1c>

08008e30 <_strtoul_l.constprop.0>:
 8008e30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e34:	4f36      	ldr	r7, [pc, #216]	; (8008f10 <_strtoul_l.constprop.0+0xe0>)
 8008e36:	4686      	mov	lr, r0
 8008e38:	460d      	mov	r5, r1
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e40:	5de6      	ldrb	r6, [r4, r7]
 8008e42:	f016 0608 	ands.w	r6, r6, #8
 8008e46:	d1f8      	bne.n	8008e3a <_strtoul_l.constprop.0+0xa>
 8008e48:	2c2d      	cmp	r4, #45	; 0x2d
 8008e4a:	d12f      	bne.n	8008eac <_strtoul_l.constprop.0+0x7c>
 8008e4c:	782c      	ldrb	r4, [r5, #0]
 8008e4e:	2601      	movs	r6, #1
 8008e50:	1c85      	adds	r5, r0, #2
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d057      	beq.n	8008f06 <_strtoul_l.constprop.0+0xd6>
 8008e56:	2b10      	cmp	r3, #16
 8008e58:	d109      	bne.n	8008e6e <_strtoul_l.constprop.0+0x3e>
 8008e5a:	2c30      	cmp	r4, #48	; 0x30
 8008e5c:	d107      	bne.n	8008e6e <_strtoul_l.constprop.0+0x3e>
 8008e5e:	7828      	ldrb	r0, [r5, #0]
 8008e60:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008e64:	2858      	cmp	r0, #88	; 0x58
 8008e66:	d149      	bne.n	8008efc <_strtoul_l.constprop.0+0xcc>
 8008e68:	786c      	ldrb	r4, [r5, #1]
 8008e6a:	2310      	movs	r3, #16
 8008e6c:	3502      	adds	r5, #2
 8008e6e:	f04f 38ff 	mov.w	r8, #4294967295
 8008e72:	2700      	movs	r7, #0
 8008e74:	fbb8 f8f3 	udiv	r8, r8, r3
 8008e78:	fb03 f908 	mul.w	r9, r3, r8
 8008e7c:	ea6f 0909 	mvn.w	r9, r9
 8008e80:	4638      	mov	r0, r7
 8008e82:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008e86:	f1bc 0f09 	cmp.w	ip, #9
 8008e8a:	d814      	bhi.n	8008eb6 <_strtoul_l.constprop.0+0x86>
 8008e8c:	4664      	mov	r4, ip
 8008e8e:	42a3      	cmp	r3, r4
 8008e90:	dd22      	ble.n	8008ed8 <_strtoul_l.constprop.0+0xa8>
 8008e92:	2f00      	cmp	r7, #0
 8008e94:	db1d      	blt.n	8008ed2 <_strtoul_l.constprop.0+0xa2>
 8008e96:	4580      	cmp	r8, r0
 8008e98:	d31b      	bcc.n	8008ed2 <_strtoul_l.constprop.0+0xa2>
 8008e9a:	d101      	bne.n	8008ea0 <_strtoul_l.constprop.0+0x70>
 8008e9c:	45a1      	cmp	r9, r4
 8008e9e:	db18      	blt.n	8008ed2 <_strtoul_l.constprop.0+0xa2>
 8008ea0:	fb00 4003 	mla	r0, r0, r3, r4
 8008ea4:	2701      	movs	r7, #1
 8008ea6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008eaa:	e7ea      	b.n	8008e82 <_strtoul_l.constprop.0+0x52>
 8008eac:	2c2b      	cmp	r4, #43	; 0x2b
 8008eae:	bf04      	itt	eq
 8008eb0:	782c      	ldrbeq	r4, [r5, #0]
 8008eb2:	1c85      	addeq	r5, r0, #2
 8008eb4:	e7cd      	b.n	8008e52 <_strtoul_l.constprop.0+0x22>
 8008eb6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008eba:	f1bc 0f19 	cmp.w	ip, #25
 8008ebe:	d801      	bhi.n	8008ec4 <_strtoul_l.constprop.0+0x94>
 8008ec0:	3c37      	subs	r4, #55	; 0x37
 8008ec2:	e7e4      	b.n	8008e8e <_strtoul_l.constprop.0+0x5e>
 8008ec4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008ec8:	f1bc 0f19 	cmp.w	ip, #25
 8008ecc:	d804      	bhi.n	8008ed8 <_strtoul_l.constprop.0+0xa8>
 8008ece:	3c57      	subs	r4, #87	; 0x57
 8008ed0:	e7dd      	b.n	8008e8e <_strtoul_l.constprop.0+0x5e>
 8008ed2:	f04f 37ff 	mov.w	r7, #4294967295
 8008ed6:	e7e6      	b.n	8008ea6 <_strtoul_l.constprop.0+0x76>
 8008ed8:	2f00      	cmp	r7, #0
 8008eda:	da07      	bge.n	8008eec <_strtoul_l.constprop.0+0xbc>
 8008edc:	2322      	movs	r3, #34	; 0x22
 8008ede:	f8ce 3000 	str.w	r3, [lr]
 8008ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee6:	b932      	cbnz	r2, 8008ef6 <_strtoul_l.constprop.0+0xc6>
 8008ee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008eec:	b106      	cbz	r6, 8008ef0 <_strtoul_l.constprop.0+0xc0>
 8008eee:	4240      	negs	r0, r0
 8008ef0:	2a00      	cmp	r2, #0
 8008ef2:	d0f9      	beq.n	8008ee8 <_strtoul_l.constprop.0+0xb8>
 8008ef4:	b107      	cbz	r7, 8008ef8 <_strtoul_l.constprop.0+0xc8>
 8008ef6:	1e69      	subs	r1, r5, #1
 8008ef8:	6011      	str	r1, [r2, #0]
 8008efa:	e7f5      	b.n	8008ee8 <_strtoul_l.constprop.0+0xb8>
 8008efc:	2430      	movs	r4, #48	; 0x30
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1b5      	bne.n	8008e6e <_strtoul_l.constprop.0+0x3e>
 8008f02:	2308      	movs	r3, #8
 8008f04:	e7b3      	b.n	8008e6e <_strtoul_l.constprop.0+0x3e>
 8008f06:	2c30      	cmp	r4, #48	; 0x30
 8008f08:	d0a9      	beq.n	8008e5e <_strtoul_l.constprop.0+0x2e>
 8008f0a:	230a      	movs	r3, #10
 8008f0c:	e7af      	b.n	8008e6e <_strtoul_l.constprop.0+0x3e>
 8008f0e:	bf00      	nop
 8008f10:	0800a621 	.word	0x0800a621

08008f14 <_strtoul_r>:
 8008f14:	f7ff bf8c 	b.w	8008e30 <_strtoul_l.constprop.0>

08008f18 <__submore>:
 8008f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f1c:	460c      	mov	r4, r1
 8008f1e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008f20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f24:	4299      	cmp	r1, r3
 8008f26:	d11d      	bne.n	8008f64 <__submore+0x4c>
 8008f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008f2c:	f7ff f880 	bl	8008030 <_malloc_r>
 8008f30:	b918      	cbnz	r0, 8008f3a <__submore+0x22>
 8008f32:	f04f 30ff 	mov.w	r0, #4294967295
 8008f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f3e:	63a3      	str	r3, [r4, #56]	; 0x38
 8008f40:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008f44:	6360      	str	r0, [r4, #52]	; 0x34
 8008f46:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008f4a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008f4e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008f52:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008f56:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008f5a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008f5e:	6020      	str	r0, [r4, #0]
 8008f60:	2000      	movs	r0, #0
 8008f62:	e7e8      	b.n	8008f36 <__submore+0x1e>
 8008f64:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008f66:	0077      	lsls	r7, r6, #1
 8008f68:	463a      	mov	r2, r7
 8008f6a:	f000 fa81 	bl	8009470 <_realloc_r>
 8008f6e:	4605      	mov	r5, r0
 8008f70:	2800      	cmp	r0, #0
 8008f72:	d0de      	beq.n	8008f32 <__submore+0x1a>
 8008f74:	eb00 0806 	add.w	r8, r0, r6
 8008f78:	4601      	mov	r1, r0
 8008f7a:	4632      	mov	r2, r6
 8008f7c:	4640      	mov	r0, r8
 8008f7e:	f7fe fb51 	bl	8007624 <memcpy>
 8008f82:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008f86:	f8c4 8000 	str.w	r8, [r4]
 8008f8a:	e7e9      	b.n	8008f60 <__submore+0x48>

08008f8c <__ascii_wctomb>:
 8008f8c:	b149      	cbz	r1, 8008fa2 <__ascii_wctomb+0x16>
 8008f8e:	2aff      	cmp	r2, #255	; 0xff
 8008f90:	bf85      	ittet	hi
 8008f92:	238a      	movhi	r3, #138	; 0x8a
 8008f94:	6003      	strhi	r3, [r0, #0]
 8008f96:	700a      	strbls	r2, [r1, #0]
 8008f98:	f04f 30ff 	movhi.w	r0, #4294967295
 8008f9c:	bf98      	it	ls
 8008f9e:	2001      	movls	r0, #1
 8008fa0:	4770      	bx	lr
 8008fa2:	4608      	mov	r0, r1
 8008fa4:	4770      	bx	lr
	...

08008fa8 <__assert_func>:
 8008fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008faa:	4614      	mov	r4, r2
 8008fac:	461a      	mov	r2, r3
 8008fae:	4b09      	ldr	r3, [pc, #36]	; (8008fd4 <__assert_func+0x2c>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4605      	mov	r5, r0
 8008fb4:	68d8      	ldr	r0, [r3, #12]
 8008fb6:	b14c      	cbz	r4, 8008fcc <__assert_func+0x24>
 8008fb8:	4b07      	ldr	r3, [pc, #28]	; (8008fd8 <__assert_func+0x30>)
 8008fba:	9100      	str	r1, [sp, #0]
 8008fbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008fc0:	4906      	ldr	r1, [pc, #24]	; (8008fdc <__assert_func+0x34>)
 8008fc2:	462b      	mov	r3, r5
 8008fc4:	f000 f9a6 	bl	8009314 <fiprintf>
 8008fc8:	f000 fc9a 	bl	8009900 <abort>
 8008fcc:	4b04      	ldr	r3, [pc, #16]	; (8008fe0 <__assert_func+0x38>)
 8008fce:	461c      	mov	r4, r3
 8008fd0:	e7f3      	b.n	8008fba <__assert_func+0x12>
 8008fd2:	bf00      	nop
 8008fd4:	2000001c 	.word	0x2000001c
 8008fd8:	0800a96a 	.word	0x0800a96a
 8008fdc:	0800a977 	.word	0x0800a977
 8008fe0:	0800a9a5 	.word	0x0800a9a5

08008fe4 <__sflush_r>:
 8008fe4:	898a      	ldrh	r2, [r1, #12]
 8008fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fea:	4605      	mov	r5, r0
 8008fec:	0710      	lsls	r0, r2, #28
 8008fee:	460c      	mov	r4, r1
 8008ff0:	d458      	bmi.n	80090a4 <__sflush_r+0xc0>
 8008ff2:	684b      	ldr	r3, [r1, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	dc05      	bgt.n	8009004 <__sflush_r+0x20>
 8008ff8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	dc02      	bgt.n	8009004 <__sflush_r+0x20>
 8008ffe:	2000      	movs	r0, #0
 8009000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009004:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009006:	2e00      	cmp	r6, #0
 8009008:	d0f9      	beq.n	8008ffe <__sflush_r+0x1a>
 800900a:	2300      	movs	r3, #0
 800900c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009010:	682f      	ldr	r7, [r5, #0]
 8009012:	602b      	str	r3, [r5, #0]
 8009014:	d032      	beq.n	800907c <__sflush_r+0x98>
 8009016:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009018:	89a3      	ldrh	r3, [r4, #12]
 800901a:	075a      	lsls	r2, r3, #29
 800901c:	d505      	bpl.n	800902a <__sflush_r+0x46>
 800901e:	6863      	ldr	r3, [r4, #4]
 8009020:	1ac0      	subs	r0, r0, r3
 8009022:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009024:	b10b      	cbz	r3, 800902a <__sflush_r+0x46>
 8009026:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009028:	1ac0      	subs	r0, r0, r3
 800902a:	2300      	movs	r3, #0
 800902c:	4602      	mov	r2, r0
 800902e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009030:	6a21      	ldr	r1, [r4, #32]
 8009032:	4628      	mov	r0, r5
 8009034:	47b0      	blx	r6
 8009036:	1c43      	adds	r3, r0, #1
 8009038:	89a3      	ldrh	r3, [r4, #12]
 800903a:	d106      	bne.n	800904a <__sflush_r+0x66>
 800903c:	6829      	ldr	r1, [r5, #0]
 800903e:	291d      	cmp	r1, #29
 8009040:	d82c      	bhi.n	800909c <__sflush_r+0xb8>
 8009042:	4a2a      	ldr	r2, [pc, #168]	; (80090ec <__sflush_r+0x108>)
 8009044:	40ca      	lsrs	r2, r1
 8009046:	07d6      	lsls	r6, r2, #31
 8009048:	d528      	bpl.n	800909c <__sflush_r+0xb8>
 800904a:	2200      	movs	r2, #0
 800904c:	6062      	str	r2, [r4, #4]
 800904e:	04d9      	lsls	r1, r3, #19
 8009050:	6922      	ldr	r2, [r4, #16]
 8009052:	6022      	str	r2, [r4, #0]
 8009054:	d504      	bpl.n	8009060 <__sflush_r+0x7c>
 8009056:	1c42      	adds	r2, r0, #1
 8009058:	d101      	bne.n	800905e <__sflush_r+0x7a>
 800905a:	682b      	ldr	r3, [r5, #0]
 800905c:	b903      	cbnz	r3, 8009060 <__sflush_r+0x7c>
 800905e:	6560      	str	r0, [r4, #84]	; 0x54
 8009060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009062:	602f      	str	r7, [r5, #0]
 8009064:	2900      	cmp	r1, #0
 8009066:	d0ca      	beq.n	8008ffe <__sflush_r+0x1a>
 8009068:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800906c:	4299      	cmp	r1, r3
 800906e:	d002      	beq.n	8009076 <__sflush_r+0x92>
 8009070:	4628      	mov	r0, r5
 8009072:	f000 f9b1 	bl	80093d8 <_free_r>
 8009076:	2000      	movs	r0, #0
 8009078:	6360      	str	r0, [r4, #52]	; 0x34
 800907a:	e7c1      	b.n	8009000 <__sflush_r+0x1c>
 800907c:	6a21      	ldr	r1, [r4, #32]
 800907e:	2301      	movs	r3, #1
 8009080:	4628      	mov	r0, r5
 8009082:	47b0      	blx	r6
 8009084:	1c41      	adds	r1, r0, #1
 8009086:	d1c7      	bne.n	8009018 <__sflush_r+0x34>
 8009088:	682b      	ldr	r3, [r5, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d0c4      	beq.n	8009018 <__sflush_r+0x34>
 800908e:	2b1d      	cmp	r3, #29
 8009090:	d001      	beq.n	8009096 <__sflush_r+0xb2>
 8009092:	2b16      	cmp	r3, #22
 8009094:	d101      	bne.n	800909a <__sflush_r+0xb6>
 8009096:	602f      	str	r7, [r5, #0]
 8009098:	e7b1      	b.n	8008ffe <__sflush_r+0x1a>
 800909a:	89a3      	ldrh	r3, [r4, #12]
 800909c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090a0:	81a3      	strh	r3, [r4, #12]
 80090a2:	e7ad      	b.n	8009000 <__sflush_r+0x1c>
 80090a4:	690f      	ldr	r7, [r1, #16]
 80090a6:	2f00      	cmp	r7, #0
 80090a8:	d0a9      	beq.n	8008ffe <__sflush_r+0x1a>
 80090aa:	0793      	lsls	r3, r2, #30
 80090ac:	680e      	ldr	r6, [r1, #0]
 80090ae:	bf08      	it	eq
 80090b0:	694b      	ldreq	r3, [r1, #20]
 80090b2:	600f      	str	r7, [r1, #0]
 80090b4:	bf18      	it	ne
 80090b6:	2300      	movne	r3, #0
 80090b8:	eba6 0807 	sub.w	r8, r6, r7
 80090bc:	608b      	str	r3, [r1, #8]
 80090be:	f1b8 0f00 	cmp.w	r8, #0
 80090c2:	dd9c      	ble.n	8008ffe <__sflush_r+0x1a>
 80090c4:	6a21      	ldr	r1, [r4, #32]
 80090c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090c8:	4643      	mov	r3, r8
 80090ca:	463a      	mov	r2, r7
 80090cc:	4628      	mov	r0, r5
 80090ce:	47b0      	blx	r6
 80090d0:	2800      	cmp	r0, #0
 80090d2:	dc06      	bgt.n	80090e2 <__sflush_r+0xfe>
 80090d4:	89a3      	ldrh	r3, [r4, #12]
 80090d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090da:	81a3      	strh	r3, [r4, #12]
 80090dc:	f04f 30ff 	mov.w	r0, #4294967295
 80090e0:	e78e      	b.n	8009000 <__sflush_r+0x1c>
 80090e2:	4407      	add	r7, r0
 80090e4:	eba8 0800 	sub.w	r8, r8, r0
 80090e8:	e7e9      	b.n	80090be <__sflush_r+0xda>
 80090ea:	bf00      	nop
 80090ec:	20400001 	.word	0x20400001

080090f0 <_fflush_r>:
 80090f0:	b538      	push	{r3, r4, r5, lr}
 80090f2:	690b      	ldr	r3, [r1, #16]
 80090f4:	4605      	mov	r5, r0
 80090f6:	460c      	mov	r4, r1
 80090f8:	b913      	cbnz	r3, 8009100 <_fflush_r+0x10>
 80090fa:	2500      	movs	r5, #0
 80090fc:	4628      	mov	r0, r5
 80090fe:	bd38      	pop	{r3, r4, r5, pc}
 8009100:	b118      	cbz	r0, 800910a <_fflush_r+0x1a>
 8009102:	6983      	ldr	r3, [r0, #24]
 8009104:	b90b      	cbnz	r3, 800910a <_fflush_r+0x1a>
 8009106:	f000 f887 	bl	8009218 <__sinit>
 800910a:	4b14      	ldr	r3, [pc, #80]	; (800915c <_fflush_r+0x6c>)
 800910c:	429c      	cmp	r4, r3
 800910e:	d11b      	bne.n	8009148 <_fflush_r+0x58>
 8009110:	686c      	ldr	r4, [r5, #4]
 8009112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d0ef      	beq.n	80090fa <_fflush_r+0xa>
 800911a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800911c:	07d0      	lsls	r0, r2, #31
 800911e:	d404      	bmi.n	800912a <_fflush_r+0x3a>
 8009120:	0599      	lsls	r1, r3, #22
 8009122:	d402      	bmi.n	800912a <_fflush_r+0x3a>
 8009124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009126:	f000 f927 	bl	8009378 <__retarget_lock_acquire_recursive>
 800912a:	4628      	mov	r0, r5
 800912c:	4621      	mov	r1, r4
 800912e:	f7ff ff59 	bl	8008fe4 <__sflush_r>
 8009132:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009134:	07da      	lsls	r2, r3, #31
 8009136:	4605      	mov	r5, r0
 8009138:	d4e0      	bmi.n	80090fc <_fflush_r+0xc>
 800913a:	89a3      	ldrh	r3, [r4, #12]
 800913c:	059b      	lsls	r3, r3, #22
 800913e:	d4dd      	bmi.n	80090fc <_fflush_r+0xc>
 8009140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009142:	f000 f91a 	bl	800937a <__retarget_lock_release_recursive>
 8009146:	e7d9      	b.n	80090fc <_fflush_r+0xc>
 8009148:	4b05      	ldr	r3, [pc, #20]	; (8009160 <_fflush_r+0x70>)
 800914a:	429c      	cmp	r4, r3
 800914c:	d101      	bne.n	8009152 <_fflush_r+0x62>
 800914e:	68ac      	ldr	r4, [r5, #8]
 8009150:	e7df      	b.n	8009112 <_fflush_r+0x22>
 8009152:	4b04      	ldr	r3, [pc, #16]	; (8009164 <_fflush_r+0x74>)
 8009154:	429c      	cmp	r4, r3
 8009156:	bf08      	it	eq
 8009158:	68ec      	ldreq	r4, [r5, #12]
 800915a:	e7da      	b.n	8009112 <_fflush_r+0x22>
 800915c:	0800a9c8 	.word	0x0800a9c8
 8009160:	0800a9e8 	.word	0x0800a9e8
 8009164:	0800a9a8 	.word	0x0800a9a8

08009168 <std>:
 8009168:	2300      	movs	r3, #0
 800916a:	b510      	push	{r4, lr}
 800916c:	4604      	mov	r4, r0
 800916e:	e9c0 3300 	strd	r3, r3, [r0]
 8009172:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009176:	6083      	str	r3, [r0, #8]
 8009178:	8181      	strh	r1, [r0, #12]
 800917a:	6643      	str	r3, [r0, #100]	; 0x64
 800917c:	81c2      	strh	r2, [r0, #14]
 800917e:	6183      	str	r3, [r0, #24]
 8009180:	4619      	mov	r1, r3
 8009182:	2208      	movs	r2, #8
 8009184:	305c      	adds	r0, #92	; 0x5c
 8009186:	f7fc fd3b 	bl	8005c00 <memset>
 800918a:	4b05      	ldr	r3, [pc, #20]	; (80091a0 <std+0x38>)
 800918c:	6263      	str	r3, [r4, #36]	; 0x24
 800918e:	4b05      	ldr	r3, [pc, #20]	; (80091a4 <std+0x3c>)
 8009190:	62a3      	str	r3, [r4, #40]	; 0x28
 8009192:	4b05      	ldr	r3, [pc, #20]	; (80091a8 <std+0x40>)
 8009194:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009196:	4b05      	ldr	r3, [pc, #20]	; (80091ac <std+0x44>)
 8009198:	6224      	str	r4, [r4, #32]
 800919a:	6323      	str	r3, [r4, #48]	; 0x30
 800919c:	bd10      	pop	{r4, pc}
 800919e:	bf00      	nop
 80091a0:	080060d5 	.word	0x080060d5
 80091a4:	080060fb 	.word	0x080060fb
 80091a8:	08006133 	.word	0x08006133
 80091ac:	08006157 	.word	0x08006157

080091b0 <_cleanup_r>:
 80091b0:	4901      	ldr	r1, [pc, #4]	; (80091b8 <_cleanup_r+0x8>)
 80091b2:	f000 b8c1 	b.w	8009338 <_fwalk_reent>
 80091b6:	bf00      	nop
 80091b8:	080090f1 	.word	0x080090f1

080091bc <__sfmoreglue>:
 80091bc:	b570      	push	{r4, r5, r6, lr}
 80091be:	2268      	movs	r2, #104	; 0x68
 80091c0:	1e4d      	subs	r5, r1, #1
 80091c2:	4355      	muls	r5, r2
 80091c4:	460e      	mov	r6, r1
 80091c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091ca:	f7fe ff31 	bl	8008030 <_malloc_r>
 80091ce:	4604      	mov	r4, r0
 80091d0:	b140      	cbz	r0, 80091e4 <__sfmoreglue+0x28>
 80091d2:	2100      	movs	r1, #0
 80091d4:	e9c0 1600 	strd	r1, r6, [r0]
 80091d8:	300c      	adds	r0, #12
 80091da:	60a0      	str	r0, [r4, #8]
 80091dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80091e0:	f7fc fd0e 	bl	8005c00 <memset>
 80091e4:	4620      	mov	r0, r4
 80091e6:	bd70      	pop	{r4, r5, r6, pc}

080091e8 <__sfp_lock_acquire>:
 80091e8:	4801      	ldr	r0, [pc, #4]	; (80091f0 <__sfp_lock_acquire+0x8>)
 80091ea:	f000 b8c5 	b.w	8009378 <__retarget_lock_acquire_recursive>
 80091ee:	bf00      	nop
 80091f0:	20000395 	.word	0x20000395

080091f4 <__sfp_lock_release>:
 80091f4:	4801      	ldr	r0, [pc, #4]	; (80091fc <__sfp_lock_release+0x8>)
 80091f6:	f000 b8c0 	b.w	800937a <__retarget_lock_release_recursive>
 80091fa:	bf00      	nop
 80091fc:	20000395 	.word	0x20000395

08009200 <__sinit_lock_acquire>:
 8009200:	4801      	ldr	r0, [pc, #4]	; (8009208 <__sinit_lock_acquire+0x8>)
 8009202:	f000 b8b9 	b.w	8009378 <__retarget_lock_acquire_recursive>
 8009206:	bf00      	nop
 8009208:	20000396 	.word	0x20000396

0800920c <__sinit_lock_release>:
 800920c:	4801      	ldr	r0, [pc, #4]	; (8009214 <__sinit_lock_release+0x8>)
 800920e:	f000 b8b4 	b.w	800937a <__retarget_lock_release_recursive>
 8009212:	bf00      	nop
 8009214:	20000396 	.word	0x20000396

08009218 <__sinit>:
 8009218:	b510      	push	{r4, lr}
 800921a:	4604      	mov	r4, r0
 800921c:	f7ff fff0 	bl	8009200 <__sinit_lock_acquire>
 8009220:	69a3      	ldr	r3, [r4, #24]
 8009222:	b11b      	cbz	r3, 800922c <__sinit+0x14>
 8009224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009228:	f7ff bff0 	b.w	800920c <__sinit_lock_release>
 800922c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009230:	6523      	str	r3, [r4, #80]	; 0x50
 8009232:	4b13      	ldr	r3, [pc, #76]	; (8009280 <__sinit+0x68>)
 8009234:	4a13      	ldr	r2, [pc, #76]	; (8009284 <__sinit+0x6c>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	62a2      	str	r2, [r4, #40]	; 0x28
 800923a:	42a3      	cmp	r3, r4
 800923c:	bf04      	itt	eq
 800923e:	2301      	moveq	r3, #1
 8009240:	61a3      	streq	r3, [r4, #24]
 8009242:	4620      	mov	r0, r4
 8009244:	f000 f820 	bl	8009288 <__sfp>
 8009248:	6060      	str	r0, [r4, #4]
 800924a:	4620      	mov	r0, r4
 800924c:	f000 f81c 	bl	8009288 <__sfp>
 8009250:	60a0      	str	r0, [r4, #8]
 8009252:	4620      	mov	r0, r4
 8009254:	f000 f818 	bl	8009288 <__sfp>
 8009258:	2200      	movs	r2, #0
 800925a:	60e0      	str	r0, [r4, #12]
 800925c:	2104      	movs	r1, #4
 800925e:	6860      	ldr	r0, [r4, #4]
 8009260:	f7ff ff82 	bl	8009168 <std>
 8009264:	68a0      	ldr	r0, [r4, #8]
 8009266:	2201      	movs	r2, #1
 8009268:	2109      	movs	r1, #9
 800926a:	f7ff ff7d 	bl	8009168 <std>
 800926e:	68e0      	ldr	r0, [r4, #12]
 8009270:	2202      	movs	r2, #2
 8009272:	2112      	movs	r1, #18
 8009274:	f7ff ff78 	bl	8009168 <std>
 8009278:	2301      	movs	r3, #1
 800927a:	61a3      	str	r3, [r4, #24]
 800927c:	e7d2      	b.n	8009224 <__sinit+0xc>
 800927e:	bf00      	nop
 8009280:	0800a5b8 	.word	0x0800a5b8
 8009284:	080091b1 	.word	0x080091b1

08009288 <__sfp>:
 8009288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800928a:	4607      	mov	r7, r0
 800928c:	f7ff ffac 	bl	80091e8 <__sfp_lock_acquire>
 8009290:	4b1e      	ldr	r3, [pc, #120]	; (800930c <__sfp+0x84>)
 8009292:	681e      	ldr	r6, [r3, #0]
 8009294:	69b3      	ldr	r3, [r6, #24]
 8009296:	b913      	cbnz	r3, 800929e <__sfp+0x16>
 8009298:	4630      	mov	r0, r6
 800929a:	f7ff ffbd 	bl	8009218 <__sinit>
 800929e:	3648      	adds	r6, #72	; 0x48
 80092a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80092a4:	3b01      	subs	r3, #1
 80092a6:	d503      	bpl.n	80092b0 <__sfp+0x28>
 80092a8:	6833      	ldr	r3, [r6, #0]
 80092aa:	b30b      	cbz	r3, 80092f0 <__sfp+0x68>
 80092ac:	6836      	ldr	r6, [r6, #0]
 80092ae:	e7f7      	b.n	80092a0 <__sfp+0x18>
 80092b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092b4:	b9d5      	cbnz	r5, 80092ec <__sfp+0x64>
 80092b6:	4b16      	ldr	r3, [pc, #88]	; (8009310 <__sfp+0x88>)
 80092b8:	60e3      	str	r3, [r4, #12]
 80092ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092be:	6665      	str	r5, [r4, #100]	; 0x64
 80092c0:	f000 f859 	bl	8009376 <__retarget_lock_init_recursive>
 80092c4:	f7ff ff96 	bl	80091f4 <__sfp_lock_release>
 80092c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80092cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80092d0:	6025      	str	r5, [r4, #0]
 80092d2:	61a5      	str	r5, [r4, #24]
 80092d4:	2208      	movs	r2, #8
 80092d6:	4629      	mov	r1, r5
 80092d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092dc:	f7fc fc90 	bl	8005c00 <memset>
 80092e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092e8:	4620      	mov	r0, r4
 80092ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092ec:	3468      	adds	r4, #104	; 0x68
 80092ee:	e7d9      	b.n	80092a4 <__sfp+0x1c>
 80092f0:	2104      	movs	r1, #4
 80092f2:	4638      	mov	r0, r7
 80092f4:	f7ff ff62 	bl	80091bc <__sfmoreglue>
 80092f8:	4604      	mov	r4, r0
 80092fa:	6030      	str	r0, [r6, #0]
 80092fc:	2800      	cmp	r0, #0
 80092fe:	d1d5      	bne.n	80092ac <__sfp+0x24>
 8009300:	f7ff ff78 	bl	80091f4 <__sfp_lock_release>
 8009304:	230c      	movs	r3, #12
 8009306:	603b      	str	r3, [r7, #0]
 8009308:	e7ee      	b.n	80092e8 <__sfp+0x60>
 800930a:	bf00      	nop
 800930c:	0800a5b8 	.word	0x0800a5b8
 8009310:	ffff0001 	.word	0xffff0001

08009314 <fiprintf>:
 8009314:	b40e      	push	{r1, r2, r3}
 8009316:	b503      	push	{r0, r1, lr}
 8009318:	4601      	mov	r1, r0
 800931a:	ab03      	add	r3, sp, #12
 800931c:	4805      	ldr	r0, [pc, #20]	; (8009334 <fiprintf+0x20>)
 800931e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009322:	6800      	ldr	r0, [r0, #0]
 8009324:	9301      	str	r3, [sp, #4]
 8009326:	f000 f8fb 	bl	8009520 <_vfiprintf_r>
 800932a:	b002      	add	sp, #8
 800932c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009330:	b003      	add	sp, #12
 8009332:	4770      	bx	lr
 8009334:	2000001c 	.word	0x2000001c

08009338 <_fwalk_reent>:
 8009338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800933c:	4606      	mov	r6, r0
 800933e:	4688      	mov	r8, r1
 8009340:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009344:	2700      	movs	r7, #0
 8009346:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800934a:	f1b9 0901 	subs.w	r9, r9, #1
 800934e:	d505      	bpl.n	800935c <_fwalk_reent+0x24>
 8009350:	6824      	ldr	r4, [r4, #0]
 8009352:	2c00      	cmp	r4, #0
 8009354:	d1f7      	bne.n	8009346 <_fwalk_reent+0xe>
 8009356:	4638      	mov	r0, r7
 8009358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800935c:	89ab      	ldrh	r3, [r5, #12]
 800935e:	2b01      	cmp	r3, #1
 8009360:	d907      	bls.n	8009372 <_fwalk_reent+0x3a>
 8009362:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009366:	3301      	adds	r3, #1
 8009368:	d003      	beq.n	8009372 <_fwalk_reent+0x3a>
 800936a:	4629      	mov	r1, r5
 800936c:	4630      	mov	r0, r6
 800936e:	47c0      	blx	r8
 8009370:	4307      	orrs	r7, r0
 8009372:	3568      	adds	r5, #104	; 0x68
 8009374:	e7e9      	b.n	800934a <_fwalk_reent+0x12>

08009376 <__retarget_lock_init_recursive>:
 8009376:	4770      	bx	lr

08009378 <__retarget_lock_acquire_recursive>:
 8009378:	4770      	bx	lr

0800937a <__retarget_lock_release_recursive>:
 800937a:	4770      	bx	lr

0800937c <malloc>:
 800937c:	4b02      	ldr	r3, [pc, #8]	; (8009388 <malloc+0xc>)
 800937e:	4601      	mov	r1, r0
 8009380:	6818      	ldr	r0, [r3, #0]
 8009382:	f7fe be55 	b.w	8008030 <_malloc_r>
 8009386:	bf00      	nop
 8009388:	2000001c 	.word	0x2000001c

0800938c <memmove>:
 800938c:	4288      	cmp	r0, r1
 800938e:	b510      	push	{r4, lr}
 8009390:	eb01 0402 	add.w	r4, r1, r2
 8009394:	d902      	bls.n	800939c <memmove+0x10>
 8009396:	4284      	cmp	r4, r0
 8009398:	4623      	mov	r3, r4
 800939a:	d807      	bhi.n	80093ac <memmove+0x20>
 800939c:	1e43      	subs	r3, r0, #1
 800939e:	42a1      	cmp	r1, r4
 80093a0:	d008      	beq.n	80093b4 <memmove+0x28>
 80093a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093aa:	e7f8      	b.n	800939e <memmove+0x12>
 80093ac:	4402      	add	r2, r0
 80093ae:	4601      	mov	r1, r0
 80093b0:	428a      	cmp	r2, r1
 80093b2:	d100      	bne.n	80093b6 <memmove+0x2a>
 80093b4:	bd10      	pop	{r4, pc}
 80093b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093be:	e7f7      	b.n	80093b0 <memmove+0x24>

080093c0 <__malloc_lock>:
 80093c0:	4801      	ldr	r0, [pc, #4]	; (80093c8 <__malloc_lock+0x8>)
 80093c2:	f7ff bfd9 	b.w	8009378 <__retarget_lock_acquire_recursive>
 80093c6:	bf00      	nop
 80093c8:	20000394 	.word	0x20000394

080093cc <__malloc_unlock>:
 80093cc:	4801      	ldr	r0, [pc, #4]	; (80093d4 <__malloc_unlock+0x8>)
 80093ce:	f7ff bfd4 	b.w	800937a <__retarget_lock_release_recursive>
 80093d2:	bf00      	nop
 80093d4:	20000394 	.word	0x20000394

080093d8 <_free_r>:
 80093d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093da:	2900      	cmp	r1, #0
 80093dc:	d044      	beq.n	8009468 <_free_r+0x90>
 80093de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093e2:	9001      	str	r0, [sp, #4]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f1a1 0404 	sub.w	r4, r1, #4
 80093ea:	bfb8      	it	lt
 80093ec:	18e4      	addlt	r4, r4, r3
 80093ee:	f7ff ffe7 	bl	80093c0 <__malloc_lock>
 80093f2:	4a1e      	ldr	r2, [pc, #120]	; (800946c <_free_r+0x94>)
 80093f4:	9801      	ldr	r0, [sp, #4]
 80093f6:	6813      	ldr	r3, [r2, #0]
 80093f8:	b933      	cbnz	r3, 8009408 <_free_r+0x30>
 80093fa:	6063      	str	r3, [r4, #4]
 80093fc:	6014      	str	r4, [r2, #0]
 80093fe:	b003      	add	sp, #12
 8009400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009404:	f7ff bfe2 	b.w	80093cc <__malloc_unlock>
 8009408:	42a3      	cmp	r3, r4
 800940a:	d908      	bls.n	800941e <_free_r+0x46>
 800940c:	6825      	ldr	r5, [r4, #0]
 800940e:	1961      	adds	r1, r4, r5
 8009410:	428b      	cmp	r3, r1
 8009412:	bf01      	itttt	eq
 8009414:	6819      	ldreq	r1, [r3, #0]
 8009416:	685b      	ldreq	r3, [r3, #4]
 8009418:	1949      	addeq	r1, r1, r5
 800941a:	6021      	streq	r1, [r4, #0]
 800941c:	e7ed      	b.n	80093fa <_free_r+0x22>
 800941e:	461a      	mov	r2, r3
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	b10b      	cbz	r3, 8009428 <_free_r+0x50>
 8009424:	42a3      	cmp	r3, r4
 8009426:	d9fa      	bls.n	800941e <_free_r+0x46>
 8009428:	6811      	ldr	r1, [r2, #0]
 800942a:	1855      	adds	r5, r2, r1
 800942c:	42a5      	cmp	r5, r4
 800942e:	d10b      	bne.n	8009448 <_free_r+0x70>
 8009430:	6824      	ldr	r4, [r4, #0]
 8009432:	4421      	add	r1, r4
 8009434:	1854      	adds	r4, r2, r1
 8009436:	42a3      	cmp	r3, r4
 8009438:	6011      	str	r1, [r2, #0]
 800943a:	d1e0      	bne.n	80093fe <_free_r+0x26>
 800943c:	681c      	ldr	r4, [r3, #0]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	6053      	str	r3, [r2, #4]
 8009442:	4421      	add	r1, r4
 8009444:	6011      	str	r1, [r2, #0]
 8009446:	e7da      	b.n	80093fe <_free_r+0x26>
 8009448:	d902      	bls.n	8009450 <_free_r+0x78>
 800944a:	230c      	movs	r3, #12
 800944c:	6003      	str	r3, [r0, #0]
 800944e:	e7d6      	b.n	80093fe <_free_r+0x26>
 8009450:	6825      	ldr	r5, [r4, #0]
 8009452:	1961      	adds	r1, r4, r5
 8009454:	428b      	cmp	r3, r1
 8009456:	bf04      	itt	eq
 8009458:	6819      	ldreq	r1, [r3, #0]
 800945a:	685b      	ldreq	r3, [r3, #4]
 800945c:	6063      	str	r3, [r4, #4]
 800945e:	bf04      	itt	eq
 8009460:	1949      	addeq	r1, r1, r5
 8009462:	6021      	streq	r1, [r4, #0]
 8009464:	6054      	str	r4, [r2, #4]
 8009466:	e7ca      	b.n	80093fe <_free_r+0x26>
 8009468:	b003      	add	sp, #12
 800946a:	bd30      	pop	{r4, r5, pc}
 800946c:	20000388 	.word	0x20000388

08009470 <_realloc_r>:
 8009470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009474:	4680      	mov	r8, r0
 8009476:	4614      	mov	r4, r2
 8009478:	460e      	mov	r6, r1
 800947a:	b921      	cbnz	r1, 8009486 <_realloc_r+0x16>
 800947c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009480:	4611      	mov	r1, r2
 8009482:	f7fe bdd5 	b.w	8008030 <_malloc_r>
 8009486:	b92a      	cbnz	r2, 8009494 <_realloc_r+0x24>
 8009488:	f7ff ffa6 	bl	80093d8 <_free_r>
 800948c:	4625      	mov	r5, r4
 800948e:	4628      	mov	r0, r5
 8009490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009494:	f000 faa0 	bl	80099d8 <_malloc_usable_size_r>
 8009498:	4284      	cmp	r4, r0
 800949a:	4607      	mov	r7, r0
 800949c:	d802      	bhi.n	80094a4 <_realloc_r+0x34>
 800949e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094a2:	d812      	bhi.n	80094ca <_realloc_r+0x5a>
 80094a4:	4621      	mov	r1, r4
 80094a6:	4640      	mov	r0, r8
 80094a8:	f7fe fdc2 	bl	8008030 <_malloc_r>
 80094ac:	4605      	mov	r5, r0
 80094ae:	2800      	cmp	r0, #0
 80094b0:	d0ed      	beq.n	800948e <_realloc_r+0x1e>
 80094b2:	42bc      	cmp	r4, r7
 80094b4:	4622      	mov	r2, r4
 80094b6:	4631      	mov	r1, r6
 80094b8:	bf28      	it	cs
 80094ba:	463a      	movcs	r2, r7
 80094bc:	f7fe f8b2 	bl	8007624 <memcpy>
 80094c0:	4631      	mov	r1, r6
 80094c2:	4640      	mov	r0, r8
 80094c4:	f7ff ff88 	bl	80093d8 <_free_r>
 80094c8:	e7e1      	b.n	800948e <_realloc_r+0x1e>
 80094ca:	4635      	mov	r5, r6
 80094cc:	e7df      	b.n	800948e <_realloc_r+0x1e>

080094ce <__sfputc_r>:
 80094ce:	6893      	ldr	r3, [r2, #8]
 80094d0:	3b01      	subs	r3, #1
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	b410      	push	{r4}
 80094d6:	6093      	str	r3, [r2, #8]
 80094d8:	da08      	bge.n	80094ec <__sfputc_r+0x1e>
 80094da:	6994      	ldr	r4, [r2, #24]
 80094dc:	42a3      	cmp	r3, r4
 80094de:	db01      	blt.n	80094e4 <__sfputc_r+0x16>
 80094e0:	290a      	cmp	r1, #10
 80094e2:	d103      	bne.n	80094ec <__sfputc_r+0x1e>
 80094e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094e8:	f000 b94a 	b.w	8009780 <__swbuf_r>
 80094ec:	6813      	ldr	r3, [r2, #0]
 80094ee:	1c58      	adds	r0, r3, #1
 80094f0:	6010      	str	r0, [r2, #0]
 80094f2:	7019      	strb	r1, [r3, #0]
 80094f4:	4608      	mov	r0, r1
 80094f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <__sfputs_r>:
 80094fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fe:	4606      	mov	r6, r0
 8009500:	460f      	mov	r7, r1
 8009502:	4614      	mov	r4, r2
 8009504:	18d5      	adds	r5, r2, r3
 8009506:	42ac      	cmp	r4, r5
 8009508:	d101      	bne.n	800950e <__sfputs_r+0x12>
 800950a:	2000      	movs	r0, #0
 800950c:	e007      	b.n	800951e <__sfputs_r+0x22>
 800950e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009512:	463a      	mov	r2, r7
 8009514:	4630      	mov	r0, r6
 8009516:	f7ff ffda 	bl	80094ce <__sfputc_r>
 800951a:	1c43      	adds	r3, r0, #1
 800951c:	d1f3      	bne.n	8009506 <__sfputs_r+0xa>
 800951e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009520 <_vfiprintf_r>:
 8009520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009524:	460d      	mov	r5, r1
 8009526:	b09d      	sub	sp, #116	; 0x74
 8009528:	4614      	mov	r4, r2
 800952a:	4698      	mov	r8, r3
 800952c:	4606      	mov	r6, r0
 800952e:	b118      	cbz	r0, 8009538 <_vfiprintf_r+0x18>
 8009530:	6983      	ldr	r3, [r0, #24]
 8009532:	b90b      	cbnz	r3, 8009538 <_vfiprintf_r+0x18>
 8009534:	f7ff fe70 	bl	8009218 <__sinit>
 8009538:	4b89      	ldr	r3, [pc, #548]	; (8009760 <_vfiprintf_r+0x240>)
 800953a:	429d      	cmp	r5, r3
 800953c:	d11b      	bne.n	8009576 <_vfiprintf_r+0x56>
 800953e:	6875      	ldr	r5, [r6, #4]
 8009540:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009542:	07d9      	lsls	r1, r3, #31
 8009544:	d405      	bmi.n	8009552 <_vfiprintf_r+0x32>
 8009546:	89ab      	ldrh	r3, [r5, #12]
 8009548:	059a      	lsls	r2, r3, #22
 800954a:	d402      	bmi.n	8009552 <_vfiprintf_r+0x32>
 800954c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800954e:	f7ff ff13 	bl	8009378 <__retarget_lock_acquire_recursive>
 8009552:	89ab      	ldrh	r3, [r5, #12]
 8009554:	071b      	lsls	r3, r3, #28
 8009556:	d501      	bpl.n	800955c <_vfiprintf_r+0x3c>
 8009558:	692b      	ldr	r3, [r5, #16]
 800955a:	b9eb      	cbnz	r3, 8009598 <_vfiprintf_r+0x78>
 800955c:	4629      	mov	r1, r5
 800955e:	4630      	mov	r0, r6
 8009560:	f000 f960 	bl	8009824 <__swsetup_r>
 8009564:	b1c0      	cbz	r0, 8009598 <_vfiprintf_r+0x78>
 8009566:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009568:	07dc      	lsls	r4, r3, #31
 800956a:	d50e      	bpl.n	800958a <_vfiprintf_r+0x6a>
 800956c:	f04f 30ff 	mov.w	r0, #4294967295
 8009570:	b01d      	add	sp, #116	; 0x74
 8009572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009576:	4b7b      	ldr	r3, [pc, #492]	; (8009764 <_vfiprintf_r+0x244>)
 8009578:	429d      	cmp	r5, r3
 800957a:	d101      	bne.n	8009580 <_vfiprintf_r+0x60>
 800957c:	68b5      	ldr	r5, [r6, #8]
 800957e:	e7df      	b.n	8009540 <_vfiprintf_r+0x20>
 8009580:	4b79      	ldr	r3, [pc, #484]	; (8009768 <_vfiprintf_r+0x248>)
 8009582:	429d      	cmp	r5, r3
 8009584:	bf08      	it	eq
 8009586:	68f5      	ldreq	r5, [r6, #12]
 8009588:	e7da      	b.n	8009540 <_vfiprintf_r+0x20>
 800958a:	89ab      	ldrh	r3, [r5, #12]
 800958c:	0598      	lsls	r0, r3, #22
 800958e:	d4ed      	bmi.n	800956c <_vfiprintf_r+0x4c>
 8009590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009592:	f7ff fef2 	bl	800937a <__retarget_lock_release_recursive>
 8009596:	e7e9      	b.n	800956c <_vfiprintf_r+0x4c>
 8009598:	2300      	movs	r3, #0
 800959a:	9309      	str	r3, [sp, #36]	; 0x24
 800959c:	2320      	movs	r3, #32
 800959e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80095a6:	2330      	movs	r3, #48	; 0x30
 80095a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800976c <_vfiprintf_r+0x24c>
 80095ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095b0:	f04f 0901 	mov.w	r9, #1
 80095b4:	4623      	mov	r3, r4
 80095b6:	469a      	mov	sl, r3
 80095b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095bc:	b10a      	cbz	r2, 80095c2 <_vfiprintf_r+0xa2>
 80095be:	2a25      	cmp	r2, #37	; 0x25
 80095c0:	d1f9      	bne.n	80095b6 <_vfiprintf_r+0x96>
 80095c2:	ebba 0b04 	subs.w	fp, sl, r4
 80095c6:	d00b      	beq.n	80095e0 <_vfiprintf_r+0xc0>
 80095c8:	465b      	mov	r3, fp
 80095ca:	4622      	mov	r2, r4
 80095cc:	4629      	mov	r1, r5
 80095ce:	4630      	mov	r0, r6
 80095d0:	f7ff ff94 	bl	80094fc <__sfputs_r>
 80095d4:	3001      	adds	r0, #1
 80095d6:	f000 80aa 	beq.w	800972e <_vfiprintf_r+0x20e>
 80095da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095dc:	445a      	add	r2, fp
 80095de:	9209      	str	r2, [sp, #36]	; 0x24
 80095e0:	f89a 3000 	ldrb.w	r3, [sl]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f000 80a2 	beq.w	800972e <_vfiprintf_r+0x20e>
 80095ea:	2300      	movs	r3, #0
 80095ec:	f04f 32ff 	mov.w	r2, #4294967295
 80095f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095f4:	f10a 0a01 	add.w	sl, sl, #1
 80095f8:	9304      	str	r3, [sp, #16]
 80095fa:	9307      	str	r3, [sp, #28]
 80095fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009600:	931a      	str	r3, [sp, #104]	; 0x68
 8009602:	4654      	mov	r4, sl
 8009604:	2205      	movs	r2, #5
 8009606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800960a:	4858      	ldr	r0, [pc, #352]	; (800976c <_vfiprintf_r+0x24c>)
 800960c:	f7f6 fe08 	bl	8000220 <memchr>
 8009610:	9a04      	ldr	r2, [sp, #16]
 8009612:	b9d8      	cbnz	r0, 800964c <_vfiprintf_r+0x12c>
 8009614:	06d1      	lsls	r1, r2, #27
 8009616:	bf44      	itt	mi
 8009618:	2320      	movmi	r3, #32
 800961a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800961e:	0713      	lsls	r3, r2, #28
 8009620:	bf44      	itt	mi
 8009622:	232b      	movmi	r3, #43	; 0x2b
 8009624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009628:	f89a 3000 	ldrb.w	r3, [sl]
 800962c:	2b2a      	cmp	r3, #42	; 0x2a
 800962e:	d015      	beq.n	800965c <_vfiprintf_r+0x13c>
 8009630:	9a07      	ldr	r2, [sp, #28]
 8009632:	4654      	mov	r4, sl
 8009634:	2000      	movs	r0, #0
 8009636:	f04f 0c0a 	mov.w	ip, #10
 800963a:	4621      	mov	r1, r4
 800963c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009640:	3b30      	subs	r3, #48	; 0x30
 8009642:	2b09      	cmp	r3, #9
 8009644:	d94e      	bls.n	80096e4 <_vfiprintf_r+0x1c4>
 8009646:	b1b0      	cbz	r0, 8009676 <_vfiprintf_r+0x156>
 8009648:	9207      	str	r2, [sp, #28]
 800964a:	e014      	b.n	8009676 <_vfiprintf_r+0x156>
 800964c:	eba0 0308 	sub.w	r3, r0, r8
 8009650:	fa09 f303 	lsl.w	r3, r9, r3
 8009654:	4313      	orrs	r3, r2
 8009656:	9304      	str	r3, [sp, #16]
 8009658:	46a2      	mov	sl, r4
 800965a:	e7d2      	b.n	8009602 <_vfiprintf_r+0xe2>
 800965c:	9b03      	ldr	r3, [sp, #12]
 800965e:	1d19      	adds	r1, r3, #4
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	9103      	str	r1, [sp, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	bfbb      	ittet	lt
 8009668:	425b      	neglt	r3, r3
 800966a:	f042 0202 	orrlt.w	r2, r2, #2
 800966e:	9307      	strge	r3, [sp, #28]
 8009670:	9307      	strlt	r3, [sp, #28]
 8009672:	bfb8      	it	lt
 8009674:	9204      	strlt	r2, [sp, #16]
 8009676:	7823      	ldrb	r3, [r4, #0]
 8009678:	2b2e      	cmp	r3, #46	; 0x2e
 800967a:	d10c      	bne.n	8009696 <_vfiprintf_r+0x176>
 800967c:	7863      	ldrb	r3, [r4, #1]
 800967e:	2b2a      	cmp	r3, #42	; 0x2a
 8009680:	d135      	bne.n	80096ee <_vfiprintf_r+0x1ce>
 8009682:	9b03      	ldr	r3, [sp, #12]
 8009684:	1d1a      	adds	r2, r3, #4
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	9203      	str	r2, [sp, #12]
 800968a:	2b00      	cmp	r3, #0
 800968c:	bfb8      	it	lt
 800968e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009692:	3402      	adds	r4, #2
 8009694:	9305      	str	r3, [sp, #20]
 8009696:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800977c <_vfiprintf_r+0x25c>
 800969a:	7821      	ldrb	r1, [r4, #0]
 800969c:	2203      	movs	r2, #3
 800969e:	4650      	mov	r0, sl
 80096a0:	f7f6 fdbe 	bl	8000220 <memchr>
 80096a4:	b140      	cbz	r0, 80096b8 <_vfiprintf_r+0x198>
 80096a6:	2340      	movs	r3, #64	; 0x40
 80096a8:	eba0 000a 	sub.w	r0, r0, sl
 80096ac:	fa03 f000 	lsl.w	r0, r3, r0
 80096b0:	9b04      	ldr	r3, [sp, #16]
 80096b2:	4303      	orrs	r3, r0
 80096b4:	3401      	adds	r4, #1
 80096b6:	9304      	str	r3, [sp, #16]
 80096b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096bc:	482c      	ldr	r0, [pc, #176]	; (8009770 <_vfiprintf_r+0x250>)
 80096be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096c2:	2206      	movs	r2, #6
 80096c4:	f7f6 fdac 	bl	8000220 <memchr>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	d03f      	beq.n	800974c <_vfiprintf_r+0x22c>
 80096cc:	4b29      	ldr	r3, [pc, #164]	; (8009774 <_vfiprintf_r+0x254>)
 80096ce:	bb1b      	cbnz	r3, 8009718 <_vfiprintf_r+0x1f8>
 80096d0:	9b03      	ldr	r3, [sp, #12]
 80096d2:	3307      	adds	r3, #7
 80096d4:	f023 0307 	bic.w	r3, r3, #7
 80096d8:	3308      	adds	r3, #8
 80096da:	9303      	str	r3, [sp, #12]
 80096dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096de:	443b      	add	r3, r7
 80096e0:	9309      	str	r3, [sp, #36]	; 0x24
 80096e2:	e767      	b.n	80095b4 <_vfiprintf_r+0x94>
 80096e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80096e8:	460c      	mov	r4, r1
 80096ea:	2001      	movs	r0, #1
 80096ec:	e7a5      	b.n	800963a <_vfiprintf_r+0x11a>
 80096ee:	2300      	movs	r3, #0
 80096f0:	3401      	adds	r4, #1
 80096f2:	9305      	str	r3, [sp, #20]
 80096f4:	4619      	mov	r1, r3
 80096f6:	f04f 0c0a 	mov.w	ip, #10
 80096fa:	4620      	mov	r0, r4
 80096fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009700:	3a30      	subs	r2, #48	; 0x30
 8009702:	2a09      	cmp	r2, #9
 8009704:	d903      	bls.n	800970e <_vfiprintf_r+0x1ee>
 8009706:	2b00      	cmp	r3, #0
 8009708:	d0c5      	beq.n	8009696 <_vfiprintf_r+0x176>
 800970a:	9105      	str	r1, [sp, #20]
 800970c:	e7c3      	b.n	8009696 <_vfiprintf_r+0x176>
 800970e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009712:	4604      	mov	r4, r0
 8009714:	2301      	movs	r3, #1
 8009716:	e7f0      	b.n	80096fa <_vfiprintf_r+0x1da>
 8009718:	ab03      	add	r3, sp, #12
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	462a      	mov	r2, r5
 800971e:	4b16      	ldr	r3, [pc, #88]	; (8009778 <_vfiprintf_r+0x258>)
 8009720:	a904      	add	r1, sp, #16
 8009722:	4630      	mov	r0, r6
 8009724:	f3af 8000 	nop.w
 8009728:	4607      	mov	r7, r0
 800972a:	1c78      	adds	r0, r7, #1
 800972c:	d1d6      	bne.n	80096dc <_vfiprintf_r+0x1bc>
 800972e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009730:	07d9      	lsls	r1, r3, #31
 8009732:	d405      	bmi.n	8009740 <_vfiprintf_r+0x220>
 8009734:	89ab      	ldrh	r3, [r5, #12]
 8009736:	059a      	lsls	r2, r3, #22
 8009738:	d402      	bmi.n	8009740 <_vfiprintf_r+0x220>
 800973a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800973c:	f7ff fe1d 	bl	800937a <__retarget_lock_release_recursive>
 8009740:	89ab      	ldrh	r3, [r5, #12]
 8009742:	065b      	lsls	r3, r3, #25
 8009744:	f53f af12 	bmi.w	800956c <_vfiprintf_r+0x4c>
 8009748:	9809      	ldr	r0, [sp, #36]	; 0x24
 800974a:	e711      	b.n	8009570 <_vfiprintf_r+0x50>
 800974c:	ab03      	add	r3, sp, #12
 800974e:	9300      	str	r3, [sp, #0]
 8009750:	462a      	mov	r2, r5
 8009752:	4b09      	ldr	r3, [pc, #36]	; (8009778 <_vfiprintf_r+0x258>)
 8009754:	a904      	add	r1, sp, #16
 8009756:	4630      	mov	r0, r6
 8009758:	f7ff f87a 	bl	8008850 <_printf_i>
 800975c:	e7e4      	b.n	8009728 <_vfiprintf_r+0x208>
 800975e:	bf00      	nop
 8009760:	0800a9c8 	.word	0x0800a9c8
 8009764:	0800a9e8 	.word	0x0800a9e8
 8009768:	0800a9a8 	.word	0x0800a9a8
 800976c:	0800a91c 	.word	0x0800a91c
 8009770:	0800a926 	.word	0x0800a926
 8009774:	00000000 	.word	0x00000000
 8009778:	080094fd 	.word	0x080094fd
 800977c:	0800a922 	.word	0x0800a922

08009780 <__swbuf_r>:
 8009780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009782:	460e      	mov	r6, r1
 8009784:	4614      	mov	r4, r2
 8009786:	4605      	mov	r5, r0
 8009788:	b118      	cbz	r0, 8009792 <__swbuf_r+0x12>
 800978a:	6983      	ldr	r3, [r0, #24]
 800978c:	b90b      	cbnz	r3, 8009792 <__swbuf_r+0x12>
 800978e:	f7ff fd43 	bl	8009218 <__sinit>
 8009792:	4b21      	ldr	r3, [pc, #132]	; (8009818 <__swbuf_r+0x98>)
 8009794:	429c      	cmp	r4, r3
 8009796:	d12b      	bne.n	80097f0 <__swbuf_r+0x70>
 8009798:	686c      	ldr	r4, [r5, #4]
 800979a:	69a3      	ldr	r3, [r4, #24]
 800979c:	60a3      	str	r3, [r4, #8]
 800979e:	89a3      	ldrh	r3, [r4, #12]
 80097a0:	071a      	lsls	r2, r3, #28
 80097a2:	d52f      	bpl.n	8009804 <__swbuf_r+0x84>
 80097a4:	6923      	ldr	r3, [r4, #16]
 80097a6:	b36b      	cbz	r3, 8009804 <__swbuf_r+0x84>
 80097a8:	6923      	ldr	r3, [r4, #16]
 80097aa:	6820      	ldr	r0, [r4, #0]
 80097ac:	1ac0      	subs	r0, r0, r3
 80097ae:	6963      	ldr	r3, [r4, #20]
 80097b0:	b2f6      	uxtb	r6, r6
 80097b2:	4283      	cmp	r3, r0
 80097b4:	4637      	mov	r7, r6
 80097b6:	dc04      	bgt.n	80097c2 <__swbuf_r+0x42>
 80097b8:	4621      	mov	r1, r4
 80097ba:	4628      	mov	r0, r5
 80097bc:	f7ff fc98 	bl	80090f0 <_fflush_r>
 80097c0:	bb30      	cbnz	r0, 8009810 <__swbuf_r+0x90>
 80097c2:	68a3      	ldr	r3, [r4, #8]
 80097c4:	3b01      	subs	r3, #1
 80097c6:	60a3      	str	r3, [r4, #8]
 80097c8:	6823      	ldr	r3, [r4, #0]
 80097ca:	1c5a      	adds	r2, r3, #1
 80097cc:	6022      	str	r2, [r4, #0]
 80097ce:	701e      	strb	r6, [r3, #0]
 80097d0:	6963      	ldr	r3, [r4, #20]
 80097d2:	3001      	adds	r0, #1
 80097d4:	4283      	cmp	r3, r0
 80097d6:	d004      	beq.n	80097e2 <__swbuf_r+0x62>
 80097d8:	89a3      	ldrh	r3, [r4, #12]
 80097da:	07db      	lsls	r3, r3, #31
 80097dc:	d506      	bpl.n	80097ec <__swbuf_r+0x6c>
 80097de:	2e0a      	cmp	r6, #10
 80097e0:	d104      	bne.n	80097ec <__swbuf_r+0x6c>
 80097e2:	4621      	mov	r1, r4
 80097e4:	4628      	mov	r0, r5
 80097e6:	f7ff fc83 	bl	80090f0 <_fflush_r>
 80097ea:	b988      	cbnz	r0, 8009810 <__swbuf_r+0x90>
 80097ec:	4638      	mov	r0, r7
 80097ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097f0:	4b0a      	ldr	r3, [pc, #40]	; (800981c <__swbuf_r+0x9c>)
 80097f2:	429c      	cmp	r4, r3
 80097f4:	d101      	bne.n	80097fa <__swbuf_r+0x7a>
 80097f6:	68ac      	ldr	r4, [r5, #8]
 80097f8:	e7cf      	b.n	800979a <__swbuf_r+0x1a>
 80097fa:	4b09      	ldr	r3, [pc, #36]	; (8009820 <__swbuf_r+0xa0>)
 80097fc:	429c      	cmp	r4, r3
 80097fe:	bf08      	it	eq
 8009800:	68ec      	ldreq	r4, [r5, #12]
 8009802:	e7ca      	b.n	800979a <__swbuf_r+0x1a>
 8009804:	4621      	mov	r1, r4
 8009806:	4628      	mov	r0, r5
 8009808:	f000 f80c 	bl	8009824 <__swsetup_r>
 800980c:	2800      	cmp	r0, #0
 800980e:	d0cb      	beq.n	80097a8 <__swbuf_r+0x28>
 8009810:	f04f 37ff 	mov.w	r7, #4294967295
 8009814:	e7ea      	b.n	80097ec <__swbuf_r+0x6c>
 8009816:	bf00      	nop
 8009818:	0800a9c8 	.word	0x0800a9c8
 800981c:	0800a9e8 	.word	0x0800a9e8
 8009820:	0800a9a8 	.word	0x0800a9a8

08009824 <__swsetup_r>:
 8009824:	4b32      	ldr	r3, [pc, #200]	; (80098f0 <__swsetup_r+0xcc>)
 8009826:	b570      	push	{r4, r5, r6, lr}
 8009828:	681d      	ldr	r5, [r3, #0]
 800982a:	4606      	mov	r6, r0
 800982c:	460c      	mov	r4, r1
 800982e:	b125      	cbz	r5, 800983a <__swsetup_r+0x16>
 8009830:	69ab      	ldr	r3, [r5, #24]
 8009832:	b913      	cbnz	r3, 800983a <__swsetup_r+0x16>
 8009834:	4628      	mov	r0, r5
 8009836:	f7ff fcef 	bl	8009218 <__sinit>
 800983a:	4b2e      	ldr	r3, [pc, #184]	; (80098f4 <__swsetup_r+0xd0>)
 800983c:	429c      	cmp	r4, r3
 800983e:	d10f      	bne.n	8009860 <__swsetup_r+0x3c>
 8009840:	686c      	ldr	r4, [r5, #4]
 8009842:	89a3      	ldrh	r3, [r4, #12]
 8009844:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009848:	0719      	lsls	r1, r3, #28
 800984a:	d42c      	bmi.n	80098a6 <__swsetup_r+0x82>
 800984c:	06dd      	lsls	r5, r3, #27
 800984e:	d411      	bmi.n	8009874 <__swsetup_r+0x50>
 8009850:	2309      	movs	r3, #9
 8009852:	6033      	str	r3, [r6, #0]
 8009854:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009858:	81a3      	strh	r3, [r4, #12]
 800985a:	f04f 30ff 	mov.w	r0, #4294967295
 800985e:	e03e      	b.n	80098de <__swsetup_r+0xba>
 8009860:	4b25      	ldr	r3, [pc, #148]	; (80098f8 <__swsetup_r+0xd4>)
 8009862:	429c      	cmp	r4, r3
 8009864:	d101      	bne.n	800986a <__swsetup_r+0x46>
 8009866:	68ac      	ldr	r4, [r5, #8]
 8009868:	e7eb      	b.n	8009842 <__swsetup_r+0x1e>
 800986a:	4b24      	ldr	r3, [pc, #144]	; (80098fc <__swsetup_r+0xd8>)
 800986c:	429c      	cmp	r4, r3
 800986e:	bf08      	it	eq
 8009870:	68ec      	ldreq	r4, [r5, #12]
 8009872:	e7e6      	b.n	8009842 <__swsetup_r+0x1e>
 8009874:	0758      	lsls	r0, r3, #29
 8009876:	d512      	bpl.n	800989e <__swsetup_r+0x7a>
 8009878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800987a:	b141      	cbz	r1, 800988e <__swsetup_r+0x6a>
 800987c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009880:	4299      	cmp	r1, r3
 8009882:	d002      	beq.n	800988a <__swsetup_r+0x66>
 8009884:	4630      	mov	r0, r6
 8009886:	f7ff fda7 	bl	80093d8 <_free_r>
 800988a:	2300      	movs	r3, #0
 800988c:	6363      	str	r3, [r4, #52]	; 0x34
 800988e:	89a3      	ldrh	r3, [r4, #12]
 8009890:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009894:	81a3      	strh	r3, [r4, #12]
 8009896:	2300      	movs	r3, #0
 8009898:	6063      	str	r3, [r4, #4]
 800989a:	6923      	ldr	r3, [r4, #16]
 800989c:	6023      	str	r3, [r4, #0]
 800989e:	89a3      	ldrh	r3, [r4, #12]
 80098a0:	f043 0308 	orr.w	r3, r3, #8
 80098a4:	81a3      	strh	r3, [r4, #12]
 80098a6:	6923      	ldr	r3, [r4, #16]
 80098a8:	b94b      	cbnz	r3, 80098be <__swsetup_r+0x9a>
 80098aa:	89a3      	ldrh	r3, [r4, #12]
 80098ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098b4:	d003      	beq.n	80098be <__swsetup_r+0x9a>
 80098b6:	4621      	mov	r1, r4
 80098b8:	4630      	mov	r0, r6
 80098ba:	f000 f84d 	bl	8009958 <__smakebuf_r>
 80098be:	89a0      	ldrh	r0, [r4, #12]
 80098c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098c4:	f010 0301 	ands.w	r3, r0, #1
 80098c8:	d00a      	beq.n	80098e0 <__swsetup_r+0xbc>
 80098ca:	2300      	movs	r3, #0
 80098cc:	60a3      	str	r3, [r4, #8]
 80098ce:	6963      	ldr	r3, [r4, #20]
 80098d0:	425b      	negs	r3, r3
 80098d2:	61a3      	str	r3, [r4, #24]
 80098d4:	6923      	ldr	r3, [r4, #16]
 80098d6:	b943      	cbnz	r3, 80098ea <__swsetup_r+0xc6>
 80098d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098dc:	d1ba      	bne.n	8009854 <__swsetup_r+0x30>
 80098de:	bd70      	pop	{r4, r5, r6, pc}
 80098e0:	0781      	lsls	r1, r0, #30
 80098e2:	bf58      	it	pl
 80098e4:	6963      	ldrpl	r3, [r4, #20]
 80098e6:	60a3      	str	r3, [r4, #8]
 80098e8:	e7f4      	b.n	80098d4 <__swsetup_r+0xb0>
 80098ea:	2000      	movs	r0, #0
 80098ec:	e7f7      	b.n	80098de <__swsetup_r+0xba>
 80098ee:	bf00      	nop
 80098f0:	2000001c 	.word	0x2000001c
 80098f4:	0800a9c8 	.word	0x0800a9c8
 80098f8:	0800a9e8 	.word	0x0800a9e8
 80098fc:	0800a9a8 	.word	0x0800a9a8

08009900 <abort>:
 8009900:	b508      	push	{r3, lr}
 8009902:	2006      	movs	r0, #6
 8009904:	f000 f898 	bl	8009a38 <raise>
 8009908:	2001      	movs	r0, #1
 800990a:	f7f7 ff13 	bl	8001734 <_exit>

0800990e <__swhatbuf_r>:
 800990e:	b570      	push	{r4, r5, r6, lr}
 8009910:	460e      	mov	r6, r1
 8009912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009916:	2900      	cmp	r1, #0
 8009918:	b096      	sub	sp, #88	; 0x58
 800991a:	4614      	mov	r4, r2
 800991c:	461d      	mov	r5, r3
 800991e:	da08      	bge.n	8009932 <__swhatbuf_r+0x24>
 8009920:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009924:	2200      	movs	r2, #0
 8009926:	602a      	str	r2, [r5, #0]
 8009928:	061a      	lsls	r2, r3, #24
 800992a:	d410      	bmi.n	800994e <__swhatbuf_r+0x40>
 800992c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009930:	e00e      	b.n	8009950 <__swhatbuf_r+0x42>
 8009932:	466a      	mov	r2, sp
 8009934:	f000 f89c 	bl	8009a70 <_fstat_r>
 8009938:	2800      	cmp	r0, #0
 800993a:	dbf1      	blt.n	8009920 <__swhatbuf_r+0x12>
 800993c:	9a01      	ldr	r2, [sp, #4]
 800993e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009942:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009946:	425a      	negs	r2, r3
 8009948:	415a      	adcs	r2, r3
 800994a:	602a      	str	r2, [r5, #0]
 800994c:	e7ee      	b.n	800992c <__swhatbuf_r+0x1e>
 800994e:	2340      	movs	r3, #64	; 0x40
 8009950:	2000      	movs	r0, #0
 8009952:	6023      	str	r3, [r4, #0]
 8009954:	b016      	add	sp, #88	; 0x58
 8009956:	bd70      	pop	{r4, r5, r6, pc}

08009958 <__smakebuf_r>:
 8009958:	898b      	ldrh	r3, [r1, #12]
 800995a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800995c:	079d      	lsls	r5, r3, #30
 800995e:	4606      	mov	r6, r0
 8009960:	460c      	mov	r4, r1
 8009962:	d507      	bpl.n	8009974 <__smakebuf_r+0x1c>
 8009964:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	6123      	str	r3, [r4, #16]
 800996c:	2301      	movs	r3, #1
 800996e:	6163      	str	r3, [r4, #20]
 8009970:	b002      	add	sp, #8
 8009972:	bd70      	pop	{r4, r5, r6, pc}
 8009974:	ab01      	add	r3, sp, #4
 8009976:	466a      	mov	r2, sp
 8009978:	f7ff ffc9 	bl	800990e <__swhatbuf_r>
 800997c:	9900      	ldr	r1, [sp, #0]
 800997e:	4605      	mov	r5, r0
 8009980:	4630      	mov	r0, r6
 8009982:	f7fe fb55 	bl	8008030 <_malloc_r>
 8009986:	b948      	cbnz	r0, 800999c <__smakebuf_r+0x44>
 8009988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800998c:	059a      	lsls	r2, r3, #22
 800998e:	d4ef      	bmi.n	8009970 <__smakebuf_r+0x18>
 8009990:	f023 0303 	bic.w	r3, r3, #3
 8009994:	f043 0302 	orr.w	r3, r3, #2
 8009998:	81a3      	strh	r3, [r4, #12]
 800999a:	e7e3      	b.n	8009964 <__smakebuf_r+0xc>
 800999c:	4b0d      	ldr	r3, [pc, #52]	; (80099d4 <__smakebuf_r+0x7c>)
 800999e:	62b3      	str	r3, [r6, #40]	; 0x28
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	6020      	str	r0, [r4, #0]
 80099a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099a8:	81a3      	strh	r3, [r4, #12]
 80099aa:	9b00      	ldr	r3, [sp, #0]
 80099ac:	6163      	str	r3, [r4, #20]
 80099ae:	9b01      	ldr	r3, [sp, #4]
 80099b0:	6120      	str	r0, [r4, #16]
 80099b2:	b15b      	cbz	r3, 80099cc <__smakebuf_r+0x74>
 80099b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099b8:	4630      	mov	r0, r6
 80099ba:	f000 f86b 	bl	8009a94 <_isatty_r>
 80099be:	b128      	cbz	r0, 80099cc <__smakebuf_r+0x74>
 80099c0:	89a3      	ldrh	r3, [r4, #12]
 80099c2:	f023 0303 	bic.w	r3, r3, #3
 80099c6:	f043 0301 	orr.w	r3, r3, #1
 80099ca:	81a3      	strh	r3, [r4, #12]
 80099cc:	89a0      	ldrh	r0, [r4, #12]
 80099ce:	4305      	orrs	r5, r0
 80099d0:	81a5      	strh	r5, [r4, #12]
 80099d2:	e7cd      	b.n	8009970 <__smakebuf_r+0x18>
 80099d4:	080091b1 	.word	0x080091b1

080099d8 <_malloc_usable_size_r>:
 80099d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099dc:	1f18      	subs	r0, r3, #4
 80099de:	2b00      	cmp	r3, #0
 80099e0:	bfbc      	itt	lt
 80099e2:	580b      	ldrlt	r3, [r1, r0]
 80099e4:	18c0      	addlt	r0, r0, r3
 80099e6:	4770      	bx	lr

080099e8 <_raise_r>:
 80099e8:	291f      	cmp	r1, #31
 80099ea:	b538      	push	{r3, r4, r5, lr}
 80099ec:	4604      	mov	r4, r0
 80099ee:	460d      	mov	r5, r1
 80099f0:	d904      	bls.n	80099fc <_raise_r+0x14>
 80099f2:	2316      	movs	r3, #22
 80099f4:	6003      	str	r3, [r0, #0]
 80099f6:	f04f 30ff 	mov.w	r0, #4294967295
 80099fa:	bd38      	pop	{r3, r4, r5, pc}
 80099fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80099fe:	b112      	cbz	r2, 8009a06 <_raise_r+0x1e>
 8009a00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a04:	b94b      	cbnz	r3, 8009a1a <_raise_r+0x32>
 8009a06:	4620      	mov	r0, r4
 8009a08:	f000 f830 	bl	8009a6c <_getpid_r>
 8009a0c:	462a      	mov	r2, r5
 8009a0e:	4601      	mov	r1, r0
 8009a10:	4620      	mov	r0, r4
 8009a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a16:	f000 b817 	b.w	8009a48 <_kill_r>
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d00a      	beq.n	8009a34 <_raise_r+0x4c>
 8009a1e:	1c59      	adds	r1, r3, #1
 8009a20:	d103      	bne.n	8009a2a <_raise_r+0x42>
 8009a22:	2316      	movs	r3, #22
 8009a24:	6003      	str	r3, [r0, #0]
 8009a26:	2001      	movs	r0, #1
 8009a28:	e7e7      	b.n	80099fa <_raise_r+0x12>
 8009a2a:	2400      	movs	r4, #0
 8009a2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a30:	4628      	mov	r0, r5
 8009a32:	4798      	blx	r3
 8009a34:	2000      	movs	r0, #0
 8009a36:	e7e0      	b.n	80099fa <_raise_r+0x12>

08009a38 <raise>:
 8009a38:	4b02      	ldr	r3, [pc, #8]	; (8009a44 <raise+0xc>)
 8009a3a:	4601      	mov	r1, r0
 8009a3c:	6818      	ldr	r0, [r3, #0]
 8009a3e:	f7ff bfd3 	b.w	80099e8 <_raise_r>
 8009a42:	bf00      	nop
 8009a44:	2000001c 	.word	0x2000001c

08009a48 <_kill_r>:
 8009a48:	b538      	push	{r3, r4, r5, lr}
 8009a4a:	4d07      	ldr	r5, [pc, #28]	; (8009a68 <_kill_r+0x20>)
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	4604      	mov	r4, r0
 8009a50:	4608      	mov	r0, r1
 8009a52:	4611      	mov	r1, r2
 8009a54:	602b      	str	r3, [r5, #0]
 8009a56:	f7f7 fe5d 	bl	8001714 <_kill>
 8009a5a:	1c43      	adds	r3, r0, #1
 8009a5c:	d102      	bne.n	8009a64 <_kill_r+0x1c>
 8009a5e:	682b      	ldr	r3, [r5, #0]
 8009a60:	b103      	cbz	r3, 8009a64 <_kill_r+0x1c>
 8009a62:	6023      	str	r3, [r4, #0]
 8009a64:	bd38      	pop	{r3, r4, r5, pc}
 8009a66:	bf00      	nop
 8009a68:	20000390 	.word	0x20000390

08009a6c <_getpid_r>:
 8009a6c:	f7f7 be4a 	b.w	8001704 <_getpid>

08009a70 <_fstat_r>:
 8009a70:	b538      	push	{r3, r4, r5, lr}
 8009a72:	4d07      	ldr	r5, [pc, #28]	; (8009a90 <_fstat_r+0x20>)
 8009a74:	2300      	movs	r3, #0
 8009a76:	4604      	mov	r4, r0
 8009a78:	4608      	mov	r0, r1
 8009a7a:	4611      	mov	r1, r2
 8009a7c:	602b      	str	r3, [r5, #0]
 8009a7e:	f7f7 fea8 	bl	80017d2 <_fstat>
 8009a82:	1c43      	adds	r3, r0, #1
 8009a84:	d102      	bne.n	8009a8c <_fstat_r+0x1c>
 8009a86:	682b      	ldr	r3, [r5, #0]
 8009a88:	b103      	cbz	r3, 8009a8c <_fstat_r+0x1c>
 8009a8a:	6023      	str	r3, [r4, #0]
 8009a8c:	bd38      	pop	{r3, r4, r5, pc}
 8009a8e:	bf00      	nop
 8009a90:	20000390 	.word	0x20000390

08009a94 <_isatty_r>:
 8009a94:	b538      	push	{r3, r4, r5, lr}
 8009a96:	4d06      	ldr	r5, [pc, #24]	; (8009ab0 <_isatty_r+0x1c>)
 8009a98:	2300      	movs	r3, #0
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	4608      	mov	r0, r1
 8009a9e:	602b      	str	r3, [r5, #0]
 8009aa0:	f7f7 fea7 	bl	80017f2 <_isatty>
 8009aa4:	1c43      	adds	r3, r0, #1
 8009aa6:	d102      	bne.n	8009aae <_isatty_r+0x1a>
 8009aa8:	682b      	ldr	r3, [r5, #0]
 8009aaa:	b103      	cbz	r3, 8009aae <_isatty_r+0x1a>
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	bd38      	pop	{r3, r4, r5, pc}
 8009ab0:	20000390 	.word	0x20000390

08009ab4 <sinf>:
 8009ab4:	ee10 3a10 	vmov	r3, s0
 8009ab8:	b507      	push	{r0, r1, r2, lr}
 8009aba:	4a1f      	ldr	r2, [pc, #124]	; (8009b38 <sinf+0x84>)
 8009abc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	dc07      	bgt.n	8009ad4 <sinf+0x20>
 8009ac4:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8009b3c <sinf+0x88>
 8009ac8:	2000      	movs	r0, #0
 8009aca:	b003      	add	sp, #12
 8009acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ad0:	f000 bc48 	b.w	800a364 <__kernel_sinf>
 8009ad4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009ad8:	db04      	blt.n	8009ae4 <sinf+0x30>
 8009ada:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009ade:	b003      	add	sp, #12
 8009ae0:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ae4:	4668      	mov	r0, sp
 8009ae6:	f000 f82b 	bl	8009b40 <__ieee754_rem_pio2f>
 8009aea:	f000 0003 	and.w	r0, r0, #3
 8009aee:	2801      	cmp	r0, #1
 8009af0:	d00a      	beq.n	8009b08 <sinf+0x54>
 8009af2:	2802      	cmp	r0, #2
 8009af4:	d00f      	beq.n	8009b16 <sinf+0x62>
 8009af6:	b9c0      	cbnz	r0, 8009b2a <sinf+0x76>
 8009af8:	eddd 0a01 	vldr	s1, [sp, #4]
 8009afc:	ed9d 0a00 	vldr	s0, [sp]
 8009b00:	2001      	movs	r0, #1
 8009b02:	f000 fc2f 	bl	800a364 <__kernel_sinf>
 8009b06:	e7ea      	b.n	8009ade <sinf+0x2a>
 8009b08:	eddd 0a01 	vldr	s1, [sp, #4]
 8009b0c:	ed9d 0a00 	vldr	s0, [sp]
 8009b10:	f000 f952 	bl	8009db8 <__kernel_cosf>
 8009b14:	e7e3      	b.n	8009ade <sinf+0x2a>
 8009b16:	eddd 0a01 	vldr	s1, [sp, #4]
 8009b1a:	ed9d 0a00 	vldr	s0, [sp]
 8009b1e:	2001      	movs	r0, #1
 8009b20:	f000 fc20 	bl	800a364 <__kernel_sinf>
 8009b24:	eeb1 0a40 	vneg.f32	s0, s0
 8009b28:	e7d9      	b.n	8009ade <sinf+0x2a>
 8009b2a:	eddd 0a01 	vldr	s1, [sp, #4]
 8009b2e:	ed9d 0a00 	vldr	s0, [sp]
 8009b32:	f000 f941 	bl	8009db8 <__kernel_cosf>
 8009b36:	e7f5      	b.n	8009b24 <sinf+0x70>
 8009b38:	3f490fd8 	.word	0x3f490fd8
 8009b3c:	00000000 	.word	0x00000000

08009b40 <__ieee754_rem_pio2f>:
 8009b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b42:	ee10 6a10 	vmov	r6, s0
 8009b46:	4b8e      	ldr	r3, [pc, #568]	; (8009d80 <__ieee754_rem_pio2f+0x240>)
 8009b48:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8009b4c:	429d      	cmp	r5, r3
 8009b4e:	b087      	sub	sp, #28
 8009b50:	eef0 7a40 	vmov.f32	s15, s0
 8009b54:	4604      	mov	r4, r0
 8009b56:	dc05      	bgt.n	8009b64 <__ieee754_rem_pio2f+0x24>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	ed80 0a00 	vstr	s0, [r0]
 8009b5e:	6043      	str	r3, [r0, #4]
 8009b60:	2000      	movs	r0, #0
 8009b62:	e01a      	b.n	8009b9a <__ieee754_rem_pio2f+0x5a>
 8009b64:	4b87      	ldr	r3, [pc, #540]	; (8009d84 <__ieee754_rem_pio2f+0x244>)
 8009b66:	429d      	cmp	r5, r3
 8009b68:	dc46      	bgt.n	8009bf8 <__ieee754_rem_pio2f+0xb8>
 8009b6a:	2e00      	cmp	r6, #0
 8009b6c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8009d88 <__ieee754_rem_pio2f+0x248>
 8009b70:	4b86      	ldr	r3, [pc, #536]	; (8009d8c <__ieee754_rem_pio2f+0x24c>)
 8009b72:	f025 050f 	bic.w	r5, r5, #15
 8009b76:	dd1f      	ble.n	8009bb8 <__ieee754_rem_pio2f+0x78>
 8009b78:	429d      	cmp	r5, r3
 8009b7a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009b7e:	d00e      	beq.n	8009b9e <__ieee754_rem_pio2f+0x5e>
 8009b80:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8009d90 <__ieee754_rem_pio2f+0x250>
 8009b84:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8009b88:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009b8c:	ed80 0a00 	vstr	s0, [r0]
 8009b90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b94:	2001      	movs	r0, #1
 8009b96:	edc4 7a01 	vstr	s15, [r4, #4]
 8009b9a:	b007      	add	sp, #28
 8009b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b9e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8009d94 <__ieee754_rem_pio2f+0x254>
 8009ba2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8009d98 <__ieee754_rem_pio2f+0x258>
 8009ba6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009baa:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8009bae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009bb2:	edc0 6a00 	vstr	s13, [r0]
 8009bb6:	e7eb      	b.n	8009b90 <__ieee754_rem_pio2f+0x50>
 8009bb8:	429d      	cmp	r5, r3
 8009bba:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009bbe:	d00e      	beq.n	8009bde <__ieee754_rem_pio2f+0x9e>
 8009bc0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8009d90 <__ieee754_rem_pio2f+0x250>
 8009bc4:	ee37 0a87 	vadd.f32	s0, s15, s14
 8009bc8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009bcc:	ed80 0a00 	vstr	s0, [r0]
 8009bd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd8:	edc4 7a01 	vstr	s15, [r4, #4]
 8009bdc:	e7dd      	b.n	8009b9a <__ieee754_rem_pio2f+0x5a>
 8009bde:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8009d94 <__ieee754_rem_pio2f+0x254>
 8009be2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8009d98 <__ieee754_rem_pio2f+0x258>
 8009be6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009bea:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009bee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009bf2:	edc0 6a00 	vstr	s13, [r0]
 8009bf6:	e7eb      	b.n	8009bd0 <__ieee754_rem_pio2f+0x90>
 8009bf8:	4b68      	ldr	r3, [pc, #416]	; (8009d9c <__ieee754_rem_pio2f+0x25c>)
 8009bfa:	429d      	cmp	r5, r3
 8009bfc:	dc72      	bgt.n	8009ce4 <__ieee754_rem_pio2f+0x1a4>
 8009bfe:	f000 fbf9 	bl	800a3f4 <fabsf>
 8009c02:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8009da0 <__ieee754_rem_pio2f+0x260>
 8009c06:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009c0a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009c0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009c16:	ee17 0a90 	vmov	r0, s15
 8009c1a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8009d88 <__ieee754_rem_pio2f+0x248>
 8009c1e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8009c22:	281f      	cmp	r0, #31
 8009c24:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8009d90 <__ieee754_rem_pio2f+0x250>
 8009c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c2c:	eeb1 6a47 	vneg.f32	s12, s14
 8009c30:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009c34:	ee16 2a90 	vmov	r2, s13
 8009c38:	dc1c      	bgt.n	8009c74 <__ieee754_rem_pio2f+0x134>
 8009c3a:	495a      	ldr	r1, [pc, #360]	; (8009da4 <__ieee754_rem_pio2f+0x264>)
 8009c3c:	1e47      	subs	r7, r0, #1
 8009c3e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8009c42:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8009c46:	428b      	cmp	r3, r1
 8009c48:	d014      	beq.n	8009c74 <__ieee754_rem_pio2f+0x134>
 8009c4a:	6022      	str	r2, [r4, #0]
 8009c4c:	ed94 7a00 	vldr	s14, [r4]
 8009c50:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009c54:	2e00      	cmp	r6, #0
 8009c56:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009c5a:	ed84 0a01 	vstr	s0, [r4, #4]
 8009c5e:	da9c      	bge.n	8009b9a <__ieee754_rem_pio2f+0x5a>
 8009c60:	eeb1 7a47 	vneg.f32	s14, s14
 8009c64:	eeb1 0a40 	vneg.f32	s0, s0
 8009c68:	ed84 7a00 	vstr	s14, [r4]
 8009c6c:	ed84 0a01 	vstr	s0, [r4, #4]
 8009c70:	4240      	negs	r0, r0
 8009c72:	e792      	b.n	8009b9a <__ieee754_rem_pio2f+0x5a>
 8009c74:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009c78:	15eb      	asrs	r3, r5, #23
 8009c7a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8009c7e:	2d08      	cmp	r5, #8
 8009c80:	dde3      	ble.n	8009c4a <__ieee754_rem_pio2f+0x10a>
 8009c82:	eddf 7a44 	vldr	s15, [pc, #272]	; 8009d94 <__ieee754_rem_pio2f+0x254>
 8009c86:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009d98 <__ieee754_rem_pio2f+0x258>
 8009c8a:	eef0 6a40 	vmov.f32	s13, s0
 8009c8e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009c92:	ee30 0a66 	vsub.f32	s0, s0, s13
 8009c96:	eea6 0a27 	vfma.f32	s0, s12, s15
 8009c9a:	eef0 7a40 	vmov.f32	s15, s0
 8009c9e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8009ca2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8009ca6:	ee15 2a90 	vmov	r2, s11
 8009caa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009cae:	1a5b      	subs	r3, r3, r1
 8009cb0:	2b19      	cmp	r3, #25
 8009cb2:	dc04      	bgt.n	8009cbe <__ieee754_rem_pio2f+0x17e>
 8009cb4:	edc4 5a00 	vstr	s11, [r4]
 8009cb8:	eeb0 0a66 	vmov.f32	s0, s13
 8009cbc:	e7c6      	b.n	8009c4c <__ieee754_rem_pio2f+0x10c>
 8009cbe:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8009da8 <__ieee754_rem_pio2f+0x268>
 8009cc2:	eeb0 0a66 	vmov.f32	s0, s13
 8009cc6:	eea6 0a25 	vfma.f32	s0, s12, s11
 8009cca:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009cce:	eddf 6a37 	vldr	s13, [pc, #220]	; 8009dac <__ieee754_rem_pio2f+0x26c>
 8009cd2:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009cd6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8009cda:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009cde:	ed84 7a00 	vstr	s14, [r4]
 8009ce2:	e7b3      	b.n	8009c4c <__ieee754_rem_pio2f+0x10c>
 8009ce4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009ce8:	db06      	blt.n	8009cf8 <__ieee754_rem_pio2f+0x1b8>
 8009cea:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009cee:	edc0 7a01 	vstr	s15, [r0, #4]
 8009cf2:	edc0 7a00 	vstr	s15, [r0]
 8009cf6:	e733      	b.n	8009b60 <__ieee754_rem_pio2f+0x20>
 8009cf8:	15ea      	asrs	r2, r5, #23
 8009cfa:	3a86      	subs	r2, #134	; 0x86
 8009cfc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8009d00:	ee07 3a90 	vmov	s15, r3
 8009d04:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009d08:	eddf 6a29 	vldr	s13, [pc, #164]	; 8009db0 <__ieee754_rem_pio2f+0x270>
 8009d0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009d10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d14:	ed8d 7a03 	vstr	s14, [sp, #12]
 8009d18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009d1c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009d20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009d24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d28:	ed8d 7a04 	vstr	s14, [sp, #16]
 8009d2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009d30:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d38:	edcd 7a05 	vstr	s15, [sp, #20]
 8009d3c:	d11e      	bne.n	8009d7c <__ieee754_rem_pio2f+0x23c>
 8009d3e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8009d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d46:	bf14      	ite	ne
 8009d48:	2302      	movne	r3, #2
 8009d4a:	2301      	moveq	r3, #1
 8009d4c:	4919      	ldr	r1, [pc, #100]	; (8009db4 <__ieee754_rem_pio2f+0x274>)
 8009d4e:	9101      	str	r1, [sp, #4]
 8009d50:	2102      	movs	r1, #2
 8009d52:	9100      	str	r1, [sp, #0]
 8009d54:	a803      	add	r0, sp, #12
 8009d56:	4621      	mov	r1, r4
 8009d58:	f000 f88e 	bl	8009e78 <__kernel_rem_pio2f>
 8009d5c:	2e00      	cmp	r6, #0
 8009d5e:	f6bf af1c 	bge.w	8009b9a <__ieee754_rem_pio2f+0x5a>
 8009d62:	edd4 7a00 	vldr	s15, [r4]
 8009d66:	eef1 7a67 	vneg.f32	s15, s15
 8009d6a:	edc4 7a00 	vstr	s15, [r4]
 8009d6e:	edd4 7a01 	vldr	s15, [r4, #4]
 8009d72:	eef1 7a67 	vneg.f32	s15, s15
 8009d76:	edc4 7a01 	vstr	s15, [r4, #4]
 8009d7a:	e779      	b.n	8009c70 <__ieee754_rem_pio2f+0x130>
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	e7e5      	b.n	8009d4c <__ieee754_rem_pio2f+0x20c>
 8009d80:	3f490fd8 	.word	0x3f490fd8
 8009d84:	4016cbe3 	.word	0x4016cbe3
 8009d88:	3fc90f80 	.word	0x3fc90f80
 8009d8c:	3fc90fd0 	.word	0x3fc90fd0
 8009d90:	37354443 	.word	0x37354443
 8009d94:	37354400 	.word	0x37354400
 8009d98:	2e85a308 	.word	0x2e85a308
 8009d9c:	43490f80 	.word	0x43490f80
 8009da0:	3f22f984 	.word	0x3f22f984
 8009da4:	0800aa08 	.word	0x0800aa08
 8009da8:	2e85a300 	.word	0x2e85a300
 8009dac:	248d3132 	.word	0x248d3132
 8009db0:	43800000 	.word	0x43800000
 8009db4:	0800aa88 	.word	0x0800aa88

08009db8 <__kernel_cosf>:
 8009db8:	ee10 3a10 	vmov	r3, s0
 8009dbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009dc0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009dc4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009dc8:	da05      	bge.n	8009dd6 <__kernel_cosf+0x1e>
 8009dca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009dce:	ee17 2a90 	vmov	r2, s15
 8009dd2:	2a00      	cmp	r2, #0
 8009dd4:	d03d      	beq.n	8009e52 <__kernel_cosf+0x9a>
 8009dd6:	ee60 5a00 	vmul.f32	s11, s0, s0
 8009dda:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009e58 <__kernel_cosf+0xa0>
 8009dde:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8009e5c <__kernel_cosf+0xa4>
 8009de2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8009e60 <__kernel_cosf+0xa8>
 8009de6:	4a1f      	ldr	r2, [pc, #124]	; (8009e64 <__kernel_cosf+0xac>)
 8009de8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009dec:	4293      	cmp	r3, r2
 8009dee:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8009e68 <__kernel_cosf+0xb0>
 8009df2:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009df6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009e6c <__kernel_cosf+0xb4>
 8009dfa:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8009dfe:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8009e70 <__kernel_cosf+0xb8>
 8009e02:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009e06:	eeb0 7a66 	vmov.f32	s14, s13
 8009e0a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8009e0e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009e12:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8009e16:	ee67 6a25 	vmul.f32	s13, s14, s11
 8009e1a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8009e1e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009e22:	dc04      	bgt.n	8009e2e <__kernel_cosf+0x76>
 8009e24:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009e28:	ee36 0a47 	vsub.f32	s0, s12, s14
 8009e2c:	4770      	bx	lr
 8009e2e:	4a11      	ldr	r2, [pc, #68]	; (8009e74 <__kernel_cosf+0xbc>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	bfda      	itte	le
 8009e34:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8009e38:	ee06 3a90 	vmovle	s13, r3
 8009e3c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8009e40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009e44:	ee36 0a66 	vsub.f32	s0, s12, s13
 8009e48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009e4c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009e50:	4770      	bx	lr
 8009e52:	eeb0 0a46 	vmov.f32	s0, s12
 8009e56:	4770      	bx	lr
 8009e58:	ad47d74e 	.word	0xad47d74e
 8009e5c:	310f74f6 	.word	0x310f74f6
 8009e60:	3d2aaaab 	.word	0x3d2aaaab
 8009e64:	3e999999 	.word	0x3e999999
 8009e68:	b493f27c 	.word	0xb493f27c
 8009e6c:	37d00d01 	.word	0x37d00d01
 8009e70:	bab60b61 	.word	0xbab60b61
 8009e74:	3f480000 	.word	0x3f480000

08009e78 <__kernel_rem_pio2f>:
 8009e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7c:	ed2d 8b04 	vpush	{d8-d9}
 8009e80:	b0d9      	sub	sp, #356	; 0x164
 8009e82:	4688      	mov	r8, r1
 8009e84:	9002      	str	r0, [sp, #8]
 8009e86:	49bb      	ldr	r1, [pc, #748]	; (800a174 <__kernel_rem_pio2f+0x2fc>)
 8009e88:	9866      	ldr	r0, [sp, #408]	; 0x198
 8009e8a:	9301      	str	r3, [sp, #4]
 8009e8c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8009e90:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8009e94:	1e59      	subs	r1, r3, #1
 8009e96:	1d13      	adds	r3, r2, #4
 8009e98:	db27      	blt.n	8009eea <__kernel_rem_pio2f+0x72>
 8009e9a:	f1b2 0b03 	subs.w	fp, r2, #3
 8009e9e:	bf48      	it	mi
 8009ea0:	f102 0b04 	addmi.w	fp, r2, #4
 8009ea4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8009ea8:	1c45      	adds	r5, r0, #1
 8009eaa:	00ec      	lsls	r4, r5, #3
 8009eac:	1a47      	subs	r7, r0, r1
 8009eae:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800a184 <__kernel_rem_pio2f+0x30c>
 8009eb2:	9403      	str	r4, [sp, #12]
 8009eb4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8009eb8:	eb0a 0c01 	add.w	ip, sl, r1
 8009ebc:	ae1c      	add	r6, sp, #112	; 0x70
 8009ebe:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8009ec2:	2400      	movs	r4, #0
 8009ec4:	4564      	cmp	r4, ip
 8009ec6:	dd12      	ble.n	8009eee <__kernel_rem_pio2f+0x76>
 8009ec8:	9b01      	ldr	r3, [sp, #4]
 8009eca:	ac1c      	add	r4, sp, #112	; 0x70
 8009ecc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8009ed0:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8009ed4:	f04f 0c00 	mov.w	ip, #0
 8009ed8:	45d4      	cmp	ip, sl
 8009eda:	dc27      	bgt.n	8009f2c <__kernel_rem_pio2f+0xb4>
 8009edc:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8009ee0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800a184 <__kernel_rem_pio2f+0x30c>
 8009ee4:	4627      	mov	r7, r4
 8009ee6:	2600      	movs	r6, #0
 8009ee8:	e016      	b.n	8009f18 <__kernel_rem_pio2f+0xa0>
 8009eea:	2000      	movs	r0, #0
 8009eec:	e7dc      	b.n	8009ea8 <__kernel_rem_pio2f+0x30>
 8009eee:	42e7      	cmn	r7, r4
 8009ef0:	bf5d      	ittte	pl
 8009ef2:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8009ef6:	ee07 3a90 	vmovpl	s15, r3
 8009efa:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8009efe:	eef0 7a47 	vmovmi.f32	s15, s14
 8009f02:	ece6 7a01 	vstmia	r6!, {s15}
 8009f06:	3401      	adds	r4, #1
 8009f08:	e7dc      	b.n	8009ec4 <__kernel_rem_pio2f+0x4c>
 8009f0a:	ecf9 6a01 	vldmia	r9!, {s13}
 8009f0e:	ed97 7a00 	vldr	s14, [r7]
 8009f12:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009f16:	3601      	adds	r6, #1
 8009f18:	428e      	cmp	r6, r1
 8009f1a:	f1a7 0704 	sub.w	r7, r7, #4
 8009f1e:	ddf4      	ble.n	8009f0a <__kernel_rem_pio2f+0x92>
 8009f20:	eceb 7a01 	vstmia	fp!, {s15}
 8009f24:	f10c 0c01 	add.w	ip, ip, #1
 8009f28:	3404      	adds	r4, #4
 8009f2a:	e7d5      	b.n	8009ed8 <__kernel_rem_pio2f+0x60>
 8009f2c:	ab08      	add	r3, sp, #32
 8009f2e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8009f32:	eddf 8a93 	vldr	s17, [pc, #588]	; 800a180 <__kernel_rem_pio2f+0x308>
 8009f36:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800a17c <__kernel_rem_pio2f+0x304>
 8009f3a:	9304      	str	r3, [sp, #16]
 8009f3c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8009f40:	4656      	mov	r6, sl
 8009f42:	00b3      	lsls	r3, r6, #2
 8009f44:	9305      	str	r3, [sp, #20]
 8009f46:	ab58      	add	r3, sp, #352	; 0x160
 8009f48:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8009f4c:	ac08      	add	r4, sp, #32
 8009f4e:	ab44      	add	r3, sp, #272	; 0x110
 8009f50:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8009f54:	46a4      	mov	ip, r4
 8009f56:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8009f5a:	4637      	mov	r7, r6
 8009f5c:	2f00      	cmp	r7, #0
 8009f5e:	f1a0 0004 	sub.w	r0, r0, #4
 8009f62:	dc4f      	bgt.n	800a004 <__kernel_rem_pio2f+0x18c>
 8009f64:	4628      	mov	r0, r5
 8009f66:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8009f6a:	f000 fa8d 	bl	800a488 <scalbnf>
 8009f6e:	eeb0 8a40 	vmov.f32	s16, s0
 8009f72:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8009f76:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009f7a:	f000 fa43 	bl	800a404 <floorf>
 8009f7e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8009f82:	eea0 8a67 	vfms.f32	s16, s0, s15
 8009f86:	2d00      	cmp	r5, #0
 8009f88:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8009f8c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8009f90:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8009f94:	ee17 9a90 	vmov	r9, s15
 8009f98:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009f9c:	dd44      	ble.n	800a028 <__kernel_rem_pio2f+0x1b0>
 8009f9e:	f106 3cff 	add.w	ip, r6, #4294967295
 8009fa2:	ab08      	add	r3, sp, #32
 8009fa4:	f1c5 0e08 	rsb	lr, r5, #8
 8009fa8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8009fac:	fa47 f00e 	asr.w	r0, r7, lr
 8009fb0:	4481      	add	r9, r0
 8009fb2:	fa00 f00e 	lsl.w	r0, r0, lr
 8009fb6:	1a3f      	subs	r7, r7, r0
 8009fb8:	f1c5 0007 	rsb	r0, r5, #7
 8009fbc:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8009fc0:	4107      	asrs	r7, r0
 8009fc2:	2f00      	cmp	r7, #0
 8009fc4:	dd3f      	ble.n	800a046 <__kernel_rem_pio2f+0x1ce>
 8009fc6:	f04f 0e00 	mov.w	lr, #0
 8009fca:	f109 0901 	add.w	r9, r9, #1
 8009fce:	4673      	mov	r3, lr
 8009fd0:	4576      	cmp	r6, lr
 8009fd2:	dc6b      	bgt.n	800a0ac <__kernel_rem_pio2f+0x234>
 8009fd4:	2d00      	cmp	r5, #0
 8009fd6:	dd04      	ble.n	8009fe2 <__kernel_rem_pio2f+0x16a>
 8009fd8:	2d01      	cmp	r5, #1
 8009fda:	d078      	beq.n	800a0ce <__kernel_rem_pio2f+0x256>
 8009fdc:	2d02      	cmp	r5, #2
 8009fde:	f000 8081 	beq.w	800a0e4 <__kernel_rem_pio2f+0x26c>
 8009fe2:	2f02      	cmp	r7, #2
 8009fe4:	d12f      	bne.n	800a046 <__kernel_rem_pio2f+0x1ce>
 8009fe6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009fea:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009fee:	b353      	cbz	r3, 800a046 <__kernel_rem_pio2f+0x1ce>
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8009ff6:	f000 fa47 	bl	800a488 <scalbnf>
 8009ffa:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8009ffe:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a002:	e020      	b.n	800a046 <__kernel_rem_pio2f+0x1ce>
 800a004:	ee60 7a28 	vmul.f32	s15, s0, s17
 800a008:	3f01      	subs	r7, #1
 800a00a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a00e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a012:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800a016:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a01a:	ecac 0a01 	vstmia	ip!, {s0}
 800a01e:	ed90 0a00 	vldr	s0, [r0]
 800a022:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a026:	e799      	b.n	8009f5c <__kernel_rem_pio2f+0xe4>
 800a028:	d105      	bne.n	800a036 <__kernel_rem_pio2f+0x1be>
 800a02a:	1e70      	subs	r0, r6, #1
 800a02c:	ab08      	add	r3, sp, #32
 800a02e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800a032:	11ff      	asrs	r7, r7, #7
 800a034:	e7c5      	b.n	8009fc2 <__kernel_rem_pio2f+0x14a>
 800a036:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a03a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a042:	da31      	bge.n	800a0a8 <__kernel_rem_pio2f+0x230>
 800a044:	2700      	movs	r7, #0
 800a046:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a04a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a04e:	f040 809b 	bne.w	800a188 <__kernel_rem_pio2f+0x310>
 800a052:	1e74      	subs	r4, r6, #1
 800a054:	46a4      	mov	ip, r4
 800a056:	2000      	movs	r0, #0
 800a058:	45d4      	cmp	ip, sl
 800a05a:	da4a      	bge.n	800a0f2 <__kernel_rem_pio2f+0x27a>
 800a05c:	2800      	cmp	r0, #0
 800a05e:	d07a      	beq.n	800a156 <__kernel_rem_pio2f+0x2de>
 800a060:	ab08      	add	r3, sp, #32
 800a062:	3d08      	subs	r5, #8
 800a064:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	f000 8081 	beq.w	800a170 <__kernel_rem_pio2f+0x2f8>
 800a06e:	4628      	mov	r0, r5
 800a070:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a074:	00a5      	lsls	r5, r4, #2
 800a076:	f000 fa07 	bl	800a488 <scalbnf>
 800a07a:	aa44      	add	r2, sp, #272	; 0x110
 800a07c:	1d2b      	adds	r3, r5, #4
 800a07e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800a180 <__kernel_rem_pio2f+0x308>
 800a082:	18d1      	adds	r1, r2, r3
 800a084:	4622      	mov	r2, r4
 800a086:	2a00      	cmp	r2, #0
 800a088:	f280 80ae 	bge.w	800a1e8 <__kernel_rem_pio2f+0x370>
 800a08c:	4622      	mov	r2, r4
 800a08e:	2a00      	cmp	r2, #0
 800a090:	f2c0 80cc 	blt.w	800a22c <__kernel_rem_pio2f+0x3b4>
 800a094:	a944      	add	r1, sp, #272	; 0x110
 800a096:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800a09a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800a178 <__kernel_rem_pio2f+0x300>
 800a09e:	eddf 7a39 	vldr	s15, [pc, #228]	; 800a184 <__kernel_rem_pio2f+0x30c>
 800a0a2:	2000      	movs	r0, #0
 800a0a4:	1aa1      	subs	r1, r4, r2
 800a0a6:	e0b6      	b.n	800a216 <__kernel_rem_pio2f+0x39e>
 800a0a8:	2702      	movs	r7, #2
 800a0aa:	e78c      	b.n	8009fc6 <__kernel_rem_pio2f+0x14e>
 800a0ac:	6820      	ldr	r0, [r4, #0]
 800a0ae:	b94b      	cbnz	r3, 800a0c4 <__kernel_rem_pio2f+0x24c>
 800a0b0:	b118      	cbz	r0, 800a0ba <__kernel_rem_pio2f+0x242>
 800a0b2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800a0b6:	6020      	str	r0, [r4, #0]
 800a0b8:	2001      	movs	r0, #1
 800a0ba:	f10e 0e01 	add.w	lr, lr, #1
 800a0be:	3404      	adds	r4, #4
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	e785      	b.n	8009fd0 <__kernel_rem_pio2f+0x158>
 800a0c4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800a0c8:	6020      	str	r0, [r4, #0]
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	e7f5      	b.n	800a0ba <__kernel_rem_pio2f+0x242>
 800a0ce:	1e74      	subs	r4, r6, #1
 800a0d0:	a808      	add	r0, sp, #32
 800a0d2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a0d6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a0da:	f10d 0c20 	add.w	ip, sp, #32
 800a0de:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800a0e2:	e77e      	b.n	8009fe2 <__kernel_rem_pio2f+0x16a>
 800a0e4:	1e74      	subs	r4, r6, #1
 800a0e6:	a808      	add	r0, sp, #32
 800a0e8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a0ec:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800a0f0:	e7f3      	b.n	800a0da <__kernel_rem_pio2f+0x262>
 800a0f2:	ab08      	add	r3, sp, #32
 800a0f4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800a0f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a0fc:	4318      	orrs	r0, r3
 800a0fe:	e7ab      	b.n	800a058 <__kernel_rem_pio2f+0x1e0>
 800a100:	f10c 0c01 	add.w	ip, ip, #1
 800a104:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800a108:	2c00      	cmp	r4, #0
 800a10a:	d0f9      	beq.n	800a100 <__kernel_rem_pio2f+0x288>
 800a10c:	9b05      	ldr	r3, [sp, #20]
 800a10e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800a112:	eb0d 0003 	add.w	r0, sp, r3
 800a116:	9b01      	ldr	r3, [sp, #4]
 800a118:	18f4      	adds	r4, r6, r3
 800a11a:	ab1c      	add	r3, sp, #112	; 0x70
 800a11c:	1c77      	adds	r7, r6, #1
 800a11e:	384c      	subs	r0, #76	; 0x4c
 800a120:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a124:	4466      	add	r6, ip
 800a126:	42be      	cmp	r6, r7
 800a128:	f6ff af0b 	blt.w	8009f42 <__kernel_rem_pio2f+0xca>
 800a12c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800a130:	f8dd e008 	ldr.w	lr, [sp, #8]
 800a134:	ee07 3a90 	vmov	s15, r3
 800a138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a13c:	f04f 0c00 	mov.w	ip, #0
 800a140:	ece4 7a01 	vstmia	r4!, {s15}
 800a144:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800a184 <__kernel_rem_pio2f+0x30c>
 800a148:	46a1      	mov	r9, r4
 800a14a:	458c      	cmp	ip, r1
 800a14c:	dd07      	ble.n	800a15e <__kernel_rem_pio2f+0x2e6>
 800a14e:	ece0 7a01 	vstmia	r0!, {s15}
 800a152:	3701      	adds	r7, #1
 800a154:	e7e7      	b.n	800a126 <__kernel_rem_pio2f+0x2ae>
 800a156:	9804      	ldr	r0, [sp, #16]
 800a158:	f04f 0c01 	mov.w	ip, #1
 800a15c:	e7d2      	b.n	800a104 <__kernel_rem_pio2f+0x28c>
 800a15e:	ecfe 6a01 	vldmia	lr!, {s13}
 800a162:	ed39 7a01 	vldmdb	r9!, {s14}
 800a166:	f10c 0c01 	add.w	ip, ip, #1
 800a16a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a16e:	e7ec      	b.n	800a14a <__kernel_rem_pio2f+0x2d2>
 800a170:	3c01      	subs	r4, #1
 800a172:	e775      	b.n	800a060 <__kernel_rem_pio2f+0x1e8>
 800a174:	0800adcc 	.word	0x0800adcc
 800a178:	0800ada0 	.word	0x0800ada0
 800a17c:	43800000 	.word	0x43800000
 800a180:	3b800000 	.word	0x3b800000
 800a184:	00000000 	.word	0x00000000
 800a188:	9b03      	ldr	r3, [sp, #12]
 800a18a:	eeb0 0a48 	vmov.f32	s0, s16
 800a18e:	1a98      	subs	r0, r3, r2
 800a190:	f000 f97a 	bl	800a488 <scalbnf>
 800a194:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800a17c <__kernel_rem_pio2f+0x304>
 800a198:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a19c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1a0:	db19      	blt.n	800a1d6 <__kernel_rem_pio2f+0x35e>
 800a1a2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800a180 <__kernel_rem_pio2f+0x308>
 800a1a6:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a1aa:	aa08      	add	r2, sp, #32
 800a1ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a1b0:	1c74      	adds	r4, r6, #1
 800a1b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1b6:	3508      	adds	r5, #8
 800a1b8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a1bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a1c0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a1c4:	ee10 3a10 	vmov	r3, s0
 800a1c8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800a1cc:	ee17 3a90 	vmov	r3, s15
 800a1d0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800a1d4:	e74b      	b.n	800a06e <__kernel_rem_pio2f+0x1f6>
 800a1d6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a1da:	aa08      	add	r2, sp, #32
 800a1dc:	ee10 3a10 	vmov	r3, s0
 800a1e0:	4634      	mov	r4, r6
 800a1e2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800a1e6:	e742      	b.n	800a06e <__kernel_rem_pio2f+0x1f6>
 800a1e8:	a808      	add	r0, sp, #32
 800a1ea:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800a1ee:	9001      	str	r0, [sp, #4]
 800a1f0:	ee07 0a90 	vmov	s15, r0
 800a1f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1f8:	3a01      	subs	r2, #1
 800a1fa:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a1fe:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a202:	ed61 7a01 	vstmdb	r1!, {s15}
 800a206:	e73e      	b.n	800a086 <__kernel_rem_pio2f+0x20e>
 800a208:	ecfc 6a01 	vldmia	ip!, {s13}
 800a20c:	ecb6 7a01 	vldmia	r6!, {s14}
 800a210:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a214:	3001      	adds	r0, #1
 800a216:	4550      	cmp	r0, sl
 800a218:	dc01      	bgt.n	800a21e <__kernel_rem_pio2f+0x3a6>
 800a21a:	4288      	cmp	r0, r1
 800a21c:	ddf4      	ble.n	800a208 <__kernel_rem_pio2f+0x390>
 800a21e:	a858      	add	r0, sp, #352	; 0x160
 800a220:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a224:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800a228:	3a01      	subs	r2, #1
 800a22a:	e730      	b.n	800a08e <__kernel_rem_pio2f+0x216>
 800a22c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800a22e:	2a02      	cmp	r2, #2
 800a230:	dc09      	bgt.n	800a246 <__kernel_rem_pio2f+0x3ce>
 800a232:	2a00      	cmp	r2, #0
 800a234:	dc2a      	bgt.n	800a28c <__kernel_rem_pio2f+0x414>
 800a236:	d043      	beq.n	800a2c0 <__kernel_rem_pio2f+0x448>
 800a238:	f009 0007 	and.w	r0, r9, #7
 800a23c:	b059      	add	sp, #356	; 0x164
 800a23e:	ecbd 8b04 	vpop	{d8-d9}
 800a242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a246:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800a248:	2b03      	cmp	r3, #3
 800a24a:	d1f5      	bne.n	800a238 <__kernel_rem_pio2f+0x3c0>
 800a24c:	ab30      	add	r3, sp, #192	; 0xc0
 800a24e:	442b      	add	r3, r5
 800a250:	461a      	mov	r2, r3
 800a252:	4619      	mov	r1, r3
 800a254:	4620      	mov	r0, r4
 800a256:	2800      	cmp	r0, #0
 800a258:	f1a1 0104 	sub.w	r1, r1, #4
 800a25c:	dc51      	bgt.n	800a302 <__kernel_rem_pio2f+0x48a>
 800a25e:	4621      	mov	r1, r4
 800a260:	2901      	cmp	r1, #1
 800a262:	f1a2 0204 	sub.w	r2, r2, #4
 800a266:	dc5c      	bgt.n	800a322 <__kernel_rem_pio2f+0x4aa>
 800a268:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800a184 <__kernel_rem_pio2f+0x30c>
 800a26c:	3304      	adds	r3, #4
 800a26e:	2c01      	cmp	r4, #1
 800a270:	dc67      	bgt.n	800a342 <__kernel_rem_pio2f+0x4ca>
 800a272:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800a276:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800a27a:	2f00      	cmp	r7, #0
 800a27c:	d167      	bne.n	800a34e <__kernel_rem_pio2f+0x4d6>
 800a27e:	edc8 6a00 	vstr	s13, [r8]
 800a282:	ed88 7a01 	vstr	s14, [r8, #4]
 800a286:	edc8 7a02 	vstr	s15, [r8, #8]
 800a28a:	e7d5      	b.n	800a238 <__kernel_rem_pio2f+0x3c0>
 800a28c:	aa30      	add	r2, sp, #192	; 0xc0
 800a28e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800a184 <__kernel_rem_pio2f+0x30c>
 800a292:	4413      	add	r3, r2
 800a294:	4622      	mov	r2, r4
 800a296:	2a00      	cmp	r2, #0
 800a298:	da24      	bge.n	800a2e4 <__kernel_rem_pio2f+0x46c>
 800a29a:	b34f      	cbz	r7, 800a2f0 <__kernel_rem_pio2f+0x478>
 800a29c:	eef1 7a47 	vneg.f32	s15, s14
 800a2a0:	edc8 7a00 	vstr	s15, [r8]
 800a2a4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800a2a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a2ac:	aa31      	add	r2, sp, #196	; 0xc4
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	429c      	cmp	r4, r3
 800a2b2:	da20      	bge.n	800a2f6 <__kernel_rem_pio2f+0x47e>
 800a2b4:	b10f      	cbz	r7, 800a2ba <__kernel_rem_pio2f+0x442>
 800a2b6:	eef1 7a67 	vneg.f32	s15, s15
 800a2ba:	edc8 7a01 	vstr	s15, [r8, #4]
 800a2be:	e7bb      	b.n	800a238 <__kernel_rem_pio2f+0x3c0>
 800a2c0:	aa30      	add	r2, sp, #192	; 0xc0
 800a2c2:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800a184 <__kernel_rem_pio2f+0x30c>
 800a2c6:	4413      	add	r3, r2
 800a2c8:	2c00      	cmp	r4, #0
 800a2ca:	da05      	bge.n	800a2d8 <__kernel_rem_pio2f+0x460>
 800a2cc:	b10f      	cbz	r7, 800a2d2 <__kernel_rem_pio2f+0x45a>
 800a2ce:	eef1 7a67 	vneg.f32	s15, s15
 800a2d2:	edc8 7a00 	vstr	s15, [r8]
 800a2d6:	e7af      	b.n	800a238 <__kernel_rem_pio2f+0x3c0>
 800a2d8:	ed33 7a01 	vldmdb	r3!, {s14}
 800a2dc:	3c01      	subs	r4, #1
 800a2de:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2e2:	e7f1      	b.n	800a2c8 <__kernel_rem_pio2f+0x450>
 800a2e4:	ed73 7a01 	vldmdb	r3!, {s15}
 800a2e8:	3a01      	subs	r2, #1
 800a2ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a2ee:	e7d2      	b.n	800a296 <__kernel_rem_pio2f+0x41e>
 800a2f0:	eef0 7a47 	vmov.f32	s15, s14
 800a2f4:	e7d4      	b.n	800a2a0 <__kernel_rem_pio2f+0x428>
 800a2f6:	ecb2 7a01 	vldmia	r2!, {s14}
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a300:	e7d6      	b.n	800a2b0 <__kernel_rem_pio2f+0x438>
 800a302:	edd1 7a00 	vldr	s15, [r1]
 800a306:	edd1 6a01 	vldr	s13, [r1, #4]
 800a30a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a30e:	3801      	subs	r0, #1
 800a310:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a314:	ed81 7a00 	vstr	s14, [r1]
 800a318:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a31c:	edc1 7a01 	vstr	s15, [r1, #4]
 800a320:	e799      	b.n	800a256 <__kernel_rem_pio2f+0x3de>
 800a322:	edd2 7a00 	vldr	s15, [r2]
 800a326:	edd2 6a01 	vldr	s13, [r2, #4]
 800a32a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a32e:	3901      	subs	r1, #1
 800a330:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a334:	ed82 7a00 	vstr	s14, [r2]
 800a338:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a33c:	edc2 7a01 	vstr	s15, [r2, #4]
 800a340:	e78e      	b.n	800a260 <__kernel_rem_pio2f+0x3e8>
 800a342:	ed33 7a01 	vldmdb	r3!, {s14}
 800a346:	3c01      	subs	r4, #1
 800a348:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a34c:	e78f      	b.n	800a26e <__kernel_rem_pio2f+0x3f6>
 800a34e:	eef1 6a66 	vneg.f32	s13, s13
 800a352:	eeb1 7a47 	vneg.f32	s14, s14
 800a356:	edc8 6a00 	vstr	s13, [r8]
 800a35a:	ed88 7a01 	vstr	s14, [r8, #4]
 800a35e:	eef1 7a67 	vneg.f32	s15, s15
 800a362:	e790      	b.n	800a286 <__kernel_rem_pio2f+0x40e>

0800a364 <__kernel_sinf>:
 800a364:	ee10 3a10 	vmov	r3, s0
 800a368:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a36c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a370:	da04      	bge.n	800a37c <__kernel_sinf+0x18>
 800a372:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a376:	ee17 3a90 	vmov	r3, s15
 800a37a:	b35b      	cbz	r3, 800a3d4 <__kernel_sinf+0x70>
 800a37c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a380:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a3d8 <__kernel_sinf+0x74>
 800a384:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800a3dc <__kernel_sinf+0x78>
 800a388:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a38c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800a3e0 <__kernel_sinf+0x7c>
 800a390:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a394:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800a3e4 <__kernel_sinf+0x80>
 800a398:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a39c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800a3e8 <__kernel_sinf+0x84>
 800a3a0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800a3a4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a3a8:	b930      	cbnz	r0, 800a3b8 <__kernel_sinf+0x54>
 800a3aa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800a3ec <__kernel_sinf+0x88>
 800a3ae:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a3b2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800a3b6:	4770      	bx	lr
 800a3b8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a3bc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a3c0:	eee0 7a86 	vfma.f32	s15, s1, s12
 800a3c4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800a3c8:	eddf 7a09 	vldr	s15, [pc, #36]	; 800a3f0 <__kernel_sinf+0x8c>
 800a3cc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800a3d0:	ee30 0a60 	vsub.f32	s0, s0, s1
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	2f2ec9d3 	.word	0x2f2ec9d3
 800a3dc:	b2d72f34 	.word	0xb2d72f34
 800a3e0:	3638ef1b 	.word	0x3638ef1b
 800a3e4:	b9500d01 	.word	0xb9500d01
 800a3e8:	3c088889 	.word	0x3c088889
 800a3ec:	be2aaaab 	.word	0xbe2aaaab
 800a3f0:	3e2aaaab 	.word	0x3e2aaaab

0800a3f4 <fabsf>:
 800a3f4:	ee10 3a10 	vmov	r3, s0
 800a3f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3fc:	ee00 3a10 	vmov	s0, r3
 800a400:	4770      	bx	lr
	...

0800a404 <floorf>:
 800a404:	ee10 3a10 	vmov	r3, s0
 800a408:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a40c:	3a7f      	subs	r2, #127	; 0x7f
 800a40e:	2a16      	cmp	r2, #22
 800a410:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a414:	dc2a      	bgt.n	800a46c <floorf+0x68>
 800a416:	2a00      	cmp	r2, #0
 800a418:	da11      	bge.n	800a43e <floorf+0x3a>
 800a41a:	eddf 7a18 	vldr	s15, [pc, #96]	; 800a47c <floorf+0x78>
 800a41e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a422:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a42a:	dd05      	ble.n	800a438 <floorf+0x34>
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	da23      	bge.n	800a478 <floorf+0x74>
 800a430:	4a13      	ldr	r2, [pc, #76]	; (800a480 <floorf+0x7c>)
 800a432:	2900      	cmp	r1, #0
 800a434:	bf18      	it	ne
 800a436:	4613      	movne	r3, r2
 800a438:	ee00 3a10 	vmov	s0, r3
 800a43c:	4770      	bx	lr
 800a43e:	4911      	ldr	r1, [pc, #68]	; (800a484 <floorf+0x80>)
 800a440:	4111      	asrs	r1, r2
 800a442:	420b      	tst	r3, r1
 800a444:	d0fa      	beq.n	800a43c <floorf+0x38>
 800a446:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800a47c <floorf+0x78>
 800a44a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a44e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a456:	ddef      	ble.n	800a438 <floorf+0x34>
 800a458:	2b00      	cmp	r3, #0
 800a45a:	bfbe      	ittt	lt
 800a45c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800a460:	fa40 f202 	asrlt.w	r2, r0, r2
 800a464:	189b      	addlt	r3, r3, r2
 800a466:	ea23 0301 	bic.w	r3, r3, r1
 800a46a:	e7e5      	b.n	800a438 <floorf+0x34>
 800a46c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a470:	d3e4      	bcc.n	800a43c <floorf+0x38>
 800a472:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a476:	4770      	bx	lr
 800a478:	2300      	movs	r3, #0
 800a47a:	e7dd      	b.n	800a438 <floorf+0x34>
 800a47c:	7149f2ca 	.word	0x7149f2ca
 800a480:	bf800000 	.word	0xbf800000
 800a484:	007fffff 	.word	0x007fffff

0800a488 <scalbnf>:
 800a488:	ee10 3a10 	vmov	r3, s0
 800a48c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800a490:	d025      	beq.n	800a4de <scalbnf+0x56>
 800a492:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a496:	d302      	bcc.n	800a49e <scalbnf+0x16>
 800a498:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a49c:	4770      	bx	lr
 800a49e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800a4a2:	d122      	bne.n	800a4ea <scalbnf+0x62>
 800a4a4:	4b2a      	ldr	r3, [pc, #168]	; (800a550 <scalbnf+0xc8>)
 800a4a6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800a554 <scalbnf+0xcc>
 800a4aa:	4298      	cmp	r0, r3
 800a4ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a4b0:	db16      	blt.n	800a4e0 <scalbnf+0x58>
 800a4b2:	ee10 3a10 	vmov	r3, s0
 800a4b6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a4ba:	3a19      	subs	r2, #25
 800a4bc:	4402      	add	r2, r0
 800a4be:	2afe      	cmp	r2, #254	; 0xfe
 800a4c0:	dd15      	ble.n	800a4ee <scalbnf+0x66>
 800a4c2:	ee10 3a10 	vmov	r3, s0
 800a4c6:	eddf 7a24 	vldr	s15, [pc, #144]	; 800a558 <scalbnf+0xd0>
 800a4ca:	eddf 6a24 	vldr	s13, [pc, #144]	; 800a55c <scalbnf+0xd4>
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	eeb0 7a67 	vmov.f32	s14, s15
 800a4d4:	bfb8      	it	lt
 800a4d6:	eef0 7a66 	vmovlt.f32	s15, s13
 800a4da:	ee27 0a27 	vmul.f32	s0, s14, s15
 800a4de:	4770      	bx	lr
 800a4e0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a560 <scalbnf+0xd8>
 800a4e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a4e8:	4770      	bx	lr
 800a4ea:	0dd2      	lsrs	r2, r2, #23
 800a4ec:	e7e6      	b.n	800a4bc <scalbnf+0x34>
 800a4ee:	2a00      	cmp	r2, #0
 800a4f0:	dd06      	ble.n	800a500 <scalbnf+0x78>
 800a4f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a4f6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a4fa:	ee00 3a10 	vmov	s0, r3
 800a4fe:	4770      	bx	lr
 800a500:	f112 0f16 	cmn.w	r2, #22
 800a504:	da1a      	bge.n	800a53c <scalbnf+0xb4>
 800a506:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a50a:	4298      	cmp	r0, r3
 800a50c:	ee10 3a10 	vmov	r3, s0
 800a510:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a514:	dd0a      	ble.n	800a52c <scalbnf+0xa4>
 800a516:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800a558 <scalbnf+0xd0>
 800a51a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800a55c <scalbnf+0xd4>
 800a51e:	eef0 7a40 	vmov.f32	s15, s0
 800a522:	2b00      	cmp	r3, #0
 800a524:	bf18      	it	ne
 800a526:	eeb0 0a47 	vmovne.f32	s0, s14
 800a52a:	e7db      	b.n	800a4e4 <scalbnf+0x5c>
 800a52c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800a560 <scalbnf+0xd8>
 800a530:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a564 <scalbnf+0xdc>
 800a534:	eef0 7a40 	vmov.f32	s15, s0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	e7f3      	b.n	800a524 <scalbnf+0x9c>
 800a53c:	3219      	adds	r2, #25
 800a53e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a542:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a546:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a568 <scalbnf+0xe0>
 800a54a:	ee07 3a10 	vmov	s14, r3
 800a54e:	e7c4      	b.n	800a4da <scalbnf+0x52>
 800a550:	ffff3cb0 	.word	0xffff3cb0
 800a554:	4c000000 	.word	0x4c000000
 800a558:	7149f2ca 	.word	0x7149f2ca
 800a55c:	f149f2ca 	.word	0xf149f2ca
 800a560:	0da24260 	.word	0x0da24260
 800a564:	8da24260 	.word	0x8da24260
 800a568:	33000000 	.word	0x33000000

0800a56c <_init>:
 800a56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a56e:	bf00      	nop
 800a570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a572:	bc08      	pop	{r3}
 800a574:	469e      	mov	lr, r3
 800a576:	4770      	bx	lr

0800a578 <_fini>:
 800a578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57a:	bf00      	nop
 800a57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a57e:	bc08      	pop	{r3}
 800a580:	469e      	mov	lr, r3
 800a582:	4770      	bx	lr
