
DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050e8  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  080052b0  080052b0  000152b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056a0  080056a0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080056a0  080056a0  000156a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056a8  080056a8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056a8  080056a8  000156a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056ac  080056ac  000156ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080056b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000010  080056c0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  080056c0  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013127  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a0d  00000000  00000000  00033167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00035b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e10  00000000  00000000  00036ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000274f5  00000000  00000000  000378d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001446e  00000000  00000000  0005edc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f25e7  00000000  00000000  00073233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016581a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040b4  00000000  00000000  0016586c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005298 	.word	0x08005298

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08005298 	.word	0x08005298

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	; 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	; 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2f>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007dc:	bf24      	itt	cs
 80007de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007e6:	d90d      	bls.n	8000804 <__aeabi_d2f+0x30>
 80007e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007fc:	bf08      	it	eq
 80007fe:	f020 0001 	biceq.w	r0, r0, #1
 8000802:	4770      	bx	lr
 8000804:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000808:	d121      	bne.n	800084e <__aeabi_d2f+0x7a>
 800080a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800080e:	bfbc      	itt	lt
 8000810:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000814:	4770      	bxlt	lr
 8000816:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800081a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800081e:	f1c2 0218 	rsb	r2, r2, #24
 8000822:	f1c2 0c20 	rsb	ip, r2, #32
 8000826:	fa10 f30c 	lsls.w	r3, r0, ip
 800082a:	fa20 f002 	lsr.w	r0, r0, r2
 800082e:	bf18      	it	ne
 8000830:	f040 0001 	orrne.w	r0, r0, #1
 8000834:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000838:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800083c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000840:	ea40 000c 	orr.w	r0, r0, ip
 8000844:	fa23 f302 	lsr.w	r3, r3, r2
 8000848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800084c:	e7cc      	b.n	80007e8 <__aeabi_d2f+0x14>
 800084e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000852:	d107      	bne.n	8000864 <__aeabi_d2f+0x90>
 8000854:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000858:	bf1e      	ittt	ne
 800085a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800085e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000862:	4770      	bxne	lr
 8000864:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000868:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800086c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop

08000874 <__aeabi_uldivmod>:
 8000874:	b953      	cbnz	r3, 800088c <__aeabi_uldivmod+0x18>
 8000876:	b94a      	cbnz	r2, 800088c <__aeabi_uldivmod+0x18>
 8000878:	2900      	cmp	r1, #0
 800087a:	bf08      	it	eq
 800087c:	2800      	cmpeq	r0, #0
 800087e:	bf1c      	itt	ne
 8000880:	f04f 31ff 	movne.w	r1, #4294967295
 8000884:	f04f 30ff 	movne.w	r0, #4294967295
 8000888:	f000 b974 	b.w	8000b74 <__aeabi_idiv0>
 800088c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000890:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000894:	f000 f806 	bl	80008a4 <__udivmoddi4>
 8000898:	f8dd e004 	ldr.w	lr, [sp, #4]
 800089c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr

080008a4 <__udivmoddi4>:
 80008a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a8:	9d08      	ldr	r5, [sp, #32]
 80008aa:	4604      	mov	r4, r0
 80008ac:	468e      	mov	lr, r1
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d14d      	bne.n	800094e <__udivmoddi4+0xaa>
 80008b2:	428a      	cmp	r2, r1
 80008b4:	4694      	mov	ip, r2
 80008b6:	d969      	bls.n	800098c <__udivmoddi4+0xe8>
 80008b8:	fab2 f282 	clz	r2, r2
 80008bc:	b152      	cbz	r2, 80008d4 <__udivmoddi4+0x30>
 80008be:	fa01 f302 	lsl.w	r3, r1, r2
 80008c2:	f1c2 0120 	rsb	r1, r2, #32
 80008c6:	fa20 f101 	lsr.w	r1, r0, r1
 80008ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ce:	ea41 0e03 	orr.w	lr, r1, r3
 80008d2:	4094      	lsls	r4, r2
 80008d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008d8:	0c21      	lsrs	r1, r4, #16
 80008da:	fbbe f6f8 	udiv	r6, lr, r8
 80008de:	fa1f f78c 	uxth.w	r7, ip
 80008e2:	fb08 e316 	mls	r3, r8, r6, lr
 80008e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ea:	fb06 f107 	mul.w	r1, r6, r7
 80008ee:	4299      	cmp	r1, r3
 80008f0:	d90a      	bls.n	8000908 <__udivmoddi4+0x64>
 80008f2:	eb1c 0303 	adds.w	r3, ip, r3
 80008f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008fa:	f080 811f 	bcs.w	8000b3c <__udivmoddi4+0x298>
 80008fe:	4299      	cmp	r1, r3
 8000900:	f240 811c 	bls.w	8000b3c <__udivmoddi4+0x298>
 8000904:	3e02      	subs	r6, #2
 8000906:	4463      	add	r3, ip
 8000908:	1a5b      	subs	r3, r3, r1
 800090a:	b2a4      	uxth	r4, r4
 800090c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000910:	fb08 3310 	mls	r3, r8, r0, r3
 8000914:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000918:	fb00 f707 	mul.w	r7, r0, r7
 800091c:	42a7      	cmp	r7, r4
 800091e:	d90a      	bls.n	8000936 <__udivmoddi4+0x92>
 8000920:	eb1c 0404 	adds.w	r4, ip, r4
 8000924:	f100 33ff 	add.w	r3, r0, #4294967295
 8000928:	f080 810a 	bcs.w	8000b40 <__udivmoddi4+0x29c>
 800092c:	42a7      	cmp	r7, r4
 800092e:	f240 8107 	bls.w	8000b40 <__udivmoddi4+0x29c>
 8000932:	4464      	add	r4, ip
 8000934:	3802      	subs	r0, #2
 8000936:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800093a:	1be4      	subs	r4, r4, r7
 800093c:	2600      	movs	r6, #0
 800093e:	b11d      	cbz	r5, 8000948 <__udivmoddi4+0xa4>
 8000940:	40d4      	lsrs	r4, r2
 8000942:	2300      	movs	r3, #0
 8000944:	e9c5 4300 	strd	r4, r3, [r5]
 8000948:	4631      	mov	r1, r6
 800094a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094e:	428b      	cmp	r3, r1
 8000950:	d909      	bls.n	8000966 <__udivmoddi4+0xc2>
 8000952:	2d00      	cmp	r5, #0
 8000954:	f000 80ef 	beq.w	8000b36 <__udivmoddi4+0x292>
 8000958:	2600      	movs	r6, #0
 800095a:	e9c5 0100 	strd	r0, r1, [r5]
 800095e:	4630      	mov	r0, r6
 8000960:	4631      	mov	r1, r6
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	fab3 f683 	clz	r6, r3
 800096a:	2e00      	cmp	r6, #0
 800096c:	d14a      	bne.n	8000a04 <__udivmoddi4+0x160>
 800096e:	428b      	cmp	r3, r1
 8000970:	d302      	bcc.n	8000978 <__udivmoddi4+0xd4>
 8000972:	4282      	cmp	r2, r0
 8000974:	f200 80f9 	bhi.w	8000b6a <__udivmoddi4+0x2c6>
 8000978:	1a84      	subs	r4, r0, r2
 800097a:	eb61 0303 	sbc.w	r3, r1, r3
 800097e:	2001      	movs	r0, #1
 8000980:	469e      	mov	lr, r3
 8000982:	2d00      	cmp	r5, #0
 8000984:	d0e0      	beq.n	8000948 <__udivmoddi4+0xa4>
 8000986:	e9c5 4e00 	strd	r4, lr, [r5]
 800098a:	e7dd      	b.n	8000948 <__udivmoddi4+0xa4>
 800098c:	b902      	cbnz	r2, 8000990 <__udivmoddi4+0xec>
 800098e:	deff      	udf	#255	; 0xff
 8000990:	fab2 f282 	clz	r2, r2
 8000994:	2a00      	cmp	r2, #0
 8000996:	f040 8092 	bne.w	8000abe <__udivmoddi4+0x21a>
 800099a:	eba1 010c 	sub.w	r1, r1, ip
 800099e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a2:	fa1f fe8c 	uxth.w	lr, ip
 80009a6:	2601      	movs	r6, #1
 80009a8:	0c20      	lsrs	r0, r4, #16
 80009aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80009ae:	fb07 1113 	mls	r1, r7, r3, r1
 80009b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009b6:	fb0e f003 	mul.w	r0, lr, r3
 80009ba:	4288      	cmp	r0, r1
 80009bc:	d908      	bls.n	80009d0 <__udivmoddi4+0x12c>
 80009be:	eb1c 0101 	adds.w	r1, ip, r1
 80009c2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0x12a>
 80009c8:	4288      	cmp	r0, r1
 80009ca:	f200 80cb 	bhi.w	8000b64 <__udivmoddi4+0x2c0>
 80009ce:	4643      	mov	r3, r8
 80009d0:	1a09      	subs	r1, r1, r0
 80009d2:	b2a4      	uxth	r4, r4
 80009d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d8:	fb07 1110 	mls	r1, r7, r0, r1
 80009dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009e0:	fb0e fe00 	mul.w	lr, lr, r0
 80009e4:	45a6      	cmp	lr, r4
 80009e6:	d908      	bls.n	80009fa <__udivmoddi4+0x156>
 80009e8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80009f0:	d202      	bcs.n	80009f8 <__udivmoddi4+0x154>
 80009f2:	45a6      	cmp	lr, r4
 80009f4:	f200 80bb 	bhi.w	8000b6e <__udivmoddi4+0x2ca>
 80009f8:	4608      	mov	r0, r1
 80009fa:	eba4 040e 	sub.w	r4, r4, lr
 80009fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a02:	e79c      	b.n	800093e <__udivmoddi4+0x9a>
 8000a04:	f1c6 0720 	rsb	r7, r6, #32
 8000a08:	40b3      	lsls	r3, r6
 8000a0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a12:	fa20 f407 	lsr.w	r4, r0, r7
 8000a16:	fa01 f306 	lsl.w	r3, r1, r6
 8000a1a:	431c      	orrs	r4, r3
 8000a1c:	40f9      	lsrs	r1, r7
 8000a1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a22:	fa00 f306 	lsl.w	r3, r0, r6
 8000a26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a2a:	0c20      	lsrs	r0, r4, #16
 8000a2c:	fa1f fe8c 	uxth.w	lr, ip
 8000a30:	fb09 1118 	mls	r1, r9, r8, r1
 8000a34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a38:	fb08 f00e 	mul.w	r0, r8, lr
 8000a3c:	4288      	cmp	r0, r1
 8000a3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a42:	d90b      	bls.n	8000a5c <__udivmoddi4+0x1b8>
 8000a44:	eb1c 0101 	adds.w	r1, ip, r1
 8000a48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a4c:	f080 8088 	bcs.w	8000b60 <__udivmoddi4+0x2bc>
 8000a50:	4288      	cmp	r0, r1
 8000a52:	f240 8085 	bls.w	8000b60 <__udivmoddi4+0x2bc>
 8000a56:	f1a8 0802 	sub.w	r8, r8, #2
 8000a5a:	4461      	add	r1, ip
 8000a5c:	1a09      	subs	r1, r1, r0
 8000a5e:	b2a4      	uxth	r4, r4
 8000a60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a64:	fb09 1110 	mls	r1, r9, r0, r1
 8000a68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a70:	458e      	cmp	lr, r1
 8000a72:	d908      	bls.n	8000a86 <__udivmoddi4+0x1e2>
 8000a74:	eb1c 0101 	adds.w	r1, ip, r1
 8000a78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a7c:	d26c      	bcs.n	8000b58 <__udivmoddi4+0x2b4>
 8000a7e:	458e      	cmp	lr, r1
 8000a80:	d96a      	bls.n	8000b58 <__udivmoddi4+0x2b4>
 8000a82:	3802      	subs	r0, #2
 8000a84:	4461      	add	r1, ip
 8000a86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a8e:	eba1 010e 	sub.w	r1, r1, lr
 8000a92:	42a1      	cmp	r1, r4
 8000a94:	46c8      	mov	r8, r9
 8000a96:	46a6      	mov	lr, r4
 8000a98:	d356      	bcc.n	8000b48 <__udivmoddi4+0x2a4>
 8000a9a:	d053      	beq.n	8000b44 <__udivmoddi4+0x2a0>
 8000a9c:	b15d      	cbz	r5, 8000ab6 <__udivmoddi4+0x212>
 8000a9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000aa2:	eb61 010e 	sbc.w	r1, r1, lr
 8000aa6:	fa01 f707 	lsl.w	r7, r1, r7
 8000aaa:	fa22 f306 	lsr.w	r3, r2, r6
 8000aae:	40f1      	lsrs	r1, r6
 8000ab0:	431f      	orrs	r7, r3
 8000ab2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ab6:	2600      	movs	r6, #0
 8000ab8:	4631      	mov	r1, r6
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	f1c2 0320 	rsb	r3, r2, #32
 8000ac2:	40d8      	lsrs	r0, r3
 8000ac4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac8:	fa21 f303 	lsr.w	r3, r1, r3
 8000acc:	4091      	lsls	r1, r2
 8000ace:	4301      	orrs	r1, r0
 8000ad0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad4:	fa1f fe8c 	uxth.w	lr, ip
 8000ad8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000adc:	fb07 3610 	mls	r6, r7, r0, r3
 8000ae0:	0c0b      	lsrs	r3, r1, #16
 8000ae2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ae6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aea:	429e      	cmp	r6, r3
 8000aec:	fa04 f402 	lsl.w	r4, r4, r2
 8000af0:	d908      	bls.n	8000b04 <__udivmoddi4+0x260>
 8000af2:	eb1c 0303 	adds.w	r3, ip, r3
 8000af6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000afa:	d22f      	bcs.n	8000b5c <__udivmoddi4+0x2b8>
 8000afc:	429e      	cmp	r6, r3
 8000afe:	d92d      	bls.n	8000b5c <__udivmoddi4+0x2b8>
 8000b00:	3802      	subs	r0, #2
 8000b02:	4463      	add	r3, ip
 8000b04:	1b9b      	subs	r3, r3, r6
 8000b06:	b289      	uxth	r1, r1
 8000b08:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b0c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b14:	fb06 f30e 	mul.w	r3, r6, lr
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	d908      	bls.n	8000b2e <__udivmoddi4+0x28a>
 8000b1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b20:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b24:	d216      	bcs.n	8000b54 <__udivmoddi4+0x2b0>
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d914      	bls.n	8000b54 <__udivmoddi4+0x2b0>
 8000b2a:	3e02      	subs	r6, #2
 8000b2c:	4461      	add	r1, ip
 8000b2e:	1ac9      	subs	r1, r1, r3
 8000b30:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b34:	e738      	b.n	80009a8 <__udivmoddi4+0x104>
 8000b36:	462e      	mov	r6, r5
 8000b38:	4628      	mov	r0, r5
 8000b3a:	e705      	b.n	8000948 <__udivmoddi4+0xa4>
 8000b3c:	4606      	mov	r6, r0
 8000b3e:	e6e3      	b.n	8000908 <__udivmoddi4+0x64>
 8000b40:	4618      	mov	r0, r3
 8000b42:	e6f8      	b.n	8000936 <__udivmoddi4+0x92>
 8000b44:	454b      	cmp	r3, r9
 8000b46:	d2a9      	bcs.n	8000a9c <__udivmoddi4+0x1f8>
 8000b48:	ebb9 0802 	subs.w	r8, r9, r2
 8000b4c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b50:	3801      	subs	r0, #1
 8000b52:	e7a3      	b.n	8000a9c <__udivmoddi4+0x1f8>
 8000b54:	4646      	mov	r6, r8
 8000b56:	e7ea      	b.n	8000b2e <__udivmoddi4+0x28a>
 8000b58:	4620      	mov	r0, r4
 8000b5a:	e794      	b.n	8000a86 <__udivmoddi4+0x1e2>
 8000b5c:	4640      	mov	r0, r8
 8000b5e:	e7d1      	b.n	8000b04 <__udivmoddi4+0x260>
 8000b60:	46d0      	mov	r8, sl
 8000b62:	e77b      	b.n	8000a5c <__udivmoddi4+0x1b8>
 8000b64:	3b02      	subs	r3, #2
 8000b66:	4461      	add	r1, ip
 8000b68:	e732      	b.n	80009d0 <__udivmoddi4+0x12c>
 8000b6a:	4630      	mov	r0, r6
 8000b6c:	e709      	b.n	8000982 <__udivmoddi4+0xde>
 8000b6e:	4464      	add	r4, ip
 8000b70:	3802      	subs	r0, #2
 8000b72:	e742      	b.n	80009fa <__udivmoddi4+0x156>

08000b74 <__aeabi_idiv0>:
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_DAC_Init+0x4c>)
 8000b88:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <MX_DAC_Init+0x50>)
 8000b8a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <MX_DAC_Init+0x4c>)
 8000b8e:	f000 fdda 	bl	8001746 <HAL_DAC_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000b98:	f000 fab8 	bl	800110c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000b9c:	2324      	movs	r3, #36	; 0x24
 8000b9e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4806      	ldr	r0, [pc, #24]	; (8000bc4 <MX_DAC_Init+0x4c>)
 8000bac:	f000 fee0 	bl	8001970 <HAL_DAC_ConfigChannel>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000bb6:	f000 faa9 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2000002c 	.word	0x2000002c
 8000bc8:	40007400 	.word	0x40007400

08000bcc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a31      	ldr	r2, [pc, #196]	; (8000cb0 <HAL_DAC_MspInit+0xe4>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d15c      	bne.n	8000ca8 <HAL_DAC_MspInit+0xdc>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000bee:	4b31      	ldr	r3, [pc, #196]	; (8000cb4 <HAL_DAC_MspInit+0xe8>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	4a30      	ldr	r2, [pc, #192]	; (8000cb4 <HAL_DAC_MspInit+0xe8>)
 8000bf4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfa:	4b2e      	ldr	r3, [pc, #184]	; (8000cb4 <HAL_DAC_MspInit+0xe8>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b2b      	ldr	r3, [pc, #172]	; (8000cb4 <HAL_DAC_MspInit+0xe8>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a2a      	ldr	r2, [pc, #168]	; (8000cb4 <HAL_DAC_MspInit+0xe8>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <HAL_DAC_MspInit+0xe8>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c1e:	2310      	movs	r3, #16
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c22:	2303      	movs	r3, #3
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4821      	ldr	r0, [pc, #132]	; (8000cb8 <HAL_DAC_MspInit+0xec>)
 8000c32:	f001 f9e1 	bl	8001ff8 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <HAL_DAC_MspInit+0xf0>)
 8000c38:	4a21      	ldr	r2, [pc, #132]	; (8000cc0 <HAL_DAC_MspInit+0xf4>)
 8000c3a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <HAL_DAC_MspInit+0xf0>)
 8000c3e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000c42:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c44:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <HAL_DAC_MspInit+0xf0>)
 8000c46:	2240      	movs	r2, #64	; 0x40
 8000c48:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <HAL_DAC_MspInit+0xf0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000c50:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <HAL_DAC_MspInit+0xf0>)
 8000c52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c56:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c58:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <HAL_DAC_MspInit+0xf0>)
 8000c5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c5e:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <HAL_DAC_MspInit+0xf0>)
 8000c62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c66:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <HAL_DAC_MspInit+0xf0>)
 8000c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c6e:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_DAC_MspInit+0xf0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <HAL_DAC_MspInit+0xf0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000c7c:	480f      	ldr	r0, [pc, #60]	; (8000cbc <HAL_DAC_MspInit+0xf0>)
 8000c7e:	f000 fed1 	bl	8001a24 <HAL_DMA_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_DAC_MspInit+0xc0>
    {
      Error_Handler();
 8000c88:	f000 fa40 	bl	800110c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <HAL_DAC_MspInit+0xf0>)
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_DAC_MspInit+0xf0>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2036      	movs	r0, #54	; 0x36
 8000c9e:	f000 fd1c 	bl	80016da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ca2:	2036      	movs	r0, #54	; 0x36
 8000ca4:	f000 fd35 	bl	8001712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000ca8:	bf00      	nop
 8000caa:	3728      	adds	r7, #40	; 0x28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40007400 	.word	0x40007400
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000
 8000cbc:	20000040 	.word	0x20000040
 8000cc0:	40026088 	.word	0x40026088

08000cc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_DMA_Init+0x38>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <MX_DMA_Init+0x38>)
 8000cd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_DMA_Init+0x38>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2010      	movs	r0, #16
 8000ce8:	f000 fcf7 	bl	80016da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000cec:	2010      	movs	r0, #16
 8000cee:	f000 fd10 	bl	8001712 <HAL_NVIC_EnableIRQ>

}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800

08000d00 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	4b77      	ldr	r3, [pc, #476]	; (8000ef4 <MX_GPIO_Init+0x1f4>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a76      	ldr	r2, [pc, #472]	; (8000ef4 <MX_GPIO_Init+0x1f4>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b74      	ldr	r3, [pc, #464]	; (8000ef4 <MX_GPIO_Init+0x1f4>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0304 	and.w	r3, r3, #4
 8000d2a:	61bb      	str	r3, [r7, #24]
 8000d2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d2e:	4b71      	ldr	r3, [pc, #452]	; (8000ef4 <MX_GPIO_Init+0x1f4>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a70      	ldr	r2, [pc, #448]	; (8000ef4 <MX_GPIO_Init+0x1f4>)
 8000d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b6e      	ldr	r3, [pc, #440]	; (8000ef4 <MX_GPIO_Init+0x1f4>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b6b      	ldr	r3, [pc, #428]	; (8000ef4 <MX_GPIO_Init+0x1f4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a6a      	ldr	r2, [pc, #424]	; (8000ef4 <MX_GPIO_Init+0x1f4>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b68      	ldr	r3, [pc, #416]	; (8000ef4 <MX_GPIO_Init+0x1f4>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	4b65      	ldr	r3, [pc, #404]	; (8000ef4 <MX_GPIO_Init+0x1f4>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a64      	ldr	r2, [pc, #400]	; (8000ef4 <MX_GPIO_Init+0x1f4>)
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b62      	ldr	r3, [pc, #392]	; (8000ef4 <MX_GPIO_Init+0x1f4>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d76:	4b5f      	ldr	r3, [pc, #380]	; (8000ef4 <MX_GPIO_Init+0x1f4>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a5e      	ldr	r2, [pc, #376]	; (8000ef4 <MX_GPIO_Init+0x1f4>)
 8000d7c:	f043 0308 	orr.w	r3, r3, #8
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b5c      	ldr	r3, [pc, #368]	; (8000ef4 <MX_GPIO_Init+0x1f4>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0308 	and.w	r3, r3, #8
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d8e:	4b59      	ldr	r3, [pc, #356]	; (8000ef4 <MX_GPIO_Init+0x1f4>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a58      	ldr	r2, [pc, #352]	; (8000ef4 <MX_GPIO_Init+0x1f4>)
 8000d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b56      	ldr	r3, [pc, #344]	; (8000ef4 <MX_GPIO_Init+0x1f4>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000dac:	4852      	ldr	r0, [pc, #328]	; (8000ef8 <MX_GPIO_Init+0x1f8>)
 8000dae:	f001 facf 	bl	8002350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2140      	movs	r1, #64	; 0x40
 8000db6:	4851      	ldr	r0, [pc, #324]	; (8000efc <MX_GPIO_Init+0x1fc>)
 8000db8:	f001 faca 	bl	8002350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000dbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	484b      	ldr	r0, [pc, #300]	; (8000f00 <MX_GPIO_Init+0x200>)
 8000dd4:	f001 f910 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dd8:	2332      	movs	r3, #50	; 0x32
 8000dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000de8:	230b      	movs	r3, #11
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	4619      	mov	r1, r3
 8000df2:	4843      	ldr	r0, [pc, #268]	; (8000f00 <MX_GPIO_Init+0x200>)
 8000df4:	f001 f900 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000df8:	2386      	movs	r3, #134	; 0x86
 8000dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e04:	2303      	movs	r3, #3
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e08:	230b      	movs	r3, #11
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	4619      	mov	r1, r3
 8000e12:	483c      	ldr	r0, [pc, #240]	; (8000f04 <MX_GPIO_Init+0x204>)
 8000e14:	f001 f8f0 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e18:	f244 0381 	movw	r3, #16513	; 0x4081
 8000e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4831      	ldr	r0, [pc, #196]	; (8000ef8 <MX_GPIO_Init+0x1f8>)
 8000e32:	f001 f8e1 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e48:	230b      	movs	r3, #11
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	4619      	mov	r1, r3
 8000e52:	4829      	ldr	r0, [pc, #164]	; (8000ef8 <MX_GPIO_Init+0x1f8>)
 8000e54:	f001 f8d0 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e58:	2340      	movs	r3, #64	; 0x40
 8000e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4823      	ldr	r0, [pc, #140]	; (8000efc <MX_GPIO_Init+0x1fc>)
 8000e70:	f001 f8c2 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	481d      	ldr	r0, [pc, #116]	; (8000efc <MX_GPIO_Init+0x1fc>)
 8000e88:	f001 f8b6 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e8c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e9e:	230a      	movs	r3, #10
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4816      	ldr	r0, [pc, #88]	; (8000f04 <MX_GPIO_Init+0x204>)
 8000eaa:	f001 f8a5 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000eae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4810      	ldr	r0, [pc, #64]	; (8000f04 <MX_GPIO_Init+0x204>)
 8000ec4:	f001 f898 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ec8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eda:	230b      	movs	r3, #11
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_GPIO_Init+0x1fc>)
 8000ee6:	f001 f887 	bl	8001ff8 <HAL_GPIO_Init>

}
 8000eea:	bf00      	nop
 8000eec:	3730      	adds	r7, #48	; 0x30
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	40021800 	.word	0x40021800
 8000f00:	40020800 	.word	0x40020800
 8000f04:	40020000 	.word	0x40020000

08000f08 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f08:	b5b0      	push	{r4, r5, r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Analog output: high priority */
  if(htim->Instance == TIM2)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f18:	d158      	bne.n	8000fcc <HAL_TIM_PeriodElapsedCallback+0xc4>
  {
    y = A*sinf(2*M_PI*f*t) + A0;
 8000f1a:	4b31      	ldr	r3, [pc, #196]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fc01 	bl	8000724 <__aeabi_f2d>
 8000f22:	a32d      	add	r3, pc, #180	; (adr r3, 8000fd8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f28:	f7ff f96e 	bl	8000208 <__aeabi_dmul>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4614      	mov	r4, r2
 8000f32:	461d      	mov	r5, r3
 8000f34:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fbf3 	bl	8000724 <__aeabi_f2d>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	460b      	mov	r3, r1
 8000f42:	4620      	mov	r0, r4
 8000f44:	4629      	mov	r1, r5
 8000f46:	f7ff f95f 	bl	8000208 <__aeabi_dmul>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4610      	mov	r0, r2
 8000f50:	4619      	mov	r1, r3
 8000f52:	f7ff fc3f 	bl	80007d4 <__aeabi_d2f>
 8000f56:	4603      	mov	r3, r0
 8000f58:	ee00 3a10 	vmov	s0, r3
 8000f5c:	f003 fc40 	bl	80047e0 <sinf>
 8000f60:	eeb0 7a40 	vmov.f32	s14, s0
 8000f64:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000f66:	edd3 7a00 	vldr	s15, [r3]
 8000f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f76:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000f78:	edc3 7a00 	vstr	s15, [r3]
    t = (t < T) ? (t+ts) : (0);
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000f7e:	edd3 7a00 	vldr	s15, [r3]
 8000f82:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000ff0 <HAL_TIM_PeriodElapsedCallback+0xe8>
 8000f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8e:	d507      	bpl.n	8000fa0 <HAL_TIM_PeriodElapsedCallback+0x98>
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000f92:	edd3 7a00 	vldr	s15, [r3]
 8000f96:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000ff4 <HAL_TIM_PeriodElapsedCallback+0xec>
 8000f9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f9e:	e001      	b.n	8000fa4 <HAL_TIM_PeriodElapsedCallback+0x9c>
 8000fa0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8000ff8 <HAL_TIM_PeriodElapsedCallback+0xf0>
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000fa6:	edc3 7a00 	vstr	s15, [r3]
    DAC_SetVoltage(&hdac,DAC_CHANNEL_1, y);
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000fac:	edd3 7a00 	vldr	s15, [r3]
 8000fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4811      	ldr	r0, [pc, #68]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000fb8:	f003 fbc8 	bl	800474c <DAC_SetVoltage>
   	out_svw = HAL_DAC_GetValue(&hdac, DAC_CHANNEL_1);
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	480f      	ldr	r0, [pc, #60]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000fc0:	f000 fcbe 	bl	8001940 <HAL_DAC_GetValue>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000fca:	601a      	str	r2, [r3, #0]
  }
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	54442d18 	.word	0x54442d18
 8000fdc:	401921fb 	.word	0x401921fb
 8000fe0:	40a00000 	.word	0x40a00000
 8000fe4:	200000a4 	.word	0x200000a4
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	200000a0 	.word	0x200000a0
 8000ff0:	3e4bc6a8 	.word	0x3e4bc6a8
 8000ff4:	3a83126f 	.word	0x3a83126f
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	2000002c 	.word	0x2000002c
 8001000:	200000a8 	.word	0x200000a8

08001004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001008:	f000 fa2f 	bl	800146a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100c:	f000 f816 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001010:	f7ff fe76 	bl	8000d00 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001014:	f000 f970 	bl	80012f8 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8001018:	f7ff fe54 	bl	8000cc4 <MX_DMA_Init>
  MX_DAC_Init();
 800101c:	f7ff fdac 	bl	8000b78 <MX_DAC_Init>
  MX_TIM2_Init();
 8001020:	f000 f8f8 	bl	8001214 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001024:	4803      	ldr	r0, [pc, #12]	; (8001034 <main+0x30>)
 8001026:	f002 facf 	bl	80035c8 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 800102a:	2100      	movs	r1, #0
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <main+0x34>)
 800102e:	f000 fbac 	bl	800178a <HAL_DAC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001032:	e7fe      	b.n	8001032 <main+0x2e>
 8001034:	200000ac 	.word	0x200000ac
 8001038:	2000002c 	.word	0x2000002c

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b094      	sub	sp, #80	; 0x50
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0320 	add.w	r3, r7, #32
 8001046:	2230      	movs	r2, #48	; 0x30
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f003 fbc0 	bl	80047d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001060:	f001 f990 	bl	8002384 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	4b27      	ldr	r3, [pc, #156]	; (8001104 <SystemClock_Config+0xc8>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	4a26      	ldr	r2, [pc, #152]	; (8001104 <SystemClock_Config+0xc8>)
 800106a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106e:	6413      	str	r3, [r2, #64]	; 0x40
 8001070:	4b24      	ldr	r3, [pc, #144]	; (8001104 <SystemClock_Config+0xc8>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800107c:	4b22      	ldr	r3, [pc, #136]	; (8001108 <SystemClock_Config+0xcc>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001084:	4a20      	ldr	r2, [pc, #128]	; (8001108 <SystemClock_Config+0xcc>)
 8001086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <SystemClock_Config+0xcc>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001098:	2301      	movs	r3, #1
 800109a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800109c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a2:	2302      	movs	r3, #2
 80010a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010ac:	2304      	movs	r3, #4
 80010ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80010b0:	2348      	movs	r3, #72	; 0x48
 80010b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b4:	2302      	movs	r3, #2
 80010b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80010b8:	2303      	movs	r3, #3
 80010ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010bc:	f107 0320 	add.w	r3, r7, #32
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 f96f 	bl	80023a4 <HAL_RCC_OscConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010cc:	f000 f81e 	bl	800110c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d0:	230f      	movs	r3, #15
 80010d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d4:	2302      	movs	r3, #2
 80010d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	2102      	movs	r1, #2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fbfd 	bl	80028ec <HAL_RCC_ClockConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010f8:	f000 f808 	bl	800110c <Error_Handler>
  }
}
 80010fc:	bf00      	nop
 80010fe:	3750      	adds	r7, #80	; 0x50
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40023800 	.word	0x40023800
 8001108:	40007000 	.word	0x40007000

0800110c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001114:	e7fe      	b.n	8001114 <Error_Handler+0x8>
	...

08001118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <HAL_MspInit+0x44>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	4a0e      	ldr	r2, [pc, #56]	; (800115c <HAL_MspInit+0x44>)
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001128:	6413      	str	r3, [r2, #64]	; 0x40
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <HAL_MspInit+0x44>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_MspInit+0x44>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	4a08      	ldr	r2, [pc, #32]	; (800115c <HAL_MspInit+0x44>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001140:	6453      	str	r3, [r2, #68]	; 0x44
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_MspInit+0x44>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800

08001160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <NMI_Handler+0x4>

08001166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116a:	e7fe      	b.n	800116a <HardFault_Handler+0x4>

0800116c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <MemManage_Handler+0x4>

08001172 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001176:	e7fe      	b.n	8001176 <BusFault_Handler+0x4>

08001178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <UsageFault_Handler+0x4>

0800117e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ac:	f000 f99a 	bl	80014e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <DMA1_Stream5_IRQHandler+0x10>)
 80011ba:	f000 fce1 	bl	8001b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000040 	.word	0x20000040

080011c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <TIM2_IRQHandler+0x10>)
 80011ce:	f002 fa73 	bl	80036b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200000ac 	.word	0x200000ac

080011dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <TIM6_DAC_IRQHandler+0x10>)
 80011e2:	f000 fb24 	bl	800182e <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000002c 	.word	0x2000002c

080011f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <SystemInit+0x20>)
 80011f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011fa:	4a05      	ldr	r2, [pc, #20]	; (8001210 <SystemInit+0x20>)
 80011fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121a:	f107 0310 	add.w	r3, r7, #16
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001232:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <MX_TIM2_Init+0x98>)
 8001234:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001238:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <MX_TIM2_Init+0x98>)
 800123c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001240:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_TIM2_Init+0x98>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_TIM2_Init+0x98>)
 800124a:	2209      	movs	r2, #9
 800124c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <MX_TIM2_Init+0x98>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_TIM2_Init+0x98>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800125a:	4814      	ldr	r0, [pc, #80]	; (80012ac <MX_TIM2_Init+0x98>)
 800125c:	f002 f95c 	bl	8003518 <HAL_TIM_Base_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001266:	f7ff ff51 	bl	800110c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	4619      	mov	r1, r3
 8001276:	480d      	ldr	r0, [pc, #52]	; (80012ac <MX_TIM2_Init+0x98>)
 8001278:	f002 fb3e 	bl	80038f8 <HAL_TIM_ConfigClockSource>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001282:	f7ff ff43 	bl	800110c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001286:	2320      	movs	r3, #32
 8001288:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4619      	mov	r1, r3
 8001292:	4806      	ldr	r0, [pc, #24]	; (80012ac <MX_TIM2_Init+0x98>)
 8001294:	f002 fd5c 	bl	8003d50 <HAL_TIMEx_MasterConfigSynchronization>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800129e:	f7ff ff35 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	3720      	adds	r7, #32
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200000ac 	.word	0x200000ac

080012b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c0:	d113      	bne.n	80012ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <HAL_TIM_Base_MspInit+0x44>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <HAL_TIM_Base_MspInit+0x44>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <HAL_TIM_Base_MspInit+0x44>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	201c      	movs	r0, #28
 80012e0:	f000 f9fb 	bl	80016da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012e4:	201c      	movs	r0, #28
 80012e6:	f000 fa14 	bl	8001712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800

080012f8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <MX_USART3_UART_Init+0x58>)
 80012fe:	4a15      	ldr	r2, [pc, #84]	; (8001354 <MX_USART3_UART_Init+0x5c>)
 8001300:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <MX_USART3_UART_Init+0x58>)
 8001304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001308:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_USART3_UART_Init+0x58>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_USART3_UART_Init+0x58>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_USART3_UART_Init+0x58>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_USART3_UART_Init+0x58>)
 800131e:	220c      	movs	r2, #12
 8001320:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <MX_USART3_UART_Init+0x58>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_USART3_UART_Init+0x58>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <MX_USART3_UART_Init+0x58>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_USART3_UART_Init+0x58>)
 8001336:	2200      	movs	r2, #0
 8001338:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_USART3_UART_Init+0x58>)
 800133c:	f002 fdb4 	bl	8003ea8 <HAL_UART_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001346:	f7ff fee1 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200000f8 	.word	0x200000f8
 8001354:	40004800 	.word	0x40004800

08001358 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b0aa      	sub	sp, #168	; 0xa8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	2284      	movs	r2, #132	; 0x84
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f003 fa29 	bl	80047d0 <memset>
  if(uartHandle->Instance==USART3)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a22      	ldr	r2, [pc, #136]	; (800140c <HAL_UART_MspInit+0xb4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d13c      	bne.n	8001402 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800138c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800138e:	2300      	movs	r3, #0
 8001390:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001392:	f107 0310 	add.w	r3, r7, #16
 8001396:	4618      	mov	r0, r3
 8001398:	f001 fcce 	bl	8002d38 <HAL_RCCEx_PeriphCLKConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013a2:	f7ff feb3 	bl	800110c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013a6:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <HAL_UART_MspInit+0xb8>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	4a19      	ldr	r2, [pc, #100]	; (8001410 <HAL_UART_MspInit+0xb8>)
 80013ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b0:	6413      	str	r3, [r2, #64]	; 0x40
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <HAL_UART_MspInit+0xb8>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <HAL_UART_MspInit+0xb8>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a13      	ldr	r2, [pc, #76]	; (8001410 <HAL_UART_MspInit+0xb8>)
 80013c4:	f043 0308 	orr.w	r3, r3, #8
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HAL_UART_MspInit+0xb8>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013f0:	2307      	movs	r3, #7
 80013f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013fa:	4619      	mov	r1, r3
 80013fc:	4805      	ldr	r0, [pc, #20]	; (8001414 <HAL_UART_MspInit+0xbc>)
 80013fe:	f000 fdfb 	bl	8001ff8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001402:	bf00      	nop
 8001404:	37a8      	adds	r7, #168	; 0xa8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40004800 	.word	0x40004800
 8001410:	40023800 	.word	0x40023800
 8001414:	40020c00 	.word	0x40020c00

08001418 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8001418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001450 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800141c:	480d      	ldr	r0, [pc, #52]	; (8001454 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800141e:	490e      	ldr	r1, [pc, #56]	; (8001458 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001420:	4a0e      	ldr	r2, [pc, #56]	; (800145c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001434:	4c0b      	ldr	r4, [pc, #44]	; (8001464 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001442:	f7ff fed5 	bl	80011f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001446:	f003 f99f 	bl	8004788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800144a:	f7ff fddb 	bl	8001004 <main>
  bx  lr    
 800144e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001450:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001458:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800145c:	080056b0 	.word	0x080056b0
  ldr r2, =_sbss
 8001460:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001464:	20000184 	.word	0x20000184

08001468 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001468:	e7fe      	b.n	8001468 <ADC_IRQHandler>

0800146a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146e:	2003      	movs	r0, #3
 8001470:	f000 f928 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001474:	2000      	movs	r0, #0
 8001476:	f000 f805 	bl	8001484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800147a:	f7ff fe4d 	bl	8001118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_InitTick+0x54>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_InitTick+0x58>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149a:	fbb3 f3f1 	udiv	r3, r3, r1
 800149e:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 f943 	bl	800172e <HAL_SYSTICK_Config>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00e      	b.n	80014d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b0f      	cmp	r3, #15
 80014b6:	d80a      	bhi.n	80014ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b8:	2200      	movs	r2, #0
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f000 f90b 	bl	80016da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c4:	4a06      	ldr	r2, [pc, #24]	; (80014e0 <HAL_InitTick+0x5c>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e000      	b.n	80014d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000004 	.word	0x20000004
 80014dc:	2000000c 	.word	0x2000000c
 80014e0:	20000008 	.word	0x20000008

080014e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_IncTick+0x20>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_IncTick+0x24>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <HAL_IncTick+0x24>)
 80014f6:	6013      	str	r3, [r2, #0]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	2000000c 	.word	0x2000000c
 8001508:	20000180 	.word	0x20000180

0800150c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return uwTick;
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <HAL_GetTick+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000180 	.word	0x20000180

08001524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <__NVIC_SetPriorityGrouping+0x40>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001540:	4013      	ands	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 800154e:	4313      	orrs	r3, r2
 8001550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001552:	4a04      	ldr	r2, [pc, #16]	; (8001564 <__NVIC_SetPriorityGrouping+0x40>)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	60d3      	str	r3, [r2, #12]
}
 8001558:	bf00      	nop
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00
 8001568:	05fa0000 	.word	0x05fa0000

0800156c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <__NVIC_GetPriorityGrouping+0x18>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	f003 0307 	and.w	r3, r3, #7
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	2b00      	cmp	r3, #0
 8001598:	db0b      	blt.n	80015b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	f003 021f 	and.w	r2, r3, #31
 80015a0:	4907      	ldr	r1, [pc, #28]	; (80015c0 <__NVIC_EnableIRQ+0x38>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	2001      	movs	r0, #1
 80015aa:	fa00 f202 	lsl.w	r2, r0, r2
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000e100 	.word	0xe000e100

080015c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	db0a      	blt.n	80015ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	490c      	ldr	r1, [pc, #48]	; (8001610 <__NVIC_SetPriority+0x4c>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	0112      	lsls	r2, r2, #4
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	440b      	add	r3, r1
 80015e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ec:	e00a      	b.n	8001604 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4908      	ldr	r1, [pc, #32]	; (8001614 <__NVIC_SetPriority+0x50>)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	3b04      	subs	r3, #4
 80015fc:	0112      	lsls	r2, r2, #4
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	440b      	add	r3, r1
 8001602:	761a      	strb	r2, [r3, #24]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000e100 	.word	0xe000e100
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	; 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f1c3 0307 	rsb	r3, r3, #7
 8001632:	2b04      	cmp	r3, #4
 8001634:	bf28      	it	cs
 8001636:	2304      	movcs	r3, #4
 8001638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3304      	adds	r3, #4
 800163e:	2b06      	cmp	r3, #6
 8001640:	d902      	bls.n	8001648 <NVIC_EncodePriority+0x30>
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3b03      	subs	r3, #3
 8001646:	e000      	b.n	800164a <NVIC_EncodePriority+0x32>
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	f04f 32ff 	mov.w	r2, #4294967295
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43da      	mvns	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	401a      	ands	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001660:	f04f 31ff 	mov.w	r1, #4294967295
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	43d9      	mvns	r1, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	4313      	orrs	r3, r2
         );
}
 8001672:	4618      	mov	r0, r3
 8001674:	3724      	adds	r7, #36	; 0x24
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001690:	d301      	bcc.n	8001696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001692:	2301      	movs	r3, #1
 8001694:	e00f      	b.n	80016b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <SysTick_Config+0x40>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169e:	210f      	movs	r1, #15
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f7ff ff8e 	bl	80015c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <SysTick_Config+0x40>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ae:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <SysTick_Config+0x40>)
 80016b0:	2207      	movs	r2, #7
 80016b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	e000e010 	.word	0xe000e010

080016c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff29 	bl	8001524 <__NVIC_SetPriorityGrouping>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ec:	f7ff ff3e 	bl	800156c <__NVIC_GetPriorityGrouping>
 80016f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	6978      	ldr	r0, [r7, #20]
 80016f8:	f7ff ff8e 	bl	8001618 <NVIC_EncodePriority>
 80016fc:	4602      	mov	r2, r0
 80016fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff5d 	bl	80015c4 <__NVIC_SetPriority>
}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff31 	bl	8001588 <__NVIC_EnableIRQ>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffa2 	bl	8001680 <SysTick_Config>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e014      	b.n	8001782 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	791b      	ldrb	r3, [r3, #4]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d105      	bne.n	800176e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff fa2f 	bl	8000bcc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2202      	movs	r2, #2
 8001772:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	795b      	ldrb	r3, [r3, #5]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d101      	bne.n	80017a0 <HAL_DAC_Start+0x16>
 800179c:	2302      	movs	r3, #2
 800179e:	e040      	b.n	8001822 <HAL_DAC_Start+0x98>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2202      	movs	r2, #2
 80017aa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6819      	ldr	r1, [r3, #0]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	2201      	movs	r2, #1
 80017ba:	409a      	lsls	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10f      	bne.n	80017ea <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80017d4:	2b3c      	cmp	r3, #60	; 0x3c
 80017d6:	d11d      	bne.n	8001814 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0201 	orr.w	r2, r2, #1
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	e014      	b.n	8001814 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	213c      	movs	r1, #60	; 0x3c
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	429a      	cmp	r2, r3
 8001802:	d107      	bne.n	8001814 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0202 	orr.w	r2, r2, #2
 8001812:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001844:	d120      	bne.n	8001888 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001854:	d118      	bne.n	8001888 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2204      	movs	r2, #4
 800185a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	f043 0201 	orr.w	r2, r3, #1
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001870:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001880:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f852 	bl	800192c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001892:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001896:	d120      	bne.n	80018da <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018a6:	d118      	bne.n	80018da <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2204      	movs	r2, #4
 80018ac:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	f043 0202 	orr.w	r2, r3, #2
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80018c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80018d2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f89a 	bl	8001a0e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b087      	sub	sp, #28
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	60f8      	str	r0, [r7, #12]
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d105      	bne.n	800190c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	3308      	adds	r3, #8
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	e004      	b.n	8001916 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	3314      	adds	r3, #20
 8001914:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	461a      	mov	r2, r3
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	371c      	adds	r7, #28
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <HAL_DAC_GetValue>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t result;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  if (Channel == DAC_CHANNEL_1)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d104      	bne.n	800195a <HAL_DAC_GetValue+0x1a>
  {
    result = hdac->Instance->DOR1;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	e003      	b.n	8001962 <HAL_DAC_GetValue+0x22>
  }

  else
  {
    result = hdac->Instance->DOR2;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	60fb      	str	r3, [r7, #12]
  }

  /* Returns the DAC channel data output register value */
  return result;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	795b      	ldrb	r3, [r3, #5]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d101      	bne.n	8001988 <HAL_DAC_ConfigChannel+0x18>
 8001984:	2302      	movs	r3, #2
 8001986:	e03c      	b.n	8001a02 <HAL_DAC_ConfigChannel+0x92>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2201      	movs	r2, #1
 800198c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2202      	movs	r2, #2
 8001992:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	4013      	ands	r3, r2
 80019b0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f003 0310 	and.w	r3, r3, #16
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6819      	ldr	r1, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f003 0310 	and.w	r3, r3, #16
 80019e4:	22c0      	movs	r2, #192	; 0xc0
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	400a      	ands	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2201      	movs	r2, #1
 80019f8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	371c      	adds	r7, #28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a30:	f7ff fd6c 	bl	800150c <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e099      	b.n	8001b74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2202      	movs	r2, #2
 8001a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0201 	bic.w	r2, r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a60:	e00f      	b.n	8001a82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a62:	f7ff fd53 	bl	800150c <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b05      	cmp	r3, #5
 8001a6e:	d908      	bls.n	8001a82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2220      	movs	r2, #32
 8001a74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2203      	movs	r2, #3
 8001a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e078      	b.n	8001b74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1e8      	bne.n	8001a62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	4b38      	ldr	r3, [pc, #224]	; (8001b7c <HAL_DMA_Init+0x158>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d107      	bne.n	8001aec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f023 0307 	bic.w	r3, r3, #7
 8001b02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d117      	bne.n	8001b46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00e      	beq.n	8001b46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f9e9 	bl	8001f00 <DMA_CheckFifoParam>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d008      	beq.n	8001b46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2240      	movs	r2, #64	; 0x40
 8001b38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b42:	2301      	movs	r3, #1
 8001b44:	e016      	b.n	8001b74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f9a0 	bl	8001e94 <DMA_CalcBaseAndBitshift>
 8001b54:	4603      	mov	r3, r0
 8001b56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5c:	223f      	movs	r2, #63	; 0x3f
 8001b5e:	409a      	lsls	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	f010803f 	.word	0xf010803f

08001b80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001b8c:	4b8e      	ldr	r3, [pc, #568]	; (8001dc8 <HAL_DMA_IRQHandler+0x248>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a8e      	ldr	r2, [pc, #568]	; (8001dcc <HAL_DMA_IRQHandler+0x24c>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	0a9b      	lsrs	r3, r3, #10
 8001b98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001baa:	2208      	movs	r2, #8
 8001bac:	409a      	lsls	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d01a      	beq.n	8001bec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d013      	beq.n	8001bec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0204 	bic.w	r2, r2, #4
 8001bd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd8:	2208      	movs	r2, #8
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be4:	f043 0201 	orr.w	r2, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d012      	beq.n	8001c22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00b      	beq.n	8001c22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0e:	2201      	movs	r2, #1
 8001c10:	409a      	lsls	r2, r3
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1a:	f043 0202 	orr.w	r2, r3, #2
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c26:	2204      	movs	r2, #4
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d012      	beq.n	8001c58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00b      	beq.n	8001c58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c44:	2204      	movs	r2, #4
 8001c46:	409a      	lsls	r2, r3
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c50:	f043 0204 	orr.w	r2, r3, #4
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5c:	2210      	movs	r2, #16
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d043      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d03c      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7a:	2210      	movs	r2, #16
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d018      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d108      	bne.n	8001cb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d024      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	4798      	blx	r3
 8001cae:	e01f      	b.n	8001cf0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d01b      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	4798      	blx	r3
 8001cc0:	e016      	b.n	8001cf0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d107      	bne.n	8001ce0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0208 	bic.w	r2, r2, #8
 8001cde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 808f 	beq.w	8001e20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0310 	and.w	r3, r3, #16
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 8087 	beq.w	8001e20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	2220      	movs	r2, #32
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b05      	cmp	r3, #5
 8001d28:	d136      	bne.n	8001d98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0216 	bic.w	r2, r2, #22
 8001d38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695a      	ldr	r2, [r3, #20]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d103      	bne.n	8001d5a <HAL_DMA_IRQHandler+0x1da>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d007      	beq.n	8001d6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0208 	bic.w	r2, r2, #8
 8001d68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6e:	223f      	movs	r2, #63	; 0x3f
 8001d70:	409a      	lsls	r2, r3
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d07e      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	4798      	blx	r3
        }
        return;
 8001d96:	e079      	b.n	8001e8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d01d      	beq.n	8001de2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10d      	bne.n	8001dd0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d031      	beq.n	8001e20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	4798      	blx	r3
 8001dc4:	e02c      	b.n	8001e20 <HAL_DMA_IRQHandler+0x2a0>
 8001dc6:	bf00      	nop
 8001dc8:	20000004 	.word	0x20000004
 8001dcc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d023      	beq.n	8001e20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	4798      	blx	r3
 8001de0:	e01e      	b.n	8001e20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10f      	bne.n	8001e10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0210 	bic.w	r2, r2, #16
 8001dfe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d032      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d022      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2205      	movs	r2, #5
 8001e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0201 	bic.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d307      	bcc.n	8001e68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f2      	bne.n	8001e4c <HAL_DMA_IRQHandler+0x2cc>
 8001e66:	e000      	b.n	8001e6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d005      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	4798      	blx	r3
 8001e8a:	e000      	b.n	8001e8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e8c:	bf00      	nop
    }
  }
}
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	3b10      	subs	r3, #16
 8001ea4:	4a13      	ldr	r2, [pc, #76]	; (8001ef4 <DMA_CalcBaseAndBitshift+0x60>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	091b      	lsrs	r3, r3, #4
 8001eac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001eae:	4a12      	ldr	r2, [pc, #72]	; (8001ef8 <DMA_CalcBaseAndBitshift+0x64>)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d908      	bls.n	8001ed4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <DMA_CalcBaseAndBitshift+0x68>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	1d1a      	adds	r2, r3, #4
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	659a      	str	r2, [r3, #88]	; 0x58
 8001ed2:	e006      	b.n	8001ee2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <DMA_CalcBaseAndBitshift+0x68>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	aaaaaaab 	.word	0xaaaaaaab
 8001ef8:	080052c8 	.word	0x080052c8
 8001efc:	fffffc00 	.word	0xfffffc00

08001f00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d11f      	bne.n	8001f5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d856      	bhi.n	8001fce <DMA_CheckFifoParam+0xce>
 8001f20:	a201      	add	r2, pc, #4	; (adr r2, 8001f28 <DMA_CheckFifoParam+0x28>)
 8001f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f26:	bf00      	nop
 8001f28:	08001f39 	.word	0x08001f39
 8001f2c:	08001f4b 	.word	0x08001f4b
 8001f30:	08001f39 	.word	0x08001f39
 8001f34:	08001fcf 	.word	0x08001fcf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d046      	beq.n	8001fd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f48:	e043      	b.n	8001fd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f52:	d140      	bne.n	8001fd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f58:	e03d      	b.n	8001fd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f62:	d121      	bne.n	8001fa8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d837      	bhi.n	8001fda <DMA_CheckFifoParam+0xda>
 8001f6a:	a201      	add	r2, pc, #4	; (adr r2, 8001f70 <DMA_CheckFifoParam+0x70>)
 8001f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f70:	08001f81 	.word	0x08001f81
 8001f74:	08001f87 	.word	0x08001f87
 8001f78:	08001f81 	.word	0x08001f81
 8001f7c:	08001f99 	.word	0x08001f99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
      break;
 8001f84:	e030      	b.n	8001fe8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d025      	beq.n	8001fde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f96:	e022      	b.n	8001fde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fa0:	d11f      	bne.n	8001fe2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fa6:	e01c      	b.n	8001fe2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d903      	bls.n	8001fb6 <DMA_CheckFifoParam+0xb6>
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d003      	beq.n	8001fbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fb4:	e018      	b.n	8001fe8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8001fba:	e015      	b.n	8001fe8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00e      	beq.n	8001fe6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	73fb      	strb	r3, [r7, #15]
      break;
 8001fcc:	e00b      	b.n	8001fe6 <DMA_CheckFifoParam+0xe6>
      break;
 8001fce:	bf00      	nop
 8001fd0:	e00a      	b.n	8001fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fd2:	bf00      	nop
 8001fd4:	e008      	b.n	8001fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fd6:	bf00      	nop
 8001fd8:	e006      	b.n	8001fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fda:	bf00      	nop
 8001fdc:	e004      	b.n	8001fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fde:	bf00      	nop
 8001fe0:	e002      	b.n	8001fe8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001fe2:	bf00      	nop
 8001fe4:	e000      	b.n	8001fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fe6:	bf00      	nop
    }
  } 
  
  return status; 
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop

08001ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	; 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
 8002016:	e175      	b.n	8002304 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002018:	2201      	movs	r2, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	429a      	cmp	r2, r3
 8002032:	f040 8164 	bne.w	80022fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	2b01      	cmp	r3, #1
 8002040:	d005      	beq.n	800204e <HAL_GPIO_Init+0x56>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d130      	bne.n	80020b0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	2203      	movs	r2, #3
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4313      	orrs	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002084:	2201      	movs	r2, #1
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	091b      	lsrs	r3, r3, #4
 800209a:	f003 0201 	and.w	r2, r3, #1
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d017      	beq.n	80020ec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	2203      	movs	r2, #3
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d123      	bne.n	8002140 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	08da      	lsrs	r2, r3, #3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3208      	adds	r2, #8
 8002100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	220f      	movs	r2, #15
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	08da      	lsrs	r2, r3, #3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3208      	adds	r2, #8
 800213a:	69b9      	ldr	r1, [r7, #24]
 800213c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	2203      	movs	r2, #3
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0203 	and.w	r2, r3, #3
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 80be 	beq.w	80022fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002182:	4b66      	ldr	r3, [pc, #408]	; (800231c <HAL_GPIO_Init+0x324>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	4a65      	ldr	r2, [pc, #404]	; (800231c <HAL_GPIO_Init+0x324>)
 8002188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800218c:	6453      	str	r3, [r2, #68]	; 0x44
 800218e:	4b63      	ldr	r3, [pc, #396]	; (800231c <HAL_GPIO_Init+0x324>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800219a:	4a61      	ldr	r2, [pc, #388]	; (8002320 <HAL_GPIO_Init+0x328>)
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	3302      	adds	r3, #2
 80021a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	220f      	movs	r2, #15
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a58      	ldr	r2, [pc, #352]	; (8002324 <HAL_GPIO_Init+0x32c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d037      	beq.n	8002236 <HAL_GPIO_Init+0x23e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a57      	ldr	r2, [pc, #348]	; (8002328 <HAL_GPIO_Init+0x330>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d031      	beq.n	8002232 <HAL_GPIO_Init+0x23a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a56      	ldr	r2, [pc, #344]	; (800232c <HAL_GPIO_Init+0x334>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d02b      	beq.n	800222e <HAL_GPIO_Init+0x236>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a55      	ldr	r2, [pc, #340]	; (8002330 <HAL_GPIO_Init+0x338>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d025      	beq.n	800222a <HAL_GPIO_Init+0x232>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a54      	ldr	r2, [pc, #336]	; (8002334 <HAL_GPIO_Init+0x33c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d01f      	beq.n	8002226 <HAL_GPIO_Init+0x22e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a53      	ldr	r2, [pc, #332]	; (8002338 <HAL_GPIO_Init+0x340>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d019      	beq.n	8002222 <HAL_GPIO_Init+0x22a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a52      	ldr	r2, [pc, #328]	; (800233c <HAL_GPIO_Init+0x344>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d013      	beq.n	800221e <HAL_GPIO_Init+0x226>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a51      	ldr	r2, [pc, #324]	; (8002340 <HAL_GPIO_Init+0x348>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00d      	beq.n	800221a <HAL_GPIO_Init+0x222>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a50      	ldr	r2, [pc, #320]	; (8002344 <HAL_GPIO_Init+0x34c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d007      	beq.n	8002216 <HAL_GPIO_Init+0x21e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a4f      	ldr	r2, [pc, #316]	; (8002348 <HAL_GPIO_Init+0x350>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d101      	bne.n	8002212 <HAL_GPIO_Init+0x21a>
 800220e:	2309      	movs	r3, #9
 8002210:	e012      	b.n	8002238 <HAL_GPIO_Init+0x240>
 8002212:	230a      	movs	r3, #10
 8002214:	e010      	b.n	8002238 <HAL_GPIO_Init+0x240>
 8002216:	2308      	movs	r3, #8
 8002218:	e00e      	b.n	8002238 <HAL_GPIO_Init+0x240>
 800221a:	2307      	movs	r3, #7
 800221c:	e00c      	b.n	8002238 <HAL_GPIO_Init+0x240>
 800221e:	2306      	movs	r3, #6
 8002220:	e00a      	b.n	8002238 <HAL_GPIO_Init+0x240>
 8002222:	2305      	movs	r3, #5
 8002224:	e008      	b.n	8002238 <HAL_GPIO_Init+0x240>
 8002226:	2304      	movs	r3, #4
 8002228:	e006      	b.n	8002238 <HAL_GPIO_Init+0x240>
 800222a:	2303      	movs	r3, #3
 800222c:	e004      	b.n	8002238 <HAL_GPIO_Init+0x240>
 800222e:	2302      	movs	r3, #2
 8002230:	e002      	b.n	8002238 <HAL_GPIO_Init+0x240>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <HAL_GPIO_Init+0x240>
 8002236:	2300      	movs	r3, #0
 8002238:	69fa      	ldr	r2, [r7, #28]
 800223a:	f002 0203 	and.w	r2, r2, #3
 800223e:	0092      	lsls	r2, r2, #2
 8002240:	4093      	lsls	r3, r2
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002248:	4935      	ldr	r1, [pc, #212]	; (8002320 <HAL_GPIO_Init+0x328>)
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	089b      	lsrs	r3, r3, #2
 800224e:	3302      	adds	r3, #2
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002256:	4b3d      	ldr	r3, [pc, #244]	; (800234c <HAL_GPIO_Init+0x354>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800227a:	4a34      	ldr	r2, [pc, #208]	; (800234c <HAL_GPIO_Init+0x354>)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002280:	4b32      	ldr	r3, [pc, #200]	; (800234c <HAL_GPIO_Init+0x354>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022a4:	4a29      	ldr	r2, [pc, #164]	; (800234c <HAL_GPIO_Init+0x354>)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022aa:	4b28      	ldr	r3, [pc, #160]	; (800234c <HAL_GPIO_Init+0x354>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ce:	4a1f      	ldr	r2, [pc, #124]	; (800234c <HAL_GPIO_Init+0x354>)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022d4:	4b1d      	ldr	r3, [pc, #116]	; (800234c <HAL_GPIO_Init+0x354>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022f8:	4a14      	ldr	r2, [pc, #80]	; (800234c <HAL_GPIO_Init+0x354>)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3301      	adds	r3, #1
 8002302:	61fb      	str	r3, [r7, #28]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	2b0f      	cmp	r3, #15
 8002308:	f67f ae86 	bls.w	8002018 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	3724      	adds	r7, #36	; 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800
 8002320:	40013800 	.word	0x40013800
 8002324:	40020000 	.word	0x40020000
 8002328:	40020400 	.word	0x40020400
 800232c:	40020800 	.word	0x40020800
 8002330:	40020c00 	.word	0x40020c00
 8002334:	40021000 	.word	0x40021000
 8002338:	40021400 	.word	0x40021400
 800233c:	40021800 	.word	0x40021800
 8002340:	40021c00 	.word	0x40021c00
 8002344:	40022000 	.word	0x40022000
 8002348:	40022400 	.word	0x40022400
 800234c:	40013c00 	.word	0x40013c00

08002350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	807b      	strh	r3, [r7, #2]
 800235c:	4613      	mov	r3, r2
 800235e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002360:	787b      	ldrb	r3, [r7, #1]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002366:	887a      	ldrh	r2, [r7, #2]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800236c:	e003      	b.n	8002376 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800236e:	887b      	ldrh	r3, [r7, #2]
 8002370:	041a      	lsls	r2, r3, #16
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	619a      	str	r2, [r3, #24]
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
	...

08002384 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800238e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002392:	6013      	str	r3, [r2, #0]
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40007000 	.word	0x40007000

080023a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80023ac:	2300      	movs	r3, #0
 80023ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e291      	b.n	80028de <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 8087 	beq.w	80024d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023c8:	4b96      	ldr	r3, [pc, #600]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 030c 	and.w	r3, r3, #12
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d00c      	beq.n	80023ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023d4:	4b93      	ldr	r3, [pc, #588]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 030c 	and.w	r3, r3, #12
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d112      	bne.n	8002406 <HAL_RCC_OscConfig+0x62>
 80023e0:	4b90      	ldr	r3, [pc, #576]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ec:	d10b      	bne.n	8002406 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ee:	4b8d      	ldr	r3, [pc, #564]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d06c      	beq.n	80024d4 <HAL_RCC_OscConfig+0x130>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d168      	bne.n	80024d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e26b      	b.n	80028de <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800240e:	d106      	bne.n	800241e <HAL_RCC_OscConfig+0x7a>
 8002410:	4b84      	ldr	r3, [pc, #528]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a83      	ldr	r2, [pc, #524]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 8002416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	e02e      	b.n	800247c <HAL_RCC_OscConfig+0xd8>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10c      	bne.n	8002440 <HAL_RCC_OscConfig+0x9c>
 8002426:	4b7f      	ldr	r3, [pc, #508]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a7e      	ldr	r2, [pc, #504]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 800242c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	4b7c      	ldr	r3, [pc, #496]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a7b      	ldr	r2, [pc, #492]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 8002438:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	e01d      	b.n	800247c <HAL_RCC_OscConfig+0xd8>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0xc0>
 800244a:	4b76      	ldr	r3, [pc, #472]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a75      	ldr	r2, [pc, #468]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 8002450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	4b73      	ldr	r3, [pc, #460]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a72      	ldr	r2, [pc, #456]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 800245c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e00b      	b.n	800247c <HAL_RCC_OscConfig+0xd8>
 8002464:	4b6f      	ldr	r3, [pc, #444]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a6e      	ldr	r2, [pc, #440]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 800246a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	4b6c      	ldr	r3, [pc, #432]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a6b      	ldr	r2, [pc, #428]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 8002476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800247a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d013      	beq.n	80024ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7ff f842 	bl	800150c <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800248c:	f7ff f83e 	bl	800150c <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	; 0x64
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e21f      	b.n	80028de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249e:	4b61      	ldr	r3, [pc, #388]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0xe8>
 80024aa:	e014      	b.n	80024d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7ff f82e 	bl	800150c <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b4:	f7ff f82a 	bl	800150c <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	; 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e20b      	b.n	80028de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c6:	4b57      	ldr	r3, [pc, #348]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x110>
 80024d2:	e000      	b.n	80024d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d069      	beq.n	80025b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024e2:	4b50      	ldr	r3, [pc, #320]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 030c 	and.w	r3, r3, #12
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00b      	beq.n	8002506 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ee:	4b4d      	ldr	r3, [pc, #308]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	d11c      	bne.n	8002534 <HAL_RCC_OscConfig+0x190>
 80024fa:	4b4a      	ldr	r3, [pc, #296]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d116      	bne.n	8002534 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002506:	4b47      	ldr	r3, [pc, #284]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <HAL_RCC_OscConfig+0x17a>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d001      	beq.n	800251e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e1df      	b.n	80028de <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251e:	4b41      	ldr	r3, [pc, #260]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	493d      	ldr	r1, [pc, #244]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 800252e:	4313      	orrs	r3, r2
 8002530:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002532:	e040      	b.n	80025b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d023      	beq.n	8002584 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800253c:	4b39      	ldr	r3, [pc, #228]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a38      	ldr	r2, [pc, #224]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7fe ffe0 	bl	800150c <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002550:	f7fe ffdc 	bl	800150c <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e1bd      	b.n	80028de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002562:	4b30      	ldr	r3, [pc, #192]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256e:	4b2d      	ldr	r3, [pc, #180]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4929      	ldr	r1, [pc, #164]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 800257e:	4313      	orrs	r3, r2
 8002580:	600b      	str	r3, [r1, #0]
 8002582:	e018      	b.n	80025b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002584:	4b27      	ldr	r3, [pc, #156]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a26      	ldr	r2, [pc, #152]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7fe ffbc 	bl	800150c <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002598:	f7fe ffb8 	bl	800150c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e199      	b.n	80028de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025aa:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d038      	beq.n	8002634 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d019      	beq.n	80025fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ca:	4b16      	ldr	r3, [pc, #88]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 80025cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ce:	4a15      	ldr	r2, [pc, #84]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d6:	f7fe ff99 	bl	800150c <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025de:	f7fe ff95 	bl	800150c <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e176      	b.n	80028de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 80025f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0f0      	beq.n	80025de <HAL_RCC_OscConfig+0x23a>
 80025fc:	e01a      	b.n	8002634 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 8002600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002602:	4a08      	ldr	r2, [pc, #32]	; (8002624 <HAL_RCC_OscConfig+0x280>)
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260a:	f7fe ff7f 	bl	800150c <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002610:	e00a      	b.n	8002628 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002612:	f7fe ff7b 	bl	800150c <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d903      	bls.n	8002628 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e15c      	b.n	80028de <HAL_RCC_OscConfig+0x53a>
 8002624:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002628:	4b91      	ldr	r3, [pc, #580]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 800262a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1ee      	bne.n	8002612 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 80a4 	beq.w	800278a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002642:	4b8b      	ldr	r3, [pc, #556]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10d      	bne.n	800266a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800264e:	4b88      	ldr	r3, [pc, #544]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	4a87      	ldr	r2, [pc, #540]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 8002654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002658:	6413      	str	r3, [r2, #64]	; 0x40
 800265a:	4b85      	ldr	r3, [pc, #532]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002666:	2301      	movs	r3, #1
 8002668:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800266a:	4b82      	ldr	r3, [pc, #520]	; (8002874 <HAL_RCC_OscConfig+0x4d0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002672:	2b00      	cmp	r3, #0
 8002674:	d118      	bne.n	80026a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002676:	4b7f      	ldr	r3, [pc, #508]	; (8002874 <HAL_RCC_OscConfig+0x4d0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a7e      	ldr	r2, [pc, #504]	; (8002874 <HAL_RCC_OscConfig+0x4d0>)
 800267c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002682:	f7fe ff43 	bl	800150c <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268a:	f7fe ff3f 	bl	800150c <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b64      	cmp	r3, #100	; 0x64
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e120      	b.n	80028de <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800269c:	4b75      	ldr	r3, [pc, #468]	; (8002874 <HAL_RCC_OscConfig+0x4d0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d106      	bne.n	80026be <HAL_RCC_OscConfig+0x31a>
 80026b0:	4b6f      	ldr	r3, [pc, #444]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 80026b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b4:	4a6e      	ldr	r2, [pc, #440]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6713      	str	r3, [r2, #112]	; 0x70
 80026bc:	e02d      	b.n	800271a <HAL_RCC_OscConfig+0x376>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x33c>
 80026c6:	4b6a      	ldr	r3, [pc, #424]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 80026c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ca:	4a69      	ldr	r2, [pc, #420]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 80026cc:	f023 0301 	bic.w	r3, r3, #1
 80026d0:	6713      	str	r3, [r2, #112]	; 0x70
 80026d2:	4b67      	ldr	r3, [pc, #412]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	4a66      	ldr	r2, [pc, #408]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 80026d8:	f023 0304 	bic.w	r3, r3, #4
 80026dc:	6713      	str	r3, [r2, #112]	; 0x70
 80026de:	e01c      	b.n	800271a <HAL_RCC_OscConfig+0x376>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b05      	cmp	r3, #5
 80026e6:	d10c      	bne.n	8002702 <HAL_RCC_OscConfig+0x35e>
 80026e8:	4b61      	ldr	r3, [pc, #388]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 80026ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ec:	4a60      	ldr	r2, [pc, #384]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 80026ee:	f043 0304 	orr.w	r3, r3, #4
 80026f2:	6713      	str	r3, [r2, #112]	; 0x70
 80026f4:	4b5e      	ldr	r3, [pc, #376]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 80026f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f8:	4a5d      	ldr	r2, [pc, #372]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002700:	e00b      	b.n	800271a <HAL_RCC_OscConfig+0x376>
 8002702:	4b5b      	ldr	r3, [pc, #364]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002706:	4a5a      	ldr	r2, [pc, #360]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 8002708:	f023 0301 	bic.w	r3, r3, #1
 800270c:	6713      	str	r3, [r2, #112]	; 0x70
 800270e:	4b58      	ldr	r3, [pc, #352]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002712:	4a57      	ldr	r2, [pc, #348]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 8002714:	f023 0304 	bic.w	r3, r3, #4
 8002718:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d015      	beq.n	800274e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002722:	f7fe fef3 	bl	800150c <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002728:	e00a      	b.n	8002740 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272a:	f7fe feef 	bl	800150c <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f241 3288 	movw	r2, #5000	; 0x1388
 8002738:	4293      	cmp	r3, r2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e0ce      	b.n	80028de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002740:	4b4b      	ldr	r3, [pc, #300]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0ee      	beq.n	800272a <HAL_RCC_OscConfig+0x386>
 800274c:	e014      	b.n	8002778 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274e:	f7fe fedd 	bl	800150c <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002754:	e00a      	b.n	800276c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002756:	f7fe fed9 	bl	800150c <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	f241 3288 	movw	r2, #5000	; 0x1388
 8002764:	4293      	cmp	r3, r2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e0b8      	b.n	80028de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276c:	4b40      	ldr	r3, [pc, #256]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ee      	bne.n	8002756 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002778:	7dfb      	ldrb	r3, [r7, #23]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d105      	bne.n	800278a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277e:	4b3c      	ldr	r3, [pc, #240]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	4a3b      	ldr	r2, [pc, #236]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 8002784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002788:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 80a4 	beq.w	80028dc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002794:	4b36      	ldr	r3, [pc, #216]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 030c 	and.w	r3, r3, #12
 800279c:	2b08      	cmp	r3, #8
 800279e:	d06b      	beq.n	8002878 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d149      	bne.n	800283c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a8:	4b31      	ldr	r3, [pc, #196]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a30      	ldr	r2, [pc, #192]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 80027ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fe feaa 	bl	800150c <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027bc:	f7fe fea6 	bl	800150c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e087      	b.n	80028de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ce:	4b28      	ldr	r3, [pc, #160]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69da      	ldr	r2, [r3, #28]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	019b      	lsls	r3, r3, #6
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	085b      	lsrs	r3, r3, #1
 80027f2:	3b01      	subs	r3, #1
 80027f4:	041b      	lsls	r3, r3, #16
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	061b      	lsls	r3, r3, #24
 80027fe:	4313      	orrs	r3, r2
 8002800:	4a1b      	ldr	r2, [pc, #108]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 8002802:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002806:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002808:	4b19      	ldr	r3, [pc, #100]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a18      	ldr	r2, [pc, #96]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 800280e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7fe fe7a 	bl	800150c <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281c:	f7fe fe76 	bl	800150c <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e057      	b.n	80028de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282e:	4b10      	ldr	r3, [pc, #64]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0x478>
 800283a:	e04f      	b.n	80028dc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283c:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0b      	ldr	r2, [pc, #44]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 8002842:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002848:	f7fe fe60 	bl	800150c <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002850:	f7fe fe5c 	bl	800150c <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e03d      	b.n	80028de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002862:	4b03      	ldr	r3, [pc, #12]	; (8002870 <HAL_RCC_OscConfig+0x4cc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x4ac>
 800286e:	e035      	b.n	80028dc <HAL_RCC_OscConfig+0x538>
 8002870:	40023800 	.word	0x40023800
 8002874:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002878:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <HAL_RCC_OscConfig+0x544>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d028      	beq.n	80028d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002890:	429a      	cmp	r2, r3
 8002892:	d121      	bne.n	80028d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d11a      	bne.n	80028d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028a8:	4013      	ands	r3, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028ae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d111      	bne.n	80028d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	085b      	lsrs	r3, r3, #1
 80028c0:	3b01      	subs	r3, #1
 80028c2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d107      	bne.n	80028d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800

080028ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0d0      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002904:	4b6a      	ldr	r3, [pc, #424]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d910      	bls.n	8002934 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b67      	ldr	r3, [pc, #412]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 020f 	bic.w	r2, r3, #15
 800291a:	4965      	ldr	r1, [pc, #404]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b63      	ldr	r3, [pc, #396]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0b8      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d020      	beq.n	8002982 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800294c:	4b59      	ldr	r3, [pc, #356]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c8>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4a58      	ldr	r2, [pc, #352]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8002952:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002956:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002964:	4b53      	ldr	r3, [pc, #332]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4a52      	ldr	r2, [pc, #328]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c8>)
 800296a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800296e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002970:	4b50      	ldr	r3, [pc, #320]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	494d      	ldr	r1, [pc, #308]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c8>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d040      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d107      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002996:	4b47      	ldr	r3, [pc, #284]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d115      	bne.n	80029ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e07f      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d107      	bne.n	80029be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ae:	4b41      	ldr	r3, [pc, #260]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d109      	bne.n	80029ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e073      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029be:	4b3d      	ldr	r3, [pc, #244]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e06b      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ce:	4b39      	ldr	r3, [pc, #228]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c8>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f023 0203 	bic.w	r2, r3, #3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	4936      	ldr	r1, [pc, #216]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c8>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029e0:	f7fe fd94 	bl	800150c <HAL_GetTick>
 80029e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e6:	e00a      	b.n	80029fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e8:	f7fe fd90 	bl	800150c <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e053      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fe:	4b2d      	ldr	r3, [pc, #180]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 020c 	and.w	r2, r3, #12
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d1eb      	bne.n	80029e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a10:	4b27      	ldr	r3, [pc, #156]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d210      	bcs.n	8002a40 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b24      	ldr	r3, [pc, #144]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 020f 	bic.w	r2, r3, #15
 8002a26:	4922      	ldr	r1, [pc, #136]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e032      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a4c:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4916      	ldr	r1, [pc, #88]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d009      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a6a:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	490e      	ldr	r1, [pc, #56]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a7e:	f000 f821 	bl	8002ac4 <HAL_RCC_GetSysClockFreq>
 8002a82:	4602      	mov	r2, r0
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	490a      	ldr	r1, [pc, #40]	; (8002ab8 <HAL_RCC_ClockConfig+0x1cc>)
 8002a90:	5ccb      	ldrb	r3, [r1, r3]
 8002a92:	fa22 f303 	lsr.w	r3, r2, r3
 8002a96:	4a09      	ldr	r2, [pc, #36]	; (8002abc <HAL_RCC_ClockConfig+0x1d0>)
 8002a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a9a:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_RCC_ClockConfig+0x1d4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fe fcf0 	bl	8001484 <HAL_InitTick>

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40023c00 	.word	0x40023c00
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	080052b0 	.word	0x080052b0
 8002abc:	20000004 	.word	0x20000004
 8002ac0:	20000008 	.word	0x20000008

08002ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ac8:	b094      	sub	sp, #80	; 0x50
 8002aca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	647b      	str	r3, [r7, #68]	; 0x44
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002adc:	4b79      	ldr	r3, [pc, #484]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d00d      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x40>
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	f200 80e1 	bhi.w	8002cb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d002      	beq.n	8002af8 <HAL_RCC_GetSysClockFreq+0x34>
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d003      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0x3a>
 8002af6:	e0db      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002af8:	4b73      	ldr	r3, [pc, #460]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002afa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002afc:	e0db      	b.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002afe:	4b73      	ldr	r3, [pc, #460]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x208>)
 8002b00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b02:	e0d8      	b.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b04:	4b6f      	ldr	r3, [pc, #444]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b0c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b0e:	4b6d      	ldr	r3, [pc, #436]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d063      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b1a:	4b6a      	ldr	r3, [pc, #424]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	099b      	lsrs	r3, r3, #6
 8002b20:	2200      	movs	r2, #0
 8002b22:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b2c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b2e:	2300      	movs	r3, #0
 8002b30:	637b      	str	r3, [r7, #52]	; 0x34
 8002b32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b36:	4622      	mov	r2, r4
 8002b38:	462b      	mov	r3, r5
 8002b3a:	f04f 0000 	mov.w	r0, #0
 8002b3e:	f04f 0100 	mov.w	r1, #0
 8002b42:	0159      	lsls	r1, r3, #5
 8002b44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b48:	0150      	lsls	r0, r2, #5
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4621      	mov	r1, r4
 8002b50:	1a51      	subs	r1, r2, r1
 8002b52:	6139      	str	r1, [r7, #16]
 8002b54:	4629      	mov	r1, r5
 8002b56:	eb63 0301 	sbc.w	r3, r3, r1
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b68:	4659      	mov	r1, fp
 8002b6a:	018b      	lsls	r3, r1, #6
 8002b6c:	4651      	mov	r1, sl
 8002b6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b72:	4651      	mov	r1, sl
 8002b74:	018a      	lsls	r2, r1, #6
 8002b76:	4651      	mov	r1, sl
 8002b78:	ebb2 0801 	subs.w	r8, r2, r1
 8002b7c:	4659      	mov	r1, fp
 8002b7e:	eb63 0901 	sbc.w	r9, r3, r1
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b96:	4690      	mov	r8, r2
 8002b98:	4699      	mov	r9, r3
 8002b9a:	4623      	mov	r3, r4
 8002b9c:	eb18 0303 	adds.w	r3, r8, r3
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	462b      	mov	r3, r5
 8002ba4:	eb49 0303 	adc.w	r3, r9, r3
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bb6:	4629      	mov	r1, r5
 8002bb8:	024b      	lsls	r3, r1, #9
 8002bba:	4621      	mov	r1, r4
 8002bbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bc0:	4621      	mov	r1, r4
 8002bc2:	024a      	lsls	r2, r1, #9
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bca:	2200      	movs	r2, #0
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bd4:	f7fd fe4e 	bl	8000874 <__aeabi_uldivmod>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4613      	mov	r3, r2
 8002bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002be0:	e058      	b.n	8002c94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be2:	4b38      	ldr	r3, [pc, #224]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	099b      	lsrs	r3, r3, #6
 8002be8:	2200      	movs	r2, #0
 8002bea:	4618      	mov	r0, r3
 8002bec:	4611      	mov	r1, r2
 8002bee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bf2:	623b      	str	r3, [r7, #32]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bfc:	4642      	mov	r2, r8
 8002bfe:	464b      	mov	r3, r9
 8002c00:	f04f 0000 	mov.w	r0, #0
 8002c04:	f04f 0100 	mov.w	r1, #0
 8002c08:	0159      	lsls	r1, r3, #5
 8002c0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c0e:	0150      	lsls	r0, r2, #5
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4641      	mov	r1, r8
 8002c16:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c1a:	4649      	mov	r1, r9
 8002c1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c34:	ebb2 040a 	subs.w	r4, r2, sl
 8002c38:	eb63 050b 	sbc.w	r5, r3, fp
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	00eb      	lsls	r3, r5, #3
 8002c46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c4a:	00e2      	lsls	r2, r4, #3
 8002c4c:	4614      	mov	r4, r2
 8002c4e:	461d      	mov	r5, r3
 8002c50:	4643      	mov	r3, r8
 8002c52:	18e3      	adds	r3, r4, r3
 8002c54:	603b      	str	r3, [r7, #0]
 8002c56:	464b      	mov	r3, r9
 8002c58:	eb45 0303 	adc.w	r3, r5, r3
 8002c5c:	607b      	str	r3, [r7, #4]
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c6a:	4629      	mov	r1, r5
 8002c6c:	028b      	lsls	r3, r1, #10
 8002c6e:	4621      	mov	r1, r4
 8002c70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c74:	4621      	mov	r1, r4
 8002c76:	028a      	lsls	r2, r1, #10
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c7e:	2200      	movs	r2, #0
 8002c80:	61bb      	str	r3, [r7, #24]
 8002c82:	61fa      	str	r2, [r7, #28]
 8002c84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c88:	f7fd fdf4 	bl	8000874 <__aeabi_uldivmod>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4613      	mov	r3, r2
 8002c92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c94:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	0c1b      	lsrs	r3, r3, #16
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002ca4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cae:	e002      	b.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cb0:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cb2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3750      	adds	r7, #80	; 0x50
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	00f42400 	.word	0x00f42400
 8002ccc:	007a1200 	.word	0x007a1200

08002cd0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cd4:	4b03      	ldr	r3, [pc, #12]	; (8002ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	20000004 	.word	0x20000004

08002ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cec:	f7ff fff0 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	0a9b      	lsrs	r3, r3, #10
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	4903      	ldr	r1, [pc, #12]	; (8002d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cfe:	5ccb      	ldrb	r3, [r1, r3]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	080052c0 	.word	0x080052c0

08002d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d14:	f7ff ffdc 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	0b5b      	lsrs	r3, r3, #13
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	4903      	ldr	r1, [pc, #12]	; (8002d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d26:	5ccb      	ldrb	r3, [r1, r3]
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40023800 	.word	0x40023800
 8002d34:	080052c0 	.word	0x080052c0

08002d38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d012      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d60:	4b69      	ldr	r3, [pc, #420]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	4a68      	ldr	r2, [pc, #416]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d6a:	6093      	str	r3, [r2, #8]
 8002d6c:	4b66      	ldr	r3, [pc, #408]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d74:	4964      	ldr	r1, [pc, #400]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002d82:	2301      	movs	r3, #1
 8002d84:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d017      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d92:	4b5d      	ldr	r3, [pc, #372]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da0:	4959      	ldr	r1, [pc, #356]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002db0:	d101      	bne.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002db2:	2301      	movs	r3, #1
 8002db4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d017      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dce:	4b4e      	ldr	r3, [pc, #312]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	494a      	ldr	r1, [pc, #296]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dec:	d101      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002dee:	2301      	movs	r3, #1
 8002df0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 808b 	beq.w	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e1c:	4b3a      	ldr	r3, [pc, #232]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	4a39      	ldr	r2, [pc, #228]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e26:	6413      	str	r3, [r2, #64]	; 0x40
 8002e28:	4b37      	ldr	r3, [pc, #220]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e34:	4b35      	ldr	r3, [pc, #212]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a34      	ldr	r2, [pc, #208]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e40:	f7fe fb64 	bl	800150c <HAL_GetTick>
 8002e44:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e48:	f7fe fb60 	bl	800150c <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b64      	cmp	r3, #100	; 0x64
 8002e54:	d901      	bls.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e357      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e5a:	4b2c      	ldr	r3, [pc, #176]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e66:	4b28      	ldr	r3, [pc, #160]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e6e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d035      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d02e      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e84:	4b20      	ldr	r3, [pc, #128]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e8c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e8e:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e92:	4a1d      	ldr	r2, [pc, #116]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e98:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e9a:	4b1b      	ldr	r3, [pc, #108]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9e:	4a1a      	ldr	r2, [pc, #104]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002ea6:	4a18      	ldr	r2, [pc, #96]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002eac:	4b16      	ldr	r3, [pc, #88]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d114      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7fe fb28 	bl	800150c <HAL_GetTick>
 8002ebc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ebe:	e00a      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec0:	f7fe fb24 	bl	800150c <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e319      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed6:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0ee      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eee:	d111      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002efc:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002efe:	400b      	ands	r3, r1
 8002f00:	4901      	ldr	r1, [pc, #4]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	608b      	str	r3, [r1, #8]
 8002f06:	e00b      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	40007000 	.word	0x40007000
 8002f10:	0ffffcff 	.word	0x0ffffcff
 8002f14:	4baa      	ldr	r3, [pc, #680]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	4aa9      	ldr	r2, [pc, #676]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f1e:	6093      	str	r3, [r2, #8]
 8002f20:	4ba7      	ldr	r3, [pc, #668]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f2c:	49a4      	ldr	r1, [pc, #656]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0310 	and.w	r3, r3, #16
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d010      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f3e:	4ba0      	ldr	r3, [pc, #640]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f44:	4a9e      	ldr	r2, [pc, #632]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002f4e:	4b9c      	ldr	r3, [pc, #624]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f50:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f58:	4999      	ldr	r1, [pc, #612]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00a      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f6c:	4b94      	ldr	r3, [pc, #592]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f7a:	4991      	ldr	r1, [pc, #580]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f8e:	4b8c      	ldr	r3, [pc, #560]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f9c:	4988      	ldr	r1, [pc, #544]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00a      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fb0:	4b83      	ldr	r3, [pc, #524]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fbe:	4980      	ldr	r1, [pc, #512]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fd2:	4b7b      	ldr	r3, [pc, #492]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	4977      	ldr	r1, [pc, #476]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00a      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ff4:	4b72      	ldr	r3, [pc, #456]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffa:	f023 0203 	bic.w	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	496f      	ldr	r1, [pc, #444]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003016:	4b6a      	ldr	r3, [pc, #424]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301c:	f023 020c 	bic.w	r2, r3, #12
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003024:	4966      	ldr	r1, [pc, #408]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003038:	4b61      	ldr	r3, [pc, #388]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800303a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003046:	495e      	ldr	r1, [pc, #376]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800305a:	4b59      	ldr	r3, [pc, #356]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800305c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003060:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003068:	4955      	ldr	r1, [pc, #340]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00a      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800307c:	4b50      	ldr	r3, [pc, #320]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800307e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003082:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308a:	494d      	ldr	r1, [pc, #308]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800309e:	4b48      	ldr	r3, [pc, #288]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ac:	4944      	ldr	r1, [pc, #272]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80030c0:	4b3f      	ldr	r3, [pc, #252]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ce:	493c      	ldr	r1, [pc, #240]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80030e2:	4b37      	ldr	r3, [pc, #220]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f0:	4933      	ldr	r1, [pc, #204]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003104:	4b2e      	ldr	r3, [pc, #184]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003112:	492b      	ldr	r1, [pc, #172]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d011      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003126:	4b26      	ldr	r3, [pc, #152]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003134:	4922      	ldr	r1, [pc, #136]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003140:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003144:	d101      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003146:	2301      	movs	r3, #1
 8003148:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003156:	2301      	movs	r3, #1
 8003158:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003166:	4b16      	ldr	r3, [pc, #88]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003174:	4912      	ldr	r1, [pc, #72]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00b      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003188:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800318a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003198:	4909      	ldr	r1, [pc, #36]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d006      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 80d9 	beq.w	8003366 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031b4:	4b02      	ldr	r3, [pc, #8]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a01      	ldr	r2, [pc, #4]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031be:	e001      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80031c0:	40023800 	.word	0x40023800
 80031c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c6:	f7fe f9a1 	bl	800150c <HAL_GetTick>
 80031ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031ce:	f7fe f99d 	bl	800150c <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b64      	cmp	r3, #100	; 0x64
 80031da:	d901      	bls.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e194      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031e0:	4b6c      	ldr	r3, [pc, #432]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f0      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d021      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d11d      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003200:	4b64      	ldr	r3, [pc, #400]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003206:	0c1b      	lsrs	r3, r3, #16
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800320e:	4b61      	ldr	r3, [pc, #388]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003214:	0e1b      	lsrs	r3, r3, #24
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	019a      	lsls	r2, r3, #6
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	041b      	lsls	r3, r3, #16
 8003226:	431a      	orrs	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	061b      	lsls	r3, r3, #24
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	071b      	lsls	r3, r3, #28
 8003234:	4957      	ldr	r1, [pc, #348]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d004      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003250:	d00a      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800325a:	2b00      	cmp	r3, #0
 800325c:	d02e      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003266:	d129      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003268:	4b4a      	ldr	r3, [pc, #296]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800326a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800326e:	0c1b      	lsrs	r3, r3, #16
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003276:	4b47      	ldr	r3, [pc, #284]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800327c:	0f1b      	lsrs	r3, r3, #28
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	019a      	lsls	r2, r3, #6
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	041b      	lsls	r3, r3, #16
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	061b      	lsls	r3, r3, #24
 8003296:	431a      	orrs	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	071b      	lsls	r3, r3, #28
 800329c:	493d      	ldr	r1, [pc, #244]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80032a4:	4b3b      	ldr	r3, [pc, #236]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032aa:	f023 021f 	bic.w	r2, r3, #31
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	3b01      	subs	r3, #1
 80032b4:	4937      	ldr	r1, [pc, #220]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01d      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032c8:	4b32      	ldr	r3, [pc, #200]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ce:	0e1b      	lsrs	r3, r3, #24
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032d6:	4b2f      	ldr	r3, [pc, #188]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032dc:	0f1b      	lsrs	r3, r3, #28
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	019a      	lsls	r2, r3, #6
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	041b      	lsls	r3, r3, #16
 80032f0:	431a      	orrs	r2, r3
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	061b      	lsls	r3, r3, #24
 80032f6:	431a      	orrs	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	071b      	lsls	r3, r3, #28
 80032fc:	4925      	ldr	r1, [pc, #148]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d011      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	019a      	lsls	r2, r3, #6
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	041b      	lsls	r3, r3, #16
 800331c:	431a      	orrs	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	061b      	lsls	r3, r3, #24
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	071b      	lsls	r3, r3, #28
 800332c:	4919      	ldr	r1, [pc, #100]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003334:	4b17      	ldr	r3, [pc, #92]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a16      	ldr	r2, [pc, #88]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800333a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800333e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003340:	f7fe f8e4 	bl	800150c <HAL_GetTick>
 8003344:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003346:	e008      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003348:	f7fe f8e0 	bl	800150c <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b64      	cmp	r3, #100	; 0x64
 8003354:	d901      	bls.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e0d7      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800335a:	4b0e      	ldr	r3, [pc, #56]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2b01      	cmp	r3, #1
 800336a:	f040 80cd 	bne.w	8003508 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800336e:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a08      	ldr	r2, [pc, #32]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800337a:	f7fe f8c7 	bl	800150c <HAL_GetTick>
 800337e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003380:	e00a      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003382:	f7fe f8c3 	bl	800150c <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b64      	cmp	r3, #100	; 0x64
 800338e:	d903      	bls.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e0ba      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003394:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003398:	4b5e      	ldr	r3, [pc, #376]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033a4:	d0ed      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x682>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d009      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d02e      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d12a      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033ce:	4b51      	ldr	r3, [pc, #324]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d4:	0c1b      	lsrs	r3, r3, #16
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033dc:	4b4d      	ldr	r3, [pc, #308]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e2:	0f1b      	lsrs	r3, r3, #28
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	019a      	lsls	r2, r3, #6
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	041b      	lsls	r3, r3, #16
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	061b      	lsls	r3, r3, #24
 80033fc:	431a      	orrs	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	071b      	lsls	r3, r3, #28
 8003402:	4944      	ldr	r1, [pc, #272]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800340a:	4b42      	ldr	r3, [pc, #264]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800340c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003410:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003418:	3b01      	subs	r3, #1
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	493d      	ldr	r1, [pc, #244]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800341e:	4313      	orrs	r3, r2
 8003420:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d022      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003434:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003438:	d11d      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800343a:	4b36      	ldr	r3, [pc, #216]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800343c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003440:	0e1b      	lsrs	r3, r3, #24
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003448:	4b32      	ldr	r3, [pc, #200]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800344a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344e:	0f1b      	lsrs	r3, r3, #28
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	019a      	lsls	r2, r3, #6
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	041b      	lsls	r3, r3, #16
 8003462:	431a      	orrs	r2, r3
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	061b      	lsls	r3, r3, #24
 8003468:	431a      	orrs	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	071b      	lsls	r3, r3, #28
 800346e:	4929      	ldr	r1, [pc, #164]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d028      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003482:	4b24      	ldr	r3, [pc, #144]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003488:	0e1b      	lsrs	r3, r3, #24
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003490:	4b20      	ldr	r3, [pc, #128]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003496:	0c1b      	lsrs	r3, r3, #16
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	019a      	lsls	r2, r3, #6
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	041b      	lsls	r3, r3, #16
 80034a8:	431a      	orrs	r2, r3
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	061b      	lsls	r3, r3, #24
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	071b      	lsls	r3, r3, #28
 80034b6:	4917      	ldr	r1, [pc, #92]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80034be:	4b15      	ldr	r3, [pc, #84]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	4911      	ldr	r1, [pc, #68]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80034d4:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a0e      	ldr	r2, [pc, #56]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034e0:	f7fe f814 	bl	800150c <HAL_GetTick>
 80034e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034e8:	f7fe f810 	bl	800150c <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b64      	cmp	r3, #100	; 0x64
 80034f4:	d901      	bls.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e007      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003506:	d1ef      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3720      	adds	r7, #32
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40023800 	.word	0x40023800

08003518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e049      	b.n	80035be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d106      	bne.n	8003544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fd feb6 	bl	80012b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3304      	adds	r3, #4
 8003554:	4619      	mov	r1, r3
 8003556:	4610      	mov	r0, r2
 8003558:	f000 fac0 	bl	8003adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d001      	beq.n	80035e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e054      	b.n	800368a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a26      	ldr	r2, [pc, #152]	; (8003698 <HAL_TIM_Base_Start_IT+0xd0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d022      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x80>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360a:	d01d      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x80>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a22      	ldr	r2, [pc, #136]	; (800369c <HAL_TIM_Base_Start_IT+0xd4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d018      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x80>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a21      	ldr	r2, [pc, #132]	; (80036a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d013      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x80>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a1f      	ldr	r2, [pc, #124]	; (80036a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00e      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x80>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a1e      	ldr	r2, [pc, #120]	; (80036a8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d009      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x80>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a1c      	ldr	r2, [pc, #112]	; (80036ac <HAL_TIM_Base_Start_IT+0xe4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d004      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x80>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a1b      	ldr	r2, [pc, #108]	; (80036b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d115      	bne.n	8003674 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <HAL_TIM_Base_Start_IT+0xec>)
 8003650:	4013      	ands	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b06      	cmp	r3, #6
 8003658:	d015      	beq.n	8003686 <HAL_TIM_Base_Start_IT+0xbe>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003660:	d011      	beq.n	8003686 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f042 0201 	orr.w	r2, r2, #1
 8003670:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003672:	e008      	b.n	8003686 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	e000      	b.n	8003688 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003686:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40010000 	.word	0x40010000
 800369c:	40000400 	.word	0x40000400
 80036a0:	40000800 	.word	0x40000800
 80036a4:	40000c00 	.word	0x40000c00
 80036a8:	40010400 	.word	0x40010400
 80036ac:	40014000 	.word	0x40014000
 80036b0:	40001800 	.word	0x40001800
 80036b4:	00010007 	.word	0x00010007

080036b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d122      	bne.n	8003714 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d11b      	bne.n	8003714 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0202 	mvn.w	r2, #2
 80036e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f9d0 	bl	8003aa0 <HAL_TIM_IC_CaptureCallback>
 8003700:	e005      	b.n	800370e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f9c2 	bl	8003a8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f9d3 	bl	8003ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b04      	cmp	r3, #4
 8003720:	d122      	bne.n	8003768 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b04      	cmp	r3, #4
 800372e:	d11b      	bne.n	8003768 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0204 	mvn.w	r2, #4
 8003738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2202      	movs	r2, #2
 800373e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f9a6 	bl	8003aa0 <HAL_TIM_IC_CaptureCallback>
 8003754:	e005      	b.n	8003762 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f998 	bl	8003a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f9a9 	bl	8003ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b08      	cmp	r3, #8
 8003774:	d122      	bne.n	80037bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b08      	cmp	r3, #8
 8003782:	d11b      	bne.n	80037bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0208 	mvn.w	r2, #8
 800378c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2204      	movs	r2, #4
 8003792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f97c 	bl	8003aa0 <HAL_TIM_IC_CaptureCallback>
 80037a8:	e005      	b.n	80037b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f96e 	bl	8003a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f97f 	bl	8003ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b10      	cmp	r3, #16
 80037c8:	d122      	bne.n	8003810 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b10      	cmp	r3, #16
 80037d6:	d11b      	bne.n	8003810 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0210 	mvn.w	r2, #16
 80037e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2208      	movs	r2, #8
 80037e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f952 	bl	8003aa0 <HAL_TIM_IC_CaptureCallback>
 80037fc:	e005      	b.n	800380a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f944 	bl	8003a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f955 	bl	8003ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b01      	cmp	r3, #1
 800381c:	d10e      	bne.n	800383c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b01      	cmp	r3, #1
 800382a:	d107      	bne.n	800383c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0201 	mvn.w	r2, #1
 8003834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fd fb66 	bl	8000f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003846:	2b80      	cmp	r3, #128	; 0x80
 8003848:	d10e      	bne.n	8003868 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003854:	2b80      	cmp	r3, #128	; 0x80
 8003856:	d107      	bne.n	8003868 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 fb0c 	bl	8003e80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003876:	d10e      	bne.n	8003896 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003882:	2b80      	cmp	r3, #128	; 0x80
 8003884:	d107      	bne.n	8003896 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800388e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 faff 	bl	8003e94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a0:	2b40      	cmp	r3, #64	; 0x40
 80038a2:	d10e      	bne.n	80038c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ae:	2b40      	cmp	r3, #64	; 0x40
 80038b0:	d107      	bne.n	80038c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f903 	bl	8003ac8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	f003 0320 	and.w	r3, r3, #32
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	d10e      	bne.n	80038ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b20      	cmp	r3, #32
 80038dc:	d107      	bne.n	80038ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f06f 0220 	mvn.w	r2, #32
 80038e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 fabf 	bl	8003e6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_TIM_ConfigClockSource+0x1c>
 8003910:	2302      	movs	r3, #2
 8003912:	e0b4      	b.n	8003a7e <HAL_TIM_ConfigClockSource+0x186>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	4b56      	ldr	r3, [pc, #344]	; (8003a88 <HAL_TIM_ConfigClockSource+0x190>)
 8003930:	4013      	ands	r3, r2
 8003932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800393a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800394c:	d03e      	beq.n	80039cc <HAL_TIM_ConfigClockSource+0xd4>
 800394e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003952:	f200 8087 	bhi.w	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395a:	f000 8086 	beq.w	8003a6a <HAL_TIM_ConfigClockSource+0x172>
 800395e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003962:	d87f      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003964:	2b70      	cmp	r3, #112	; 0x70
 8003966:	d01a      	beq.n	800399e <HAL_TIM_ConfigClockSource+0xa6>
 8003968:	2b70      	cmp	r3, #112	; 0x70
 800396a:	d87b      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 800396c:	2b60      	cmp	r3, #96	; 0x60
 800396e:	d050      	beq.n	8003a12 <HAL_TIM_ConfigClockSource+0x11a>
 8003970:	2b60      	cmp	r3, #96	; 0x60
 8003972:	d877      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003974:	2b50      	cmp	r3, #80	; 0x50
 8003976:	d03c      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0xfa>
 8003978:	2b50      	cmp	r3, #80	; 0x50
 800397a:	d873      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 800397c:	2b40      	cmp	r3, #64	; 0x40
 800397e:	d058      	beq.n	8003a32 <HAL_TIM_ConfigClockSource+0x13a>
 8003980:	2b40      	cmp	r3, #64	; 0x40
 8003982:	d86f      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003984:	2b30      	cmp	r3, #48	; 0x30
 8003986:	d064      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x15a>
 8003988:	2b30      	cmp	r3, #48	; 0x30
 800398a:	d86b      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 800398c:	2b20      	cmp	r3, #32
 800398e:	d060      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x15a>
 8003990:	2b20      	cmp	r3, #32
 8003992:	d867      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003994:	2b00      	cmp	r3, #0
 8003996:	d05c      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x15a>
 8003998:	2b10      	cmp	r3, #16
 800399a:	d05a      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x15a>
 800399c:	e062      	b.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	6899      	ldr	r1, [r3, #8]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f000 f9af 	bl	8003d10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	609a      	str	r2, [r3, #8]
      break;
 80039ca:	e04f      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6818      	ldr	r0, [r3, #0]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	6899      	ldr	r1, [r3, #8]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f000 f998 	bl	8003d10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039ee:	609a      	str	r2, [r3, #8]
      break;
 80039f0:	e03c      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	6859      	ldr	r1, [r3, #4]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	461a      	mov	r2, r3
 8003a00:	f000 f90c 	bl	8003c1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2150      	movs	r1, #80	; 0x50
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 f965 	bl	8003cda <TIM_ITRx_SetConfig>
      break;
 8003a10:	e02c      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	6859      	ldr	r1, [r3, #4]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f000 f92b 	bl	8003c7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2160      	movs	r1, #96	; 0x60
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 f955 	bl	8003cda <TIM_ITRx_SetConfig>
      break;
 8003a30:	e01c      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	6859      	ldr	r1, [r3, #4]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f000 f8ec 	bl	8003c1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2140      	movs	r1, #64	; 0x40
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 f945 	bl	8003cda <TIM_ITRx_SetConfig>
      break;
 8003a50:	e00c      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	f000 f93c 	bl	8003cda <TIM_ITRx_SetConfig>
      break;
 8003a62:	e003      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	73fb      	strb	r3, [r7, #15]
      break;
 8003a68:	e000      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	fffeff88 	.word	0xfffeff88

08003a8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a40      	ldr	r2, [pc, #256]	; (8003bf0 <TIM_Base_SetConfig+0x114>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d013      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afa:	d00f      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a3d      	ldr	r2, [pc, #244]	; (8003bf4 <TIM_Base_SetConfig+0x118>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00b      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a3c      	ldr	r2, [pc, #240]	; (8003bf8 <TIM_Base_SetConfig+0x11c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d007      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a3b      	ldr	r2, [pc, #236]	; (8003bfc <TIM_Base_SetConfig+0x120>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d003      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a3a      	ldr	r2, [pc, #232]	; (8003c00 <TIM_Base_SetConfig+0x124>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d108      	bne.n	8003b2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a2f      	ldr	r2, [pc, #188]	; (8003bf0 <TIM_Base_SetConfig+0x114>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d02b      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3c:	d027      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a2c      	ldr	r2, [pc, #176]	; (8003bf4 <TIM_Base_SetConfig+0x118>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d023      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a2b      	ldr	r2, [pc, #172]	; (8003bf8 <TIM_Base_SetConfig+0x11c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d01f      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a2a      	ldr	r2, [pc, #168]	; (8003bfc <TIM_Base_SetConfig+0x120>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d01b      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a29      	ldr	r2, [pc, #164]	; (8003c00 <TIM_Base_SetConfig+0x124>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d017      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a28      	ldr	r2, [pc, #160]	; (8003c04 <TIM_Base_SetConfig+0x128>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d013      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a27      	ldr	r2, [pc, #156]	; (8003c08 <TIM_Base_SetConfig+0x12c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00f      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a26      	ldr	r2, [pc, #152]	; (8003c0c <TIM_Base_SetConfig+0x130>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00b      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a25      	ldr	r2, [pc, #148]	; (8003c10 <TIM_Base_SetConfig+0x134>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d007      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a24      	ldr	r2, [pc, #144]	; (8003c14 <TIM_Base_SetConfig+0x138>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d003      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a23      	ldr	r2, [pc, #140]	; (8003c18 <TIM_Base_SetConfig+0x13c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d108      	bne.n	8003ba0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a0a      	ldr	r2, [pc, #40]	; (8003bf0 <TIM_Base_SetConfig+0x114>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d003      	beq.n	8003bd4 <TIM_Base_SetConfig+0xf8>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a0c      	ldr	r2, [pc, #48]	; (8003c00 <TIM_Base_SetConfig+0x124>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d103      	bne.n	8003bdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	615a      	str	r2, [r3, #20]
}
 8003be2:	bf00      	nop
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40010000 	.word	0x40010000
 8003bf4:	40000400 	.word	0x40000400
 8003bf8:	40000800 	.word	0x40000800
 8003bfc:	40000c00 	.word	0x40000c00
 8003c00:	40010400 	.word	0x40010400
 8003c04:	40014000 	.word	0x40014000
 8003c08:	40014400 	.word	0x40014400
 8003c0c:	40014800 	.word	0x40014800
 8003c10:	40001800 	.word	0x40001800
 8003c14:	40001c00 	.word	0x40001c00
 8003c18:	40002000 	.word	0x40002000

08003c1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	f023 0201 	bic.w	r2, r3, #1
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f023 030a 	bic.w	r3, r3, #10
 8003c58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	621a      	str	r2, [r3, #32]
}
 8003c6e:	bf00      	nop
 8003c70:	371c      	adds	r7, #28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b087      	sub	sp, #28
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	60f8      	str	r0, [r7, #12]
 8003c82:	60b9      	str	r1, [r7, #8]
 8003c84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	f023 0210 	bic.w	r2, r3, #16
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ca4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	031b      	lsls	r3, r3, #12
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	621a      	str	r2, [r3, #32]
}
 8003cce:	bf00      	nop
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b085      	sub	sp, #20
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f043 0307 	orr.w	r3, r3, #7
 8003cfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	609a      	str	r2, [r3, #8]
}
 8003d04:	bf00      	nop
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	021a      	lsls	r2, r3, #8
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	609a      	str	r2, [r3, #8]
}
 8003d44:	bf00      	nop
 8003d46:	371c      	adds	r7, #28
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e06d      	b.n	8003e44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a30      	ldr	r2, [pc, #192]	; (8003e50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d004      	beq.n	8003d9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a2f      	ldr	r2, [pc, #188]	; (8003e54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d108      	bne.n	8003dae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003da2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a20      	ldr	r2, [pc, #128]	; (8003e50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d022      	beq.n	8003e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dda:	d01d      	beq.n	8003e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1d      	ldr	r2, [pc, #116]	; (8003e58 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d018      	beq.n	8003e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1c      	ldr	r2, [pc, #112]	; (8003e5c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d013      	beq.n	8003e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a1a      	ldr	r2, [pc, #104]	; (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00e      	beq.n	8003e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a15      	ldr	r2, [pc, #84]	; (8003e54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d009      	beq.n	8003e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a16      	ldr	r2, [pc, #88]	; (8003e64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d004      	beq.n	8003e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a15      	ldr	r2, [pc, #84]	; (8003e68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d10c      	bne.n	8003e32 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	40010000 	.word	0x40010000
 8003e54:	40010400 	.word	0x40010400
 8003e58:	40000400 	.word	0x40000400
 8003e5c:	40000800 	.word	0x40000800
 8003e60:	40000c00 	.word	0x40000c00
 8003e64:	40014000 	.word	0x40014000
 8003e68:	40001800 	.word	0x40001800

08003e6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e040      	b.n	8003f3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d106      	bne.n	8003ed0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fd fa44 	bl	8001358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2224      	movs	r2, #36	; 0x24
 8003ed4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0201 	bic.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f82c 	bl	8003f44 <UART_SetConfig>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e022      	b.n	8003f3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fa84 	bl	800440c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fb0b 	bl	8004550 <UART_CheckIdleState>
 8003f3a:	4603      	mov	r3, r0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4ba6      	ldr	r3, [pc, #664]	; (8004208 <UART_SetConfig+0x2c4>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6812      	ldr	r2, [r2, #0]
 8003f76:	6979      	ldr	r1, [r7, #20]
 8003f78:	430b      	orrs	r3, r1
 8003f7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a94      	ldr	r2, [pc, #592]	; (800420c <UART_SetConfig+0x2c8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d120      	bne.n	8004002 <UART_SetConfig+0xbe>
 8003fc0:	4b93      	ldr	r3, [pc, #588]	; (8004210 <UART_SetConfig+0x2cc>)
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d816      	bhi.n	8003ffc <UART_SetConfig+0xb8>
 8003fce:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <UART_SetConfig+0x90>)
 8003fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd4:	08003fe5 	.word	0x08003fe5
 8003fd8:	08003ff1 	.word	0x08003ff1
 8003fdc:	08003feb 	.word	0x08003feb
 8003fe0:	08003ff7 	.word	0x08003ff7
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	77fb      	strb	r3, [r7, #31]
 8003fe8:	e150      	b.n	800428c <UART_SetConfig+0x348>
 8003fea:	2302      	movs	r3, #2
 8003fec:	77fb      	strb	r3, [r7, #31]
 8003fee:	e14d      	b.n	800428c <UART_SetConfig+0x348>
 8003ff0:	2304      	movs	r3, #4
 8003ff2:	77fb      	strb	r3, [r7, #31]
 8003ff4:	e14a      	b.n	800428c <UART_SetConfig+0x348>
 8003ff6:	2308      	movs	r3, #8
 8003ff8:	77fb      	strb	r3, [r7, #31]
 8003ffa:	e147      	b.n	800428c <UART_SetConfig+0x348>
 8003ffc:	2310      	movs	r3, #16
 8003ffe:	77fb      	strb	r3, [r7, #31]
 8004000:	e144      	b.n	800428c <UART_SetConfig+0x348>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a83      	ldr	r2, [pc, #524]	; (8004214 <UART_SetConfig+0x2d0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d132      	bne.n	8004072 <UART_SetConfig+0x12e>
 800400c:	4b80      	ldr	r3, [pc, #512]	; (8004210 <UART_SetConfig+0x2cc>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004012:	f003 030c 	and.w	r3, r3, #12
 8004016:	2b0c      	cmp	r3, #12
 8004018:	d828      	bhi.n	800406c <UART_SetConfig+0x128>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <UART_SetConfig+0xdc>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	08004055 	.word	0x08004055
 8004024:	0800406d 	.word	0x0800406d
 8004028:	0800406d 	.word	0x0800406d
 800402c:	0800406d 	.word	0x0800406d
 8004030:	08004061 	.word	0x08004061
 8004034:	0800406d 	.word	0x0800406d
 8004038:	0800406d 	.word	0x0800406d
 800403c:	0800406d 	.word	0x0800406d
 8004040:	0800405b 	.word	0x0800405b
 8004044:	0800406d 	.word	0x0800406d
 8004048:	0800406d 	.word	0x0800406d
 800404c:	0800406d 	.word	0x0800406d
 8004050:	08004067 	.word	0x08004067
 8004054:	2300      	movs	r3, #0
 8004056:	77fb      	strb	r3, [r7, #31]
 8004058:	e118      	b.n	800428c <UART_SetConfig+0x348>
 800405a:	2302      	movs	r3, #2
 800405c:	77fb      	strb	r3, [r7, #31]
 800405e:	e115      	b.n	800428c <UART_SetConfig+0x348>
 8004060:	2304      	movs	r3, #4
 8004062:	77fb      	strb	r3, [r7, #31]
 8004064:	e112      	b.n	800428c <UART_SetConfig+0x348>
 8004066:	2308      	movs	r3, #8
 8004068:	77fb      	strb	r3, [r7, #31]
 800406a:	e10f      	b.n	800428c <UART_SetConfig+0x348>
 800406c:	2310      	movs	r3, #16
 800406e:	77fb      	strb	r3, [r7, #31]
 8004070:	e10c      	b.n	800428c <UART_SetConfig+0x348>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a68      	ldr	r2, [pc, #416]	; (8004218 <UART_SetConfig+0x2d4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d120      	bne.n	80040be <UART_SetConfig+0x17a>
 800407c:	4b64      	ldr	r3, [pc, #400]	; (8004210 <UART_SetConfig+0x2cc>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004086:	2b30      	cmp	r3, #48	; 0x30
 8004088:	d013      	beq.n	80040b2 <UART_SetConfig+0x16e>
 800408a:	2b30      	cmp	r3, #48	; 0x30
 800408c:	d814      	bhi.n	80040b8 <UART_SetConfig+0x174>
 800408e:	2b20      	cmp	r3, #32
 8004090:	d009      	beq.n	80040a6 <UART_SetConfig+0x162>
 8004092:	2b20      	cmp	r3, #32
 8004094:	d810      	bhi.n	80040b8 <UART_SetConfig+0x174>
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <UART_SetConfig+0x15c>
 800409a:	2b10      	cmp	r3, #16
 800409c:	d006      	beq.n	80040ac <UART_SetConfig+0x168>
 800409e:	e00b      	b.n	80040b8 <UART_SetConfig+0x174>
 80040a0:	2300      	movs	r3, #0
 80040a2:	77fb      	strb	r3, [r7, #31]
 80040a4:	e0f2      	b.n	800428c <UART_SetConfig+0x348>
 80040a6:	2302      	movs	r3, #2
 80040a8:	77fb      	strb	r3, [r7, #31]
 80040aa:	e0ef      	b.n	800428c <UART_SetConfig+0x348>
 80040ac:	2304      	movs	r3, #4
 80040ae:	77fb      	strb	r3, [r7, #31]
 80040b0:	e0ec      	b.n	800428c <UART_SetConfig+0x348>
 80040b2:	2308      	movs	r3, #8
 80040b4:	77fb      	strb	r3, [r7, #31]
 80040b6:	e0e9      	b.n	800428c <UART_SetConfig+0x348>
 80040b8:	2310      	movs	r3, #16
 80040ba:	77fb      	strb	r3, [r7, #31]
 80040bc:	e0e6      	b.n	800428c <UART_SetConfig+0x348>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a56      	ldr	r2, [pc, #344]	; (800421c <UART_SetConfig+0x2d8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d120      	bne.n	800410a <UART_SetConfig+0x1c6>
 80040c8:	4b51      	ldr	r3, [pc, #324]	; (8004210 <UART_SetConfig+0x2cc>)
 80040ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040d2:	2bc0      	cmp	r3, #192	; 0xc0
 80040d4:	d013      	beq.n	80040fe <UART_SetConfig+0x1ba>
 80040d6:	2bc0      	cmp	r3, #192	; 0xc0
 80040d8:	d814      	bhi.n	8004104 <UART_SetConfig+0x1c0>
 80040da:	2b80      	cmp	r3, #128	; 0x80
 80040dc:	d009      	beq.n	80040f2 <UART_SetConfig+0x1ae>
 80040de:	2b80      	cmp	r3, #128	; 0x80
 80040e0:	d810      	bhi.n	8004104 <UART_SetConfig+0x1c0>
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <UART_SetConfig+0x1a8>
 80040e6:	2b40      	cmp	r3, #64	; 0x40
 80040e8:	d006      	beq.n	80040f8 <UART_SetConfig+0x1b4>
 80040ea:	e00b      	b.n	8004104 <UART_SetConfig+0x1c0>
 80040ec:	2300      	movs	r3, #0
 80040ee:	77fb      	strb	r3, [r7, #31]
 80040f0:	e0cc      	b.n	800428c <UART_SetConfig+0x348>
 80040f2:	2302      	movs	r3, #2
 80040f4:	77fb      	strb	r3, [r7, #31]
 80040f6:	e0c9      	b.n	800428c <UART_SetConfig+0x348>
 80040f8:	2304      	movs	r3, #4
 80040fa:	77fb      	strb	r3, [r7, #31]
 80040fc:	e0c6      	b.n	800428c <UART_SetConfig+0x348>
 80040fe:	2308      	movs	r3, #8
 8004100:	77fb      	strb	r3, [r7, #31]
 8004102:	e0c3      	b.n	800428c <UART_SetConfig+0x348>
 8004104:	2310      	movs	r3, #16
 8004106:	77fb      	strb	r3, [r7, #31]
 8004108:	e0c0      	b.n	800428c <UART_SetConfig+0x348>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a44      	ldr	r2, [pc, #272]	; (8004220 <UART_SetConfig+0x2dc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d125      	bne.n	8004160 <UART_SetConfig+0x21c>
 8004114:	4b3e      	ldr	r3, [pc, #248]	; (8004210 <UART_SetConfig+0x2cc>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004122:	d017      	beq.n	8004154 <UART_SetConfig+0x210>
 8004124:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004128:	d817      	bhi.n	800415a <UART_SetConfig+0x216>
 800412a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800412e:	d00b      	beq.n	8004148 <UART_SetConfig+0x204>
 8004130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004134:	d811      	bhi.n	800415a <UART_SetConfig+0x216>
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <UART_SetConfig+0x1fe>
 800413a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800413e:	d006      	beq.n	800414e <UART_SetConfig+0x20a>
 8004140:	e00b      	b.n	800415a <UART_SetConfig+0x216>
 8004142:	2300      	movs	r3, #0
 8004144:	77fb      	strb	r3, [r7, #31]
 8004146:	e0a1      	b.n	800428c <UART_SetConfig+0x348>
 8004148:	2302      	movs	r3, #2
 800414a:	77fb      	strb	r3, [r7, #31]
 800414c:	e09e      	b.n	800428c <UART_SetConfig+0x348>
 800414e:	2304      	movs	r3, #4
 8004150:	77fb      	strb	r3, [r7, #31]
 8004152:	e09b      	b.n	800428c <UART_SetConfig+0x348>
 8004154:	2308      	movs	r3, #8
 8004156:	77fb      	strb	r3, [r7, #31]
 8004158:	e098      	b.n	800428c <UART_SetConfig+0x348>
 800415a:	2310      	movs	r3, #16
 800415c:	77fb      	strb	r3, [r7, #31]
 800415e:	e095      	b.n	800428c <UART_SetConfig+0x348>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a2f      	ldr	r2, [pc, #188]	; (8004224 <UART_SetConfig+0x2e0>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d125      	bne.n	80041b6 <UART_SetConfig+0x272>
 800416a:	4b29      	ldr	r3, [pc, #164]	; (8004210 <UART_SetConfig+0x2cc>)
 800416c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004170:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004174:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004178:	d017      	beq.n	80041aa <UART_SetConfig+0x266>
 800417a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800417e:	d817      	bhi.n	80041b0 <UART_SetConfig+0x26c>
 8004180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004184:	d00b      	beq.n	800419e <UART_SetConfig+0x25a>
 8004186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800418a:	d811      	bhi.n	80041b0 <UART_SetConfig+0x26c>
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <UART_SetConfig+0x254>
 8004190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004194:	d006      	beq.n	80041a4 <UART_SetConfig+0x260>
 8004196:	e00b      	b.n	80041b0 <UART_SetConfig+0x26c>
 8004198:	2301      	movs	r3, #1
 800419a:	77fb      	strb	r3, [r7, #31]
 800419c:	e076      	b.n	800428c <UART_SetConfig+0x348>
 800419e:	2302      	movs	r3, #2
 80041a0:	77fb      	strb	r3, [r7, #31]
 80041a2:	e073      	b.n	800428c <UART_SetConfig+0x348>
 80041a4:	2304      	movs	r3, #4
 80041a6:	77fb      	strb	r3, [r7, #31]
 80041a8:	e070      	b.n	800428c <UART_SetConfig+0x348>
 80041aa:	2308      	movs	r3, #8
 80041ac:	77fb      	strb	r3, [r7, #31]
 80041ae:	e06d      	b.n	800428c <UART_SetConfig+0x348>
 80041b0:	2310      	movs	r3, #16
 80041b2:	77fb      	strb	r3, [r7, #31]
 80041b4:	e06a      	b.n	800428c <UART_SetConfig+0x348>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a1b      	ldr	r2, [pc, #108]	; (8004228 <UART_SetConfig+0x2e4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d138      	bne.n	8004232 <UART_SetConfig+0x2ee>
 80041c0:	4b13      	ldr	r3, [pc, #76]	; (8004210 <UART_SetConfig+0x2cc>)
 80041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80041ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041ce:	d017      	beq.n	8004200 <UART_SetConfig+0x2bc>
 80041d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041d4:	d82a      	bhi.n	800422c <UART_SetConfig+0x2e8>
 80041d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041da:	d00b      	beq.n	80041f4 <UART_SetConfig+0x2b0>
 80041dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e0:	d824      	bhi.n	800422c <UART_SetConfig+0x2e8>
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <UART_SetConfig+0x2aa>
 80041e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ea:	d006      	beq.n	80041fa <UART_SetConfig+0x2b6>
 80041ec:	e01e      	b.n	800422c <UART_SetConfig+0x2e8>
 80041ee:	2300      	movs	r3, #0
 80041f0:	77fb      	strb	r3, [r7, #31]
 80041f2:	e04b      	b.n	800428c <UART_SetConfig+0x348>
 80041f4:	2302      	movs	r3, #2
 80041f6:	77fb      	strb	r3, [r7, #31]
 80041f8:	e048      	b.n	800428c <UART_SetConfig+0x348>
 80041fa:	2304      	movs	r3, #4
 80041fc:	77fb      	strb	r3, [r7, #31]
 80041fe:	e045      	b.n	800428c <UART_SetConfig+0x348>
 8004200:	2308      	movs	r3, #8
 8004202:	77fb      	strb	r3, [r7, #31]
 8004204:	e042      	b.n	800428c <UART_SetConfig+0x348>
 8004206:	bf00      	nop
 8004208:	efff69f3 	.word	0xefff69f3
 800420c:	40011000 	.word	0x40011000
 8004210:	40023800 	.word	0x40023800
 8004214:	40004400 	.word	0x40004400
 8004218:	40004800 	.word	0x40004800
 800421c:	40004c00 	.word	0x40004c00
 8004220:	40005000 	.word	0x40005000
 8004224:	40011400 	.word	0x40011400
 8004228:	40007800 	.word	0x40007800
 800422c:	2310      	movs	r3, #16
 800422e:	77fb      	strb	r3, [r7, #31]
 8004230:	e02c      	b.n	800428c <UART_SetConfig+0x348>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a72      	ldr	r2, [pc, #456]	; (8004400 <UART_SetConfig+0x4bc>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d125      	bne.n	8004288 <UART_SetConfig+0x344>
 800423c:	4b71      	ldr	r3, [pc, #452]	; (8004404 <UART_SetConfig+0x4c0>)
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004242:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004246:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800424a:	d017      	beq.n	800427c <UART_SetConfig+0x338>
 800424c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004250:	d817      	bhi.n	8004282 <UART_SetConfig+0x33e>
 8004252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004256:	d00b      	beq.n	8004270 <UART_SetConfig+0x32c>
 8004258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800425c:	d811      	bhi.n	8004282 <UART_SetConfig+0x33e>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <UART_SetConfig+0x326>
 8004262:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004266:	d006      	beq.n	8004276 <UART_SetConfig+0x332>
 8004268:	e00b      	b.n	8004282 <UART_SetConfig+0x33e>
 800426a:	2300      	movs	r3, #0
 800426c:	77fb      	strb	r3, [r7, #31]
 800426e:	e00d      	b.n	800428c <UART_SetConfig+0x348>
 8004270:	2302      	movs	r3, #2
 8004272:	77fb      	strb	r3, [r7, #31]
 8004274:	e00a      	b.n	800428c <UART_SetConfig+0x348>
 8004276:	2304      	movs	r3, #4
 8004278:	77fb      	strb	r3, [r7, #31]
 800427a:	e007      	b.n	800428c <UART_SetConfig+0x348>
 800427c:	2308      	movs	r3, #8
 800427e:	77fb      	strb	r3, [r7, #31]
 8004280:	e004      	b.n	800428c <UART_SetConfig+0x348>
 8004282:	2310      	movs	r3, #16
 8004284:	77fb      	strb	r3, [r7, #31]
 8004286:	e001      	b.n	800428c <UART_SetConfig+0x348>
 8004288:	2310      	movs	r3, #16
 800428a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004294:	d15b      	bne.n	800434e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004296:	7ffb      	ldrb	r3, [r7, #31]
 8004298:	2b08      	cmp	r3, #8
 800429a:	d828      	bhi.n	80042ee <UART_SetConfig+0x3aa>
 800429c:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <UART_SetConfig+0x360>)
 800429e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a2:	bf00      	nop
 80042a4:	080042c9 	.word	0x080042c9
 80042a8:	080042d1 	.word	0x080042d1
 80042ac:	080042d9 	.word	0x080042d9
 80042b0:	080042ef 	.word	0x080042ef
 80042b4:	080042df 	.word	0x080042df
 80042b8:	080042ef 	.word	0x080042ef
 80042bc:	080042ef 	.word	0x080042ef
 80042c0:	080042ef 	.word	0x080042ef
 80042c4:	080042e7 	.word	0x080042e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042c8:	f7fe fd0e 	bl	8002ce8 <HAL_RCC_GetPCLK1Freq>
 80042cc:	61b8      	str	r0, [r7, #24]
        break;
 80042ce:	e013      	b.n	80042f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042d0:	f7fe fd1e 	bl	8002d10 <HAL_RCC_GetPCLK2Freq>
 80042d4:	61b8      	str	r0, [r7, #24]
        break;
 80042d6:	e00f      	b.n	80042f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042d8:	4b4b      	ldr	r3, [pc, #300]	; (8004408 <UART_SetConfig+0x4c4>)
 80042da:	61bb      	str	r3, [r7, #24]
        break;
 80042dc:	e00c      	b.n	80042f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042de:	f7fe fbf1 	bl	8002ac4 <HAL_RCC_GetSysClockFreq>
 80042e2:	61b8      	str	r0, [r7, #24]
        break;
 80042e4:	e008      	b.n	80042f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ea:	61bb      	str	r3, [r7, #24]
        break;
 80042ec:	e004      	b.n	80042f8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	77bb      	strb	r3, [r7, #30]
        break;
 80042f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d074      	beq.n	80043e8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	005a      	lsls	r2, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	085b      	lsrs	r3, r3, #1
 8004308:	441a      	add	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004312:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	2b0f      	cmp	r3, #15
 8004318:	d916      	bls.n	8004348 <UART_SetConfig+0x404>
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004320:	d212      	bcs.n	8004348 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	b29b      	uxth	r3, r3
 8004326:	f023 030f 	bic.w	r3, r3, #15
 800432a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	085b      	lsrs	r3, r3, #1
 8004330:	b29b      	uxth	r3, r3
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	b29a      	uxth	r2, r3
 8004338:	89fb      	ldrh	r3, [r7, #14]
 800433a:	4313      	orrs	r3, r2
 800433c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	89fa      	ldrh	r2, [r7, #14]
 8004344:	60da      	str	r2, [r3, #12]
 8004346:	e04f      	b.n	80043e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	77bb      	strb	r3, [r7, #30]
 800434c:	e04c      	b.n	80043e8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800434e:	7ffb      	ldrb	r3, [r7, #31]
 8004350:	2b08      	cmp	r3, #8
 8004352:	d828      	bhi.n	80043a6 <UART_SetConfig+0x462>
 8004354:	a201      	add	r2, pc, #4	; (adr r2, 800435c <UART_SetConfig+0x418>)
 8004356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435a:	bf00      	nop
 800435c:	08004381 	.word	0x08004381
 8004360:	08004389 	.word	0x08004389
 8004364:	08004391 	.word	0x08004391
 8004368:	080043a7 	.word	0x080043a7
 800436c:	08004397 	.word	0x08004397
 8004370:	080043a7 	.word	0x080043a7
 8004374:	080043a7 	.word	0x080043a7
 8004378:	080043a7 	.word	0x080043a7
 800437c:	0800439f 	.word	0x0800439f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004380:	f7fe fcb2 	bl	8002ce8 <HAL_RCC_GetPCLK1Freq>
 8004384:	61b8      	str	r0, [r7, #24]
        break;
 8004386:	e013      	b.n	80043b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004388:	f7fe fcc2 	bl	8002d10 <HAL_RCC_GetPCLK2Freq>
 800438c:	61b8      	str	r0, [r7, #24]
        break;
 800438e:	e00f      	b.n	80043b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004390:	4b1d      	ldr	r3, [pc, #116]	; (8004408 <UART_SetConfig+0x4c4>)
 8004392:	61bb      	str	r3, [r7, #24]
        break;
 8004394:	e00c      	b.n	80043b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004396:	f7fe fb95 	bl	8002ac4 <HAL_RCC_GetSysClockFreq>
 800439a:	61b8      	str	r0, [r7, #24]
        break;
 800439c:	e008      	b.n	80043b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800439e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043a2:	61bb      	str	r3, [r7, #24]
        break;
 80043a4:	e004      	b.n	80043b0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	77bb      	strb	r3, [r7, #30]
        break;
 80043ae:	bf00      	nop
    }

    if (pclk != 0U)
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d018      	beq.n	80043e8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	085a      	lsrs	r2, r3, #1
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	441a      	add	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	2b0f      	cmp	r3, #15
 80043ce:	d909      	bls.n	80043e4 <UART_SetConfig+0x4a0>
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d6:	d205      	bcs.n	80043e4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	b29a      	uxth	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	60da      	str	r2, [r3, #12]
 80043e2:	e001      	b.n	80043e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80043f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3720      	adds	r7, #32
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40007c00 	.word	0x40007c00
 8004404:	40023800 	.word	0x40023800
 8004408:	00f42400 	.word	0x00f42400

0800440c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	f003 0310 	and.w	r3, r3, #16
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	f003 0320 	and.w	r3, r3, #32
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01a      	beq.n	8004522 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800450a:	d10a      	bne.n	8004522 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	605a      	str	r2, [r3, #4]
  }
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af02      	add	r7, sp, #8
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004560:	f7fc ffd4 	bl	800150c <HAL_GetTick>
 8004564:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0308 	and.w	r3, r3, #8
 8004570:	2b08      	cmp	r3, #8
 8004572:	d10e      	bne.n	8004592 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004574:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f81b 	bl	80045be <UART_WaitOnFlagUntilTimeout>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e011      	b.n	80045b6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2220      	movs	r2, #32
 8004596:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2220      	movs	r2, #32
 800459c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b09c      	sub	sp, #112	; 0x70
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	60b9      	str	r1, [r7, #8]
 80045c8:	603b      	str	r3, [r7, #0]
 80045ca:	4613      	mov	r3, r2
 80045cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ce:	e0a7      	b.n	8004720 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d6:	f000 80a3 	beq.w	8004720 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045da:	f7fc ff97 	bl	800150c <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d302      	bcc.n	80045f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80045ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d13f      	bne.n	8004670 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80045fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004600:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004604:	667b      	str	r3, [r7, #100]	; 0x64
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800460e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004610:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004612:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004614:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004616:	e841 2300 	strex	r3, r2, [r1]
 800461a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800461c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1e6      	bne.n	80045f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3308      	adds	r3, #8
 8004628:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800462c:	e853 3f00 	ldrex	r3, [r3]
 8004630:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004634:	f023 0301 	bic.w	r3, r3, #1
 8004638:	663b      	str	r3, [r7, #96]	; 0x60
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3308      	adds	r3, #8
 8004640:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004642:	64ba      	str	r2, [r7, #72]	; 0x48
 8004644:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004646:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004648:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800464a:	e841 2300 	strex	r3, r2, [r1]
 800464e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1e5      	bne.n	8004622 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2220      	movs	r2, #32
 800465a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2220      	movs	r2, #32
 8004660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e068      	b.n	8004742 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	d050      	beq.n	8004720 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004688:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800468c:	d148      	bne.n	8004720 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004696:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	e853 3f00 	ldrex	r3, [r3]
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b6:	637b      	str	r3, [r7, #52]	; 0x34
 80046b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046be:	e841 2300 	strex	r3, r2, [r1]
 80046c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e6      	bne.n	8004698 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3308      	adds	r3, #8
 80046d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	613b      	str	r3, [r7, #16]
   return(result);
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3308      	adds	r3, #8
 80046e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046ea:	623a      	str	r2, [r7, #32]
 80046ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ee:	69f9      	ldr	r1, [r7, #28]
 80046f0:	6a3a      	ldr	r2, [r7, #32]
 80046f2:	e841 2300 	strex	r3, r2, [r1]
 80046f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1e5      	bne.n	80046ca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2220      	movs	r2, #32
 8004702:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2220      	movs	r2, #32
 8004708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e010      	b.n	8004742 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	69da      	ldr	r2, [r3, #28]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	4013      	ands	r3, r2
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	429a      	cmp	r2, r3
 800472e:	bf0c      	ite	eq
 8004730:	2301      	moveq	r3, #1
 8004732:	2300      	movne	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	461a      	mov	r2, r3
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	429a      	cmp	r2, r3
 800473c:	f43f af48 	beq.w	80045d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3770      	adds	r7, #112	; 0x70
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <DAC_SetVoltage>:
 */

#include "User_dac.h"

void DAC_SetVoltage(DAC_HandleTypeDef *hdac,uint32_t Channel, float Volt)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t value = Volt * (4096/3.3f);
 800475a:	edd7 7a01 	vldr	s15, [r7, #4]
 800475e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004784 <DAC_SetVoltage+0x38>
 8004762:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800476a:	ee17 3a90 	vmov	r3, s15
 800476e:	617b      	str	r3, [r7, #20]
	HAL_DAC_SetValue(hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value);
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2200      	movs	r2, #0
 8004774:	2100      	movs	r1, #0
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f7fd f8b3 	bl	80018e2 <HAL_DAC_SetValue>
}
 800477c:	bf00      	nop
 800477e:	3718      	adds	r7, #24
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	449b26ca 	.word	0x449b26ca

08004788 <__libc_init_array>:
 8004788:	b570      	push	{r4, r5, r6, lr}
 800478a:	4d0d      	ldr	r5, [pc, #52]	; (80047c0 <__libc_init_array+0x38>)
 800478c:	4c0d      	ldr	r4, [pc, #52]	; (80047c4 <__libc_init_array+0x3c>)
 800478e:	1b64      	subs	r4, r4, r5
 8004790:	10a4      	asrs	r4, r4, #2
 8004792:	2600      	movs	r6, #0
 8004794:	42a6      	cmp	r6, r4
 8004796:	d109      	bne.n	80047ac <__libc_init_array+0x24>
 8004798:	4d0b      	ldr	r5, [pc, #44]	; (80047c8 <__libc_init_array+0x40>)
 800479a:	4c0c      	ldr	r4, [pc, #48]	; (80047cc <__libc_init_array+0x44>)
 800479c:	f000 fd7c 	bl	8005298 <_init>
 80047a0:	1b64      	subs	r4, r4, r5
 80047a2:	10a4      	asrs	r4, r4, #2
 80047a4:	2600      	movs	r6, #0
 80047a6:	42a6      	cmp	r6, r4
 80047a8:	d105      	bne.n	80047b6 <__libc_init_array+0x2e>
 80047aa:	bd70      	pop	{r4, r5, r6, pc}
 80047ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b0:	4798      	blx	r3
 80047b2:	3601      	adds	r6, #1
 80047b4:	e7ee      	b.n	8004794 <__libc_init_array+0xc>
 80047b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ba:	4798      	blx	r3
 80047bc:	3601      	adds	r6, #1
 80047be:	e7f2      	b.n	80047a6 <__libc_init_array+0x1e>
 80047c0:	080056a8 	.word	0x080056a8
 80047c4:	080056a8 	.word	0x080056a8
 80047c8:	080056a8 	.word	0x080056a8
 80047cc:	080056ac 	.word	0x080056ac

080047d0 <memset>:
 80047d0:	4402      	add	r2, r0
 80047d2:	4603      	mov	r3, r0
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d100      	bne.n	80047da <memset+0xa>
 80047d8:	4770      	bx	lr
 80047da:	f803 1b01 	strb.w	r1, [r3], #1
 80047de:	e7f9      	b.n	80047d4 <memset+0x4>

080047e0 <sinf>:
 80047e0:	ee10 3a10 	vmov	r3, s0
 80047e4:	b507      	push	{r0, r1, r2, lr}
 80047e6:	4a1f      	ldr	r2, [pc, #124]	; (8004864 <sinf+0x84>)
 80047e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047ec:	4293      	cmp	r3, r2
 80047ee:	dc07      	bgt.n	8004800 <sinf+0x20>
 80047f0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8004868 <sinf+0x88>
 80047f4:	2000      	movs	r0, #0
 80047f6:	b003      	add	sp, #12
 80047f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80047fc:	f000 bc48 	b.w	8005090 <__kernel_sinf>
 8004800:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004804:	db04      	blt.n	8004810 <sinf+0x30>
 8004806:	ee30 0a40 	vsub.f32	s0, s0, s0
 800480a:	b003      	add	sp, #12
 800480c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004810:	4668      	mov	r0, sp
 8004812:	f000 f82b 	bl	800486c <__ieee754_rem_pio2f>
 8004816:	f000 0003 	and.w	r0, r0, #3
 800481a:	2801      	cmp	r0, #1
 800481c:	d00a      	beq.n	8004834 <sinf+0x54>
 800481e:	2802      	cmp	r0, #2
 8004820:	d00f      	beq.n	8004842 <sinf+0x62>
 8004822:	b9c0      	cbnz	r0, 8004856 <sinf+0x76>
 8004824:	eddd 0a01 	vldr	s1, [sp, #4]
 8004828:	ed9d 0a00 	vldr	s0, [sp]
 800482c:	2001      	movs	r0, #1
 800482e:	f000 fc2f 	bl	8005090 <__kernel_sinf>
 8004832:	e7ea      	b.n	800480a <sinf+0x2a>
 8004834:	eddd 0a01 	vldr	s1, [sp, #4]
 8004838:	ed9d 0a00 	vldr	s0, [sp]
 800483c:	f000 f952 	bl	8004ae4 <__kernel_cosf>
 8004840:	e7e3      	b.n	800480a <sinf+0x2a>
 8004842:	eddd 0a01 	vldr	s1, [sp, #4]
 8004846:	ed9d 0a00 	vldr	s0, [sp]
 800484a:	2001      	movs	r0, #1
 800484c:	f000 fc20 	bl	8005090 <__kernel_sinf>
 8004850:	eeb1 0a40 	vneg.f32	s0, s0
 8004854:	e7d9      	b.n	800480a <sinf+0x2a>
 8004856:	eddd 0a01 	vldr	s1, [sp, #4]
 800485a:	ed9d 0a00 	vldr	s0, [sp]
 800485e:	f000 f941 	bl	8004ae4 <__kernel_cosf>
 8004862:	e7f5      	b.n	8004850 <sinf+0x70>
 8004864:	3f490fd8 	.word	0x3f490fd8
 8004868:	00000000 	.word	0x00000000

0800486c <__ieee754_rem_pio2f>:
 800486c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800486e:	ee10 6a10 	vmov	r6, s0
 8004872:	4b8e      	ldr	r3, [pc, #568]	; (8004aac <__ieee754_rem_pio2f+0x240>)
 8004874:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8004878:	429d      	cmp	r5, r3
 800487a:	b087      	sub	sp, #28
 800487c:	eef0 7a40 	vmov.f32	s15, s0
 8004880:	4604      	mov	r4, r0
 8004882:	dc05      	bgt.n	8004890 <__ieee754_rem_pio2f+0x24>
 8004884:	2300      	movs	r3, #0
 8004886:	ed80 0a00 	vstr	s0, [r0]
 800488a:	6043      	str	r3, [r0, #4]
 800488c:	2000      	movs	r0, #0
 800488e:	e01a      	b.n	80048c6 <__ieee754_rem_pio2f+0x5a>
 8004890:	4b87      	ldr	r3, [pc, #540]	; (8004ab0 <__ieee754_rem_pio2f+0x244>)
 8004892:	429d      	cmp	r5, r3
 8004894:	dc46      	bgt.n	8004924 <__ieee754_rem_pio2f+0xb8>
 8004896:	2e00      	cmp	r6, #0
 8004898:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8004ab4 <__ieee754_rem_pio2f+0x248>
 800489c:	4b86      	ldr	r3, [pc, #536]	; (8004ab8 <__ieee754_rem_pio2f+0x24c>)
 800489e:	f025 050f 	bic.w	r5, r5, #15
 80048a2:	dd1f      	ble.n	80048e4 <__ieee754_rem_pio2f+0x78>
 80048a4:	429d      	cmp	r5, r3
 80048a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80048aa:	d00e      	beq.n	80048ca <__ieee754_rem_pio2f+0x5e>
 80048ac:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8004abc <__ieee754_rem_pio2f+0x250>
 80048b0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80048b4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80048b8:	ed80 0a00 	vstr	s0, [r0]
 80048bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80048c0:	2001      	movs	r0, #1
 80048c2:	edc4 7a01 	vstr	s15, [r4, #4]
 80048c6:	b007      	add	sp, #28
 80048c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ca:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8004ac0 <__ieee754_rem_pio2f+0x254>
 80048ce:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8004ac4 <__ieee754_rem_pio2f+0x258>
 80048d2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80048d6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80048da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80048de:	edc0 6a00 	vstr	s13, [r0]
 80048e2:	e7eb      	b.n	80048bc <__ieee754_rem_pio2f+0x50>
 80048e4:	429d      	cmp	r5, r3
 80048e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80048ea:	d00e      	beq.n	800490a <__ieee754_rem_pio2f+0x9e>
 80048ec:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8004abc <__ieee754_rem_pio2f+0x250>
 80048f0:	ee37 0a87 	vadd.f32	s0, s15, s14
 80048f4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80048f8:	ed80 0a00 	vstr	s0, [r0]
 80048fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004900:	f04f 30ff 	mov.w	r0, #4294967295
 8004904:	edc4 7a01 	vstr	s15, [r4, #4]
 8004908:	e7dd      	b.n	80048c6 <__ieee754_rem_pio2f+0x5a>
 800490a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8004ac0 <__ieee754_rem_pio2f+0x254>
 800490e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8004ac4 <__ieee754_rem_pio2f+0x258>
 8004912:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004916:	ee77 6a87 	vadd.f32	s13, s15, s14
 800491a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800491e:	edc0 6a00 	vstr	s13, [r0]
 8004922:	e7eb      	b.n	80048fc <__ieee754_rem_pio2f+0x90>
 8004924:	4b68      	ldr	r3, [pc, #416]	; (8004ac8 <__ieee754_rem_pio2f+0x25c>)
 8004926:	429d      	cmp	r5, r3
 8004928:	dc72      	bgt.n	8004a10 <__ieee754_rem_pio2f+0x1a4>
 800492a:	f000 fbf9 	bl	8005120 <fabsf>
 800492e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004acc <__ieee754_rem_pio2f+0x260>
 8004932:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004936:	eee0 7a07 	vfma.f32	s15, s0, s14
 800493a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800493e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004942:	ee17 0a90 	vmov	r0, s15
 8004946:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8004ab4 <__ieee754_rem_pio2f+0x248>
 800494a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800494e:	281f      	cmp	r0, #31
 8004950:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8004abc <__ieee754_rem_pio2f+0x250>
 8004954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004958:	eeb1 6a47 	vneg.f32	s12, s14
 800495c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004960:	ee16 2a90 	vmov	r2, s13
 8004964:	dc1c      	bgt.n	80049a0 <__ieee754_rem_pio2f+0x134>
 8004966:	495a      	ldr	r1, [pc, #360]	; (8004ad0 <__ieee754_rem_pio2f+0x264>)
 8004968:	1e47      	subs	r7, r0, #1
 800496a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800496e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8004972:	428b      	cmp	r3, r1
 8004974:	d014      	beq.n	80049a0 <__ieee754_rem_pio2f+0x134>
 8004976:	6022      	str	r2, [r4, #0]
 8004978:	ed94 7a00 	vldr	s14, [r4]
 800497c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004980:	2e00      	cmp	r6, #0
 8004982:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004986:	ed84 0a01 	vstr	s0, [r4, #4]
 800498a:	da9c      	bge.n	80048c6 <__ieee754_rem_pio2f+0x5a>
 800498c:	eeb1 7a47 	vneg.f32	s14, s14
 8004990:	eeb1 0a40 	vneg.f32	s0, s0
 8004994:	ed84 7a00 	vstr	s14, [r4]
 8004998:	ed84 0a01 	vstr	s0, [r4, #4]
 800499c:	4240      	negs	r0, r0
 800499e:	e792      	b.n	80048c6 <__ieee754_rem_pio2f+0x5a>
 80049a0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80049a4:	15eb      	asrs	r3, r5, #23
 80049a6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80049aa:	2d08      	cmp	r5, #8
 80049ac:	dde3      	ble.n	8004976 <__ieee754_rem_pio2f+0x10a>
 80049ae:	eddf 7a44 	vldr	s15, [pc, #272]	; 8004ac0 <__ieee754_rem_pio2f+0x254>
 80049b2:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004ac4 <__ieee754_rem_pio2f+0x258>
 80049b6:	eef0 6a40 	vmov.f32	s13, s0
 80049ba:	eee6 6a27 	vfma.f32	s13, s12, s15
 80049be:	ee30 0a66 	vsub.f32	s0, s0, s13
 80049c2:	eea6 0a27 	vfma.f32	s0, s12, s15
 80049c6:	eef0 7a40 	vmov.f32	s15, s0
 80049ca:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80049ce:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80049d2:	ee15 2a90 	vmov	r2, s11
 80049d6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80049da:	1a5b      	subs	r3, r3, r1
 80049dc:	2b19      	cmp	r3, #25
 80049de:	dc04      	bgt.n	80049ea <__ieee754_rem_pio2f+0x17e>
 80049e0:	edc4 5a00 	vstr	s11, [r4]
 80049e4:	eeb0 0a66 	vmov.f32	s0, s13
 80049e8:	e7c6      	b.n	8004978 <__ieee754_rem_pio2f+0x10c>
 80049ea:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8004ad4 <__ieee754_rem_pio2f+0x268>
 80049ee:	eeb0 0a66 	vmov.f32	s0, s13
 80049f2:	eea6 0a25 	vfma.f32	s0, s12, s11
 80049f6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80049fa:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004ad8 <__ieee754_rem_pio2f+0x26c>
 80049fe:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004a02:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8004a06:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004a0a:	ed84 7a00 	vstr	s14, [r4]
 8004a0e:	e7b3      	b.n	8004978 <__ieee754_rem_pio2f+0x10c>
 8004a10:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8004a14:	db06      	blt.n	8004a24 <__ieee754_rem_pio2f+0x1b8>
 8004a16:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004a1a:	edc0 7a01 	vstr	s15, [r0, #4]
 8004a1e:	edc0 7a00 	vstr	s15, [r0]
 8004a22:	e733      	b.n	800488c <__ieee754_rem_pio2f+0x20>
 8004a24:	15ea      	asrs	r2, r5, #23
 8004a26:	3a86      	subs	r2, #134	; 0x86
 8004a28:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8004a2c:	ee07 3a90 	vmov	s15, r3
 8004a30:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004a34:	eddf 6a29 	vldr	s13, [pc, #164]	; 8004adc <__ieee754_rem_pio2f+0x270>
 8004a38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004a3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a40:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004a44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004a48:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004a4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004a50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a54:	ed8d 7a04 	vstr	s14, [sp, #16]
 8004a58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004a5c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a64:	edcd 7a05 	vstr	s15, [sp, #20]
 8004a68:	d11e      	bne.n	8004aa8 <__ieee754_rem_pio2f+0x23c>
 8004a6a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a72:	bf14      	ite	ne
 8004a74:	2302      	movne	r3, #2
 8004a76:	2301      	moveq	r3, #1
 8004a78:	4919      	ldr	r1, [pc, #100]	; (8004ae0 <__ieee754_rem_pio2f+0x274>)
 8004a7a:	9101      	str	r1, [sp, #4]
 8004a7c:	2102      	movs	r1, #2
 8004a7e:	9100      	str	r1, [sp, #0]
 8004a80:	a803      	add	r0, sp, #12
 8004a82:	4621      	mov	r1, r4
 8004a84:	f000 f88e 	bl	8004ba4 <__kernel_rem_pio2f>
 8004a88:	2e00      	cmp	r6, #0
 8004a8a:	f6bf af1c 	bge.w	80048c6 <__ieee754_rem_pio2f+0x5a>
 8004a8e:	edd4 7a00 	vldr	s15, [r4]
 8004a92:	eef1 7a67 	vneg.f32	s15, s15
 8004a96:	edc4 7a00 	vstr	s15, [r4]
 8004a9a:	edd4 7a01 	vldr	s15, [r4, #4]
 8004a9e:	eef1 7a67 	vneg.f32	s15, s15
 8004aa2:	edc4 7a01 	vstr	s15, [r4, #4]
 8004aa6:	e779      	b.n	800499c <__ieee754_rem_pio2f+0x130>
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e7e5      	b.n	8004a78 <__ieee754_rem_pio2f+0x20c>
 8004aac:	3f490fd8 	.word	0x3f490fd8
 8004ab0:	4016cbe3 	.word	0x4016cbe3
 8004ab4:	3fc90f80 	.word	0x3fc90f80
 8004ab8:	3fc90fd0 	.word	0x3fc90fd0
 8004abc:	37354443 	.word	0x37354443
 8004ac0:	37354400 	.word	0x37354400
 8004ac4:	2e85a308 	.word	0x2e85a308
 8004ac8:	43490f80 	.word	0x43490f80
 8004acc:	3f22f984 	.word	0x3f22f984
 8004ad0:	080052d0 	.word	0x080052d0
 8004ad4:	2e85a300 	.word	0x2e85a300
 8004ad8:	248d3132 	.word	0x248d3132
 8004adc:	43800000 	.word	0x43800000
 8004ae0:	08005350 	.word	0x08005350

08004ae4 <__kernel_cosf>:
 8004ae4:	ee10 3a10 	vmov	r3, s0
 8004ae8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004aec:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004af0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004af4:	da05      	bge.n	8004b02 <__kernel_cosf+0x1e>
 8004af6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004afa:	ee17 2a90 	vmov	r2, s15
 8004afe:	2a00      	cmp	r2, #0
 8004b00:	d03d      	beq.n	8004b7e <__kernel_cosf+0x9a>
 8004b02:	ee60 5a00 	vmul.f32	s11, s0, s0
 8004b06:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004b84 <__kernel_cosf+0xa0>
 8004b0a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004b88 <__kernel_cosf+0xa4>
 8004b0e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004b8c <__kernel_cosf+0xa8>
 8004b12:	4a1f      	ldr	r2, [pc, #124]	; (8004b90 <__kernel_cosf+0xac>)
 8004b14:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8004b94 <__kernel_cosf+0xb0>
 8004b1e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004b22:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004b98 <__kernel_cosf+0xb4>
 8004b26:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8004b2a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8004b9c <__kernel_cosf+0xb8>
 8004b2e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004b32:	eeb0 7a66 	vmov.f32	s14, s13
 8004b36:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8004b3a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004b3e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8004b42:	ee67 6a25 	vmul.f32	s13, s14, s11
 8004b46:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8004b4a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8004b4e:	dc04      	bgt.n	8004b5a <__kernel_cosf+0x76>
 8004b50:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004b54:	ee36 0a47 	vsub.f32	s0, s12, s14
 8004b58:	4770      	bx	lr
 8004b5a:	4a11      	ldr	r2, [pc, #68]	; (8004ba0 <__kernel_cosf+0xbc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	bfda      	itte	le
 8004b60:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8004b64:	ee06 3a90 	vmovle	s13, r3
 8004b68:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8004b6c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004b70:	ee36 0a66 	vsub.f32	s0, s12, s13
 8004b74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b78:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004b7c:	4770      	bx	lr
 8004b7e:	eeb0 0a46 	vmov.f32	s0, s12
 8004b82:	4770      	bx	lr
 8004b84:	ad47d74e 	.word	0xad47d74e
 8004b88:	310f74f6 	.word	0x310f74f6
 8004b8c:	3d2aaaab 	.word	0x3d2aaaab
 8004b90:	3e999999 	.word	0x3e999999
 8004b94:	b493f27c 	.word	0xb493f27c
 8004b98:	37d00d01 	.word	0x37d00d01
 8004b9c:	bab60b61 	.word	0xbab60b61
 8004ba0:	3f480000 	.word	0x3f480000

08004ba4 <__kernel_rem_pio2f>:
 8004ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba8:	ed2d 8b04 	vpush	{d8-d9}
 8004bac:	b0d9      	sub	sp, #356	; 0x164
 8004bae:	4688      	mov	r8, r1
 8004bb0:	9002      	str	r0, [sp, #8]
 8004bb2:	49bb      	ldr	r1, [pc, #748]	; (8004ea0 <__kernel_rem_pio2f+0x2fc>)
 8004bb4:	9866      	ldr	r0, [sp, #408]	; 0x198
 8004bb6:	9301      	str	r3, [sp, #4]
 8004bb8:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8004bbc:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8004bc0:	1e59      	subs	r1, r3, #1
 8004bc2:	1d13      	adds	r3, r2, #4
 8004bc4:	db27      	blt.n	8004c16 <__kernel_rem_pio2f+0x72>
 8004bc6:	f1b2 0b03 	subs.w	fp, r2, #3
 8004bca:	bf48      	it	mi
 8004bcc:	f102 0b04 	addmi.w	fp, r2, #4
 8004bd0:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8004bd4:	1c45      	adds	r5, r0, #1
 8004bd6:	00ec      	lsls	r4, r5, #3
 8004bd8:	1a47      	subs	r7, r0, r1
 8004bda:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8004eb0 <__kernel_rem_pio2f+0x30c>
 8004bde:	9403      	str	r4, [sp, #12]
 8004be0:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8004be4:	eb0a 0c01 	add.w	ip, sl, r1
 8004be8:	ae1c      	add	r6, sp, #112	; 0x70
 8004bea:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8004bee:	2400      	movs	r4, #0
 8004bf0:	4564      	cmp	r4, ip
 8004bf2:	dd12      	ble.n	8004c1a <__kernel_rem_pio2f+0x76>
 8004bf4:	9b01      	ldr	r3, [sp, #4]
 8004bf6:	ac1c      	add	r4, sp, #112	; 0x70
 8004bf8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8004bfc:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8004c00:	f04f 0c00 	mov.w	ip, #0
 8004c04:	45d4      	cmp	ip, sl
 8004c06:	dc27      	bgt.n	8004c58 <__kernel_rem_pio2f+0xb4>
 8004c08:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004c0c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8004eb0 <__kernel_rem_pio2f+0x30c>
 8004c10:	4627      	mov	r7, r4
 8004c12:	2600      	movs	r6, #0
 8004c14:	e016      	b.n	8004c44 <__kernel_rem_pio2f+0xa0>
 8004c16:	2000      	movs	r0, #0
 8004c18:	e7dc      	b.n	8004bd4 <__kernel_rem_pio2f+0x30>
 8004c1a:	42e7      	cmn	r7, r4
 8004c1c:	bf5d      	ittte	pl
 8004c1e:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8004c22:	ee07 3a90 	vmovpl	s15, r3
 8004c26:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8004c2a:	eef0 7a47 	vmovmi.f32	s15, s14
 8004c2e:	ece6 7a01 	vstmia	r6!, {s15}
 8004c32:	3401      	adds	r4, #1
 8004c34:	e7dc      	b.n	8004bf0 <__kernel_rem_pio2f+0x4c>
 8004c36:	ecf9 6a01 	vldmia	r9!, {s13}
 8004c3a:	ed97 7a00 	vldr	s14, [r7]
 8004c3e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004c42:	3601      	adds	r6, #1
 8004c44:	428e      	cmp	r6, r1
 8004c46:	f1a7 0704 	sub.w	r7, r7, #4
 8004c4a:	ddf4      	ble.n	8004c36 <__kernel_rem_pio2f+0x92>
 8004c4c:	eceb 7a01 	vstmia	fp!, {s15}
 8004c50:	f10c 0c01 	add.w	ip, ip, #1
 8004c54:	3404      	adds	r4, #4
 8004c56:	e7d5      	b.n	8004c04 <__kernel_rem_pio2f+0x60>
 8004c58:	ab08      	add	r3, sp, #32
 8004c5a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004c5e:	eddf 8a93 	vldr	s17, [pc, #588]	; 8004eac <__kernel_rem_pio2f+0x308>
 8004c62:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8004ea8 <__kernel_rem_pio2f+0x304>
 8004c66:	9304      	str	r3, [sp, #16]
 8004c68:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8004c6c:	4656      	mov	r6, sl
 8004c6e:	00b3      	lsls	r3, r6, #2
 8004c70:	9305      	str	r3, [sp, #20]
 8004c72:	ab58      	add	r3, sp, #352	; 0x160
 8004c74:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8004c78:	ac08      	add	r4, sp, #32
 8004c7a:	ab44      	add	r3, sp, #272	; 0x110
 8004c7c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8004c80:	46a4      	mov	ip, r4
 8004c82:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8004c86:	4637      	mov	r7, r6
 8004c88:	2f00      	cmp	r7, #0
 8004c8a:	f1a0 0004 	sub.w	r0, r0, #4
 8004c8e:	dc4f      	bgt.n	8004d30 <__kernel_rem_pio2f+0x18c>
 8004c90:	4628      	mov	r0, r5
 8004c92:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8004c96:	f000 fa8d 	bl	80051b4 <scalbnf>
 8004c9a:	eeb0 8a40 	vmov.f32	s16, s0
 8004c9e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8004ca2:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004ca6:	f000 fa43 	bl	8005130 <floorf>
 8004caa:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8004cae:	eea0 8a67 	vfms.f32	s16, s0, s15
 8004cb2:	2d00      	cmp	r5, #0
 8004cb4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8004cb8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004cbc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004cc0:	ee17 9a90 	vmov	r9, s15
 8004cc4:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004cc8:	dd44      	ble.n	8004d54 <__kernel_rem_pio2f+0x1b0>
 8004cca:	f106 3cff 	add.w	ip, r6, #4294967295
 8004cce:	ab08      	add	r3, sp, #32
 8004cd0:	f1c5 0e08 	rsb	lr, r5, #8
 8004cd4:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8004cd8:	fa47 f00e 	asr.w	r0, r7, lr
 8004cdc:	4481      	add	r9, r0
 8004cde:	fa00 f00e 	lsl.w	r0, r0, lr
 8004ce2:	1a3f      	subs	r7, r7, r0
 8004ce4:	f1c5 0007 	rsb	r0, r5, #7
 8004ce8:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8004cec:	4107      	asrs	r7, r0
 8004cee:	2f00      	cmp	r7, #0
 8004cf0:	dd3f      	ble.n	8004d72 <__kernel_rem_pio2f+0x1ce>
 8004cf2:	f04f 0e00 	mov.w	lr, #0
 8004cf6:	f109 0901 	add.w	r9, r9, #1
 8004cfa:	4673      	mov	r3, lr
 8004cfc:	4576      	cmp	r6, lr
 8004cfe:	dc6b      	bgt.n	8004dd8 <__kernel_rem_pio2f+0x234>
 8004d00:	2d00      	cmp	r5, #0
 8004d02:	dd04      	ble.n	8004d0e <__kernel_rem_pio2f+0x16a>
 8004d04:	2d01      	cmp	r5, #1
 8004d06:	d078      	beq.n	8004dfa <__kernel_rem_pio2f+0x256>
 8004d08:	2d02      	cmp	r5, #2
 8004d0a:	f000 8081 	beq.w	8004e10 <__kernel_rem_pio2f+0x26c>
 8004d0e:	2f02      	cmp	r7, #2
 8004d10:	d12f      	bne.n	8004d72 <__kernel_rem_pio2f+0x1ce>
 8004d12:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004d16:	ee30 8a48 	vsub.f32	s16, s0, s16
 8004d1a:	b353      	cbz	r3, 8004d72 <__kernel_rem_pio2f+0x1ce>
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8004d22:	f000 fa47 	bl	80051b4 <scalbnf>
 8004d26:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8004d2a:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004d2e:	e020      	b.n	8004d72 <__kernel_rem_pio2f+0x1ce>
 8004d30:	ee60 7a28 	vmul.f32	s15, s0, s17
 8004d34:	3f01      	subs	r7, #1
 8004d36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d3e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8004d42:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004d46:	ecac 0a01 	vstmia	ip!, {s0}
 8004d4a:	ed90 0a00 	vldr	s0, [r0]
 8004d4e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004d52:	e799      	b.n	8004c88 <__kernel_rem_pio2f+0xe4>
 8004d54:	d105      	bne.n	8004d62 <__kernel_rem_pio2f+0x1be>
 8004d56:	1e70      	subs	r0, r6, #1
 8004d58:	ab08      	add	r3, sp, #32
 8004d5a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8004d5e:	11ff      	asrs	r7, r7, #7
 8004d60:	e7c5      	b.n	8004cee <__kernel_rem_pio2f+0x14a>
 8004d62:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004d66:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d6e:	da31      	bge.n	8004dd4 <__kernel_rem_pio2f+0x230>
 8004d70:	2700      	movs	r7, #0
 8004d72:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d7a:	f040 809b 	bne.w	8004eb4 <__kernel_rem_pio2f+0x310>
 8004d7e:	1e74      	subs	r4, r6, #1
 8004d80:	46a4      	mov	ip, r4
 8004d82:	2000      	movs	r0, #0
 8004d84:	45d4      	cmp	ip, sl
 8004d86:	da4a      	bge.n	8004e1e <__kernel_rem_pio2f+0x27a>
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	d07a      	beq.n	8004e82 <__kernel_rem_pio2f+0x2de>
 8004d8c:	ab08      	add	r3, sp, #32
 8004d8e:	3d08      	subs	r5, #8
 8004d90:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 8081 	beq.w	8004e9c <__kernel_rem_pio2f+0x2f8>
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004da0:	00a5      	lsls	r5, r4, #2
 8004da2:	f000 fa07 	bl	80051b4 <scalbnf>
 8004da6:	aa44      	add	r2, sp, #272	; 0x110
 8004da8:	1d2b      	adds	r3, r5, #4
 8004daa:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004eac <__kernel_rem_pio2f+0x308>
 8004dae:	18d1      	adds	r1, r2, r3
 8004db0:	4622      	mov	r2, r4
 8004db2:	2a00      	cmp	r2, #0
 8004db4:	f280 80ae 	bge.w	8004f14 <__kernel_rem_pio2f+0x370>
 8004db8:	4622      	mov	r2, r4
 8004dba:	2a00      	cmp	r2, #0
 8004dbc:	f2c0 80cc 	blt.w	8004f58 <__kernel_rem_pio2f+0x3b4>
 8004dc0:	a944      	add	r1, sp, #272	; 0x110
 8004dc2:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8004dc6:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8004ea4 <__kernel_rem_pio2f+0x300>
 8004dca:	eddf 7a39 	vldr	s15, [pc, #228]	; 8004eb0 <__kernel_rem_pio2f+0x30c>
 8004dce:	2000      	movs	r0, #0
 8004dd0:	1aa1      	subs	r1, r4, r2
 8004dd2:	e0b6      	b.n	8004f42 <__kernel_rem_pio2f+0x39e>
 8004dd4:	2702      	movs	r7, #2
 8004dd6:	e78c      	b.n	8004cf2 <__kernel_rem_pio2f+0x14e>
 8004dd8:	6820      	ldr	r0, [r4, #0]
 8004dda:	b94b      	cbnz	r3, 8004df0 <__kernel_rem_pio2f+0x24c>
 8004ddc:	b118      	cbz	r0, 8004de6 <__kernel_rem_pio2f+0x242>
 8004dde:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8004de2:	6020      	str	r0, [r4, #0]
 8004de4:	2001      	movs	r0, #1
 8004de6:	f10e 0e01 	add.w	lr, lr, #1
 8004dea:	3404      	adds	r4, #4
 8004dec:	4603      	mov	r3, r0
 8004dee:	e785      	b.n	8004cfc <__kernel_rem_pio2f+0x158>
 8004df0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8004df4:	6020      	str	r0, [r4, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	e7f5      	b.n	8004de6 <__kernel_rem_pio2f+0x242>
 8004dfa:	1e74      	subs	r4, r6, #1
 8004dfc:	a808      	add	r0, sp, #32
 8004dfe:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8004e02:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004e06:	f10d 0c20 	add.w	ip, sp, #32
 8004e0a:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8004e0e:	e77e      	b.n	8004d0e <__kernel_rem_pio2f+0x16a>
 8004e10:	1e74      	subs	r4, r6, #1
 8004e12:	a808      	add	r0, sp, #32
 8004e14:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8004e18:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8004e1c:	e7f3      	b.n	8004e06 <__kernel_rem_pio2f+0x262>
 8004e1e:	ab08      	add	r3, sp, #32
 8004e20:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8004e24:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004e28:	4318      	orrs	r0, r3
 8004e2a:	e7ab      	b.n	8004d84 <__kernel_rem_pio2f+0x1e0>
 8004e2c:	f10c 0c01 	add.w	ip, ip, #1
 8004e30:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8004e34:	2c00      	cmp	r4, #0
 8004e36:	d0f9      	beq.n	8004e2c <__kernel_rem_pio2f+0x288>
 8004e38:	9b05      	ldr	r3, [sp, #20]
 8004e3a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004e3e:	eb0d 0003 	add.w	r0, sp, r3
 8004e42:	9b01      	ldr	r3, [sp, #4]
 8004e44:	18f4      	adds	r4, r6, r3
 8004e46:	ab1c      	add	r3, sp, #112	; 0x70
 8004e48:	1c77      	adds	r7, r6, #1
 8004e4a:	384c      	subs	r0, #76	; 0x4c
 8004e4c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004e50:	4466      	add	r6, ip
 8004e52:	42be      	cmp	r6, r7
 8004e54:	f6ff af0b 	blt.w	8004c6e <__kernel_rem_pio2f+0xca>
 8004e58:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8004e5c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8004e60:	ee07 3a90 	vmov	s15, r3
 8004e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e68:	f04f 0c00 	mov.w	ip, #0
 8004e6c:	ece4 7a01 	vstmia	r4!, {s15}
 8004e70:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8004eb0 <__kernel_rem_pio2f+0x30c>
 8004e74:	46a1      	mov	r9, r4
 8004e76:	458c      	cmp	ip, r1
 8004e78:	dd07      	ble.n	8004e8a <__kernel_rem_pio2f+0x2e6>
 8004e7a:	ece0 7a01 	vstmia	r0!, {s15}
 8004e7e:	3701      	adds	r7, #1
 8004e80:	e7e7      	b.n	8004e52 <__kernel_rem_pio2f+0x2ae>
 8004e82:	9804      	ldr	r0, [sp, #16]
 8004e84:	f04f 0c01 	mov.w	ip, #1
 8004e88:	e7d2      	b.n	8004e30 <__kernel_rem_pio2f+0x28c>
 8004e8a:	ecfe 6a01 	vldmia	lr!, {s13}
 8004e8e:	ed39 7a01 	vldmdb	r9!, {s14}
 8004e92:	f10c 0c01 	add.w	ip, ip, #1
 8004e96:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004e9a:	e7ec      	b.n	8004e76 <__kernel_rem_pio2f+0x2d2>
 8004e9c:	3c01      	subs	r4, #1
 8004e9e:	e775      	b.n	8004d8c <__kernel_rem_pio2f+0x1e8>
 8004ea0:	08005694 	.word	0x08005694
 8004ea4:	08005668 	.word	0x08005668
 8004ea8:	43800000 	.word	0x43800000
 8004eac:	3b800000 	.word	0x3b800000
 8004eb0:	00000000 	.word	0x00000000
 8004eb4:	9b03      	ldr	r3, [sp, #12]
 8004eb6:	eeb0 0a48 	vmov.f32	s0, s16
 8004eba:	1a98      	subs	r0, r3, r2
 8004ebc:	f000 f97a 	bl	80051b4 <scalbnf>
 8004ec0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8004ea8 <__kernel_rem_pio2f+0x304>
 8004ec4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ecc:	db19      	blt.n	8004f02 <__kernel_rem_pio2f+0x35e>
 8004ece:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8004eac <__kernel_rem_pio2f+0x308>
 8004ed2:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004ed6:	aa08      	add	r2, sp, #32
 8004ed8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004edc:	1c74      	adds	r4, r6, #1
 8004ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ee2:	3508      	adds	r5, #8
 8004ee4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004ee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004eec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004ef0:	ee10 3a10 	vmov	r3, s0
 8004ef4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8004ef8:	ee17 3a90 	vmov	r3, s15
 8004efc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004f00:	e74b      	b.n	8004d9a <__kernel_rem_pio2f+0x1f6>
 8004f02:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004f06:	aa08      	add	r2, sp, #32
 8004f08:	ee10 3a10 	vmov	r3, s0
 8004f0c:	4634      	mov	r4, r6
 8004f0e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8004f12:	e742      	b.n	8004d9a <__kernel_rem_pio2f+0x1f6>
 8004f14:	a808      	add	r0, sp, #32
 8004f16:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8004f1a:	9001      	str	r0, [sp, #4]
 8004f1c:	ee07 0a90 	vmov	s15, r0
 8004f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f24:	3a01      	subs	r2, #1
 8004f26:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004f2a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004f2e:	ed61 7a01 	vstmdb	r1!, {s15}
 8004f32:	e73e      	b.n	8004db2 <__kernel_rem_pio2f+0x20e>
 8004f34:	ecfc 6a01 	vldmia	ip!, {s13}
 8004f38:	ecb6 7a01 	vldmia	r6!, {s14}
 8004f3c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004f40:	3001      	adds	r0, #1
 8004f42:	4550      	cmp	r0, sl
 8004f44:	dc01      	bgt.n	8004f4a <__kernel_rem_pio2f+0x3a6>
 8004f46:	4288      	cmp	r0, r1
 8004f48:	ddf4      	ble.n	8004f34 <__kernel_rem_pio2f+0x390>
 8004f4a:	a858      	add	r0, sp, #352	; 0x160
 8004f4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004f50:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8004f54:	3a01      	subs	r2, #1
 8004f56:	e730      	b.n	8004dba <__kernel_rem_pio2f+0x216>
 8004f58:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8004f5a:	2a02      	cmp	r2, #2
 8004f5c:	dc09      	bgt.n	8004f72 <__kernel_rem_pio2f+0x3ce>
 8004f5e:	2a00      	cmp	r2, #0
 8004f60:	dc2a      	bgt.n	8004fb8 <__kernel_rem_pio2f+0x414>
 8004f62:	d043      	beq.n	8004fec <__kernel_rem_pio2f+0x448>
 8004f64:	f009 0007 	and.w	r0, r9, #7
 8004f68:	b059      	add	sp, #356	; 0x164
 8004f6a:	ecbd 8b04 	vpop	{d8-d9}
 8004f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f72:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d1f5      	bne.n	8004f64 <__kernel_rem_pio2f+0x3c0>
 8004f78:	ab30      	add	r3, sp, #192	; 0xc0
 8004f7a:	442b      	add	r3, r5
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4620      	mov	r0, r4
 8004f82:	2800      	cmp	r0, #0
 8004f84:	f1a1 0104 	sub.w	r1, r1, #4
 8004f88:	dc51      	bgt.n	800502e <__kernel_rem_pio2f+0x48a>
 8004f8a:	4621      	mov	r1, r4
 8004f8c:	2901      	cmp	r1, #1
 8004f8e:	f1a2 0204 	sub.w	r2, r2, #4
 8004f92:	dc5c      	bgt.n	800504e <__kernel_rem_pio2f+0x4aa>
 8004f94:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8004eb0 <__kernel_rem_pio2f+0x30c>
 8004f98:	3304      	adds	r3, #4
 8004f9a:	2c01      	cmp	r4, #1
 8004f9c:	dc67      	bgt.n	800506e <__kernel_rem_pio2f+0x4ca>
 8004f9e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8004fa2:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8004fa6:	2f00      	cmp	r7, #0
 8004fa8:	d167      	bne.n	800507a <__kernel_rem_pio2f+0x4d6>
 8004faa:	edc8 6a00 	vstr	s13, [r8]
 8004fae:	ed88 7a01 	vstr	s14, [r8, #4]
 8004fb2:	edc8 7a02 	vstr	s15, [r8, #8]
 8004fb6:	e7d5      	b.n	8004f64 <__kernel_rem_pio2f+0x3c0>
 8004fb8:	aa30      	add	r2, sp, #192	; 0xc0
 8004fba:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8004eb0 <__kernel_rem_pio2f+0x30c>
 8004fbe:	4413      	add	r3, r2
 8004fc0:	4622      	mov	r2, r4
 8004fc2:	2a00      	cmp	r2, #0
 8004fc4:	da24      	bge.n	8005010 <__kernel_rem_pio2f+0x46c>
 8004fc6:	b34f      	cbz	r7, 800501c <__kernel_rem_pio2f+0x478>
 8004fc8:	eef1 7a47 	vneg.f32	s15, s14
 8004fcc:	edc8 7a00 	vstr	s15, [r8]
 8004fd0:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8004fd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004fd8:	aa31      	add	r2, sp, #196	; 0xc4
 8004fda:	2301      	movs	r3, #1
 8004fdc:	429c      	cmp	r4, r3
 8004fde:	da20      	bge.n	8005022 <__kernel_rem_pio2f+0x47e>
 8004fe0:	b10f      	cbz	r7, 8004fe6 <__kernel_rem_pio2f+0x442>
 8004fe2:	eef1 7a67 	vneg.f32	s15, s15
 8004fe6:	edc8 7a01 	vstr	s15, [r8, #4]
 8004fea:	e7bb      	b.n	8004f64 <__kernel_rem_pio2f+0x3c0>
 8004fec:	aa30      	add	r2, sp, #192	; 0xc0
 8004fee:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8004eb0 <__kernel_rem_pio2f+0x30c>
 8004ff2:	4413      	add	r3, r2
 8004ff4:	2c00      	cmp	r4, #0
 8004ff6:	da05      	bge.n	8005004 <__kernel_rem_pio2f+0x460>
 8004ff8:	b10f      	cbz	r7, 8004ffe <__kernel_rem_pio2f+0x45a>
 8004ffa:	eef1 7a67 	vneg.f32	s15, s15
 8004ffe:	edc8 7a00 	vstr	s15, [r8]
 8005002:	e7af      	b.n	8004f64 <__kernel_rem_pio2f+0x3c0>
 8005004:	ed33 7a01 	vldmdb	r3!, {s14}
 8005008:	3c01      	subs	r4, #1
 800500a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800500e:	e7f1      	b.n	8004ff4 <__kernel_rem_pio2f+0x450>
 8005010:	ed73 7a01 	vldmdb	r3!, {s15}
 8005014:	3a01      	subs	r2, #1
 8005016:	ee37 7a27 	vadd.f32	s14, s14, s15
 800501a:	e7d2      	b.n	8004fc2 <__kernel_rem_pio2f+0x41e>
 800501c:	eef0 7a47 	vmov.f32	s15, s14
 8005020:	e7d4      	b.n	8004fcc <__kernel_rem_pio2f+0x428>
 8005022:	ecb2 7a01 	vldmia	r2!, {s14}
 8005026:	3301      	adds	r3, #1
 8005028:	ee77 7a87 	vadd.f32	s15, s15, s14
 800502c:	e7d6      	b.n	8004fdc <__kernel_rem_pio2f+0x438>
 800502e:	edd1 7a00 	vldr	s15, [r1]
 8005032:	edd1 6a01 	vldr	s13, [r1, #4]
 8005036:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800503a:	3801      	subs	r0, #1
 800503c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005040:	ed81 7a00 	vstr	s14, [r1]
 8005044:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005048:	edc1 7a01 	vstr	s15, [r1, #4]
 800504c:	e799      	b.n	8004f82 <__kernel_rem_pio2f+0x3de>
 800504e:	edd2 7a00 	vldr	s15, [r2]
 8005052:	edd2 6a01 	vldr	s13, [r2, #4]
 8005056:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800505a:	3901      	subs	r1, #1
 800505c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005060:	ed82 7a00 	vstr	s14, [r2]
 8005064:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005068:	edc2 7a01 	vstr	s15, [r2, #4]
 800506c:	e78e      	b.n	8004f8c <__kernel_rem_pio2f+0x3e8>
 800506e:	ed33 7a01 	vldmdb	r3!, {s14}
 8005072:	3c01      	subs	r4, #1
 8005074:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005078:	e78f      	b.n	8004f9a <__kernel_rem_pio2f+0x3f6>
 800507a:	eef1 6a66 	vneg.f32	s13, s13
 800507e:	eeb1 7a47 	vneg.f32	s14, s14
 8005082:	edc8 6a00 	vstr	s13, [r8]
 8005086:	ed88 7a01 	vstr	s14, [r8, #4]
 800508a:	eef1 7a67 	vneg.f32	s15, s15
 800508e:	e790      	b.n	8004fb2 <__kernel_rem_pio2f+0x40e>

08005090 <__kernel_sinf>:
 8005090:	ee10 3a10 	vmov	r3, s0
 8005094:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005098:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800509c:	da04      	bge.n	80050a8 <__kernel_sinf+0x18>
 800509e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80050a2:	ee17 3a90 	vmov	r3, s15
 80050a6:	b35b      	cbz	r3, 8005100 <__kernel_sinf+0x70>
 80050a8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80050ac:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005104 <__kernel_sinf+0x74>
 80050b0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8005108 <__kernel_sinf+0x78>
 80050b4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80050b8:	eddf 7a14 	vldr	s15, [pc, #80]	; 800510c <__kernel_sinf+0x7c>
 80050bc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80050c0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8005110 <__kernel_sinf+0x80>
 80050c4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80050c8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8005114 <__kernel_sinf+0x84>
 80050cc:	ee60 6a07 	vmul.f32	s13, s0, s14
 80050d0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80050d4:	b930      	cbnz	r0, 80050e4 <__kernel_sinf+0x54>
 80050d6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8005118 <__kernel_sinf+0x88>
 80050da:	eea7 6a27 	vfma.f32	s12, s14, s15
 80050de:	eea6 0a26 	vfma.f32	s0, s12, s13
 80050e2:	4770      	bx	lr
 80050e4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80050e8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80050ec:	eee0 7a86 	vfma.f32	s15, s1, s12
 80050f0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80050f4:	eddf 7a09 	vldr	s15, [pc, #36]	; 800511c <__kernel_sinf+0x8c>
 80050f8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80050fc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	2f2ec9d3 	.word	0x2f2ec9d3
 8005108:	b2d72f34 	.word	0xb2d72f34
 800510c:	3638ef1b 	.word	0x3638ef1b
 8005110:	b9500d01 	.word	0xb9500d01
 8005114:	3c088889 	.word	0x3c088889
 8005118:	be2aaaab 	.word	0xbe2aaaab
 800511c:	3e2aaaab 	.word	0x3e2aaaab

08005120 <fabsf>:
 8005120:	ee10 3a10 	vmov	r3, s0
 8005124:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005128:	ee00 3a10 	vmov	s0, r3
 800512c:	4770      	bx	lr
	...

08005130 <floorf>:
 8005130:	ee10 3a10 	vmov	r3, s0
 8005134:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005138:	3a7f      	subs	r2, #127	; 0x7f
 800513a:	2a16      	cmp	r2, #22
 800513c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005140:	dc2a      	bgt.n	8005198 <floorf+0x68>
 8005142:	2a00      	cmp	r2, #0
 8005144:	da11      	bge.n	800516a <floorf+0x3a>
 8005146:	eddf 7a18 	vldr	s15, [pc, #96]	; 80051a8 <floorf+0x78>
 800514a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800514e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005156:	dd05      	ble.n	8005164 <floorf+0x34>
 8005158:	2b00      	cmp	r3, #0
 800515a:	da23      	bge.n	80051a4 <floorf+0x74>
 800515c:	4a13      	ldr	r2, [pc, #76]	; (80051ac <floorf+0x7c>)
 800515e:	2900      	cmp	r1, #0
 8005160:	bf18      	it	ne
 8005162:	4613      	movne	r3, r2
 8005164:	ee00 3a10 	vmov	s0, r3
 8005168:	4770      	bx	lr
 800516a:	4911      	ldr	r1, [pc, #68]	; (80051b0 <floorf+0x80>)
 800516c:	4111      	asrs	r1, r2
 800516e:	420b      	tst	r3, r1
 8005170:	d0fa      	beq.n	8005168 <floorf+0x38>
 8005172:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80051a8 <floorf+0x78>
 8005176:	ee30 0a27 	vadd.f32	s0, s0, s15
 800517a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800517e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005182:	ddef      	ble.n	8005164 <floorf+0x34>
 8005184:	2b00      	cmp	r3, #0
 8005186:	bfbe      	ittt	lt
 8005188:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800518c:	fa40 f202 	asrlt.w	r2, r0, r2
 8005190:	189b      	addlt	r3, r3, r2
 8005192:	ea23 0301 	bic.w	r3, r3, r1
 8005196:	e7e5      	b.n	8005164 <floorf+0x34>
 8005198:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800519c:	d3e4      	bcc.n	8005168 <floorf+0x38>
 800519e:	ee30 0a00 	vadd.f32	s0, s0, s0
 80051a2:	4770      	bx	lr
 80051a4:	2300      	movs	r3, #0
 80051a6:	e7dd      	b.n	8005164 <floorf+0x34>
 80051a8:	7149f2ca 	.word	0x7149f2ca
 80051ac:	bf800000 	.word	0xbf800000
 80051b0:	007fffff 	.word	0x007fffff

080051b4 <scalbnf>:
 80051b4:	ee10 3a10 	vmov	r3, s0
 80051b8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80051bc:	d025      	beq.n	800520a <scalbnf+0x56>
 80051be:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80051c2:	d302      	bcc.n	80051ca <scalbnf+0x16>
 80051c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80051c8:	4770      	bx	lr
 80051ca:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80051ce:	d122      	bne.n	8005216 <scalbnf+0x62>
 80051d0:	4b2a      	ldr	r3, [pc, #168]	; (800527c <scalbnf+0xc8>)
 80051d2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8005280 <scalbnf+0xcc>
 80051d6:	4298      	cmp	r0, r3
 80051d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80051dc:	db16      	blt.n	800520c <scalbnf+0x58>
 80051de:	ee10 3a10 	vmov	r3, s0
 80051e2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80051e6:	3a19      	subs	r2, #25
 80051e8:	4402      	add	r2, r0
 80051ea:	2afe      	cmp	r2, #254	; 0xfe
 80051ec:	dd15      	ble.n	800521a <scalbnf+0x66>
 80051ee:	ee10 3a10 	vmov	r3, s0
 80051f2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8005284 <scalbnf+0xd0>
 80051f6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8005288 <scalbnf+0xd4>
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	eeb0 7a67 	vmov.f32	s14, s15
 8005200:	bfb8      	it	lt
 8005202:	eef0 7a66 	vmovlt.f32	s15, s13
 8005206:	ee27 0a27 	vmul.f32	s0, s14, s15
 800520a:	4770      	bx	lr
 800520c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800528c <scalbnf+0xd8>
 8005210:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005214:	4770      	bx	lr
 8005216:	0dd2      	lsrs	r2, r2, #23
 8005218:	e7e6      	b.n	80051e8 <scalbnf+0x34>
 800521a:	2a00      	cmp	r2, #0
 800521c:	dd06      	ble.n	800522c <scalbnf+0x78>
 800521e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005222:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005226:	ee00 3a10 	vmov	s0, r3
 800522a:	4770      	bx	lr
 800522c:	f112 0f16 	cmn.w	r2, #22
 8005230:	da1a      	bge.n	8005268 <scalbnf+0xb4>
 8005232:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005236:	4298      	cmp	r0, r3
 8005238:	ee10 3a10 	vmov	r3, s0
 800523c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005240:	dd0a      	ble.n	8005258 <scalbnf+0xa4>
 8005242:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005284 <scalbnf+0xd0>
 8005246:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005288 <scalbnf+0xd4>
 800524a:	eef0 7a40 	vmov.f32	s15, s0
 800524e:	2b00      	cmp	r3, #0
 8005250:	bf18      	it	ne
 8005252:	eeb0 0a47 	vmovne.f32	s0, s14
 8005256:	e7db      	b.n	8005210 <scalbnf+0x5c>
 8005258:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800528c <scalbnf+0xd8>
 800525c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005290 <scalbnf+0xdc>
 8005260:	eef0 7a40 	vmov.f32	s15, s0
 8005264:	2b00      	cmp	r3, #0
 8005266:	e7f3      	b.n	8005250 <scalbnf+0x9c>
 8005268:	3219      	adds	r2, #25
 800526a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800526e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005272:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005294 <scalbnf+0xe0>
 8005276:	ee07 3a10 	vmov	s14, r3
 800527a:	e7c4      	b.n	8005206 <scalbnf+0x52>
 800527c:	ffff3cb0 	.word	0xffff3cb0
 8005280:	4c000000 	.word	0x4c000000
 8005284:	7149f2ca 	.word	0x7149f2ca
 8005288:	f149f2ca 	.word	0xf149f2ca
 800528c:	0da24260 	.word	0x0da24260
 8005290:	8da24260 	.word	0x8da24260
 8005294:	33000000 	.word	0x33000000

08005298 <_init>:
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529a:	bf00      	nop
 800529c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529e:	bc08      	pop	{r3}
 80052a0:	469e      	mov	lr, r3
 80052a2:	4770      	bx	lr

080052a4 <_fini>:
 80052a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a6:	bf00      	nop
 80052a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052aa:	bc08      	pop	{r3}
 80052ac:	469e      	mov	lr, r3
 80052ae:	4770      	bx	lr
